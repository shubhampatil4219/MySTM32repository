
Error_handling_test3_Management_bat1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e8  080094e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094f0  080094f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080094f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08009568  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08009568  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd36  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003535  00000000  00000000  0003cdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  00040310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  000415f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055c4  00000000  00000000  00042768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a20e  00000000  00000000  00047d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4992  00000000  00000000  00061f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001568cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  00156920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a9c 	.word	0x08008a9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008a9c 	.word	0x08008a9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <update_periodic_flags_during_maintenance_bat1>:




 void update_periodic_flags_during_maintenance_bat1()
 {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

		    bat1_geninfo_asoc_counter++;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80005b6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_voltage_counter++;
 80005b8:	4b38      	ldr	r3, [pc, #224]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80005c2:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_remainingcapacity_counter++;
 80005c4:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80005ce:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_temperature_counter++;
 80005d0:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80005da:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_cycle_counter++;
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 80005e6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_current_counter++;
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 80005f2:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_batterystatus_counter++;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 80005fe:	801a      	strh	r2, [r3, #0]

			if(bat1_geninfo_asoc_counter==100)
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2b64      	cmp	r3, #100	; 0x64
 8000606:	d105      	bne.n	8000614 <update_periodic_flags_during_maintenance_bat1+0x6c>
			{
				bat1_geninfo_asoc_counter=0;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 800060a:	2200      	movs	r2, #0
 800060c:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_asoc_flag=true;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <update_periodic_flags_during_maintenance_bat1+0x10c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b32      	cmp	r3, #50	; 0x32
 800061a:	d105      	bne.n	8000628 <update_periodic_flags_during_maintenance_bat1+0x80>
			{
				bat1_geninfo_voltage_counter=0;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 800061e:	2200      	movs	r2, #0
 8000620:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_voltage_flag=true;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <update_periodic_flags_during_maintenance_bat1+0x110>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_remainingcapacity_counter==70)
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b46      	cmp	r3, #70	; 0x46
 800062e:	d105      	bne.n	800063c <update_periodic_flags_during_maintenance_bat1+0x94>
			{
				bat1_geninfo_remainingcapacity_counter=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_remainingcapacity_flag=true;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <update_periodic_flags_during_maintenance_bat1+0x114>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_temperature_counter==10)
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d105      	bne.n	8000650 <update_periodic_flags_during_maintenance_bat1+0xa8>
			{
				bat1_geninfo_temperature_counter=0;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_temperature_flag=true;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <update_periodic_flags_during_maintenance_bat1+0x118>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_cycle_counter==400)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000658:	d105      	bne.n	8000666 <update_periodic_flags_during_maintenance_bat1+0xbe>
			{
				bat1_geninfo_cycle_counter=0;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 800065c:	2200      	movs	r2, #0
 800065e:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_cycle_flag=true;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <update_periodic_flags_during_maintenance_bat1+0x11c>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_current_counter==200)
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2bc8      	cmp	r3, #200	; 0xc8
 800066c:	d105      	bne.n	800067a <update_periodic_flags_during_maintenance_bat1+0xd2>
			{
				bat1_geninfo_current_counter=0;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_current_flag=true;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <update_periodic_flags_during_maintenance_bat1+0x120>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_batterystatus_counter==25)
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	2b19      	cmp	r3, #25
 8000680:	d105      	bne.n	800068e <update_periodic_flags_during_maintenance_bat1+0xe6>
			{
				bat1_geninfo_batterystatus_counter=0;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_batterystatus_flag =true;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <update_periodic_flags_during_maintenance_bat1+0x124>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			}




		}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000096 	.word	0x20000096
 800069c:	2000009a 	.word	0x2000009a
 80006a0:	20000098 	.word	0x20000098
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	20000094 	.word	0x20000094
 80006ac:	200000a0 	.word	0x200000a0
 80006b0:	2000009e 	.word	0x2000009e
 80006b4:	200000a3 	.word	0x200000a3
 80006b8:	200000a5 	.word	0x200000a5
 80006bc:	200000a4 	.word	0x200000a4
 80006c0:	200000a6 	.word	0x200000a6
 80006c4:	200000a2 	.word	0x200000a2
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	200000a7 	.word	0x200000a7

080006d0 <update_current_during_management_bat1>:

}


 void update_current_during_management_bat1() //0x0A
   {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0


  		if(bat1_geninfo_current_flag==true)
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <update_current_during_management_bat1+0xb4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d04d      	beq.n	800077a <update_current_during_management_bat1+0xaa>
  		{
  			bat1_geninfo_current_flag = false;
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <update_current_during_management_bat1+0xb4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

  			uint8_t rx_geninfo_current[2]={0x00};
 80006e4:	2300      	movs	r3, #0
 80006e6:	80bb      	strh	r3, [r7, #4]
  			uint8_t tx_current[1]={0x0A};                       // Current
 80006e8:	230a      	movs	r3, #10
 80006ea:	703b      	strb	r3, [r7, #0]
  			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_current, 1);
 80006ec:	463a      	mov	r2, r7
 80006ee:	2301      	movs	r3, #1
 80006f0:	2116      	movs	r1, #22
 80006f2:	4825      	ldr	r0, [pc, #148]	; (8000788 <update_current_during_management_bat1+0xb8>)
 80006f4:	f002 fe7c 	bl	80033f0 <HAL_I2C_Master_Transmit_IT>
  			HAL_Delay(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f002 fa4d 	bl	8002b98 <HAL_Delay>
  			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_current, 2);
 80006fe:	1d3a      	adds	r2, r7, #4
 8000700:	2302      	movs	r3, #2
 8000702:	2116      	movs	r1, #22
 8000704:	4820      	ldr	r0, [pc, #128]	; (8000788 <update_current_during_management_bat1+0xb8>)
 8000706:	f002 fee3 	bl	80034d0 <HAL_I2C_Master_Receive_IT>
  			HAL_Delay(5);
 800070a:	2005      	movs	r0, #5
 800070c:	f002 fa44 	bl	8002b98 <HAL_Delay>

  	////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
  	//


  			transmit_info_to_be_updated_during_bat1_management[0]='s';
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000712:	2273      	movs	r2, #115	; 0x73
 8000714:	701a      	strb	r2, [r3, #0]
  			transmit_info_to_be_updated_during_bat1_management[1]='1';
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000718:	2231      	movs	r2, #49	; 0x31
 800071a:	705a      	strb	r2, [r3, #1]
  			transmit_info_to_be_updated_during_bat1_management[2]='N';
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <update_current_during_management_bat1+0xbc>)
 800071e:	224e      	movs	r2, #78	; 0x4e
 8000720:	709a      	strb	r2, [r3, #2]
  			transmit_info_to_be_updated_during_bat1_management[3]='U';
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000724:	2255      	movs	r2, #85	; 0x55
 8000726:	70da      	strb	r2, [r3, #3]
  			transmit_info_to_be_updated_during_bat1_management[4]='P';
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <update_current_during_management_bat1+0xbc>)
 800072a:	2250      	movs	r2, #80	; 0x50
 800072c:	711a      	strb	r2, [r3, #4]
  			transmit_info_to_be_updated_during_bat1_management[5]='C';
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000730:	2243      	movs	r2, #67	; 0x43
 8000732:	715a      	strb	r2, [r3, #5]
  			transmit_info_to_be_updated_during_bat1_management[6]='R';
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000736:	2252      	movs	r2, #82	; 0x52
 8000738:	719a      	strb	r2, [r3, #6]
  			transmit_info_to_be_updated_during_bat1_management[7]='S';
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <update_current_during_management_bat1+0xbc>)
 800073c:	2253      	movs	r2, #83	; 0x53
 800073e:	71da      	strb	r2, [r3, #7]
  			transmit_info_to_be_updated_during_bat1_management[8]=rx_geninfo_current[1];
 8000740:	797a      	ldrb	r2, [r7, #5]
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000744:	721a      	strb	r2, [r3, #8]
  			transmit_info_to_be_updated_during_bat1_management[9]=rx_geninfo_current[0];
 8000746:	793a      	ldrb	r2, [r7, #4]
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <update_current_during_management_bat1+0xbc>)
 800074a:	725a      	strb	r2, [r3, #9]
  			transmit_info_to_be_updated_during_bat1_management[10]='C';
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <update_current_during_management_bat1+0xbc>)
 800074e:	2243      	movs	r2, #67	; 0x43
 8000750:	729a      	strb	r2, [r3, #10]
  			transmit_info_to_be_updated_during_bat1_management[11]='R';
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000754:	2252      	movs	r2, #82	; 0x52
 8000756:	72da      	strb	r2, [r3, #11]
  			transmit_info_to_be_updated_during_bat1_management[12]='U';
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <update_current_during_management_bat1+0xbc>)
 800075a:	2255      	movs	r2, #85	; 0x55
 800075c:	731a      	strb	r2, [r3, #12]
  			transmit_info_to_be_updated_during_bat1_management[13]='P';
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000760:	2250      	movs	r2, #80	; 0x50
 8000762:	735a      	strb	r2, [r3, #13]
  			transmit_info_to_be_updated_during_bat1_management[14]='E';
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000766:	2245      	movs	r2, #69	; 0x45
 8000768:	739a      	strb	r2, [r3, #14]
  			transmit_info_to_be_updated_during_bat1_management[15]='e';
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <update_current_during_management_bat1+0xbc>)
 800076c:	2265      	movs	r2, #101	; 0x65
 800076e:	73da      	strb	r2, [r3, #15]




  	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_during_bat1_management, 16);
 8000770:	2210      	movs	r2, #16
 8000772:	4906      	ldr	r1, [pc, #24]	; (800078c <update_current_during_management_bat1+0xbc>)
 8000774:	4806      	ldr	r0, [pc, #24]	; (8000790 <update_current_during_management_bat1+0xc0>)
 8000776:	f006 f907 	bl	8006988 <HAL_UART_Transmit_IT>
  	//		rx_geninfo_voltage[1]=0;



  		}
   }
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000a8 	.word	0x200000a8
 8000788:	200001e4 	.word	0x200001e4
 800078c:	20000104 	.word	0x20000104
 8000790:	2000033c 	.word	0x2000033c

08000794 <update_periodic_flags_during_maintenance_bat2>:




void update_periodic_flags_during_maintenance_bat2()
 {
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

		    bat2_geninfo_asoc_counter++;
 8000798:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 80007a2:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_voltage_counter++;
 80007a4:	4b38      	ldr	r3, [pc, #224]	; (8000888 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b36      	ldr	r3, [pc, #216]	; (8000888 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 80007ae:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_remainingcapacity_counter++;
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 80007ba:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_temperature_counter++;
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 80007c6:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_cycle_counter++;
 80007c8:	4b32      	ldr	r3, [pc, #200]	; (8000894 <update_periodic_flags_during_maintenance_bat2+0x100>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b30      	ldr	r3, [pc, #192]	; (8000894 <update_periodic_flags_during_maintenance_bat2+0x100>)
 80007d2:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_current_counter++;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <update_periodic_flags_during_maintenance_bat2+0x104>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <update_periodic_flags_during_maintenance_bat2+0x104>)
 80007de:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_batterystatus_counter++;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <update_periodic_flags_during_maintenance_bat2+0x108>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2c      	ldr	r3, [pc, #176]	; (800089c <update_periodic_flags_during_maintenance_bat2+0x108>)
 80007ea:	801a      	strh	r2, [r3, #0]

			if(bat2_geninfo_asoc_counter==100)
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2b64      	cmp	r3, #100	; 0x64
 80007f2:	d105      	bne.n	8000800 <update_periodic_flags_during_maintenance_bat2+0x6c>
			{
				bat2_geninfo_asoc_counter=0;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_asoc_flag=true;
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <update_periodic_flags_during_maintenance_bat2+0x10c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b32      	cmp	r3, #50	; 0x32
 8000806:	d105      	bne.n	8000814 <update_periodic_flags_during_maintenance_bat2+0x80>
			{
				bat2_geninfo_voltage_counter=0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_voltage_flag=true;
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <update_periodic_flags_during_maintenance_bat2+0x110>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_remainingcapacity_counter==70)
 8000814:	4b1d      	ldr	r3, [pc, #116]	; (800088c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	2b46      	cmp	r3, #70	; 0x46
 800081a:	d105      	bne.n	8000828 <update_periodic_flags_during_maintenance_bat2+0x94>
			{
				bat2_geninfo_remainingcapacity_counter=0;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 800081e:	2200      	movs	r2, #0
 8000820:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_remainingcapacity_flag=true;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <update_periodic_flags_during_maintenance_bat2+0x114>)
 8000824:	2201      	movs	r2, #1
 8000826:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_temperature_counter==10)
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	2b0a      	cmp	r3, #10
 800082e:	d105      	bne.n	800083c <update_periodic_flags_during_maintenance_bat2+0xa8>
			{
				bat2_geninfo_temperature_counter=0;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000832:	2200      	movs	r2, #0
 8000834:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_temperature_flag=true;
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <update_periodic_flags_during_maintenance_bat2+0x118>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_cycle_counter==400)
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <update_periodic_flags_during_maintenance_bat2+0x100>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000844:	d105      	bne.n	8000852 <update_periodic_flags_during_maintenance_bat2+0xbe>
			{
				bat2_geninfo_cycle_counter=0;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000848:	2200      	movs	r2, #0
 800084a:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_cycle_flag=true;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <update_periodic_flags_during_maintenance_bat2+0x11c>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_current_counter==200)
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2bc8      	cmp	r3, #200	; 0xc8
 8000858:	d105      	bne.n	8000866 <update_periodic_flags_during_maintenance_bat2+0xd2>
			{
				bat2_geninfo_current_counter=0;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <update_periodic_flags_during_maintenance_bat2+0x104>)
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_current_flag=true;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <update_periodic_flags_during_maintenance_bat2+0x120>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_batterystatus_counter==25)
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b19      	cmp	r3, #25
 800086c:	d105      	bne.n	800087a <update_periodic_flags_during_maintenance_bat2+0xe6>
			{
				bat2_geninfo_batterystatus_counter=0;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000870:	2200      	movs	r2, #0
 8000872:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_batterystatus_flag =true;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <update_periodic_flags_during_maintenance_bat2+0x124>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
			}




		}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	200000b4 	.word	0x200000b4
 8000888:	200000b8 	.word	0x200000b8
 800088c:	200000b6 	.word	0x200000b6
 8000890:	200000ba 	.word	0x200000ba
 8000894:	200000b2 	.word	0x200000b2
 8000898:	200000be 	.word	0x200000be
 800089c:	200000bc 	.word	0x200000bc
 80008a0:	200000c1 	.word	0x200000c1
 80008a4:	200000c3 	.word	0x200000c3
 80008a8:	200000c2 	.word	0x200000c2
 80008ac:	200000c4 	.word	0x200000c4
 80008b0:	200000c0 	.word	0x200000c0
 80008b4:	200000c6 	.word	0x200000c6
 80008b8:	200000c5 	.word	0x200000c5

080008bc <update_current_during_management_bat2>:
}



 void update_current_during_management_bat2() //0x0A
  {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0


 		if(bat2_geninfo_current_flag==true)
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <update_current_during_management_bat2+0xb4>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d04d      	beq.n	8000966 <update_current_during_management_bat2+0xaa>
 		{
 			bat2_geninfo_current_flag = false;
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <update_current_during_management_bat2+0xb4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]

 			uint8_t rx_geninfo_current[2]={0x00};
 80008d0:	2300      	movs	r3, #0
 80008d2:	80bb      	strh	r3, [r7, #4]
 			uint8_t tx_current[1]={0x0A};                       // Current
 80008d4:	230a      	movs	r3, #10
 80008d6:	703b      	strb	r3, [r7, #0]
 			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_current, 1);
 80008d8:	463a      	mov	r2, r7
 80008da:	2301      	movs	r3, #1
 80008dc:	2116      	movs	r1, #22
 80008de:	4825      	ldr	r0, [pc, #148]	; (8000974 <update_current_during_management_bat2+0xb8>)
 80008e0:	f002 fd86 	bl	80033f0 <HAL_I2C_Master_Transmit_IT>
 			HAL_Delay(5);
 80008e4:	2005      	movs	r0, #5
 80008e6:	f002 f957 	bl	8002b98 <HAL_Delay>
 			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_geninfo_current, 2);
 80008ea:	1d3a      	adds	r2, r7, #4
 80008ec:	2302      	movs	r3, #2
 80008ee:	2116      	movs	r1, #22
 80008f0:	4820      	ldr	r0, [pc, #128]	; (8000974 <update_current_during_management_bat2+0xb8>)
 80008f2:	f002 fded 	bl	80034d0 <HAL_I2C_Master_Receive_IT>
 			HAL_Delay(5);
 80008f6:	2005      	movs	r0, #5
 80008f8:	f002 f94e 	bl	8002b98 <HAL_Delay>

 	////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
 	//


 			transmit_info_to_be_updated_during_bat2_management[0]='s';
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <update_current_during_management_bat2+0xbc>)
 80008fe:	2273      	movs	r2, #115	; 0x73
 8000900:	701a      	strb	r2, [r3, #0]
 			transmit_info_to_be_updated_during_bat2_management[1]='2';
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000904:	2232      	movs	r2, #50	; 0x32
 8000906:	705a      	strb	r2, [r3, #1]
 			transmit_info_to_be_updated_during_bat2_management[2]='N';
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <update_current_during_management_bat2+0xbc>)
 800090a:	224e      	movs	r2, #78	; 0x4e
 800090c:	709a      	strb	r2, [r3, #2]
 			transmit_info_to_be_updated_during_bat2_management[3]='U';
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000910:	2255      	movs	r2, #85	; 0x55
 8000912:	70da      	strb	r2, [r3, #3]
 			transmit_info_to_be_updated_during_bat2_management[4]='P';
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000916:	2250      	movs	r2, #80	; 0x50
 8000918:	711a      	strb	r2, [r3, #4]
 			transmit_info_to_be_updated_during_bat2_management[5]='C';
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <update_current_during_management_bat2+0xbc>)
 800091c:	2243      	movs	r2, #67	; 0x43
 800091e:	715a      	strb	r2, [r3, #5]
 			transmit_info_to_be_updated_during_bat2_management[6]='R';
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000922:	2252      	movs	r2, #82	; 0x52
 8000924:	719a      	strb	r2, [r3, #6]
 			transmit_info_to_be_updated_during_bat2_management[7]='S';
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000928:	2253      	movs	r2, #83	; 0x53
 800092a:	71da      	strb	r2, [r3, #7]
 			transmit_info_to_be_updated_during_bat2_management[8]=rx_geninfo_current[1];
 800092c:	797a      	ldrb	r2, [r7, #5]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000930:	721a      	strb	r2, [r3, #8]
 			transmit_info_to_be_updated_during_bat2_management[9]=rx_geninfo_current[0];
 8000932:	793a      	ldrb	r2, [r7, #4]
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000936:	725a      	strb	r2, [r3, #9]
 			transmit_info_to_be_updated_during_bat2_management[10]='C';
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <update_current_during_management_bat2+0xbc>)
 800093a:	2243      	movs	r2, #67	; 0x43
 800093c:	729a      	strb	r2, [r3, #10]
 			transmit_info_to_be_updated_during_bat2_management[11]='R';
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000940:	2252      	movs	r2, #82	; 0x52
 8000942:	72da      	strb	r2, [r3, #11]
 			transmit_info_to_be_updated_during_bat2_management[12]='U';
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000946:	2255      	movs	r2, #85	; 0x55
 8000948:	731a      	strb	r2, [r3, #12]
 			transmit_info_to_be_updated_during_bat2_management[13]='P';
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <update_current_during_management_bat2+0xbc>)
 800094c:	2250      	movs	r2, #80	; 0x50
 800094e:	735a      	strb	r2, [r3, #13]
 			transmit_info_to_be_updated_during_bat2_management[14]='E';
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000952:	2245      	movs	r2, #69	; 0x45
 8000954:	739a      	strb	r2, [r3, #14]
 			transmit_info_to_be_updated_during_bat2_management[15]='e';
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000958:	2265      	movs	r2, #101	; 0x65
 800095a:	73da      	strb	r2, [r3, #15]




 	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_during_bat2_management, 16);
 800095c:	2210      	movs	r2, #16
 800095e:	4906      	ldr	r1, [pc, #24]	; (8000978 <update_current_during_management_bat2+0xbc>)
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <update_current_during_management_bat2+0xc0>)
 8000962:	f006 f811 	bl	8006988 <HAL_UART_Transmit_IT>





  }
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000c6 	.word	0x200000c6
 8000974:	20000230 	.word	0x20000230
 8000978:	20000114 	.word	0x20000114
 800097c:	2000033c 	.word	0x2000033c

08000980 <update_periodic_flags_during_maintenance_bat3>:
}



void update_periodic_flags_during_maintenance_bat3()
 {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

		    bat3_geninfo_asoc_counter++;
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	3301      	adds	r3, #1
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b38      	ldr	r3, [pc, #224]	; (8000a70 <update_periodic_flags_during_maintenance_bat3+0xf0>)
 800098e:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_voltage_counter++;
 8000990:	4b38      	ldr	r3, [pc, #224]	; (8000a74 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b36      	ldr	r3, [pc, #216]	; (8000a74 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 800099a:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_remainingcapacity_counter++;
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 80009a6:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_temperature_counter++;
 80009a8:	4b34      	ldr	r3, [pc, #208]	; (8000a7c <update_periodic_flags_during_maintenance_bat3+0xfc>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <update_periodic_flags_during_maintenance_bat3+0xfc>)
 80009b2:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_cycle_counter++;
 80009b4:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <update_periodic_flags_during_maintenance_bat3+0x100>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <update_periodic_flags_during_maintenance_bat3+0x100>)
 80009be:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_current_counter++;
 80009c0:	4b30      	ldr	r3, [pc, #192]	; (8000a84 <update_periodic_flags_during_maintenance_bat3+0x104>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <update_periodic_flags_during_maintenance_bat3+0x104>)
 80009ca:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_batterystatus_counter++;
 80009cc:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <update_periodic_flags_during_maintenance_bat3+0x108>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <update_periodic_flags_during_maintenance_bat3+0x108>)
 80009d6:	801a      	strh	r2, [r3, #0]

			if(bat3_geninfo_asoc_counter==100)
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <update_periodic_flags_during_maintenance_bat3+0xf0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	2b64      	cmp	r3, #100	; 0x64
 80009de:	d105      	bne.n	80009ec <update_periodic_flags_during_maintenance_bat3+0x6c>
			{
				bat3_geninfo_asoc_counter=0;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <update_periodic_flags_during_maintenance_bat3+0xf0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_asoc_flag=true;
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <update_periodic_flags_during_maintenance_bat3+0x10c>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	2b32      	cmp	r3, #50	; 0x32
 80009f2:	d105      	bne.n	8000a00 <update_periodic_flags_during_maintenance_bat3+0x80>
			{
				bat3_geninfo_voltage_counter=0;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_voltage_flag=true;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <update_periodic_flags_during_maintenance_bat3+0x110>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_remainingcapacity_counter==70)
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	2b46      	cmp	r3, #70	; 0x46
 8000a06:	d105      	bne.n	8000a14 <update_periodic_flags_during_maintenance_bat3+0x94>
			{
				bat3_geninfo_remainingcapacity_counter=0;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_remainingcapacity_flag=true;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <update_periodic_flags_during_maintenance_bat3+0x114>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_temperature_counter==10)
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	2b0a      	cmp	r3, #10
 8000a1a:	d105      	bne.n	8000a28 <update_periodic_flags_during_maintenance_bat3+0xa8>
			{
				bat3_geninfo_temperature_counter=0;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_temperature_flag=true;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <update_periodic_flags_during_maintenance_bat3+0x118>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_cycle_counter==400)
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a30:	d105      	bne.n	8000a3e <update_periodic_flags_during_maintenance_bat3+0xbe>
			{
				bat3_geninfo_cycle_counter=0;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_cycle_flag=true;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <update_periodic_flags_during_maintenance_bat3+0x11c>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_current_counter==200)
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2bc8      	cmp	r3, #200	; 0xc8
 8000a44:	d105      	bne.n	8000a52 <update_periodic_flags_during_maintenance_bat3+0xd2>
			{
				bat3_geninfo_current_counter=0;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_current_flag=true;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <update_periodic_flags_during_maintenance_bat3+0x120>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_batterystatus_counter==25)
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	2b19      	cmp	r3, #25
 8000a58:	d105      	bne.n	8000a66 <update_periodic_flags_during_maintenance_bat3+0xe6>
			{
				bat3_geninfo_batterystatus_counter=0;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_batterystatus_flag =true;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <update_periodic_flags_during_maintenance_bat3+0x124>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
			}




		}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	200000d2 	.word	0x200000d2
 8000a74:	200000d6 	.word	0x200000d6
 8000a78:	200000d4 	.word	0x200000d4
 8000a7c:	200000d8 	.word	0x200000d8
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	200000dc 	.word	0x200000dc
 8000a88:	200000da 	.word	0x200000da
 8000a8c:	200000df 	.word	0x200000df
 8000a90:	200000e1 	.word	0x200000e1
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	200000e2 	.word	0x200000e2
 8000a9c:	200000de 	.word	0x200000de
 8000aa0:	200000e4 	.word	0x200000e4
 8000aa4:	200000e3 	.word	0x200000e3

08000aa8 <update_current_during_management_bat3>:
}



 void update_current_during_management_bat3() //0x0A
  {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0


 		if(bat3_geninfo_current_flag==true)
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <update_current_during_management_bat3+0xb4>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d04d      	beq.n	8000b52 <update_current_during_management_bat3+0xaa>
 		{
 			bat3_geninfo_current_flag = false;
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <update_current_during_management_bat3+0xb4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]

 			uint8_t rx_geninfo_current[2]={0x00};
 8000abc:	2300      	movs	r3, #0
 8000abe:	80bb      	strh	r3, [r7, #4]
 			uint8_t tx_current[1]={0x0A};                       // Current
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	703b      	strb	r3, [r7, #0]
 			HAL_I2C_Master_Transmit_IT(&hi2c3, 0x16, tx_current, 1);
 8000ac4:	463a      	mov	r2, r7
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2116      	movs	r1, #22
 8000aca:	4825      	ldr	r0, [pc, #148]	; (8000b60 <update_current_during_management_bat3+0xb8>)
 8000acc:	f002 fc90 	bl	80033f0 <HAL_I2C_Master_Transmit_IT>
 			HAL_Delay(5);
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f002 f861 	bl	8002b98 <HAL_Delay>
 			HAL_I2C_Master_Receive_IT(&hi2c3, 0x16, rx_geninfo_current, 2);
 8000ad6:	1d3a      	adds	r2, r7, #4
 8000ad8:	2302      	movs	r3, #2
 8000ada:	2116      	movs	r1, #22
 8000adc:	4820      	ldr	r0, [pc, #128]	; (8000b60 <update_current_during_management_bat3+0xb8>)
 8000ade:	f002 fcf7 	bl	80034d0 <HAL_I2C_Master_Receive_IT>
 			HAL_Delay(5);
 8000ae2:	2005      	movs	r0, #5
 8000ae4:	f002 f858 	bl	8002b98 <HAL_Delay>

 	////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
 	//


 			transmit_info_to_be_updated_during_bat3_management[0]='s';
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000aea:	2273      	movs	r2, #115	; 0x73
 8000aec:	701a      	strb	r2, [r3, #0]
 			transmit_info_to_be_updated_during_bat3_management[1]='3';
 8000aee:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000af0:	2233      	movs	r2, #51	; 0x33
 8000af2:	705a      	strb	r2, [r3, #1]
 			transmit_info_to_be_updated_during_bat3_management[2]='N';
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000af6:	224e      	movs	r2, #78	; 0x4e
 8000af8:	709a      	strb	r2, [r3, #2]
 			transmit_info_to_be_updated_during_bat3_management[3]='U';
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000afc:	2255      	movs	r2, #85	; 0x55
 8000afe:	70da      	strb	r2, [r3, #3]
 			transmit_info_to_be_updated_during_bat3_management[4]='P';
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b02:	2250      	movs	r2, #80	; 0x50
 8000b04:	711a      	strb	r2, [r3, #4]
 			transmit_info_to_be_updated_during_bat3_management[5]='C';
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b08:	2243      	movs	r2, #67	; 0x43
 8000b0a:	715a      	strb	r2, [r3, #5]
 			transmit_info_to_be_updated_during_bat3_management[6]='R';
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b0e:	2252      	movs	r2, #82	; 0x52
 8000b10:	719a      	strb	r2, [r3, #6]
 			transmit_info_to_be_updated_during_bat3_management[7]='S';
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b14:	2253      	movs	r2, #83	; 0x53
 8000b16:	71da      	strb	r2, [r3, #7]
 			transmit_info_to_be_updated_during_bat3_management[8]=rx_geninfo_current[1];
 8000b18:	797a      	ldrb	r2, [r7, #5]
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b1c:	721a      	strb	r2, [r3, #8]
 			transmit_info_to_be_updated_during_bat3_management[9]=rx_geninfo_current[0];
 8000b1e:	793a      	ldrb	r2, [r7, #4]
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b22:	725a      	strb	r2, [r3, #9]
 			transmit_info_to_be_updated_during_bat3_management[10]='C';
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b26:	2243      	movs	r2, #67	; 0x43
 8000b28:	729a      	strb	r2, [r3, #10]
 			transmit_info_to_be_updated_during_bat3_management[11]='R';
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b2c:	2252      	movs	r2, #82	; 0x52
 8000b2e:	72da      	strb	r2, [r3, #11]
 			transmit_info_to_be_updated_during_bat3_management[12]='U';
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b32:	2255      	movs	r2, #85	; 0x55
 8000b34:	731a      	strb	r2, [r3, #12]
 			transmit_info_to_be_updated_during_bat3_management[13]='P';
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b38:	2250      	movs	r2, #80	; 0x50
 8000b3a:	735a      	strb	r2, [r3, #13]
 			transmit_info_to_be_updated_during_bat3_management[14]='E';
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b3e:	2245      	movs	r2, #69	; 0x45
 8000b40:	739a      	strb	r2, [r3, #14]
 			transmit_info_to_be_updated_during_bat3_management[15]='e';
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b44:	2265      	movs	r2, #101	; 0x65
 8000b46:	73da      	strb	r2, [r3, #15]




 	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_during_bat3_management, 16);
 8000b48:	2210      	movs	r2, #16
 8000b4a:	4906      	ldr	r1, [pc, #24]	; (8000b64 <update_current_during_management_bat3+0xbc>)
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <update_current_during_management_bat3+0xc0>)
 8000b4e:	f005 ff1b 	bl	8006988 <HAL_UART_Transmit_IT>





  }
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000e4 	.word	0x200000e4
 8000b60:	20000138 	.word	0x20000138
 8000b64:	20000124 	.word	0x20000124
 8000b68:	2000033c 	.word	0x2000033c

08000b6c <commands_from_pi_to_stm>:




void commands_from_pi_to_stm()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8000b70:	4b90      	ldr	r3, [pc, #576]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b42      	cmp	r3, #66	; 0x42
 8000b76:	d144      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000b78:	4b8e      	ldr	r3, [pc, #568]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b7a:	785b      	ldrb	r3, [r3, #1]
 8000b7c:	2b41      	cmp	r3, #65	; 0x41
 8000b7e:	d140      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000b80:	4b8c      	ldr	r3, [pc, #560]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	2b54      	cmp	r3, #84	; 0x54
 8000b86:	d13c      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000b88:	4b8a      	ldr	r3, [pc, #552]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	2b31      	cmp	r3, #49	; 0x31
 8000b8e:	d138      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000b90:	4b88      	ldr	r3, [pc, #544]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b92:	791b      	ldrb	r3, [r3, #4]
 8000b94:	2b53      	cmp	r3, #83	; 0x53
 8000b96:	d134      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000b98:	4b86      	ldr	r3, [pc, #536]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000b9a:	795b      	ldrb	r3, [r3, #5]
 8000b9c:	2b54      	cmp	r3, #84	; 0x54
 8000b9e:	d130      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8000ba0:	4b84      	ldr	r3, [pc, #528]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000ba2:	799b      	ldrb	r3, [r3, #6]
 8000ba4:	2b52      	cmp	r3, #82	; 0x52
 8000ba6:	d12c      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000ba8:	4b82      	ldr	r3, [pc, #520]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000baa:	79db      	ldrb	r3, [r3, #7]
 8000bac:	2b4d      	cmp	r3, #77	; 0x4d
 8000bae:	d128      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000bb0:	4b80      	ldr	r3, [pc, #512]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bb2:	7a1b      	ldrb	r3, [r3, #8]
 8000bb4:	2b41      	cmp	r3, #65	; 0x41
 8000bb6:	d124      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8000bb8:	4b7e      	ldr	r3, [pc, #504]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bba:	7a5b      	ldrb	r3, [r3, #9]
 8000bbc:	2b49      	cmp	r3, #73	; 0x49
 8000bbe:	d120      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000bc0:	4b7c      	ldr	r3, [pc, #496]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	2b4e      	cmp	r3, #78	; 0x4e
 8000bc6:	d11c      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000bc8:	4b7a      	ldr	r3, [pc, #488]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bca:	7adb      	ldrb	r3, [r3, #11]
 8000bcc:	2b54      	cmp	r3, #84	; 0x54
 8000bce:	d118      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T') // Command to turn on Bat 1 Maintenance Use case Autotest
 8000bd0:	4b78      	ldr	r3, [pc, #480]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bd2:	7b1b      	ldrb	r3, [r3, #12]
 8000bd4:	2b53      	cmp	r3, #83	; 0x53
 8000bd6:	d114      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
 8000bd8:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000bda:	7b5b      	ldrb	r3, [r3, #13]
 8000bdc:	2b54      	cmp	r3, #84	; 0x54
 8000bde:	d110      	bne.n	8000c02 <commands_from_pi_to_stm+0x96>
	{

		if(BAT_1_MAINTENANCE_FLAG == true)
 8000be0:	4b75      	ldr	r3, [pc, #468]	; (8000db8 <commands_from_pi_to_stm+0x24c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <commands_from_pi_to_stm+0x8c>
		{

			Autotestflag=true;
 8000be8:	4b74      	ldr	r3, [pc, #464]	; (8000dbc <commands_from_pi_to_stm+0x250>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
			update_maintenance_info_flag=true;
 8000bee:	4b74      	ldr	r3, [pc, #464]	; (8000dc0 <commands_from_pi_to_stm+0x254>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MAINTENANCE_FLAG == true)
 8000bf4:	f001 b848 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start the Bat 1 Maintenance Use case Autotest \nTurn Bat1 Maintenance flag on first\n");
 8000bf8:	4872      	ldr	r0, [pc, #456]	; (8000dc4 <commands_from_pi_to_stm+0x258>)
 8000bfa:	f007 f809 	bl	8007c10 <puts>
		if(BAT_1_MAINTENANCE_FLAG == true)
 8000bfe:	f001 b843 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}


	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8000c02:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b42      	cmp	r3, #66	; 0x42
 8000c08:	d141      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c0a:	4b6a      	ldr	r3, [pc, #424]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c0c:	785b      	ldrb	r3, [r3, #1]
 8000c0e:	2b41      	cmp	r3, #65	; 0x41
 8000c10:	d13d      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c12:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	2b54      	cmp	r3, #84	; 0x54
 8000c18:	d139      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c1a:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c1c:	78db      	ldrb	r3, [r3, #3]
 8000c1e:	2b31      	cmp	r3, #49	; 0x31
 8000c20:	d135      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c22:	4b64      	ldr	r3, [pc, #400]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	2b4d      	cmp	r3, #77	; 0x4d
 8000c28:	d131      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c2a:	4b62      	ldr	r3, [pc, #392]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c2c:	795b      	ldrb	r3, [r3, #5]
 8000c2e:	2b41      	cmp	r3, #65	; 0x41
 8000c30:	d12d      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 8000c32:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c34:	799b      	ldrb	r3, [r3, #6]
 8000c36:	2b49      	cmp	r3, #73	; 0x49
 8000c38:	d129      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c3a:	4b5e      	ldr	r3, [pc, #376]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c3c:	79db      	ldrb	r3, [r3, #7]
 8000c3e:	2b4e      	cmp	r3, #78	; 0x4e
 8000c40:	d125      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c44:	7a1b      	ldrb	r3, [r3, #8]
 8000c46:	2b44      	cmp	r3, #68	; 0x44
 8000c48:	d121      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8000c4a:	4b5a      	ldr	r3, [pc, #360]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c4c:	7a5b      	ldrb	r3, [r3, #9]
 8000c4e:	2b50      	cmp	r3, #80	; 0x50
 8000c50:	d11d      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c54:	7a9b      	ldrb	r3, [r3, #10]
 8000c56:	2b47      	cmp	r3, #71	; 0x47
 8000c58:	d119      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c5a:	4b56      	ldr	r3, [pc, #344]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c5c:	7adb      	ldrb	r3, [r3, #11]
 8000c5e:	2b4e      	cmp	r3, #78	; 0x4e
 8000c60:	d115      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 1 General Info during Maintenance Use case autotest
 8000c62:	4b54      	ldr	r3, [pc, #336]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c64:	7b1b      	ldrb	r3, [r3, #12]
 8000c66:	2b49      	cmp	r3, #73	; 0x49
 8000c68:	d111      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
 8000c6a:	4b52      	ldr	r3, [pc, #328]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c6c:	7b5b      	ldrb	r3, [r3, #13]
 8000c6e:	2b46      	cmp	r3, #70	; 0x46
 8000c70:	d10d      	bne.n	8000c8e <commands_from_pi_to_stm+0x122>
	{
		if(BAT_1_MAINTENANCE_FLAG == true)
 8000c72:	4b51      	ldr	r3, [pc, #324]	; (8000db8 <commands_from_pi_to_stm+0x24c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <commands_from_pi_to_stm+0x118>
		{
			BAT_1_MAINT_GENERAL_INFO_FLAG=true;
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <commands_from_pi_to_stm+0x25c>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MAINTENANCE_FLAG == true)
 8000c80:	f001 b802 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>

		}
		else
		{
			printf("Cannot display Bat 1 Maintenance Use case General Info\n Turn Bat1 Maintenance flag on first\n");
 8000c84:	4851      	ldr	r0, [pc, #324]	; (8000dcc <commands_from_pi_to_stm+0x260>)
 8000c86:	f006 ffc3 	bl	8007c10 <puts>
		if(BAT_1_MAINTENANCE_FLAG == true)
 8000c8a:	f000 bffd 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
	}


	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b42      	cmp	r3, #66	; 0x42
 8000c94:	d144      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	2b41      	cmp	r3, #65	; 0x41
 8000c9c:	d140      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000c9e:	4b45      	ldr	r3, [pc, #276]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	2b54      	cmp	r3, #84	; 0x54
 8000ca4:	d13c      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000ca6:	4b43      	ldr	r3, [pc, #268]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	2b31      	cmp	r3, #49	; 0x31
 8000cac:	d138      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cb0:	791b      	ldrb	r3, [r3, #4]
 8000cb2:	2b45      	cmp	r3, #69	; 0x45
 8000cb4:	d134      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cb8:	795b      	ldrb	r3, [r3, #5]
 8000cba:	2b4e      	cmp	r3, #78	; 0x4e
 8000cbc:	d130      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cc0:	799b      	ldrb	r3, [r3, #6]
 8000cc2:	2b54      	cmp	r3, #84	; 0x54
 8000cc4:	d12c      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cc8:	79db      	ldrb	r3, [r3, #7]
 8000cca:	2b45      	cmp	r3, #69	; 0x45
 8000ccc:	d128      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cce:	4b39      	ldr	r3, [pc, #228]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cd0:	7a1b      	ldrb	r3, [r3, #8]
 8000cd2:	2b52      	cmp	r3, #82	; 0x52
 8000cd4:	d124      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 8000cd6:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cd8:	7a5b      	ldrb	r3, [r3, #9]
 8000cda:	2b4d      	cmp	r3, #77	; 0x4d
 8000cdc:	d120      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000ce0:	7a9b      	ldrb	r3, [r3, #10]
 8000ce2:	2b41      	cmp	r3, #65	; 0x41
 8000ce4:	d11c      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000ce8:	7adb      	ldrb	r3, [r3, #11]
 8000cea:	2b49      	cmp	r3, #73	; 0x49
 8000cec:	d118      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T') // Command to enter the Bat 1 in Maintenance Use case
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cf0:	7b1b      	ldrb	r3, [r3, #12]
 8000cf2:	2b4e      	cmp	r3, #78	; 0x4e
 8000cf4:	d114      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000cf8:	7b5b      	ldrb	r3, [r3, #13]
 8000cfa:	2b54      	cmp	r3, #84	; 0x54
 8000cfc:	d110      	bne.n	8000d20 <commands_from_pi_to_stm+0x1b4>
	{
		if(BAT_1_MANAGEMENT_FLAG==false )
 8000cfe:	4b34      	ldr	r3, [pc, #208]	; (8000dd0 <commands_from_pi_to_stm+0x264>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	f083 0301 	eor.w	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <commands_from_pi_to_stm+0x1aa>
		{
			BAT_1_MAINTENANCE_FLAG=true;
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	; (8000db8 <commands_from_pi_to_stm+0x24c>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MANAGEMENT_FLAG==false )
 8000d12:	f000 bfb9 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>

		}
		else
		{
			printf("Cannot start the Maintenance Use Case since Battery 1 currently is in Management Use case\n");
 8000d16:	482f      	ldr	r0, [pc, #188]	; (8000dd4 <commands_from_pi_to_stm+0x268>)
 8000d18:	f006 ff7a 	bl	8007c10 <puts>
		if(BAT_1_MANAGEMENT_FLAG==false )
 8000d1c:	f000 bfb4 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8000d20:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b42      	cmp	r3, #66	; 0x42
 8000d26:	d15f      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	2b41      	cmp	r3, #65	; 0x41
 8000d2e:	d15b      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	2b54      	cmp	r3, #84	; 0x54
 8000d36:	d157      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d3a:	78db      	ldrb	r3, [r3, #3]
 8000d3c:	2b32      	cmp	r3, #50	; 0x32
 8000d3e:	d153      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	2b53      	cmp	r3, #83	; 0x53
 8000d46:	d14f      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d4a:	795b      	ldrb	r3, [r3, #5]
 8000d4c:	2b54      	cmp	r3, #84	; 0x54
 8000d4e:	d14b      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	2b52      	cmp	r3, #82	; 0x52
 8000d56:	d147      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d5a:	79db      	ldrb	r3, [r3, #7]
 8000d5c:	2b4d      	cmp	r3, #77	; 0x4d
 8000d5e:	d143      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d62:	7a1b      	ldrb	r3, [r3, #8]
 8000d64:	2b41      	cmp	r3, #65	; 0x41
 8000d66:	d13f      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d6a:	7a5b      	ldrb	r3, [r3, #9]
 8000d6c:	2b49      	cmp	r3, #73	; 0x49
 8000d6e:	d13b      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d72:	7a9b      	ldrb	r3, [r3, #10]
 8000d74:	2b4e      	cmp	r3, #78	; 0x4e
 8000d76:	d137      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d7a:	7adb      	ldrb	r3, [r3, #11]
 8000d7c:	2b54      	cmp	r3, #84	; 0x54
 8000d7e:	d133      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')  // Command to turn on Bat 2 Maintenance Use case Autotest
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d82:	7b1b      	ldrb	r3, [r3, #12]
 8000d84:	2b53      	cmp	r3, #83	; 0x53
 8000d86:	d12f      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <commands_from_pi_to_stm+0x248>)
 8000d8a:	7b5b      	ldrb	r3, [r3, #13]
 8000d8c:	2b54      	cmp	r3, #84	; 0x54
 8000d8e:	d12b      	bne.n	8000de8 <commands_from_pi_to_stm+0x27c>
	{
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <commands_from_pi_to_stm+0x26c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d007      	beq.n	8000da8 <commands_from_pi_to_stm+0x23c>
		{
			Bat2_Maint_Autotestflag=true;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <commands_from_pi_to_stm+0x270>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
			bat2_update_maintenance_info_flag=true;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <commands_from_pi_to_stm+0x274>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000da4:	f000 bf70 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start Bat 2 Maintenance Use case Autotest\nTurn Bat2 Maintenance flag on first\n");
 8000da8:	480e      	ldr	r0, [pc, #56]	; (8000de4 <commands_from_pi_to_stm+0x278>)
 8000daa:	f006 ff31 	bl	8007c10 <puts>
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000dae:	f000 bf6b 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
 8000db2:	bf00      	nop
 8000db4:	200002d8 	.word	0x200002d8
 8000db8:	20000091 	.word	0x20000091
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	200000a9 	.word	0x200000a9
 8000dc4:	08008ab4 	.word	0x08008ab4
 8000dc8:	20000092 	.word	0x20000092
 8000dcc:	08008b10 	.word	0x08008b10
 8000dd0:	200000e6 	.word	0x200000e6
 8000dd4:	08008b6c 	.word	0x08008b6c
 8000dd8:	200000af 	.word	0x200000af
 8000ddc:	200000ae 	.word	0x200000ae
 8000de0:	200000c7 	.word	0x200000c7
 8000de4:	08008bc8 	.word	0x08008bc8
		}

	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8000de8:	4b8e      	ldr	r3, [pc, #568]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b42      	cmp	r3, #66	; 0x42
 8000dee:	d141      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000df0:	4b8c      	ldr	r3, [pc, #560]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	2b41      	cmp	r3, #65	; 0x41
 8000df6:	d13d      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000df8:	4b8a      	ldr	r3, [pc, #552]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	2b54      	cmp	r3, #84	; 0x54
 8000dfe:	d139      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e00:	4b88      	ldr	r3, [pc, #544]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e02:	78db      	ldrb	r3, [r3, #3]
 8000e04:	2b32      	cmp	r3, #50	; 0x32
 8000e06:	d135      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e08:	4b86      	ldr	r3, [pc, #536]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	2b4d      	cmp	r3, #77	; 0x4d
 8000e0e:	d131      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e10:	4b84      	ldr	r3, [pc, #528]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e12:	795b      	ldrb	r3, [r3, #5]
 8000e14:	2b41      	cmp	r3, #65	; 0x41
 8000e16:	d12d      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 8000e18:	4b82      	ldr	r3, [pc, #520]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	2b49      	cmp	r3, #73	; 0x49
 8000e1e:	d129      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e20:	4b80      	ldr	r3, [pc, #512]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e22:	79db      	ldrb	r3, [r3, #7]
 8000e24:	2b4e      	cmp	r3, #78	; 0x4e
 8000e26:	d125      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e28:	4b7e      	ldr	r3, [pc, #504]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e2a:	7a1b      	ldrb	r3, [r3, #8]
 8000e2c:	2b44      	cmp	r3, #68	; 0x44
 8000e2e:	d121      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8000e30:	4b7c      	ldr	r3, [pc, #496]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e32:	7a5b      	ldrb	r3, [r3, #9]
 8000e34:	2b50      	cmp	r3, #80	; 0x50
 8000e36:	d11d      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e38:	4b7a      	ldr	r3, [pc, #488]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e3a:	7a9b      	ldrb	r3, [r3, #10]
 8000e3c:	2b47      	cmp	r3, #71	; 0x47
 8000e3e:	d119      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e40:	4b78      	ldr	r3, [pc, #480]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e42:	7adb      	ldrb	r3, [r3, #11]
 8000e44:	2b4e      	cmp	r3, #78	; 0x4e
 8000e46:	d115      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 2 General Info during Maintenance Use case autotest
 8000e48:	4b76      	ldr	r3, [pc, #472]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e4a:	7b1b      	ldrb	r3, [r3, #12]
 8000e4c:	2b49      	cmp	r3, #73	; 0x49
 8000e4e:	d111      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
 8000e50:	4b74      	ldr	r3, [pc, #464]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e52:	7b5b      	ldrb	r3, [r3, #13]
 8000e54:	2b46      	cmp	r3, #70	; 0x46
 8000e56:	d10d      	bne.n	8000e74 <commands_from_pi_to_stm+0x308>
	{
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000e58:	4b73      	ldr	r3, [pc, #460]	; (8001028 <commands_from_pi_to_stm+0x4bc>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d004      	beq.n	8000e6a <commands_from_pi_to_stm+0x2fe>
		{
		BAT_2_MAINT_GENERAL_INFO_FLAG=true;
 8000e60:	4b72      	ldr	r3, [pc, #456]	; (800102c <commands_from_pi_to_stm+0x4c0>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000e66:	f000 bf0f 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot display Bat 2 Maintenance Use case General Info\n Turn Bat2 Maintenance flag on first\n");
 8000e6a:	4871      	ldr	r0, [pc, #452]	; (8001030 <commands_from_pi_to_stm+0x4c4>)
 8000e6c:	f006 fed0 	bl	8007c10 <puts>
		if(BAT_2_MAINTENANCE_FLAG == true)
 8000e70:	f000 bf0a 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 8000e74:	4b6b      	ldr	r3, [pc, #428]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b42      	cmp	r3, #66	; 0x42
 8000e7a:	d144      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000e7c:	4b69      	ldr	r3, [pc, #420]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e7e:	785b      	ldrb	r3, [r3, #1]
 8000e80:	2b41      	cmp	r3, #65	; 0x41
 8000e82:	d140      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000e84:	4b67      	ldr	r3, [pc, #412]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	2b54      	cmp	r3, #84	; 0x54
 8000e8a:	d13c      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000e8c:	4b65      	ldr	r3, [pc, #404]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	2b32      	cmp	r3, #50	; 0x32
 8000e92:	d138      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000e94:	4b63      	ldr	r3, [pc, #396]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e96:	791b      	ldrb	r3, [r3, #4]
 8000e98:	2b45      	cmp	r3, #69	; 0x45
 8000e9a:	d134      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000e9c:	4b61      	ldr	r3, [pc, #388]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000e9e:	795b      	ldrb	r3, [r3, #5]
 8000ea0:	2b4e      	cmp	r3, #78	; 0x4e
 8000ea2:	d130      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8000ea4:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b54      	cmp	r3, #84	; 0x54
 8000eaa:	d12c      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000eac:	4b5d      	ldr	r3, [pc, #372]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000eae:	79db      	ldrb	r3, [r3, #7]
 8000eb0:	2b45      	cmp	r3, #69	; 0x45
 8000eb2:	d128      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b52      	cmp	r3, #82	; 0x52
 8000eba:	d124      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 8000ebc:	4b59      	ldr	r3, [pc, #356]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	2b4d      	cmp	r3, #77	; 0x4d
 8000ec2:	d120      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000ec4:	4b57      	ldr	r3, [pc, #348]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ec6:	7a9b      	ldrb	r3, [r3, #10]
 8000ec8:	2b41      	cmp	r3, #65	; 0x41
 8000eca:	d11c      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ece:	7adb      	ldrb	r3, [r3, #11]
 8000ed0:	2b49      	cmp	r3, #73	; 0x49
 8000ed2:	d118      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T') // Command to enter bat 2 in maintenance use case
 8000ed4:	4b53      	ldr	r3, [pc, #332]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
 8000ed8:	2b4e      	cmp	r3, #78	; 0x4e
 8000eda:	d114      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
 8000edc:	4b51      	ldr	r3, [pc, #324]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ede:	7b5b      	ldrb	r3, [r3, #13]
 8000ee0:	2b54      	cmp	r3, #84	; 0x54
 8000ee2:	d110      	bne.n	8000f06 <commands_from_pi_to_stm+0x39a>
	{
		if(BAT_2_MANAGEMENT_FLAG==false)
 8000ee4:	4b53      	ldr	r3, [pc, #332]	; (8001034 <commands_from_pi_to_stm+0x4c8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	f083 0301 	eor.w	r3, r3, #1
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <commands_from_pi_to_stm+0x390>
		{
		BAT_2_MAINTENANCE_FLAG=true;
 8000ef2:	4b4d      	ldr	r3, [pc, #308]	; (8001028 <commands_from_pi_to_stm+0x4bc>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MANAGEMENT_FLAG==false)
 8000ef8:	f000 bec6 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start the Maintenance Use Case since Battery 2 currently is in Management Use case\n");
 8000efc:	484e      	ldr	r0, [pc, #312]	; (8001038 <commands_from_pi_to_stm+0x4cc>)
 8000efe:	f006 fe87 	bl	8007c10 <puts>
		if(BAT_2_MANAGEMENT_FLAG==false)
 8000f02:	f000 bec1 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8000f06:	4b47      	ldr	r3, [pc, #284]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b42      	cmp	r3, #66	; 0x42
 8000f0c:	d144      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f0e:	4b45      	ldr	r3, [pc, #276]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b41      	cmp	r3, #65	; 0x41
 8000f14:	d140      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f16:	4b43      	ldr	r3, [pc, #268]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f18:	789b      	ldrb	r3, [r3, #2]
 8000f1a:	2b54      	cmp	r3, #84	; 0x54
 8000f1c:	d13c      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	2b33      	cmp	r3, #51	; 0x33
 8000f24:	d138      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	2b53      	cmp	r3, #83	; 0x53
 8000f2c:	d134      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f2e:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f30:	795b      	ldrb	r3, [r3, #5]
 8000f32:	2b54      	cmp	r3, #84	; 0x54
 8000f34:	d130      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f38:	799b      	ldrb	r3, [r3, #6]
 8000f3a:	2b52      	cmp	r3, #82	; 0x52
 8000f3c:	d12c      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f3e:	4b39      	ldr	r3, [pc, #228]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f40:	79db      	ldrb	r3, [r3, #7]
 8000f42:	2b4d      	cmp	r3, #77	; 0x4d
 8000f44:	d128      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f46:	4b37      	ldr	r3, [pc, #220]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f48:	7a1b      	ldrb	r3, [r3, #8]
 8000f4a:	2b41      	cmp	r3, #65	; 0x41
 8000f4c:	d124      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8000f4e:	4b35      	ldr	r3, [pc, #212]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f50:	7a5b      	ldrb	r3, [r3, #9]
 8000f52:	2b49      	cmp	r3, #73	; 0x49
 8000f54:	d120      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f58:	7a9b      	ldrb	r3, [r3, #10]
 8000f5a:	2b4e      	cmp	r3, #78	; 0x4e
 8000f5c:	d11c      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f60:	7adb      	ldrb	r3, [r3, #11]
 8000f62:	2b54      	cmp	r3, #84	; 0x54
 8000f64:	d118      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T') // Command to turn on Bat 3 Maintenance Use case Autotest
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f68:	7b1b      	ldrb	r3, [r3, #12]
 8000f6a:	2b53      	cmp	r3, #83	; 0x53
 8000f6c:	d114      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f70:	7b5b      	ldrb	r3, [r3, #13]
 8000f72:	2b54      	cmp	r3, #84	; 0x54
 8000f74:	d110      	bne.n	8000f98 <commands_from_pi_to_stm+0x42c>
	{
		if(BAT_3_MAINTENANCE_FLAG == true)
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <commands_from_pi_to_stm+0x4d0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <commands_from_pi_to_stm+0x422>
		{
		Bat3_Maint_Autotestflag=true;
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <commands_from_pi_to_stm+0x4d4>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		bat3_update_maintenance_info_flag=true;
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <commands_from_pi_to_stm+0x4d8>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MAINTENANCE_FLAG == true)
 8000f8a:	f000 be7d 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start Bat 3 Maintenance Use case Autotest\nTurn Bat3 Maintenance flag on first\n");
 8000f8e:	482e      	ldr	r0, [pc, #184]	; (8001048 <commands_from_pi_to_stm+0x4dc>)
 8000f90:	f006 fe3e 	bl	8007c10 <puts>
		if(BAT_3_MAINTENANCE_FLAG == true)
 8000f94:	f000 be78 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b42      	cmp	r3, #66	; 0x42
 8000f9e:	d159      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fa0:	4b20      	ldr	r3, [pc, #128]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	2b41      	cmp	r3, #65	; 0x41
 8000fa6:	d155      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000faa:	789b      	ldrb	r3, [r3, #2]
 8000fac:	2b54      	cmp	r3, #84	; 0x54
 8000fae:	d151      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	2b33      	cmp	r3, #51	; 0x33
 8000fb6:	d14d      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fba:	791b      	ldrb	r3, [r3, #4]
 8000fbc:	2b4d      	cmp	r3, #77	; 0x4d
 8000fbe:	d149      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fc2:	795b      	ldrb	r3, [r3, #5]
 8000fc4:	2b41      	cmp	r3, #65	; 0x41
 8000fc6:	d145      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fca:	799b      	ldrb	r3, [r3, #6]
 8000fcc:	2b49      	cmp	r3, #73	; 0x49
 8000fce:	d141      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fd2:	79db      	ldrb	r3, [r3, #7]
 8000fd4:	2b4e      	cmp	r3, #78	; 0x4e
 8000fd6:	d13d      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
 8000fdc:	2b44      	cmp	r3, #68	; 0x44
 8000fde:	d139      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fe2:	7a5b      	ldrb	r3, [r3, #9]
 8000fe4:	2b50      	cmp	r3, #80	; 0x50
 8000fe6:	d135      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	2b47      	cmp	r3, #71	; 0x47
 8000fee:	d131      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ff2:	7adb      	ldrb	r3, [r3, #11]
 8000ff4:	2b4e      	cmp	r3, #78	; 0x4e
 8000ff6:	d12d      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 3 General Info during Maintenance Use case autotest
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8000ffa:	7b1b      	ldrb	r3, [r3, #12]
 8000ffc:	2b49      	cmp	r3, #73	; 0x49
 8000ffe:	d129      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <commands_from_pi_to_stm+0x4b8>)
 8001002:	7b5b      	ldrb	r3, [r3, #13]
 8001004:	2b46      	cmp	r3, #70	; 0x46
 8001006:	d125      	bne.n	8001054 <commands_from_pi_to_stm+0x4e8>
	{
		if(BAT_3_MAINTENANCE_FLAG == true)
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <commands_from_pi_to_stm+0x4d0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <commands_from_pi_to_stm+0x4ae>
		{
		BAT_3_MAINT_GENERAL_INFO_FLAG=true;
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <commands_from_pi_to_stm+0x4e0>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MAINTENANCE_FLAG == true)
 8001016:	f000 be37 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot display Bat 3 Maintenance Use case General Info\n Turn Bat3 Maintenance flag on first\n");
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <commands_from_pi_to_stm+0x4e4>)
 800101c:	f006 fdf8 	bl	8007c10 <puts>
		if(BAT_3_MAINTENANCE_FLAG == true)
 8001020:	f000 be32 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
 8001024:	200002d8 	.word	0x200002d8
 8001028:	200000af 	.word	0x200000af
 800102c:	200000b0 	.word	0x200000b0
 8001030:	08008c20 	.word	0x08008c20
 8001034:	200000ec 	.word	0x200000ec
 8001038:	08008c7c 	.word	0x08008c7c
 800103c:	200000cd 	.word	0x200000cd
 8001040:	200000cc 	.word	0x200000cc
 8001044:	200000e5 	.word	0x200000e5
 8001048:	08008cd8 	.word	0x08008cd8
 800104c:	200000ce 	.word	0x200000ce
 8001050:	08008d30 	.word	0x08008d30
		}


	}

	else	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 8001054:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b42      	cmp	r3, #66	; 0x42
 800105a:	d144      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 800105c:	4b91      	ldr	r3, [pc, #580]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800105e:	785b      	ldrb	r3, [r3, #1]
 8001060:	2b41      	cmp	r3, #65	; 0x41
 8001062:	d140      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 8001064:	4b8f      	ldr	r3, [pc, #572]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001066:	789b      	ldrb	r3, [r3, #2]
 8001068:	2b54      	cmp	r3, #84	; 0x54
 800106a:	d13c      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 800106c:	4b8d      	ldr	r3, [pc, #564]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	2b33      	cmp	r3, #51	; 0x33
 8001072:	d138      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 8001074:	4b8b      	ldr	r3, [pc, #556]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	2b45      	cmp	r3, #69	; 0x45
 800107a:	d134      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 800107c:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800107e:	795b      	ldrb	r3, [r3, #5]
 8001080:	2b4e      	cmp	r3, #78	; 0x4e
 8001082:	d130      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001084:	4b87      	ldr	r3, [pc, #540]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001086:	799b      	ldrb	r3, [r3, #6]
 8001088:	2b54      	cmp	r3, #84	; 0x54
 800108a:	d12c      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 800108c:	4b85      	ldr	r3, [pc, #532]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800108e:	79db      	ldrb	r3, [r3, #7]
 8001090:	2b45      	cmp	r3, #69	; 0x45
 8001092:	d128      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 8001094:	4b83      	ldr	r3, [pc, #524]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001096:	7a1b      	ldrb	r3, [r3, #8]
 8001098:	2b52      	cmp	r3, #82	; 0x52
 800109a:	d124      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 800109c:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800109e:	7a5b      	ldrb	r3, [r3, #9]
 80010a0:	2b4d      	cmp	r3, #77	; 0x4d
 80010a2:	d120      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 80010a4:	4b7f      	ldr	r3, [pc, #508]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010a6:	7a9b      	ldrb	r3, [r3, #10]
 80010a8:	2b41      	cmp	r3, #65	; 0x41
 80010aa:	d11c      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 80010ac:	4b7d      	ldr	r3, [pc, #500]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010ae:	7adb      	ldrb	r3, [r3, #11]
 80010b0:	2b49      	cmp	r3, #73	; 0x49
 80010b2:	d118      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')  // Command to enter bat 3 in maintenance use case
 80010b4:	4b7b      	ldr	r3, [pc, #492]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010b6:	7b1b      	ldrb	r3, [r3, #12]
 80010b8:	2b4e      	cmp	r3, #78	; 0x4e
 80010ba:	d114      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
 80010bc:	4b79      	ldr	r3, [pc, #484]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010be:	7b5b      	ldrb	r3, [r3, #13]
 80010c0:	2b54      	cmp	r3, #84	; 0x54
 80010c2:	d110      	bne.n	80010e6 <commands_from_pi_to_stm+0x57a>
	{
		if(BAT_3_MANAGEMENT_FLAG==false)
 80010c4:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <commands_from_pi_to_stm+0x73c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d004      	beq.n	80010dc <commands_from_pi_to_stm+0x570>
		{
		BAT_3_MAINTENANCE_FLAG=true;
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <commands_from_pi_to_stm+0x740>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MANAGEMENT_FLAG==false)
 80010d8:	f000 bdd6 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

		else
		{
			printf("Cannot start the Maintenance Use Case since Battery 3 currently is in Management Use case\n");
 80010dc:	4874      	ldr	r0, [pc, #464]	; (80012b0 <commands_from_pi_to_stm+0x744>)
 80010de:	f006 fd97 	bl	8007c10 <puts>
		if(BAT_3_MANAGEMENT_FLAG==false)
 80010e2:	f000 bdd1 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>

	}

	// Bat 1 Management Use case functions

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 80010e6:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b42      	cmp	r3, #66	; 0x42
 80010ec:	d144      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 80010ee:	4b6d      	ldr	r3, [pc, #436]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010f0:	785b      	ldrb	r3, [r3, #1]
 80010f2:	2b41      	cmp	r3, #65	; 0x41
 80010f4:	d140      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 80010f6:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	2b54      	cmp	r3, #84	; 0x54
 80010fc:	d13c      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 80010fe:	4b69      	ldr	r3, [pc, #420]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001100:	78db      	ldrb	r3, [r3, #3]
 8001102:	2b31      	cmp	r3, #49	; 0x31
 8001104:	d138      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 8001106:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001108:	791b      	ldrb	r3, [r3, #4]
 800110a:	2b45      	cmp	r3, #69	; 0x45
 800110c:	d134      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 800110e:	4b65      	ldr	r3, [pc, #404]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001110:	795b      	ldrb	r3, [r3, #5]
 8001112:	2b4e      	cmp	r3, #78	; 0x4e
 8001114:	d130      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001118:	799b      	ldrb	r3, [r3, #6]
 800111a:	2b54      	cmp	r3, #84	; 0x54
 800111c:	d12c      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 800111e:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001120:	79db      	ldrb	r3, [r3, #7]
 8001122:	2b45      	cmp	r3, #69	; 0x45
 8001124:	d128      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 8001126:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001128:	7a1b      	ldrb	r3, [r3, #8]
 800112a:	2b52      	cmp	r3, #82	; 0x52
 800112c:	d124      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='N'
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001130:	7a5b      	ldrb	r3, [r3, #9]
 8001132:	2b4d      	cmp	r3, #77	; 0x4d
 8001134:	d120      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 8001136:	4b5b      	ldr	r3, [pc, #364]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001138:	7a9b      	ldrb	r3, [r3, #10]
 800113a:	2b41      	cmp	r3, #65	; 0x41
 800113c:	d11c      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 800113e:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001140:	7adb      	ldrb	r3, [r3, #11]
 8001142:	2b4e      	cmp	r3, #78	; 0x4e
 8001144:	d118      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='G') // Command to Enter Bat 1 in Management Use case
 8001146:	4b57      	ldr	r3, [pc, #348]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001148:	7b1b      	ldrb	r3, [r3, #12]
 800114a:	2b41      	cmp	r3, #65	; 0x41
 800114c:	d114      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
 800114e:	4b55      	ldr	r3, [pc, #340]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001150:	7b5b      	ldrb	r3, [r3, #13]
 8001152:	2b47      	cmp	r3, #71	; 0x47
 8001154:	d110      	bne.n	8001178 <commands_from_pi_to_stm+0x60c>
	{
		if(BAT_1_MAINTENANCE_FLAG==false)
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <commands_from_pi_to_stm+0x748>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <commands_from_pi_to_stm+0x602>
		{
			BAT_1_MANAGEMENT_FLAG=true;
 8001164:	4b54      	ldr	r3, [pc, #336]	; (80012b8 <commands_from_pi_to_stm+0x74c>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MAINTENANCE_FLAG==false)
 800116a:	f000 bd8d 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start the Management Use Case since Battery 1 currently is in Maintenance Use case\n");
 800116e:	4853      	ldr	r0, [pc, #332]	; (80012bc <commands_from_pi_to_stm+0x750>)
 8001170:	f006 fd4e 	bl	8007c10 <puts>
		if(BAT_1_MAINTENANCE_FLAG==false)
 8001174:	f000 bd88 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001178:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b42      	cmp	r3, #66	; 0x42
 800117e:	d141      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b41      	cmp	r3, #65	; 0x41
 8001186:	d13d      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	2b54      	cmp	r3, #84	; 0x54
 800118e:	d139      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 8001190:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	2b31      	cmp	r3, #49	; 0x31
 8001196:	d135      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 8001198:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800119a:	791b      	ldrb	r3, [r3, #4]
 800119c:	2b4d      	cmp	r3, #77	; 0x4d
 800119e:	d131      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011a0:	4b40      	ldr	r3, [pc, #256]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011a2:	795b      	ldrb	r3, [r3, #5]
 80011a4:	2b41      	cmp	r3, #65	; 0x41
 80011a6:	d12d      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='A' && rx_buffer[8]=='D'
 80011a8:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011aa:	799b      	ldrb	r3, [r3, #6]
 80011ac:	2b4e      	cmp	r3, #78	; 0x4e
 80011ae:	d129      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011b0:	4b3c      	ldr	r3, [pc, #240]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011b2:	79db      	ldrb	r3, [r3, #7]
 80011b4:	2b41      	cmp	r3, #65	; 0x41
 80011b6:	d125      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011b8:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011ba:	7a1b      	ldrb	r3, [r3, #8]
 80011bc:	2b44      	cmp	r3, #68	; 0x44
 80011be:	d121      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011c2:	7a5b      	ldrb	r3, [r3, #9]
 80011c4:	2b50      	cmp	r3, #80	; 0x50
 80011c6:	d11d      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011ca:	7a9b      	ldrb	r3, [r3, #10]
 80011cc:	2b47      	cmp	r3, #71	; 0x47
 80011ce:	d119      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011d2:	7adb      	ldrb	r3, [r3, #11]
 80011d4:	2b4e      	cmp	r3, #78	; 0x4e
 80011d6:	d115      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 1 Management Use Case General Info
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011da:	7b1b      	ldrb	r3, [r3, #12]
 80011dc:	2b49      	cmp	r3, #73	; 0x49
 80011de:	d111      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 80011e2:	7b5b      	ldrb	r3, [r3, #13]
 80011e4:	2b46      	cmp	r3, #70	; 0x46
 80011e6:	d10d      	bne.n	8001204 <commands_from_pi_to_stm+0x698>
	{
		if(BAT_1_MANAGEMENT_FLAG==true)
 80011e8:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <commands_from_pi_to_stm+0x74c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <commands_from_pi_to_stm+0x68e>
		{
			BAT_1_MANAGEMENT_GENERAL_INFO_FLAG=true;
 80011f0:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <commands_from_pi_to_stm+0x754>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MANAGEMENT_FLAG==true)
 80011f6:	f000 bd47 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot display Bat 1 Management Use case General Info\n Turn Bat1 Management flag on first\n");
 80011fa:	4832      	ldr	r0, [pc, #200]	; (80012c4 <commands_from_pi_to_stm+0x758>)
 80011fc:	f006 fd08 	bl	8007c10 <puts>
		if(BAT_1_MANAGEMENT_FLAG==true)
 8001200:	f000 bd42 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b42      	cmp	r3, #66	; 0x42
 800120a:	d165      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800120e:	785b      	ldrb	r3, [r3, #1]
 8001210:	2b41      	cmp	r3, #65	; 0x41
 8001212:	d161      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	2b54      	cmp	r3, #84	; 0x54
 800121a:	d15d      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800121e:	78db      	ldrb	r3, [r3, #3]
 8001220:	2b31      	cmp	r3, #49	; 0x31
 8001222:	d159      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001226:	791b      	ldrb	r3, [r3, #4]
 8001228:	2b4d      	cmp	r3, #77	; 0x4d
 800122a:	d155      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800122e:	795b      	ldrb	r3, [r3, #5]
 8001230:	2b41      	cmp	r3, #65	; 0x41
 8001232:	d151      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001236:	799b      	ldrb	r3, [r3, #6]
 8001238:	2b4e      	cmp	r3, #78	; 0x4e
 800123a:	d14d      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800123e:	79db      	ldrb	r3, [r3, #7]
 8001240:	2b53      	cmp	r3, #83	; 0x53
 8001242:	d149      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001246:	7a1b      	ldrb	r3, [r3, #8]
 8001248:	2b48      	cmp	r3, #72	; 0x48
 800124a:	d145      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='B' && rx_buffer[11]=='T'
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800124e:	7a5b      	ldrb	r3, [r3, #9]
 8001250:	2b50      	cmp	r3, #80	; 0x50
 8001252:	d141      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001256:	7a9b      	ldrb	r3, [r3, #10]
 8001258:	2b42      	cmp	r3, #66	; 0x42
 800125a:	d13d      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800125e:	7adb      	ldrb	r3, [r3, #11]
 8001260:	2b54      	cmp	r3, #84	; 0x54
 8001262:	d139      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='L') // Command to start Bat 1 Management use case keep battery alive cycle
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	2b41      	cmp	r3, #65	; 0x41
 800126a:	d135      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <commands_from_pi_to_stm+0x738>)
 800126e:	7b5b      	ldrb	r3, [r3, #13]
 8001270:	2b4c      	cmp	r3, #76	; 0x4c
 8001272:	d131      	bne.n	80012d8 <commands_from_pi_to_stm+0x76c>
	{
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <commands_from_pi_to_stm+0x75c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	f083 0301 	eor.w	r3, r3, #1
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d008      	beq.n	8001294 <commands_from_pi_to_stm+0x728>
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <commands_from_pi_to_stm+0x74c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <commands_from_pi_to_stm+0x728>
		{
			BAT_1_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG=true;
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <commands_from_pi_to_stm+0x760>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 8001290:	f000 bcfa 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start Bat 1 'Keep Battery Alive' cycle because\n");
 8001294:	480e      	ldr	r0, [pc, #56]	; (80012d0 <commands_from_pi_to_stm+0x764>)
 8001296:	f006 fcbb 	bl	8007c10 <puts>
			printf("Either the battery is in Shipment Cycle or it has not entered the Management Use Case yet\n");
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <commands_from_pi_to_stm+0x768>)
 800129c:	f006 fcb8 	bl	8007c10 <puts>
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 80012a0:	f000 bcf2 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
 80012a4:	200002d8 	.word	0x200002d8
 80012a8:	200000f2 	.word	0x200000f2
 80012ac:	200000cd 	.word	0x200000cd
 80012b0:	08008d8c 	.word	0x08008d8c
 80012b4:	20000091 	.word	0x20000091
 80012b8:	200000e6 	.word	0x200000e6
 80012bc:	08008de8 	.word	0x08008de8
 80012c0:	200000e7 	.word	0x200000e7
 80012c4:	08008e44 	.word	0x08008e44
 80012c8:	200000e9 	.word	0x200000e9
 80012cc:	200000e8 	.word	0x200000e8
 80012d0:	08008ea0 	.word	0x08008ea0
 80012d4:	08008ed8 	.word	0x08008ed8
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80012d8:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b42      	cmp	r3, #66	; 0x42
 80012de:	d14b      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 80012e0:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	2b41      	cmp	r3, #65	; 0x41
 80012e6:	d147      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 80012e8:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	2b54      	cmp	r3, #84	; 0x54
 80012ee:	d143      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80012f2:	78db      	ldrb	r3, [r3, #3]
 80012f4:	2b31      	cmp	r3, #49	; 0x31
 80012f6:	d13f      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 80012f8:	4b6e      	ldr	r3, [pc, #440]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80012fa:	791b      	ldrb	r3, [r3, #4]
 80012fc:	2b4d      	cmp	r3, #77	; 0x4d
 80012fe:	d13b      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001300:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001302:	795b      	ldrb	r3, [r3, #5]
 8001304:	2b41      	cmp	r3, #65	; 0x41
 8001306:	d137      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001308:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800130a:	799b      	ldrb	r3, [r3, #6]
 800130c:	2b4e      	cmp	r3, #78	; 0x4e
 800130e:	d133      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001310:	4b68      	ldr	r3, [pc, #416]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001312:	79db      	ldrb	r3, [r3, #7]
 8001314:	2b53      	cmp	r3, #83	; 0x53
 8001316:	d12f      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001318:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800131a:	7a1b      	ldrb	r3, [r3, #8]
 800131c:	2b48      	cmp	r3, #72	; 0x48
 800131e:	d12b      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='Y'
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001322:	7a5b      	ldrb	r3, [r3, #9]
 8001324:	2b50      	cmp	r3, #80	; 0x50
 8001326:	d127      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001328:	4b62      	ldr	r3, [pc, #392]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800132a:	7a9b      	ldrb	r3, [r3, #10]
 800132c:	2b43      	cmp	r3, #67	; 0x43
 800132e:	d123      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001330:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001332:	7adb      	ldrb	r3, [r3, #11]
 8001334:	2b59      	cmp	r3, #89	; 0x59
 8001336:	d11f      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
							&& rx_buffer[12]=='C' && rx_buffer[13]=='L') // Command to start Bat 1 Management use case shipment cycle
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800133a:	7b1b      	ldrb	r3, [r3, #12]
 800133c:	2b43      	cmp	r3, #67	; 0x43
 800133e:	d11b      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
 8001340:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001342:	7b5b      	ldrb	r3, [r3, #13]
 8001344:	2b4c      	cmp	r3, #76	; 0x4c
 8001346:	d117      	bne.n	8001378 <commands_from_pi_to_stm+0x80c>
	{

		if(BAT_1_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 8001348:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <commands_from_pi_to_stm+0x94c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	f083 0301 	eor.w	r3, r3, #1
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <commands_from_pi_to_stm+0x7fc>
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <commands_from_pi_to_stm+0x950>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <commands_from_pi_to_stm+0x7fc>
		{
			BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG = true;
 800135e:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <commands_from_pi_to_stm+0x954>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
		if(BAT_1_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 8001364:	f000 bc90 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot Enter the Bat 1 shipment cycle because\n");
 8001368:	4856      	ldr	r0, [pc, #344]	; (80014c4 <commands_from_pi_to_stm+0x958>)
 800136a:	f006 fc51 	bl	8007c10 <puts>
			printf("Either the battery is in 'Keep Battery Alive' cycle or it has not entered the Management Use Case yet\n");
 800136e:	4856      	ldr	r0, [pc, #344]	; (80014c8 <commands_from_pi_to_stm+0x95c>)
 8001370:	f006 fc4e 	bl	8007c10 <puts>
		if(BAT_1_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_1_MANAGEMENT_FLAG==true)
 8001374:	f000 bc88 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001378:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b42      	cmp	r3, #66	; 0x42
 800137e:	d14b      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 8001380:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	2b41      	cmp	r3, #65	; 0x41
 8001386:	d147      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 8001388:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	2b54      	cmp	r3, #84	; 0x54
 800138e:	d143      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 8001390:	4b48      	ldr	r3, [pc, #288]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	2b31      	cmp	r3, #49	; 0x31
 8001396:	d13f      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 8001398:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	2b4d      	cmp	r3, #77	; 0x4d
 800139e:	d13b      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013a0:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013a2:	795b      	ldrb	r3, [r3, #5]
 80013a4:	2b41      	cmp	r3, #65	; 0x41
 80013a6:	d137      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 80013a8:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013aa:	799b      	ldrb	r3, [r3, #6]
 80013ac:	2b4e      	cmp	r3, #78	; 0x4e
 80013ae:	d133      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013b2:	79db      	ldrb	r3, [r3, #7]
 80013b4:	2b53      	cmp	r3, #83	; 0x53
 80013b6:	d12f      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013b8:	4b3e      	ldr	r3, [pc, #248]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013ba:	7a1b      	ldrb	r3, [r3, #8]
 80013bc:	2b48      	cmp	r3, #72	; 0x48
 80013be:	d12b      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='D'
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	2b50      	cmp	r3, #80	; 0x50
 80013c6:	d127      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013ca:	7a9b      	ldrb	r3, [r3, #10]
 80013cc:	2b43      	cmp	r3, #67	; 0x43
 80013ce:	d123      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013d0:	4b38      	ldr	r3, [pc, #224]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013d2:	7adb      	ldrb	r3, [r3, #11]
 80013d4:	2b44      	cmp	r3, #68	; 0x44
 80013d6:	d11f      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
							&& rx_buffer[12]=='3' && rx_buffer[13]=='0')
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	2b33      	cmp	r3, #51	; 0x33
 80013de:	d11b      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
 80013e0:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 80013e2:	7b5b      	ldrb	r3, [r3, #13]
 80013e4:	2b30      	cmp	r3, #48	; 0x30
 80013e6:	d117      	bne.n	8001418 <commands_from_pi_to_stm+0x8ac>
	{
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_testycycle_Autotestflag==false)
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <commands_from_pi_to_stm+0x954>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <commands_from_pi_to_stm+0x89c>
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <commands_from_pi_to_stm+0x960>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	f083 0301 	eor.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d004      	beq.n	8001408 <commands_from_pi_to_stm+0x89c>
		{
			Bat1_Management_Shipment_chg_dischg_to_30_percent_flag = true;
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <commands_from_pi_to_stm+0x964>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_testycycle_Autotestflag==false)
 8001404:	f000 bc40 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 1 'chg dschg to 30 ' cycle because");
 8001408:	4832      	ldr	r0, [pc, #200]	; (80014d4 <commands_from_pi_to_stm+0x968>)
 800140a:	f006 fb7b 	bl	8007b04 <iprintf>
			printf("Either the battery is in shipment autotest cycle or it hasn't entered the shipment cycle mode yet\n");
 800140e:	4832      	ldr	r0, [pc, #200]	; (80014d8 <commands_from_pi_to_stm+0x96c>)
 8001410:	f006 fbfe 	bl	8007c10 <puts>
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_testycycle_Autotestflag==false)
 8001414:	f000 bc38 	b.w	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b42      	cmp	r3, #66	; 0x42
 800141e:	d161      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b41      	cmp	r3, #65	; 0x41
 8001426:	d15d      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	2b54      	cmp	r3, #84	; 0x54
 800142e:	d159      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	2b31      	cmp	r3, #49	; 0x31
 8001436:	d155      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800143a:	791b      	ldrb	r3, [r3, #4]
 800143c:	2b4d      	cmp	r3, #77	; 0x4d
 800143e:	d151      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001442:	795b      	ldrb	r3, [r3, #5]
 8001444:	2b41      	cmp	r3, #65	; 0x41
 8001446:	d14d      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800144a:	799b      	ldrb	r3, [r3, #6]
 800144c:	2b4e      	cmp	r3, #78	; 0x4e
 800144e:	d149      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001452:	79db      	ldrb	r3, [r3, #7]
 8001454:	2b53      	cmp	r3, #83	; 0x53
 8001456:	d145      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2b48      	cmp	r3, #72	; 0x48
 800145e:	d141      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='A' && rx_buffer[11]=='T'
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	2b50      	cmp	r3, #80	; 0x50
 8001466:	d13d      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800146a:	7a9b      	ldrb	r3, [r3, #10]
 800146c:	2b41      	cmp	r3, #65	; 0x41
 800146e:	d139      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001472:	7adb      	ldrb	r3, [r3, #11]
 8001474:	2b54      	cmp	r3, #84	; 0x54
 8001476:	d135      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 800147a:	7b1b      	ldrb	r3, [r3, #12]
 800147c:	2b53      	cmp	r3, #83	; 0x53
 800147e:	d131      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <commands_from_pi_to_stm+0x948>)
 8001482:	7b5b      	ldrb	r3, [r3, #13]
 8001484:	2b54      	cmp	r3, #84	; 0x54
 8001486:	d12d      	bne.n	80014e4 <commands_from_pi_to_stm+0x978>
	{
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <commands_from_pi_to_stm+0x954>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <commands_from_pi_to_stm+0x93a>
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <commands_from_pi_to_stm+0x964>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <commands_from_pi_to_stm+0x93a>
		{
			Bat1_Management_Shipment_testycycle_Autotestflag=true;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <commands_from_pi_to_stm+0x960>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 80014a4:	e3f0      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 1 'Shipment auto test cycle' because");
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <commands_from_pi_to_stm+0x970>)
 80014a8:	f006 fb2c 	bl	8007b04 <iprintf>
			printf("Either the battery is in 'shipment chg/dschg to 30' cycle or it hasn't entered the shipment cycle mode yet\n ");
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <commands_from_pi_to_stm+0x974>)
 80014ae:	f006 fb29 	bl	8007b04 <iprintf>
		if(BAT1_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat1_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 80014b2:	e3e9      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
 80014b4:	200002d8 	.word	0x200002d8
 80014b8:	200000e8 	.word	0x200000e8
 80014bc:	200000e6 	.word	0x200000e6
 80014c0:	200000e9 	.word	0x200000e9
 80014c4:	08008f34 	.word	0x08008f34
 80014c8:	08008f64 	.word	0x08008f64
 80014cc:	200000ea 	.word	0x200000ea
 80014d0:	200000eb 	.word	0x200000eb
 80014d4:	08008fcc 	.word	0x08008fcc
 80014d8:	08009004 	.word	0x08009004
 80014dc:	08009068 	.word	0x08009068
 80014e0:	080090a0 	.word	0x080090a0
	}  //1


	// Bat 2 Management Use case functions

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 80014e4:	4b93      	ldr	r3, [pc, #588]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b42      	cmp	r3, #66	; 0x42
 80014ea:	d142      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 80014ec:	4b91      	ldr	r3, [pc, #580]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80014ee:	785b      	ldrb	r3, [r3, #1]
 80014f0:	2b41      	cmp	r3, #65	; 0x41
 80014f2:	d13e      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 80014f4:	4b8f      	ldr	r3, [pc, #572]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80014f6:	789b      	ldrb	r3, [r3, #2]
 80014f8:	2b54      	cmp	r3, #84	; 0x54
 80014fa:	d13a      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 80014fc:	4b8d      	ldr	r3, [pc, #564]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80014fe:	78db      	ldrb	r3, [r3, #3]
 8001500:	2b32      	cmp	r3, #50	; 0x32
 8001502:	d136      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 8001504:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001506:	791b      	ldrb	r3, [r3, #4]
 8001508:	2b45      	cmp	r3, #69	; 0x45
 800150a:	d132      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 800150c:	4b89      	ldr	r3, [pc, #548]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800150e:	795b      	ldrb	r3, [r3, #5]
 8001510:	2b4e      	cmp	r3, #78	; 0x4e
 8001512:	d12e      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001516:	799b      	ldrb	r3, [r3, #6]
 8001518:	2b54      	cmp	r3, #84	; 0x54
 800151a:	d12a      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 800151c:	4b85      	ldr	r3, [pc, #532]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800151e:	79db      	ldrb	r3, [r3, #7]
 8001520:	2b45      	cmp	r3, #69	; 0x45
 8001522:	d126      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 8001524:	4b83      	ldr	r3, [pc, #524]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001526:	7a1b      	ldrb	r3, [r3, #8]
 8001528:	2b52      	cmp	r3, #82	; 0x52
 800152a:	d122      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='N'
 800152c:	4b81      	ldr	r3, [pc, #516]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800152e:	7a5b      	ldrb	r3, [r3, #9]
 8001530:	2b4d      	cmp	r3, #77	; 0x4d
 8001532:	d11e      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 8001534:	4b7f      	ldr	r3, [pc, #508]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001536:	7a9b      	ldrb	r3, [r3, #10]
 8001538:	2b41      	cmp	r3, #65	; 0x41
 800153a:	d11a      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 800153c:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800153e:	7adb      	ldrb	r3, [r3, #11]
 8001540:	2b4e      	cmp	r3, #78	; 0x4e
 8001542:	d116      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='G') // Command to Enter Bat 2 in Management Use case
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001546:	7b1b      	ldrb	r3, [r3, #12]
 8001548:	2b41      	cmp	r3, #65	; 0x41
 800154a:	d112      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
 800154c:	4b79      	ldr	r3, [pc, #484]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800154e:	7b5b      	ldrb	r3, [r3, #13]
 8001550:	2b47      	cmp	r3, #71	; 0x47
 8001552:	d10e      	bne.n	8001572 <commands_from_pi_to_stm+0xa06>
	{
		if(BAT_2_MAINTENANCE_FLAG==false)
 8001554:	4b78      	ldr	r3, [pc, #480]	; (8001738 <commands_from_pi_to_stm+0xbcc>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <commands_from_pi_to_stm+0x9fe>
		{
			BAT_2_MANAGEMENT_FLAG=true;
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <commands_from_pi_to_stm+0xbd0>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MAINTENANCE_FLAG==false)
 8001568:	e38e      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start the Management Use Case since Battery 2 currently is in Maintenance Use case\n");
 800156a:	4875      	ldr	r0, [pc, #468]	; (8001740 <commands_from_pi_to_stm+0xbd4>)
 800156c:	f006 fb50 	bl	8007c10 <puts>
		if(BAT_2_MAINTENANCE_FLAG==false)
 8001570:	e38a      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001572:	4b70      	ldr	r3, [pc, #448]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b42      	cmp	r3, #66	; 0x42
 8001578:	d13f      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 800157a:	4b6e      	ldr	r3, [pc, #440]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	2b41      	cmp	r3, #65	; 0x41
 8001580:	d13b      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 8001582:	4b6c      	ldr	r3, [pc, #432]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	2b54      	cmp	r3, #84	; 0x54
 8001588:	d137      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 800158a:	4b6a      	ldr	r3, [pc, #424]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	2b32      	cmp	r3, #50	; 0x32
 8001590:	d133      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 8001592:	4b68      	ldr	r3, [pc, #416]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	2b4d      	cmp	r3, #77	; 0x4d
 8001598:	d12f      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800159c:	795b      	ldrb	r3, [r3, #5]
 800159e:	2b41      	cmp	r3, #65	; 0x41
 80015a0:	d12b      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='A' && rx_buffer[8]=='D'
 80015a2:	4b64      	ldr	r3, [pc, #400]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015a4:	799b      	ldrb	r3, [r3, #6]
 80015a6:	2b4e      	cmp	r3, #78	; 0x4e
 80015a8:	d127      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 80015aa:	4b62      	ldr	r3, [pc, #392]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015ac:	79db      	ldrb	r3, [r3, #7]
 80015ae:	2b41      	cmp	r3, #65	; 0x41
 80015b0:	d123      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 80015b2:	4b60      	ldr	r3, [pc, #384]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015b4:	7a1b      	ldrb	r3, [r3, #8]
 80015b6:	2b44      	cmp	r3, #68	; 0x44
 80015b8:	d11f      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 80015ba:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015bc:	7a5b      	ldrb	r3, [r3, #9]
 80015be:	2b50      	cmp	r3, #80	; 0x50
 80015c0:	d11b      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015c4:	7a9b      	ldrb	r3, [r3, #10]
 80015c6:	2b47      	cmp	r3, #71	; 0x47
 80015c8:	d117      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 80015ca:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015cc:	7adb      	ldrb	r3, [r3, #11]
 80015ce:	2b4e      	cmp	r3, #78	; 0x4e
 80015d0:	d113      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 2 Management Use Case General Info
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015d4:	7b1b      	ldrb	r3, [r3, #12]
 80015d6:	2b49      	cmp	r3, #73	; 0x49
 80015d8:	d10f      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	2b46      	cmp	r3, #70	; 0x46
 80015e0:	d10b      	bne.n	80015fa <commands_from_pi_to_stm+0xa8e>
	{
		if(BAT_2_MANAGEMENT_FLAG==true)
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <commands_from_pi_to_stm+0xbd0>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <commands_from_pi_to_stm+0xa86>
		{
			BAT_2_MANAGEMENT_GENERAL_INFO_FLAG=true;
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <commands_from_pi_to_stm+0xbd8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MANAGEMENT_FLAG==true)
 80015f0:	e34a      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot display Bat 2 Management Use case General Info\n Turn Bat2 Management flag on first\n");
 80015f2:	4855      	ldr	r0, [pc, #340]	; (8001748 <commands_from_pi_to_stm+0xbdc>)
 80015f4:	f006 fb0c 	bl	8007c10 <puts>
		if(BAT_2_MANAGEMENT_FLAG==true)
 80015f8:	e346      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80015fa:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b42      	cmp	r3, #66	; 0x42
 8001600:	d149      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001602:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	2b41      	cmp	r3, #65	; 0x41
 8001608:	d145      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 800160a:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800160c:	789b      	ldrb	r3, [r3, #2]
 800160e:	2b54      	cmp	r3, #84	; 0x54
 8001610:	d141      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001612:	4b48      	ldr	r3, [pc, #288]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	2b32      	cmp	r3, #50	; 0x32
 8001618:	d13d      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800161c:	791b      	ldrb	r3, [r3, #4]
 800161e:	2b4d      	cmp	r3, #77	; 0x4d
 8001620:	d139      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001622:	4b44      	ldr	r3, [pc, #272]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001624:	795b      	ldrb	r3, [r3, #5]
 8001626:	2b41      	cmp	r3, #65	; 0x41
 8001628:	d135      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 800162a:	4b42      	ldr	r3, [pc, #264]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800162c:	799b      	ldrb	r3, [r3, #6]
 800162e:	2b4e      	cmp	r3, #78	; 0x4e
 8001630:	d131      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001634:	79db      	ldrb	r3, [r3, #7]
 8001636:	2b53      	cmp	r3, #83	; 0x53
 8001638:	d12d      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800163c:	7a1b      	ldrb	r3, [r3, #8]
 800163e:	2b48      	cmp	r3, #72	; 0x48
 8001640:	d129      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='B' && rx_buffer[11]=='T'
 8001642:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001644:	7a5b      	ldrb	r3, [r3, #9]
 8001646:	2b50      	cmp	r3, #80	; 0x50
 8001648:	d125      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800164c:	7a9b      	ldrb	r3, [r3, #10]
 800164e:	2b42      	cmp	r3, #66	; 0x42
 8001650:	d121      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001654:	7adb      	ldrb	r3, [r3, #11]
 8001656:	2b54      	cmp	r3, #84	; 0x54
 8001658:	d11d      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='L') // Command to start Bat 2 Management use case keep battery alive cycle
 800165a:	4b36      	ldr	r3, [pc, #216]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 800165c:	7b1b      	ldrb	r3, [r3, #12]
 800165e:	2b41      	cmp	r3, #65	; 0x41
 8001660:	d119      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001664:	7b5b      	ldrb	r3, [r3, #13]
 8001666:	2b4c      	cmp	r3, #76	; 0x4c
 8001668:	d115      	bne.n	8001696 <commands_from_pi_to_stm+0xb2a>
	{
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 800166a:	4b38      	ldr	r3, [pc, #224]	; (800174c <commands_from_pi_to_stm+0xbe0>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	f083 0301 	eor.w	r3, r3, #1
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <commands_from_pi_to_stm+0xb1c>
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <commands_from_pi_to_stm+0xbd0>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <commands_from_pi_to_stm+0xb1c>
		{
			BAT_2_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG=true;
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <commands_from_pi_to_stm+0xbe4>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 8001686:	e2ff      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start Bat 2 'Keep Battery Alive' cycle because\n");
 8001688:	4832      	ldr	r0, [pc, #200]	; (8001754 <commands_from_pi_to_stm+0xbe8>)
 800168a:	f006 fac1 	bl	8007c10 <puts>
			printf("Either the battery is in Shipment Cycle or it has not entered the Management Use Case yet\n");
 800168e:	4832      	ldr	r0, [pc, #200]	; (8001758 <commands_from_pi_to_stm+0xbec>)
 8001690:	f006 fabe 	bl	8007c10 <puts>
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 8001694:	e2f8      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b42      	cmp	r3, #66	; 0x42
 800169c:	d162      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016a0:	785b      	ldrb	r3, [r3, #1]
 80016a2:	2b41      	cmp	r3, #65	; 0x41
 80016a4:	d15e      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	2b54      	cmp	r3, #84	; 0x54
 80016ac:	d15a      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	2b32      	cmp	r3, #50	; 0x32
 80016b4:	d156      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016b8:	791b      	ldrb	r3, [r3, #4]
 80016ba:	2b4d      	cmp	r3, #77	; 0x4d
 80016bc:	d152      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016c0:	795b      	ldrb	r3, [r3, #5]
 80016c2:	2b41      	cmp	r3, #65	; 0x41
 80016c4:	d14e      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016c8:	799b      	ldrb	r3, [r3, #6]
 80016ca:	2b4e      	cmp	r3, #78	; 0x4e
 80016cc:	d14a      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016d0:	79db      	ldrb	r3, [r3, #7]
 80016d2:	2b53      	cmp	r3, #83	; 0x53
 80016d4:	d146      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016d8:	7a1b      	ldrb	r3, [r3, #8]
 80016da:	2b48      	cmp	r3, #72	; 0x48
 80016dc:	d142      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='Y'
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016e0:	7a5b      	ldrb	r3, [r3, #9]
 80016e2:	2b50      	cmp	r3, #80	; 0x50
 80016e4:	d13e      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016e8:	7a9b      	ldrb	r3, [r3, #10]
 80016ea:	2b43      	cmp	r3, #67	; 0x43
 80016ec:	d13a      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016f0:	7adb      	ldrb	r3, [r3, #11]
 80016f2:	2b59      	cmp	r3, #89	; 0x59
 80016f4:	d136      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
							&& rx_buffer[12]=='C' && rx_buffer[13]=='L') // Command to start Bat 2 Management use case shipment cycle
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 80016f8:	7b1b      	ldrb	r3, [r3, #12]
 80016fa:	2b43      	cmp	r3, #67	; 0x43
 80016fc:	d132      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <commands_from_pi_to_stm+0xbc8>)
 8001700:	7b5b      	ldrb	r3, [r3, #13]
 8001702:	2b4c      	cmp	r3, #76	; 0x4c
 8001704:	d12e      	bne.n	8001764 <commands_from_pi_to_stm+0xbf8>
	{

		if(BAT_2_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <commands_from_pi_to_stm+0xbe4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d007      	beq.n	8001724 <commands_from_pi_to_stm+0xbb8>
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <commands_from_pi_to_stm+0xbd0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <commands_from_pi_to_stm+0xbb8>
		{
			BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG = true;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <commands_from_pi_to_stm+0xbe0>)
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
		if(BAT_2_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 8001722:	e2b1      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot Enter Bat 2 in the shipment cycle because\n");
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <commands_from_pi_to_stm+0xbf0>)
 8001726:	f006 fa73 	bl	8007c10 <puts>
			printf("Either the battery is in 'Keep Battery Alive' cycle or it has not entered the Management Use Case yet\n");
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <commands_from_pi_to_stm+0xbf4>)
 800172c:	f006 fa70 	bl	8007c10 <puts>
		if(BAT_2_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_2_MANAGEMENT_FLAG==true)
 8001730:	e2aa      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001732:	bf00      	nop
 8001734:	200002d8 	.word	0x200002d8
 8001738:	200000af 	.word	0x200000af
 800173c:	200000ec 	.word	0x200000ec
 8001740:	08009110 	.word	0x08009110
 8001744:	200000ed 	.word	0x200000ed
 8001748:	0800916c 	.word	0x0800916c
 800174c:	200000ef 	.word	0x200000ef
 8001750:	200000ee 	.word	0x200000ee
 8001754:	080091c8 	.word	0x080091c8
 8001758:	08008ed8 	.word	0x08008ed8
 800175c:	08009200 	.word	0x08009200
 8001760:	08008f64 	.word	0x08008f64
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001764:	4b93      	ldr	r3, [pc, #588]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b42      	cmp	r3, #66	; 0x42
 800176a:	d149      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 800176c:	4b91      	ldr	r3, [pc, #580]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b41      	cmp	r3, #65	; 0x41
 8001772:	d145      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 8001774:	4b8f      	ldr	r3, [pc, #572]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	2b54      	cmp	r3, #84	; 0x54
 800177a:	d141      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 800177c:	4b8d      	ldr	r3, [pc, #564]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800177e:	78db      	ldrb	r3, [r3, #3]
 8001780:	2b32      	cmp	r3, #50	; 0x32
 8001782:	d13d      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 8001784:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	2b4d      	cmp	r3, #77	; 0x4d
 800178a:	d139      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 800178c:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800178e:	795b      	ldrb	r3, [r3, #5]
 8001790:	2b41      	cmp	r3, #65	; 0x41
 8001792:	d135      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001796:	799b      	ldrb	r3, [r3, #6]
 8001798:	2b4e      	cmp	r3, #78	; 0x4e
 800179a:	d131      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 800179c:	4b85      	ldr	r3, [pc, #532]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800179e:	79db      	ldrb	r3, [r3, #7]
 80017a0:	2b53      	cmp	r3, #83	; 0x53
 80017a2:	d12d      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 80017a4:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017a6:	7a1b      	ldrb	r3, [r3, #8]
 80017a8:	2b48      	cmp	r3, #72	; 0x48
 80017aa:	d129      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='D'
 80017ac:	4b81      	ldr	r3, [pc, #516]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017ae:	7a5b      	ldrb	r3, [r3, #9]
 80017b0:	2b50      	cmp	r3, #80	; 0x50
 80017b2:	d125      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 80017b4:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017b6:	7a9b      	ldrb	r3, [r3, #10]
 80017b8:	2b43      	cmp	r3, #67	; 0x43
 80017ba:	d121      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 80017bc:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017be:	7adb      	ldrb	r3, [r3, #11]
 80017c0:	2b44      	cmp	r3, #68	; 0x44
 80017c2:	d11d      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
							&& rx_buffer[12]=='3' && rx_buffer[13]=='0')  // Command to start bat 2 management use case -shipment- charge/discharge to 30 % cycle
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017c6:	7b1b      	ldrb	r3, [r3, #12]
 80017c8:	2b33      	cmp	r3, #51	; 0x33
 80017ca:	d119      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
 80017cc:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80017ce:	7b5b      	ldrb	r3, [r3, #13]
 80017d0:	2b30      	cmp	r3, #48	; 0x30
 80017d2:	d115      	bne.n	8001800 <commands_from_pi_to_stm+0xc94>
	{
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_testycycle_Autotestflag==false)
 80017d4:	4b78      	ldr	r3, [pc, #480]	; (80019b8 <commands_from_pi_to_stm+0xe4c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <commands_from_pi_to_stm+0xc86>
 80017dc:	4b77      	ldr	r3, [pc, #476]	; (80019bc <commands_from_pi_to_stm+0xe50>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <commands_from_pi_to_stm+0xc86>
		{
			Bat2_Management_Shipment_chg_dischg_to_30_percent_flag = true;
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <commands_from_pi_to_stm+0xe54>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	701a      	strb	r2, [r3, #0]
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_testycycle_Autotestflag==false)
 80017f0:	e24a      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 2 'chg dschg to 30 ' cycle because");
 80017f2:	4874      	ldr	r0, [pc, #464]	; (80019c4 <commands_from_pi_to_stm+0xe58>)
 80017f4:	f006 f986 	bl	8007b04 <iprintf>
			printf("Either the battery is in shipment autotest cycle or it hasn't entered the shipment cycle mode yet\n");
 80017f8:	4873      	ldr	r0, [pc, #460]	; (80019c8 <commands_from_pi_to_stm+0xe5c>)
 80017fa:	f006 fa09 	bl	8007c10 <puts>
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_testycycle_Autotestflag==false)
 80017fe:	e243      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	} //1

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001800:	4b6c      	ldr	r3, [pc, #432]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b42      	cmp	r3, #66	; 0x42
 8001806:	d149      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	2b41      	cmp	r3, #65	; 0x41
 800180e:	d145      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	2b54      	cmp	r3, #84	; 0x54
 8001816:	d141      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001818:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	2b32      	cmp	r3, #50	; 0x32
 800181e:	d13d      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	2b4d      	cmp	r3, #77	; 0x4d
 8001826:	d139      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001828:	4b62      	ldr	r3, [pc, #392]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800182a:	795b      	ldrb	r3, [r3, #5]
 800182c:	2b41      	cmp	r3, #65	; 0x41
 800182e:	d135      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001830:	4b60      	ldr	r3, [pc, #384]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001832:	799b      	ldrb	r3, [r3, #6]
 8001834:	2b4e      	cmp	r3, #78	; 0x4e
 8001836:	d131      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800183a:	79db      	ldrb	r3, [r3, #7]
 800183c:	2b53      	cmp	r3, #83	; 0x53
 800183e:	d12d      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001840:	4b5c      	ldr	r3, [pc, #368]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001842:	7a1b      	ldrb	r3, [r3, #8]
 8001844:	2b48      	cmp	r3, #72	; 0x48
 8001846:	d129      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='A' && rx_buffer[11]=='T'
 8001848:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800184a:	7a5b      	ldrb	r3, [r3, #9]
 800184c:	2b50      	cmp	r3, #80	; 0x50
 800184e:	d125      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001850:	4b58      	ldr	r3, [pc, #352]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001852:	7a9b      	ldrb	r3, [r3, #10]
 8001854:	2b41      	cmp	r3, #65	; 0x41
 8001856:	d121      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001858:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800185a:	7adb      	ldrb	r3, [r3, #11]
 800185c:	2b54      	cmp	r3, #84	; 0x54
 800185e:	d11d      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')  // Command to start bat 2 management use case - Shipment autotest
 8001860:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001862:	7b1b      	ldrb	r3, [r3, #12]
 8001864:	2b53      	cmp	r3, #83	; 0x53
 8001866:	d119      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800186a:	7b5b      	ldrb	r3, [r3, #13]
 800186c:	2b54      	cmp	r3, #84	; 0x54
 800186e:	d115      	bne.n	800189c <commands_from_pi_to_stm+0xd30>
	{
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <commands_from_pi_to_stm+0xe4c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <commands_from_pi_to_stm+0xd22>
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <commands_from_pi_to_stm+0xe54>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <commands_from_pi_to_stm+0xd22>
		{
			Bat2_Management_Shipment_testycycle_Autotestflag=true;
 8001886:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <commands_from_pi_to_stm+0xe50>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 800188c:	e1fc      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 2 'Shipment auto test cycle' because");
 800188e:	484f      	ldr	r0, [pc, #316]	; (80019cc <commands_from_pi_to_stm+0xe60>)
 8001890:	f006 f938 	bl	8007b04 <iprintf>
			printf("Either the battery is in 'shipment chg/dschg to 30' cycle or it hasn't entered the shipment cycle mode yet\n ");
 8001894:	484e      	ldr	r0, [pc, #312]	; (80019d0 <commands_from_pi_to_stm+0xe64>)
 8001896:	f006 f935 	bl	8007b04 <iprintf>
		if(BAT2_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat2_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 800189a:	e1f5      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
	} //1


	// Bat 3 Management Use case functions

	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b42      	cmp	r3, #66	; 0x42
 80018a2:	d142      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	2b41      	cmp	r3, #65	; 0x41
 80018aa:	d13e      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	2b54      	cmp	r3, #84	; 0x54
 80018b2:	d13a      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018b4:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018b6:	78db      	ldrb	r3, [r3, #3]
 80018b8:	2b33      	cmp	r3, #51	; 0x33
 80018ba:	d136      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018bc:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018be:	791b      	ldrb	r3, [r3, #4]
 80018c0:	2b45      	cmp	r3, #69	; 0x45
 80018c2:	d132      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018c6:	795b      	ldrb	r3, [r3, #5]
 80018c8:	2b4e      	cmp	r3, #78	; 0x4e
 80018ca:	d12e      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 80018cc:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018ce:	799b      	ldrb	r3, [r3, #6]
 80018d0:	2b54      	cmp	r3, #84	; 0x54
 80018d2:	d12a      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018d6:	79db      	ldrb	r3, [r3, #7]
 80018d8:	2b45      	cmp	r3, #69	; 0x45
 80018da:	d126      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018de:	7a1b      	ldrb	r3, [r3, #8]
 80018e0:	2b52      	cmp	r3, #82	; 0x52
 80018e2:	d122      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='N'
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018e6:	7a5b      	ldrb	r3, [r3, #9]
 80018e8:	2b4d      	cmp	r3, #77	; 0x4d
 80018ea:	d11e      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018ee:	7a9b      	ldrb	r3, [r3, #10]
 80018f0:	2b41      	cmp	r3, #65	; 0x41
 80018f2:	d11a      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 80018f4:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018f6:	7adb      	ldrb	r3, [r3, #11]
 80018f8:	2b4e      	cmp	r3, #78	; 0x4e
 80018fa:	d116      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='G') // Command to Enter Bat 3 in Management Use case
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 80018fe:	7b1b      	ldrb	r3, [r3, #12]
 8001900:	2b41      	cmp	r3, #65	; 0x41
 8001902:	d112      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001906:	7b5b      	ldrb	r3, [r3, #13]
 8001908:	2b47      	cmp	r3, #71	; 0x47
 800190a:	d10e      	bne.n	800192a <commands_from_pi_to_stm+0xdbe>
	{
		if(BAT_3_MAINTENANCE_FLAG==false)
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <commands_from_pi_to_stm+0xe68>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <commands_from_pi_to_stm+0xdb6>
		{
			BAT_3_MANAGEMENT_FLAG=true;
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <commands_from_pi_to_stm+0xe6c>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MAINTENANCE_FLAG==false)
 8001920:	e1b2      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start the Management Use Case since Battery 3 currently is in Maintenance Use case\n");
 8001922:	482e      	ldr	r0, [pc, #184]	; (80019dc <commands_from_pi_to_stm+0xe70>)
 8001924:	f006 f974 	bl	8007c10 <puts>
		if(BAT_3_MAINTENANCE_FLAG==false)
 8001928:	e1ae      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b42      	cmp	r3, #66	; 0x42
 8001930:	d15a      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	2b41      	cmp	r3, #65	; 0x41
 8001938:	d156      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800193c:	789b      	ldrb	r3, [r3, #2]
 800193e:	2b54      	cmp	r3, #84	; 0x54
 8001940:	d152      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001944:	78db      	ldrb	r3, [r3, #3]
 8001946:	2b33      	cmp	r3, #51	; 0x33
 8001948:	d14e      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800194c:	791b      	ldrb	r3, [r3, #4]
 800194e:	2b4d      	cmp	r3, #77	; 0x4d
 8001950:	d14a      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001954:	795b      	ldrb	r3, [r3, #5]
 8001956:	2b41      	cmp	r3, #65	; 0x41
 8001958:	d146      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='A' && rx_buffer[8]=='D'
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800195c:	799b      	ldrb	r3, [r3, #6]
 800195e:	2b4e      	cmp	r3, #78	; 0x4e
 8001960:	d142      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001964:	79db      	ldrb	r3, [r3, #7]
 8001966:	2b41      	cmp	r3, #65	; 0x41
 8001968:	d13e      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800196c:	7a1b      	ldrb	r3, [r3, #8]
 800196e:	2b44      	cmp	r3, #68	; 0x44
 8001970:	d13a      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001974:	7a5b      	ldrb	r3, [r3, #9]
 8001976:	2b50      	cmp	r3, #80	; 0x50
 8001978:	d136      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800197c:	7a9b      	ldrb	r3, [r3, #10]
 800197e:	2b47      	cmp	r3, #71	; 0x47
 8001980:	d132      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001984:	7adb      	ldrb	r3, [r3, #11]
 8001986:	2b4e      	cmp	r3, #78	; 0x4e
 8001988:	d12e      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F') // Command to display Bat 3 Management Use Case General Info
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 800198c:	7b1b      	ldrb	r3, [r3, #12]
 800198e:	2b49      	cmp	r3, #73	; 0x49
 8001990:	d12a      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <commands_from_pi_to_stm+0xe48>)
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	2b46      	cmp	r3, #70	; 0x46
 8001998:	d126      	bne.n	80019e8 <commands_from_pi_to_stm+0xe7c>
	{
		if(BAT_3_MANAGEMENT_FLAG==true)
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <commands_from_pi_to_stm+0xe6c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <commands_from_pi_to_stm+0xe3e>
		{
			BAT_3_MANAGEMENT_GENERAL_INFO_FLAG=true;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <commands_from_pi_to_stm+0xe74>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MANAGEMENT_FLAG==true)
 80019a8:	e16e      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot display Bat 3 Management Use case General Info\n Turn Bat3 Management flag on first\n");
 80019aa:	480e      	ldr	r0, [pc, #56]	; (80019e4 <commands_from_pi_to_stm+0xe78>)
 80019ac:	f006 f930 	bl	8007c10 <puts>
		if(BAT_3_MANAGEMENT_FLAG==true)
 80019b0:	e16a      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
 80019b2:	bf00      	nop
 80019b4:	200002d8 	.word	0x200002d8
 80019b8:	200000ef 	.word	0x200000ef
 80019bc:	200000f0 	.word	0x200000f0
 80019c0:	200000f1 	.word	0x200000f1
 80019c4:	08009234 	.word	0x08009234
 80019c8:	08009004 	.word	0x08009004
 80019cc:	0800926c 	.word	0x0800926c
 80019d0:	080090a0 	.word	0x080090a0
 80019d4:	200000cd 	.word	0x200000cd
 80019d8:	200000f2 	.word	0x200000f2
 80019dc:	080092a4 	.word	0x080092a4
 80019e0:	200000f3 	.word	0x200000f3
 80019e4:	08009300 	.word	0x08009300
		}

	}


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80019e8:	4b74      	ldr	r3, [pc, #464]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b42      	cmp	r3, #66	; 0x42
 80019ee:	d149      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 80019f0:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b41      	cmp	r3, #65	; 0x41
 80019f6:	d145      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 80019f8:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	2b54      	cmp	r3, #84	; 0x54
 80019fe:	d141      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a00:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a02:	78db      	ldrb	r3, [r3, #3]
 8001a04:	2b33      	cmp	r3, #51	; 0x33
 8001a06:	d13d      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a0a:	791b      	ldrb	r3, [r3, #4]
 8001a0c:	2b4d      	cmp	r3, #77	; 0x4d
 8001a0e:	d139      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a12:	795b      	ldrb	r3, [r3, #5]
 8001a14:	2b41      	cmp	r3, #65	; 0x41
 8001a16:	d135      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a1a:	799b      	ldrb	r3, [r3, #6]
 8001a1c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a1e:	d131      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a22:	79db      	ldrb	r3, [r3, #7]
 8001a24:	2b53      	cmp	r3, #83	; 0x53
 8001a26:	d12d      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a28:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	2b48      	cmp	r3, #72	; 0x48
 8001a2e:	d129      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='B' && rx_buffer[11]=='T'
 8001a30:	4b62      	ldr	r3, [pc, #392]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a32:	7a5b      	ldrb	r3, [r3, #9]
 8001a34:	2b50      	cmp	r3, #80	; 0x50
 8001a36:	d125      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a38:	4b60      	ldr	r3, [pc, #384]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a3a:	7a9b      	ldrb	r3, [r3, #10]
 8001a3c:	2b42      	cmp	r3, #66	; 0x42
 8001a3e:	d121      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a42:	7adb      	ldrb	r3, [r3, #11]
 8001a44:	2b54      	cmp	r3, #84	; 0x54
 8001a46:	d11d      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
							&& rx_buffer[12]=='A' && rx_buffer[13]=='L') // Command to start Bat 3 Management use case keep battery alive cycle
 8001a48:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a4a:	7b1b      	ldrb	r3, [r3, #12]
 8001a4c:	2b41      	cmp	r3, #65	; 0x41
 8001a4e:	d119      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
 8001a50:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a52:	7b5b      	ldrb	r3, [r3, #13]
 8001a54:	2b4c      	cmp	r3, #76	; 0x4c
 8001a56:	d115      	bne.n	8001a84 <commands_from_pi_to_stm+0xf18>
	{
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <commands_from_pi_to_stm+0x1054>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	f083 0301 	eor.w	r3, r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <commands_from_pi_to_stm+0xf0a>
 8001a66:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <commands_from_pi_to_stm+0x1058>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <commands_from_pi_to_stm+0xf0a>
		{
			BAT_3_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG=true;
 8001a6e:	4b56      	ldr	r3, [pc, #344]	; (8001bc8 <commands_from_pi_to_stm+0x105c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001a74:	e108      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf("Cannot start Bat 3 'Keep Battery Alive' cycle because\n");
 8001a76:	4855      	ldr	r0, [pc, #340]	; (8001bcc <commands_from_pi_to_stm+0x1060>)
 8001a78:	f006 f8ca 	bl	8007c10 <puts>
			printf("Either the battery is in Shipment Cycle or it has not entered the Management Use Case yet\n");
 8001a7c:	4854      	ldr	r0, [pc, #336]	; (8001bd0 <commands_from_pi_to_stm+0x1064>)
 8001a7e:	f006 f8c7 	bl	8007c10 <puts>
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001a82:	e101      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001a84:	4b4d      	ldr	r3, [pc, #308]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b42      	cmp	r3, #66	; 0x42
 8001a8a:	d149      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a8e:	785b      	ldrb	r3, [r3, #1]
 8001a90:	2b41      	cmp	r3, #65	; 0x41
 8001a92:	d145      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001a94:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a96:	789b      	ldrb	r3, [r3, #2]
 8001a98:	2b54      	cmp	r3, #84	; 0x54
 8001a9a:	d141      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	2b33      	cmp	r3, #51	; 0x33
 8001aa2:	d13d      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001aa4:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001aa6:	791b      	ldrb	r3, [r3, #4]
 8001aa8:	2b4d      	cmp	r3, #77	; 0x4d
 8001aaa:	d139      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001aac:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001aae:	795b      	ldrb	r3, [r3, #5]
 8001ab0:	2b41      	cmp	r3, #65	; 0x41
 8001ab2:	d135      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ab6:	799b      	ldrb	r3, [r3, #6]
 8001ab8:	2b4e      	cmp	r3, #78	; 0x4e
 8001aba:	d131      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001abe:	79db      	ldrb	r3, [r3, #7]
 8001ac0:	2b53      	cmp	r3, #83	; 0x53
 8001ac2:	d12d      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001ac4:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ac6:	7a1b      	ldrb	r3, [r3, #8]
 8001ac8:	2b48      	cmp	r3, #72	; 0x48
 8001aca:	d129      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='Y'
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ace:	7a5b      	ldrb	r3, [r3, #9]
 8001ad0:	2b50      	cmp	r3, #80	; 0x50
 8001ad2:	d125      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001ad4:	4b39      	ldr	r3, [pc, #228]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ad6:	7a9b      	ldrb	r3, [r3, #10]
 8001ad8:	2b43      	cmp	r3, #67	; 0x43
 8001ada:	d121      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ade:	7adb      	ldrb	r3, [r3, #11]
 8001ae0:	2b59      	cmp	r3, #89	; 0x59
 8001ae2:	d11d      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
							&& rx_buffer[12]=='C' && rx_buffer[13]=='L') // Command to start Bat 3 Management use case shipment cycle
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001ae6:	7b1b      	ldrb	r3, [r3, #12]
 8001ae8:	2b43      	cmp	r3, #67	; 0x43
 8001aea:	d119      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001aee:	7b5b      	ldrb	r3, [r3, #13]
 8001af0:	2b4c      	cmp	r3, #76	; 0x4c
 8001af2:	d115      	bne.n	8001b20 <commands_from_pi_to_stm+0xfb4>
	{

		if(BAT_3_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <commands_from_pi_to_stm+0x105c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <commands_from_pi_to_stm+0xfa6>
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <commands_from_pi_to_stm+0x1058>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <commands_from_pi_to_stm+0xfa6>
		{
			BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG = true;
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <commands_from_pi_to_stm+0x1054>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
		if(BAT_3_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001b10:	e0ba      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot Enter Bat 3 in the shipment cycle because\n");
 8001b12:	4830      	ldr	r0, [pc, #192]	; (8001bd4 <commands_from_pi_to_stm+0x1068>)
 8001b14:	f006 f87c 	bl	8007c10 <puts>
			printf("Either the battery is in 'Keep Battery Alive' cycle or it has not entered the Management Use Case yet\n");
 8001b18:	482f      	ldr	r0, [pc, #188]	; (8001bd8 <commands_from_pi_to_stm+0x106c>)
 8001b1a:	f006 f879 	bl	8007c10 <puts>
		if(BAT_3_MANAGEMENT_KEEP_BATTERY_ALIVE_CYCLE_FLAG==false && BAT_3_MANAGEMENT_FLAG==true)
 8001b1e:	e0b3      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}

	}


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b42      	cmp	r3, #66	; 0x42
 8001b26:	d161      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	2b41      	cmp	r3, #65	; 0x41
 8001b2e:	d15d      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b32:	789b      	ldrb	r3, [r3, #2]
 8001b34:	2b54      	cmp	r3, #84	; 0x54
 8001b36:	d159      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b3a:	78db      	ldrb	r3, [r3, #3]
 8001b3c:	2b33      	cmp	r3, #51	; 0x33
 8001b3e:	d155      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	2b4d      	cmp	r3, #77	; 0x4d
 8001b46:	d151      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b48:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b4a:	795b      	ldrb	r3, [r3, #5]
 8001b4c:	2b41      	cmp	r3, #65	; 0x41
 8001b4e:	d14d      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b52:	799b      	ldrb	r3, [r3, #6]
 8001b54:	2b4e      	cmp	r3, #78	; 0x4e
 8001b56:	d149      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b5a:	79db      	ldrb	r3, [r3, #7]
 8001b5c:	2b53      	cmp	r3, #83	; 0x53
 8001b5e:	d145      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b62:	7a1b      	ldrb	r3, [r3, #8]
 8001b64:	2b48      	cmp	r3, #72	; 0x48
 8001b66:	d141      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='C' && rx_buffer[11]=='D'
 8001b68:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b6a:	7a5b      	ldrb	r3, [r3, #9]
 8001b6c:	2b50      	cmp	r3, #80	; 0x50
 8001b6e:	d13d      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b72:	7a9b      	ldrb	r3, [r3, #10]
 8001b74:	2b43      	cmp	r3, #67	; 0x43
 8001b76:	d139      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b7a:	7adb      	ldrb	r3, [r3, #11]
 8001b7c:	2b44      	cmp	r3, #68	; 0x44
 8001b7e:	d135      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
							&& rx_buffer[12]=='3' && rx_buffer[13]=='0')  // Command to start bat 3 management use case -shipment- charge/discharge to 30 % cycle
 8001b80:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b82:	7b1b      	ldrb	r3, [r3, #12]
 8001b84:	2b33      	cmp	r3, #51	; 0x33
 8001b86:	d131      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <commands_from_pi_to_stm+0x1050>)
 8001b8a:	7b5b      	ldrb	r3, [r3, #13]
 8001b8c:	2b30      	cmp	r3, #48	; 0x30
 8001b8e:	d12d      	bne.n	8001bec <commands_from_pi_to_stm+0x1080>
	{
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat3_Management_Shipment_testycycle_Autotestflag==false)
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <commands_from_pi_to_stm+0x1054>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <commands_from_pi_to_stm+0x1042>
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <commands_from_pi_to_stm+0x1070>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <commands_from_pi_to_stm+0x1042>
		{
			Bat3_Management_Shipment_chg_dischg_to_30_percent_flag = true;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <commands_from_pi_to_stm+0x1074>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat3_Management_Shipment_testycycle_Autotestflag==false)
 8001bac:	e06c      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 3 'chg dschg to 30 ' cycle because");
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <commands_from_pi_to_stm+0x1078>)
 8001bb0:	f005 ffa8 	bl	8007b04 <iprintf>
			printf("Either the battery is in shipment autotest cycle or it hasn't entered the shipment cycle mode yet\n");
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <commands_from_pi_to_stm+0x107c>)
 8001bb6:	f006 f82b 	bl	8007c10 <puts>
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat3_Management_Shipment_testycycle_Autotestflag==false)
 8001bba:	e065      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001bbc:	200002d8 	.word	0x200002d8
 8001bc0:	200000f5 	.word	0x200000f5
 8001bc4:	200000f2 	.word	0x200000f2
 8001bc8:	200000f4 	.word	0x200000f4
 8001bcc:	0800935c 	.word	0x0800935c
 8001bd0:	08008ed8 	.word	0x08008ed8
 8001bd4:	08009394 	.word	0x08009394
 8001bd8:	08008f64 	.word	0x08008f64
 8001bdc:	200000f6 	.word	0x200000f6
 8001be0:	200000f7 	.word	0x200000f7
 8001be4:	080093c8 	.word	0x080093c8
 8001be8:	08009004 	.word	0x08009004
		}

	}


	else if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b42      	cmp	r3, #66	; 0x42
 8001bf2:	d149      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	2b41      	cmp	r3, #65	; 0x41
 8001bfa:	d145      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	2b54      	cmp	r3, #84	; 0x54
 8001c02:	d141      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c06:	78db      	ldrb	r3, [r3, #3]
 8001c08:	2b33      	cmp	r3, #51	; 0x33
 8001c0a:	d13d      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	2b4d      	cmp	r3, #77	; 0x4d
 8001c12:	d139      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c16:	795b      	ldrb	r3, [r3, #5]
 8001c18:	2b41      	cmp	r3, #65	; 0x41
 8001c1a:	d135      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
			&& rx_buffer[6]=='N' && rx_buffer[7]=='S' && rx_buffer[8]=='H'
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c1e:	799b      	ldrb	r3, [r3, #6]
 8001c20:	2b4e      	cmp	r3, #78	; 0x4e
 8001c22:	d131      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c26:	79db      	ldrb	r3, [r3, #7]
 8001c28:	2b53      	cmp	r3, #83	; 0x53
 8001c2a:	d12d      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c2e:	7a1b      	ldrb	r3, [r3, #8]
 8001c30:	2b48      	cmp	r3, #72	; 0x48
 8001c32:	d129      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='A' && rx_buffer[11]=='T'
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c36:	7a5b      	ldrb	r3, [r3, #9]
 8001c38:	2b50      	cmp	r3, #80	; 0x50
 8001c3a:	d125      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c3e:	7a9b      	ldrb	r3, [r3, #10]
 8001c40:	2b41      	cmp	r3, #65	; 0x41
 8001c42:	d121      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c46:	7adb      	ldrb	r3, [r3, #11]
 8001c48:	2b54      	cmp	r3, #84	; 0x54
 8001c4a:	d11d      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')  // Command to start bat 3 management use case - Shipment autotest
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c4e:	7b1b      	ldrb	r3, [r3, #12]
 8001c50:	2b53      	cmp	r3, #83	; 0x53
 8001c52:	d119      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <commands_from_pi_to_stm+0x1120>)
 8001c56:	7b5b      	ldrb	r3, [r3, #13]
 8001c58:	2b54      	cmp	r3, #84	; 0x54
 8001c5a:	d115      	bne.n	8001c88 <commands_from_pi_to_stm+0x111c>
	{
		if(BAT3_MANAGEMENT_SHIPMENT_CYCLE_FLAG == true && Bat3_Management_Shipment_chg_dischg_to_30_percent_flag==false)
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <commands_from_pi_to_stm+0x1124>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00a      	beq.n	8001c7a <commands_from_pi_to_stm+0x110e>
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <commands_from_pi_to_stm+0x1128>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <commands_from_pi_to_stm+0x110e>
		{
			Bat3_Management_Shipment_testycycle_Autotestflag=true;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <commands_from_pi_to_stm+0x112c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e006      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
		}
		else
		{
			printf(" Cannot start Bat 3 'Shipment auto test cycle' because");
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <commands_from_pi_to_stm+0x1130>)
 8001c7c:	f005 ff42 	bl	8007b04 <iprintf>
			printf("Either the battery is in 'shipment chg/dschg to 30' cycle or it hasn't entered the shipment cycle mode yet\n ");
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <commands_from_pi_to_stm+0x1134>)
 8001c82:	f005 ff3f 	bl	8007b04 <iprintf>





}
 8001c86:	e7ff      	b.n	8001c88 <commands_from_pi_to_stm+0x111c>
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200002d8 	.word	0x200002d8
 8001c90:	200000f5 	.word	0x200000f5
 8001c94:	200000f7 	.word	0x200000f7
 8001c98:	200000f6 	.word	0x200000f6
 8001c9c:	08009400 	.word	0x08009400
 8001ca0:	080090a0 	.word	0x080090a0

08001ca4 <Timer_15min>:
extern uint16_t _bat3_counter_var;	//   Variable as a counter
extern bool _bat3_15min_wait_over;


void Timer_15min()
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	if(_bat1timerfunc==true)
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <Timer_15min+0x80>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <Timer_15min+0x2a>
	{
		_bat1_counter_var++;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <Timer_15min+0x84>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <Timer_15min+0x84>)
 8001cba:	801a      	strh	r2, [r3, #0]
		if(_bat1_counter_var==6000)
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <Timer_15min+0x84>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f241 7270 	movw	r2, #6000	; 0x1770
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <Timer_15min+0x2a>
		{
			_bat1_15min_wait_over = true;
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <Timer_15min+0x88>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		}
	}


	if(_bat2timerfunc==true)
 8001cce:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <Timer_15min+0x8c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00e      	beq.n	8001cf4 <Timer_15min+0x50>
	{
		_bat2_counter_var++;
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <Timer_15min+0x90>)
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <Timer_15min+0x90>)
 8001ce0:	801a      	strh	r2, [r3, #0]
		if(_bat2_counter_var==6000)
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <Timer_15min+0x90>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f241 7270 	movw	r2, #6000	; 0x1770
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d102      	bne.n	8001cf4 <Timer_15min+0x50>
		{
			_bat2_15min_wait_over = true;
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <Timer_15min+0x94>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(_bat3timerfunc==true)
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <Timer_15min+0x98>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00e      	beq.n	8001d1a <Timer_15min+0x76>
		{
			_bat3_counter_var++;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <Timer_15min+0x9c>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <Timer_15min+0x9c>)
 8001d06:	801a      	strh	r2, [r3, #0]
			if(_bat3_counter_var==6000)
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <Timer_15min+0x9c>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	f241 7270 	movw	r2, #6000	; 0x1770
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d102      	bne.n	8001d1a <Timer_15min+0x76>
			{
				_bat3_15min_wait_over = true;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <Timer_15min+0xa0>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]





}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	2000008c 	.word	0x2000008c
 8001d28:	2000008e 	.word	0x2000008e
 8001d2c:	2000008d 	.word	0x2000008d
 8001d30:	200000aa 	.word	0x200000aa
 8001d34:	200000ac 	.word	0x200000ac
 8001d38:	200000ab 	.word	0x200000ab
 8001d3c:	200000c8 	.word	0x200000c8
 8001d40:	200000ca 	.word	0x200000ca
 8001d44:	200000c9 	.word	0x200000c9

08001d48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001d60:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001d68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00b      	beq.n	8001d88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001d70:	e000      	b.n	8001d74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001d72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001d74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f9      	beq.n	8001d72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001d7e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e009      	b.n	8001dc0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	1c5a      	adds	r2, r3, #1
 8001db0:	60ba      	str	r2, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ffc7 	bl	8001d48 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	dbf1      	blt.n	8001dac <_write+0x16>
	return len;
 8001dc8:	687b      	ldr	r3, [r7, #4]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd8:	f000 fe81 	bl	8002ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ddc:	f000 f864 	bl	8001ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de0:	f000 face 	bl	8002380 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001de4:	f000 f8f2 	bl	8001fcc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001de8:	f000 f9fe 	bl	80021e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001dec:	f000 fa4a 	bl	8002284 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001df0:	f000 fa96 	bl	8002320 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001df4:	f000 f9aa 	bl	800214c <MX_TIM2_Init>
  MX_I2C2_Init();
 8001df8:	f000 f928 	bl	800204c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001dfc:	f000 f966 	bl	80020cc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);        // Timer 4 for providing delay
 8001e00:	4821      	ldr	r0, [pc, #132]	; (8001e88 <main+0xb4>)
 8001e02:	f004 f897 	bl	8005f34 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);	   // Timer 3 for waiting purpose in the maintenance case
 8001e06:	4821      	ldr	r0, [pc, #132]	; (8001e8c <main+0xb8>)
 8001e08:	f004 f904 	bl	8006014 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	   // Timer 2 to update the maintenance use case parameters periodically
 8001e0c:	4820      	ldr	r0, [pc, #128]	; (8001e90 <main+0xbc>)
 8001e0e:	f004 f901 	bl	8006014 <HAL_TIM_Base_Start_IT>



	if(HAL_I2C_IsDeviceReady(&hi2c1,0x16, 5, 10)==HAL_OK)   // BAT 1
 8001e12:	230a      	movs	r3, #10
 8001e14:	2205      	movs	r2, #5
 8001e16:	2116      	movs	r1, #22
 8001e18:	481e      	ldr	r0, [pc, #120]	; (8001e94 <main+0xc0>)
 8001e1a:	f001 fbc9 	bl	80035b0 <HAL_I2C_IsDeviceReady>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <main+0x5a>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2180      	movs	r1, #128	; 0x80
 8001e28:	481b      	ldr	r0, [pc, #108]	; (8001e98 <main+0xc4>)
 8001e2a:	f001 fa37 	bl	800329c <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c2,0x16, 5, 10)==HAL_OK)   // BAT 2
 8001e2e:	230a      	movs	r3, #10
 8001e30:	2205      	movs	r2, #5
 8001e32:	2116      	movs	r1, #22
 8001e34:	4819      	ldr	r0, [pc, #100]	; (8001e9c <main+0xc8>)
 8001e36:	f001 fbbb 	bl	80035b0 <HAL_I2C_IsDeviceReady>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <main+0x78>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e46:	4814      	ldr	r0, [pc, #80]	; (8001e98 <main+0xc4>)
 8001e48:	f001 fa28 	bl	800329c <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c3,0x16, 5, 10)==HAL_OK)  // BAT 3
 8001e4c:	230a      	movs	r3, #10
 8001e4e:	2205      	movs	r2, #5
 8001e50:	2116      	movs	r1, #22
 8001e52:	4813      	ldr	r0, [pc, #76]	; (8001ea0 <main+0xcc>)
 8001e54:	f001 fbac 	bl	80035b0 <HAL_I2C_IsDeviceReady>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d104      	bne.n	8001e68 <main+0x94>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2101      	movs	r1, #1
 8001e62:	480d      	ldr	r0, [pc, #52]	; (8001e98 <main+0xc4>)
 8001e64:	f001 fa1a 	bl	800329c <HAL_GPIO_WritePin>

	}

	//printf("Started \n");

	__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <main+0xd0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <main+0xd0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	601a      	str	r2, [r3, #0]
//		 update_temperature_during_management_bat3();
//		 update_current_during_management_bat3();
//		substatemachine_battery1_management();
//		substatemachine_battery2_management();
//		substatemachine_battery3_management();
		update_current_during_management_bat1();
 8001e78:	f7fe fc2a 	bl	80006d0 <update_current_during_management_bat1>
		update_current_during_management_bat2();
 8001e7c:	f7fe fd1e 	bl	80008bc <update_current_during_management_bat2>
		update_current_during_management_bat3();
 8001e80:	f7fe fe12 	bl	8000aa8 <update_current_during_management_bat3>
		update_current_during_management_bat1();
 8001e84:	e7f8      	b.n	8001e78 <main+0xa4>
 8001e86:	bf00      	nop
 8001e88:	20000188 	.word	0x20000188
 8001e8c:	20000288 	.word	0x20000288
 8001e90:	200002f0 	.word	0x200002f0
 8001e94:	200001e4 	.word	0x200001e4
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	20000230 	.word	0x20000230
 8001ea0:	20000138 	.word	0x20000138
 8001ea4:	2000033c 	.word	0x2000033c

08001ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b0b4      	sub	sp, #208	; 0xd0
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eb2:	2230      	movs	r2, #48	; 0x30
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fe1c 	bl	8007af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	2284      	movs	r2, #132	; 0x84
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 fe0d 	bl	8007af4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <SystemClock_Config+0x118>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a38      	ldr	r2, [pc, #224]	; (8001fc0 <SystemClock_Config+0x118>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <SystemClock_Config+0x118>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ef2:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <SystemClock_Config+0x11c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <SystemClock_Config+0x11c>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <SystemClock_Config+0x11c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f0a:	603b      	str	r3, [r7, #0]
 8001f0c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f32:	2348      	movs	r3, #72	; 0x48
 8001f34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f44:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 ff05 	bl	8004d58 <HAL_RCC_OscConfig>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001f54:	f000 fae2 	bl	800251c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f58:	230f      	movs	r3, #15
 8001f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 f98e 	bl	80052a0 <HAL_RCC_ClockConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001f8a:	f000 fac7 	bl	800251c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <SystemClock_Config+0x120>)
 8001f90:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa2:	f107 0308 	add.w	r3, r7, #8
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 fb7c 	bl	80056a4 <HAL_RCCEx_PeriphCLKConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001fb2:	f000 fab3 	bl	800251c <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	37d0      	adds	r7, #208	; 0xd0
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	0001c080 	.word	0x0001c080

08001fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <MX_I2C1_Init+0x74>)
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <MX_I2C1_Init+0x78>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <MX_I2C1_Init+0x74>)
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <MX_I2C1_Init+0x7c>)
 8001fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	; (8002040 <MX_I2C1_Init+0x74>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <MX_I2C1_Init+0x74>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <MX_I2C1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_I2C1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_I2C1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_I2C1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_I2C1_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <MX_I2C1_Init+0x74>)
 8002008:	f001 f962 	bl	80032d0 <HAL_I2C_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002012:	f000 fa83 	bl	800251c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <MX_I2C1_Init+0x74>)
 800201a:	f002 fe05 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002024:	f000 fa7a 	bl	800251c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002028:	2100      	movs	r1, #0
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_I2C1_Init+0x74>)
 800202c:	f002 fe47 	bl	8004cbe <HAL_I2CEx_ConfigDigitalFilter>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002036:	f000 fa71 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001e4 	.word	0x200001e4
 8002044:	40005400 	.word	0x40005400
 8002048:	00808cd2 	.word	0x00808cd2

0800204c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <MX_I2C2_Init+0x78>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <MX_I2C2_Init+0x7c>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_I2C2_Init+0x74>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002064:	2201      	movs	r2, #1
 8002066:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <MX_I2C2_Init+0x74>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002070:	2200      	movs	r2, #0
 8002072:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_I2C2_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002086:	480e      	ldr	r0, [pc, #56]	; (80020c0 <MX_I2C2_Init+0x74>)
 8002088:	f001 f922 	bl	80032d0 <HAL_I2C_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002092:	f000 fa43 	bl	800251c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002096:	2100      	movs	r1, #0
 8002098:	4809      	ldr	r0, [pc, #36]	; (80020c0 <MX_I2C2_Init+0x74>)
 800209a:	f002 fdc5 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020a4:	f000 fa3a 	bl	800251c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020a8:	2100      	movs	r1, #0
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_I2C2_Init+0x74>)
 80020ac:	f002 fe07 	bl	8004cbe <HAL_I2CEx_ConfigDigitalFilter>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80020b6:	f000 fa31 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000230 	.word	0x20000230
 80020c4:	40005800 	.word	0x40005800
 80020c8:	00808cd2 	.word	0x00808cd2

080020cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <MX_I2C3_Init+0x74>)
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <MX_I2C3_Init+0x78>)
 80020d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00808CD2;
 80020d6:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_I2C3_Init+0x74>)
 80020d8:	4a1b      	ldr	r2, [pc, #108]	; (8002148 <MX_I2C3_Init+0x7c>)
 80020da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <MX_I2C3_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_I2C3_Init+0x74>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <MX_I2C3_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80020ee:	4b14      	ldr	r3, [pc, #80]	; (8002140 <MX_I2C3_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_I2C3_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_I2C3_Init+0x74>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_I2C3_Init+0x74>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002106:	480e      	ldr	r0, [pc, #56]	; (8002140 <MX_I2C3_Init+0x74>)
 8002108:	f001 f8e2 	bl	80032d0 <HAL_I2C_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002112:	f000 fa03 	bl	800251c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002116:	2100      	movs	r1, #0
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <MX_I2C3_Init+0x74>)
 800211a:	f002 fd85 	bl	8004c28 <HAL_I2CEx_ConfigAnalogFilter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 f9fa 	bl	800251c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002128:	2100      	movs	r1, #0
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_I2C3_Init+0x74>)
 800212c:	f002 fdc7 	bl	8004cbe <HAL_I2CEx_ConfigDigitalFilter>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002136:	f000 f9f1 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000138 	.word	0x20000138
 8002144:	40005c00 	.word	0x40005c00
 8002148:	00808cd2 	.word	0x00808cd2

0800214c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0310 	add.w	r3, r7, #16
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800216a:	4b1e      	ldr	r3, [pc, #120]	; (80021e4 <MX_TIM2_Init+0x98>)
 800216c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <MX_TIM2_Init+0x98>)
 8002174:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002178:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <MX_TIM2_Init+0x98>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_TIM2_Init+0x98>)
 8002182:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002186:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_TIM2_Init+0x98>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_TIM2_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002194:	4813      	ldr	r0, [pc, #76]	; (80021e4 <MX_TIM2_Init+0x98>)
 8002196:	f003 fe75 	bl	8005e84 <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80021a0:	f000 f9bc 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <MX_TIM2_Init+0x98>)
 80021b2:	f004 f8c7 	bl	8006344 <HAL_TIM_ConfigClockSource>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80021bc:	f000 f9ae 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_TIM2_Init+0x98>)
 80021ce:	f004 fae1 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80021d8:	f000 f9a0 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200002f0 	.word	0x200002f0

080021e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0310 	add.w	r3, r7, #16
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_TIM3_Init+0x94>)
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <MX_TIM3_Init+0x98>)
 800220a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <MX_TIM3_Init+0x94>)
 800220e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002212:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <MX_TIM3_Init+0x94>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <MX_TIM3_Init+0x94>)
 800221c:	2263      	movs	r2, #99	; 0x63
 800221e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_TIM3_Init+0x94>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_TIM3_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800222c:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_TIM3_Init+0x94>)
 800222e:	f003 fe29 	bl	8005e84 <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002238:	f000 f970 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4619      	mov	r1, r3
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_TIM3_Init+0x94>)
 800224a:	f004 f87b 	bl	8006344 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002254:	f000 f962 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_TIM3_Init+0x94>)
 8002266:	f004 fa95 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002270:	f000 f954 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000288 	.word	0x20000288
 8002280:	40000400 	.word	0x40000400

08002284 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <MX_TIM4_Init+0x94>)
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <MX_TIM4_Init+0x98>)
 80022a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_TIM4_Init+0x94>)
 80022aa:	2247      	movs	r2, #71	; 0x47
 80022ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_TIM4_Init+0x94>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_TIM4_Init+0x94>)
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_TIM4_Init+0x94>)
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_TIM4_Init+0x94>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022c8:	4813      	ldr	r0, [pc, #76]	; (8002318 <MX_TIM4_Init+0x94>)
 80022ca:	f003 fddb 	bl	8005e84 <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80022d4:	f000 f922 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4619      	mov	r1, r3
 80022e4:	480c      	ldr	r0, [pc, #48]	; (8002318 <MX_TIM4_Init+0x94>)
 80022e6:	f004 f82d 	bl	8006344 <HAL_TIM_ConfigClockSource>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80022f0:	f000 f914 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_TIM4_Init+0x94>)
 8002302:	f004 fa47 	bl	8006794 <HAL_TIMEx_MasterConfigSynchronization>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800230c:	f000 f906 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	3720      	adds	r7, #32
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000188 	.word	0x20000188
 800231c:	40000800 	.word	0x40000800

08002320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <MX_USART2_UART_Init+0x5c>)
 8002328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800232c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART2_UART_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART2_UART_Init+0x58>)
 8002364:	f004 fac2 	bl	80068ec <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800236e:	f000 f8d5 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000033c 	.word	0x2000033c
 800237c:	40004400 	.word	0x40004400

08002380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <MX_GPIO_Init+0x13c>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a48      	ldr	r2, [pc, #288]	; (80024bc <MX_GPIO_Init+0x13c>)
 800239c:	f043 0320 	orr.w	r3, r3, #32
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a42      	ldr	r2, [pc, #264]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b40      	ldr	r3, [pc, #256]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a3c      	ldr	r2, [pc, #240]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a36      	ldr	r2, [pc, #216]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a30      	ldr	r2, [pc, #192]	; (80024bc <MX_GPIO_Init+0x13c>)
 80023fc:	f043 0308 	orr.w	r3, r3, #8
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <MX_GPIO_Init+0x13c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	2160      	movs	r1, #96	; 0x60
 8002412:	482b      	ldr	r0, [pc, #172]	; (80024c0 <MX_GPIO_Init+0x140>)
 8002414:	f000 ff42 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002418:	2200      	movs	r2, #0
 800241a:	f247 0181 	movw	r1, #28801	; 0x7081
 800241e:	4829      	ldr	r0, [pc, #164]	; (80024c4 <MX_GPIO_Init+0x144>)
 8002420:	f000 ff3c 	bl	800329c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7180 	mov.w	r1, #256	; 0x100
 800242a:	4827      	ldr	r0, [pc, #156]	; (80024c8 <MX_GPIO_Init+0x148>)
 800242c:	f000 ff36 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	4825      	ldr	r0, [pc, #148]	; (80024cc <MX_GPIO_Init+0x14c>)
 8002438:	f000 ff30 	bl	800329c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	481b      	ldr	r0, [pc, #108]	; (80024c0 <MX_GPIO_Init+0x140>)
 8002454:	f000 fd76 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002458:	f247 0381 	movw	r3, #28801	; 0x7081
 800245c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	4814      	ldr	r0, [pc, #80]	; (80024c4 <MX_GPIO_Init+0x144>)
 8002472:	f000 fd67 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4619      	mov	r1, r3
 800248e:	480e      	ldr	r0, [pc, #56]	; (80024c8 <MX_GPIO_Init+0x148>)
 8002490:	f000 fd58 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4807      	ldr	r0, [pc, #28]	; (80024cc <MX_GPIO_Init+0x14c>)
 80024ae:	f000 fd49 	bl	8002f44 <HAL_GPIO_Init>

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020c00 	.word	0x40020c00
 80024cc:	40020000 	.word	0x40020000

080024d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 16-bit TIM3 is used as an interrupt - every 10 ms
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d101      	bne.n	80024e4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Timer_15min();
 80024e0:	f7ff fbe0 	bl	8001ca4 <Timer_15min>

	}

	if(htim==&htim2)  // Configured as an interrupt - every 100 ms
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a07      	ldr	r2, [pc, #28]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d105      	bne.n	80024f8 <HAL_TIM_PeriodElapsedCallback+0x28>
	{


		update_periodic_flags_during_maintenance_bat1();
 80024ec:	f7fe f85c 	bl	80005a8 <update_periodic_flags_during_maintenance_bat1>
		update_periodic_flags_during_maintenance_bat2();
 80024f0:	f7fe f950 	bl	8000794 <update_periodic_flags_during_maintenance_bat2>
		update_periodic_flags_during_maintenance_bat3();
 80024f4:	f7fe fa44 	bl	8000980 <update_periodic_flags_during_maintenance_bat3>

	}
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000288 	.word	0x20000288
 8002504:	200002f0 	.word	0x200002f0

08002508 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	// UNUSED(huart);


	commands_from_pi_to_stm();
 8002510:	f7fe fb2c 	bl	8000b6c <commands_from_pi_to_stm>


}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002524:	e7fe      	b.n	8002524 <Error_Handler+0x8>
	...

08002528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_MspInit+0x44>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_MspInit+0x44>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_MspInit+0x44>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_MspInit+0x44>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_MspInit+0x44>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_MspInit+0x44>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a60      	ldr	r2, [pc, #384]	; (8002710 <HAL_I2C_MspInit+0x1a0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d131      	bne.n	80025f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	4b60      	ldr	r3, [pc, #384]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80025aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	2312      	movs	r3, #18
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b4:	2301      	movs	r3, #1
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025bc:	2304      	movs	r3, #4
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4854      	ldr	r0, [pc, #336]	; (8002718 <HAL_I2C_MspInit+0x1a8>)
 80025c8:	f000 fcbc 	bl	8002f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025cc:	4b51      	ldr	r3, [pc, #324]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80025d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2102      	movs	r1, #2
 80025e8:	201f      	movs	r0, #31
 80025ea:	f000 fbd4 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025ee:	201f      	movs	r0, #31
 80025f0:	f000 fbed 	bl	8002dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025f4:	e088      	b.n	8002708 <HAL_I2C_MspInit+0x198>
  else if(hi2c->Instance==I2C2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_I2C_MspInit+0x1ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d130      	bne.n	8002662 <HAL_I2C_MspInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002600:	4b44      	ldr	r3, [pc, #272]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a43      	ldr	r2, [pc, #268]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	6313      	str	r3, [r2, #48]	; 0x30
 800260c:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002618:	2303      	movs	r3, #3
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261c:	2312      	movs	r3, #18
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002628:	2304      	movs	r3, #4
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002630:	4619      	mov	r1, r3
 8002632:	483b      	ldr	r0, [pc, #236]	; (8002720 <HAL_I2C_MspInit+0x1b0>)
 8002634:	f000 fc86 	bl	8002f44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002638:	4b36      	ldr	r3, [pc, #216]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a35      	ldr	r2, [pc, #212]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800263e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 2, 0);
 8002650:	2200      	movs	r2, #0
 8002652:	2102      	movs	r1, #2
 8002654:	2021      	movs	r0, #33	; 0x21
 8002656:	f000 fb9e 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800265a:	2021      	movs	r0, #33	; 0x21
 800265c:	f000 fbb7 	bl	8002dce <HAL_NVIC_EnableIRQ>
}
 8002660:	e052      	b.n	8002708 <HAL_I2C_MspInit+0x198>
  else if(hi2c->Instance==I2C3)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <HAL_I2C_MspInit+0x1b4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d14d      	bne.n	8002708 <HAL_I2C_MspInit+0x198>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a28      	ldr	r2, [pc, #160]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6313      	str	r3, [r2, #48]	; 0x30
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800269c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a2:	2312      	movs	r3, #18
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026ae:	2304      	movs	r3, #4
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	481b      	ldr	r0, [pc, #108]	; (8002728 <HAL_I2C_MspInit+0x1b8>)
 80026ba:	f000 fc43 	bl	8002f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c4:	2312      	movs	r3, #18
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026d0:	2304      	movs	r3, #4
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	4619      	mov	r1, r3
 80026da:	4814      	ldr	r0, [pc, #80]	; (800272c <HAL_I2C_MspInit+0x1bc>)
 80026dc:	f000 fc32 	bl	8002f44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80026e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_I2C_MspInit+0x1a4>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2102      	movs	r1, #2
 80026fc:	2048      	movs	r0, #72	; 0x48
 80026fe:	f000 fb4a 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002702:	2048      	movs	r0, #72	; 0x48
 8002704:	f000 fb63 	bl	8002dce <HAL_NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3738      	adds	r7, #56	; 0x38
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40005400 	.word	0x40005400
 8002714:	40023800 	.word	0x40023800
 8002718:	40020400 	.word	0x40020400
 800271c:	40005800 	.word	0x40005800
 8002720:	40021400 	.word	0x40021400
 8002724:	40005c00 	.word	0x40005c00
 8002728:	40020800 	.word	0x40020800
 800272c:	40020000 	.word	0x40020000

08002730 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d114      	bne.n	800276c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a21      	ldr	r2, [pc, #132]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2102      	movs	r1, #2
 800275e:	201c      	movs	r0, #28
 8002760:	f000 fb19 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002764:	201c      	movs	r0, #28
 8002766:	f000 fb32 	bl	8002dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800276a:	e02a      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_TIM_Base_MspInit+0xa0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d114      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2101      	movs	r1, #1
 8002792:	201d      	movs	r0, #29
 8002794:	f000 faff 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002798:	201d      	movs	r0, #29
 800279a:	f000 fb18 	bl	8002dce <HAL_NVIC_EnableIRQ>
}
 800279e:	e010      	b.n	80027c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_TIM_Base_MspInit+0xa4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10b      	bne.n	80027c2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_TIM_Base_MspInit+0x9c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800

080027d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_UART_MspInit+0x8c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12f      	bne.n	800285a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x90>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <HAL_UART_MspInit+0x90>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b18      	ldr	r3, [pc, #96]	; (8002868 <HAL_UART_MspInit+0x90>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_UART_MspInit+0x90>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_UART_MspInit+0x90>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_UART_MspInit+0x90>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282a:	230c      	movs	r3, #12
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283a:	2307      	movs	r3, #7
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <HAL_UART_MspInit+0x94>)
 8002846:	f000 fb7d 	bl	8002f44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2026      	movs	r0, #38	; 0x26
 8002850:	f000 faa1 	bl	8002d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002854:	2026      	movs	r0, #38	; 0x26
 8002856:	f000 faba 	bl	8002dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40004400 	.word	0x40004400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000

08002870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <NMI_Handler+0x4>
	...

08002878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//SCB->CFSR=0x00000000;
//	printf("Enter Hard fault\n");
//	SCB->AIRCR=(uint32_t)(0x05FA0004UL); // This value resets the MCU
//	SCB->AIRCR=(uint32_t)(0x05FA0004);  // This value resets the MCU as well
	SCB->AIRCR=(uint32_t)(0x05FA0001);
 800287c:	4b01      	ldr	r3, [pc, #4]	; (8002884 <HardFault_Handler+0xc>)
 800287e:	4a02      	ldr	r2, [pc, #8]	; (8002888 <HardFault_Handler+0x10>)
 8002880:	60da      	str	r2, [r3, #12]
//	                            SCB_AIRCR_SYSRESETREQ_Msk   );

	//  __DSB();

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <HardFault_Handler+0xa>
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	05fa0001 	.word	0x05fa0001

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler+0x4>

08002892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler+0x4>

0800289e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f000 f944 	bl	8002b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028d8:	4802      	ldr	r0, [pc, #8]	; (80028e4 <TIM2_IRQHandler+0x10>)
 80028da:	f003 fc13 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002f0 	.word	0x200002f0

080028e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028ec:	4802      	ldr	r0, [pc, #8]	; (80028f8 <TIM3_IRQHandler+0x10>)
 80028ee:	f003 fc09 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000288 	.word	0x20000288

080028fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <I2C1_EV_IRQHandler+0x10>)
 8002902:	f000 ff5d 	bl	80037c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200001e4 	.word	0x200001e4

08002910 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002914:	4802      	ldr	r0, [pc, #8]	; (8002920 <I2C2_EV_IRQHandler+0x10>)
 8002916:	f000 ff53 	bl	80037c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000230 	.word	0x20000230

08002924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002928:	4804      	ldr	r0, [pc, #16]	; (800293c <USART2_IRQHandler+0x18>)
 800292a:	f004 f8c7 	bl	8006abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 14);
 800292e:	220e      	movs	r2, #14
 8002930:	4903      	ldr	r1, [pc, #12]	; (8002940 <USART2_IRQHandler+0x1c>)
 8002932:	4802      	ldr	r0, [pc, #8]	; (800293c <USART2_IRQHandler+0x18>)
 8002934:	f004 f884 	bl	8006a40 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000033c 	.word	0x2000033c
 8002940:	200002d8 	.word	0x200002d8

08002944 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <I2C3_EV_IRQHandler+0x10>)
 800294a:	f000 ff39 	bl	80037c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000138 	.word	0x20000138

08002958 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e00a      	b.n	8002980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800296a:	f3af 8000 	nop.w
 800296e:	4601      	mov	r1, r0
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	60ba      	str	r2, [r7, #8]
 8002976:	b2ca      	uxtb	r2, r1
 8002978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	dbf0      	blt.n	800296a <_read+0x12>
	}

return len;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
	return -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ba:	605a      	str	r2, [r3, #4]
	return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_isatty>:

int _isatty(int file)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
	return 1;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
	return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f005 f838 	bl	8007aa0 <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20050000 	.word	0x20050000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	200000f8 	.word	0x200000f8
 8002a64:	200003d8 	.word	0x200003d8

08002a68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <SystemInit+0x20>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <SystemInit+0x20>)
 8002a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a90:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a92:	490e      	ldr	r1, [pc, #56]	; (8002acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa8:	4c0b      	ldr	r4, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ab6:	f7ff ffd7 	bl	8002a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aba:	f004 fff7 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002abe:	f7ff f989 	bl	8001dd4 <main>
  bx  lr    
 8002ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ad0:	080094f8 	.word	0x080094f8
  ldr r2, =_sbss
 8002ad4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002ad8:	200003d4 	.word	0x200003d4

08002adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC_IRQHandler>

08002ade <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	f000 f94c 	bl	8002d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f000 f805 	bl	8002af8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002aee:	f7ff fd1b 	bl	8002528 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x54>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x58>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f967 	bl	8002dea <HAL_SYSTICK_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00e      	b.n	8002b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b0f      	cmp	r3, #15
 8002b2a:	d80a      	bhi.n	8002b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f000 f92f 	bl	8002d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <HAL_InitTick+0x5c>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20000004 	.word	0x20000004

08002b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x20>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x24>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_IncTick+0x24>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	200003c0 	.word	0x200003c0

08002b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return uwTick;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_GetTick+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	200003c0 	.word	0x200003c0

08002b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff ffee 	bl	8002b80 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d005      	beq.n	8002bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_Delay+0x44>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d8f7      	bhi.n	8002bc0 <HAL_Delay+0x28>
  {
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008

08002be0 <__NVIC_SetPriorityGrouping>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <__NVIC_SetPriorityGrouping+0x40>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <__NVIC_SetPriorityGrouping+0x40>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	05fa0000 	.word	0x05fa0000

08002c28 <__NVIC_GetPriorityGrouping>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__NVIC_GetPriorityGrouping+0x18>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0307 	and.w	r3, r3, #7
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_EnableIRQ>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <SysTick_Config>:
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4c:	d301      	bcc.n	8002d52 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00f      	b.n	8002d72 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <SysTick_Config+0x40>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	f7ff ff8e 	bl	8002c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <SysTick_Config+0x40>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <SysTick_Config+0x40>)
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	e000e010 	.word	0xe000e010

08002d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff29 	bl	8002be0 <__NVIC_SetPriorityGrouping>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da8:	f7ff ff3e 	bl	8002c28 <__NVIC_GetPriorityGrouping>
 8002dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f7ff ff8e 	bl	8002cd4 <NVIC_EncodePriority>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff5d 	bl	8002c80 <__NVIC_SetPriority>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff31 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffa2 	bl	8002d3c <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff feb6 	bl	8002b80 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d008      	beq.n	8002e34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e052      	b.n	8002eda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0216 	bic.w	r2, r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d103      	bne.n	8002e64 <HAL_DMA_Abort+0x62>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0208 	bic.w	r2, r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e84:	e013      	b.n	8002eae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e86:	f7ff fe7b 	bl	8002b80 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d90c      	bls.n	8002eae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e015      	b.n	8002eda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e4      	bne.n	8002e86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	223f      	movs	r2, #63	; 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e00c      	b.n	8002f1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2205      	movs	r2, #5
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f34:	b2db      	uxtb	r3, r3
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	e175      	b.n	8003250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	f040 8164 	bne.w	800324a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d00b      	beq.n	8002fa2 <HAL_GPIO_Init+0x5e>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d007      	beq.n	8002fa2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f96:	2b11      	cmp	r3, #17
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	2203      	movs	r2, #3
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x100>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d123      	bne.n	800308c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	220f      	movs	r2, #15
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	08da      	lsrs	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3208      	adds	r2, #8
 8003086:	69b9      	ldr	r1, [r7, #24]
 8003088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0203 	and.w	r2, r3, #3
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80be 	beq.w	800324a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	4a65      	ldr	r2, [pc, #404]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d8:	6453      	str	r3, [r2, #68]	; 0x44
 80030da:	4b63      	ldr	r3, [pc, #396]	; (8003268 <HAL_GPIO_Init+0x324>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030e6:	4a61      	ldr	r2, [pc, #388]	; (800326c <HAL_GPIO_Init+0x328>)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	220f      	movs	r2, #15
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	4013      	ands	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_GPIO_Init+0x32c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d037      	beq.n	8003182 <HAL_GPIO_Init+0x23e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a57      	ldr	r2, [pc, #348]	; (8003274 <HAL_GPIO_Init+0x330>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_GPIO_Init+0x23a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a56      	ldr	r2, [pc, #344]	; (8003278 <HAL_GPIO_Init+0x334>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d02b      	beq.n	800317a <HAL_GPIO_Init+0x236>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a55      	ldr	r2, [pc, #340]	; (800327c <HAL_GPIO_Init+0x338>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x232>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a54      	ldr	r2, [pc, #336]	; (8003280 <HAL_GPIO_Init+0x33c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x22e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_GPIO_Init+0x340>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x22a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_GPIO_Init+0x344>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x226>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_GPIO_Init+0x348>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x222>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a50      	ldr	r2, [pc, #320]	; (8003290 <HAL_GPIO_Init+0x34c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x21e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4f      	ldr	r2, [pc, #316]	; (8003294 <HAL_GPIO_Init+0x350>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x21a>
 800315a:	2309      	movs	r3, #9
 800315c:	e012      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800315e:	230a      	movs	r3, #10
 8003160:	e010      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003162:	2308      	movs	r3, #8
 8003164:	e00e      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003166:	2307      	movs	r3, #7
 8003168:	e00c      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800316a:	2306      	movs	r3, #6
 800316c:	e00a      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800316e:	2305      	movs	r3, #5
 8003170:	e008      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003172:	2304      	movs	r3, #4
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003176:	2303      	movs	r3, #3
 8003178:	e004      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800317a:	2302      	movs	r3, #2
 800317c:	e002      	b.n	8003184 <HAL_GPIO_Init+0x240>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x240>
 8003182:	2300      	movs	r3, #0
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	f002 0203 	and.w	r2, r2, #3
 800318a:	0092      	lsls	r2, r2, #2
 800318c:	4093      	lsls	r3, r2
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003194:	4935      	ldr	r1, [pc, #212]	; (800326c <HAL_GPIO_Init+0x328>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031c6:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031cc:	4b32      	ldr	r3, [pc, #200]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031f6:	4b28      	ldr	r3, [pc, #160]	; (8003298 <HAL_GPIO_Init+0x354>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800321a:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_GPIO_Init+0x354>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_GPIO_Init+0x354>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_GPIO_Init+0x354>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b0f      	cmp	r3, #15
 8003254:	f67f ae86 	bls.w	8002f64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40013800 	.word	0x40013800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	40021c00 	.word	0x40021c00
 8003290:	40022000 	.word	0x40022000
 8003294:	40022400 	.word	0x40022400
 8003298:	40013c00 	.word	0x40013c00

0800329c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
 80032a8:	4613      	mov	r3, r2
 80032aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032ac:	787b      	ldrb	r3, [r7, #1]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80032b8:	e003      	b.n	80032c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	041a      	lsls	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	619a      	str	r2, [r3, #24]
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e07f      	b.n	80033e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff f93a 	bl	8002570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	e006      	b.n	8003358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d104      	bne.n	800336a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_I2C_Init+0x11c>)
 8003376:	430b      	orrs	r3, r1
 8003378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	ea42 0103 	orr.w	r1, r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1a      	ldr	r2, [r3, #32]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	02008000 	.word	0x02008000

080033f0 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	461a      	mov	r2, r3
 80033fc:	460b      	mov	r3, r1
 80033fe:	817b      	strh	r3, [r7, #10]
 8003400:	4613      	mov	r3, r2
 8003402:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d153      	bne.n	80034b8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800341e:	d101      	bne.n	8003424 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
 8003422:	e04a      	b.n	80034ba <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_I2C_Master_Transmit_IT+0x42>
 800342e:	2302      	movs	r3, #2
 8003430:	e043      	b.n	80034ba <HAL_I2C_Master_Transmit_IT+0xca>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2221      	movs	r2, #33	; 0x21
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2210      	movs	r2, #16
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	893a      	ldrh	r2, [r7, #8]
 800345a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8003466:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2bff      	cmp	r3, #255	; 0xff
 8003470:	d906      	bls.n	8003480 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e007      	b.n	8003490 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800348a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	b2da      	uxtb	r2, r3
 8003496:	8979      	ldrh	r1, [r7, #10]
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_I2C_Master_Transmit_IT+0xdc>)
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f001 fad2 	bl	8004a48 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034ac:	2101      	movs	r1, #1
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 faf8 	bl	8004aa4 <I2C_Enable_IRQ>

    return HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e000      	b.n	80034ba <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
  }
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	ffff0000 	.word	0xffff0000
 80034c8:	080038c5 	.word	0x080038c5
 80034cc:	80002000 	.word	0x80002000

080034d0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	461a      	mov	r2, r3
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d153      	bne.n	8003598 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fe:	d101      	bne.n	8003504 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	e04a      	b.n	800359a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Master_Receive_IT+0x42>
 800350e:	2302      	movs	r3, #2
 8003510:	e043      	b.n	800359a <HAL_I2C_Master_Receive_IT+0xca>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2222      	movs	r2, #34	; 0x22
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2210      	movs	r2, #16
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8003546:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2bff      	cmp	r3, #255	; 0xff
 8003550:	d906      	bls.n	8003560 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	e007      	b.n	8003570 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800356a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800356e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	b2da      	uxtb	r2, r3
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <HAL_I2C_Master_Receive_IT+0xdc>)
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f001 fa62 	bl	8004a48 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800358c:	2102      	movs	r1, #2
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f001 fa88 	bl	8004aa4 <I2C_Enable_IRQ>

    return HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	e000      	b.n	800359a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003598:	2302      	movs	r3, #2
  }
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	ffff0000 	.word	0xffff0000
 80035a8:	080038c5 	.word	0x080038c5
 80035ac:	80002400 	.word	0x80002400

080035b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	f040 80ef 	bne.w	80037b0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0e5      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2C_IsDeviceReady+0x44>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0de      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_I2C_IsDeviceReady+0x6e>
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_I2C_IsDeviceReady+0x20c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	e004      	b.n	8003628 <HAL_I2C_IsDeviceReady+0x78>
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003624:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	6812      	ldr	r2, [r2, #0]
 800362c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800362e:	f7ff faa7 	bl	8002b80 <HAL_GetTick>
 8003632:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	bf0c      	ite	eq
 8003642:	2301      	moveq	r3, #1
 8003644:	2300      	movne	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003660:	e034      	b.n	80036cc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d01a      	beq.n	80036a0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7ff fa89 	bl	8002b80 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <HAL_I2C_IsDeviceReady+0xd0>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f043 0220 	orr.w	r2, r3, #32
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e088      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d102      	bne.n	80036d8 <HAL_I2C_IsDeviceReady+0x128>
 80036d2:	7fbb      	ldrb	r3, [r7, #30]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0c4      	beq.n	8003662 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d01a      	beq.n	800371c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2120      	movs	r1, #32
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f001 f968 	bl	80049c6 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e058      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2220      	movs	r2, #32
 8003706:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e04a      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	2120      	movs	r1, #32
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f001 f94d 	bl	80049c6 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e03d      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2210      	movs	r2, #16
 800373c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2220      	movs	r2, #32
 8003744:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d118      	bne.n	8003780 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800375c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	2120      	movs	r1, #32
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f001 f92c 	bl	80049c6 <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e01c      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2220      	movs	r2, #32
 800377e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3301      	adds	r3, #1
 8003784:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	f63f af3d 	bhi.w	800360a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	02002000 	.word	0x02002000

080037c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
  }
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <I2C_Master_ISR_IT+0x1e>
 80038de:	2302      	movs	r3, #2
 80038e0:	e114      	b.n	8003b0c <I2C_Master_ISR_IT+0x248>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <I2C_Master_ISR_IT+0x5a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00d      	beq.n	800391e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2210      	movs	r2, #16
 8003908:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f043 0204 	orr.w	r2, r3, #4
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f001 f813 	bl	8004942 <I2C_Flush_TXDR>
 800391c:	e0e1      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d023      	beq.n	8003972 <I2C_Master_ISR_IT+0xae>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01d      	beq.n	8003972 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003970:	e0b7      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01e      	beq.n	80039bc <I2C_Master_ISR_IT+0xf8>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d018      	beq.n	80039bc <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ba:	e092      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	09db      	lsrs	r3, r3, #7
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05d      	beq.n	8003a84 <I2C_Master_ISR_IT+0x1c0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d057      	beq.n	8003a84 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d040      	beq.n	8003a60 <I2C_Master_ISR_IT+0x19c>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d13c      	bne.n	8003a60 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f2:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d90e      	bls.n	8003a1c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	8a79      	ldrh	r1, [r7, #18]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f001 f817 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1a:	e032      	b.n	8003a82 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2e:	d00b      	beq.n	8003a48 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	8a79      	ldrh	r1, [r7, #18]
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	9000      	str	r0, [sp, #0]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f001 f801 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a46:	e01c      	b.n	8003a82 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	8a79      	ldrh	r1, [r7, #18]
 8003a50:	2300      	movs	r3, #0
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 fff5 	bl	8004a48 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5e:	e010      	b.n	8003a82 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a6e:	d003      	beq.n	8003a78 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fba9 	bl	80041c8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a76:	e034      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fe6a 	bl	8004754 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a80:	e02f      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
 8003a82:	e02e      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d028      	beq.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d022      	beq.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab4:	d015      	beq.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003abe:	d108      	bne.n	8003ad2 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	e007      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fb78 	bl	80041c8 <I2C_ITMasterSeqCplt>
 8003ad8:	e003      	b.n	8003ae2 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ada:	2140      	movs	r1, #64	; 0x40
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fe39 	bl	8004754 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <I2C_Master_ISR_IT+0x23e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003afa:	6979      	ldr	r1, [r7, #20]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fbff 	bl	8004300 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <I2C_Slave_ISR_IT+0x24>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0ec      	b.n	8003d12 <I2C_Slave_ISR_IT+0x1fe>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <I2C_Slave_ISR_IT+0x4c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b58:	6939      	ldr	r1, [r7, #16]
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc9a 	bl	8004494 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d04d      	beq.n	8003c08 <I2C_Slave_ISR_IT+0xf4>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d047      	beq.n	8003c08 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d128      	bne.n	8003bd4 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b28      	cmp	r3, #40	; 0x28
 8003b8c:	d108      	bne.n	8003ba0 <I2C_Slave_ISR_IT+0x8c>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b94:	d104      	bne.n	8003ba0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b96:	6939      	ldr	r1, [r7, #16]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fd85 	bl	80046a8 <I2C_ITListenCplt>
 8003b9e:	e032      	b.n	8003c06 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b29      	cmp	r3, #41	; 0x29
 8003baa:	d10e      	bne.n	8003bca <I2C_Slave_ISR_IT+0xb6>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bb2:	d00a      	beq.n	8003bca <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 fec0 	bl	8004942 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fb3d 	bl	8004242 <I2C_ITSlaveSeqCplt>
 8003bc8:	e01d      	b.n	8003c06 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2210      	movs	r2, #16
 8003bd0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003bd2:	e096      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <I2C_Slave_ISR_IT+0xe4>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf4:	f040 8085 	bne.w	8003d02 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f000 fda8 	bl	8004754 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c04:	e07d      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1ee>
 8003c06:	e07c      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d030      	beq.n	8003c76 <I2C_Slave_ISR_IT+0x162>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d02a      	beq.n	8003c76 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d14f      	bne.n	8003d06 <I2C_Slave_ISR_IT+0x1f2>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c6c:	d04b      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fae7 	bl	8004242 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c74:	e047      	b.n	8003d06 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	08db      	lsrs	r3, r3, #3
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c8e:	6939      	ldr	r1, [r7, #16]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fa15 	bl	80040c0 <I2C_ITAddrCplt>
 8003c96:	e037      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cea:	e00d      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf2:	d002      	beq.n	8003cfa <I2C_Slave_ISR_IT+0x1e6>
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 faa1 	bl	8004242 <I2C_ITSlaveSeqCplt>
 8003d00:	e002      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	af02      	add	r7, sp, #8
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <I2C_Master_ISR_DMA+0x1a>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e0e1      	b.n	8003ef8 <I2C_Master_ISR_DMA+0x1de>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	091b      	lsrs	r3, r3, #4
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <I2C_Master_ISR_DMA+0x5e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d011      	beq.n	8003d78 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003d68:	2120      	movs	r1, #32
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fe9a 	bl	8004aa4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fde6 	bl	8004942 <I2C_Flush_TXDR>
 8003d76:	e0ba      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	09db      	lsrs	r3, r3, #7
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d072      	beq.n	8003e6a <I2C_Master_ISR_DMA+0x150>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	099b      	lsrs	r3, r3, #6
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d06c      	beq.n	8003e6a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04e      	beq.n	8003e48 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d906      	bls.n	8003dd0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e010      	b.n	8003df2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de2:	d003      	beq.n	8003dec <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e002      	b.n	8003df2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	8a79      	ldrh	r1, [r7, #18]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fe21 	bl	8004a48 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	d108      	bne.n	8003e36 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e32:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e34:	e05b      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003e46:	e052      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e56:	d003      	beq.n	8003e60 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f9b5 	bl	80041c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003e5e:	e046      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 fc76 	bl	8004754 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003e68:	e041      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d029      	beq.n	8003eca <I2C_Master_ISR_DMA+0x1b0>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d023      	beq.n	8003eca <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d119      	bne.n	8003ec0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9a:	d027      	beq.n	8003eec <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea4:	d108      	bne.n	8003eb8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003eb6:	e019      	b.n	8003eec <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f985 	bl	80041c8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003ebe:	e015      	b.n	8003eec <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ec0:	2140      	movs	r1, #64	; 0x40
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 fc46 	bl	8004754 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ec8:	e010      	b.n	8003eec <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fa0b 	bl	8004300 <I2C_ITMasterCplt>
 8003eea:	e000      	b.n	8003eee <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003eec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <I2C_Slave_ISR_DMA+0x24>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e0c9      	b.n	80040b8 <I2C_Slave_ISR_DMA+0x1b8>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <I2C_Slave_ISR_DMA+0x4c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 faa4 	bl	8004494 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	091b      	lsrs	r3, r3, #4
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 809a 	beq.w	800408e <I2C_Slave_ISR_DMA+0x18e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	091b      	lsrs	r3, r3, #4
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8093 	beq.w	800408e <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	0b9b      	lsrs	r3, r3, #14
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	0bdb      	lsrs	r3, r3, #15
 8003f78:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d07f      	beq.n	8004080 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0bdb      	lsrs	r3, r3, #15
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d007      	beq.n	8003fa4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	0b9b      	lsrs	r3, r3, #14
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d128      	bne.n	8004020 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b28      	cmp	r3, #40	; 0x28
 8003fd8:	d108      	bne.n	8003fec <I2C_Slave_ISR_DMA+0xec>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe0:	d104      	bne.n	8003fec <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb5f 	bl	80046a8 <I2C_ITListenCplt>
 8003fea:	e048      	b.n	800407e <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b29      	cmp	r3, #41	; 0x29
 8003ff6:	d10e      	bne.n	8004016 <I2C_Slave_ISR_DMA+0x116>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ffe:	d00a      	beq.n	8004016 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2210      	movs	r2, #16
 8004006:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fc9a 	bl	8004942 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f917 	bl	8004242 <I2C_ITSlaveSeqCplt>
 8004014:	e033      	b.n	800407e <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2210      	movs	r2, #16
 800401c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800401e:	e034      	b.n	800408a <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2210      	movs	r2, #16
 8004026:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <I2C_Slave_ISR_DMA+0x14a>
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004048:	d11f      	bne.n	800408a <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b21      	cmp	r3, #33	; 0x21
 800404e:	d002      	beq.n	8004056 <I2C_Slave_ISR_DMA+0x156>
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	2b29      	cmp	r3, #41	; 0x29
 8004054:	d103      	bne.n	800405e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2221      	movs	r2, #33	; 0x21
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
 800405c:	e008      	b.n	8004070 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b22      	cmp	r3, #34	; 0x22
 8004062:	d002      	beq.n	800406a <I2C_Slave_ISR_DMA+0x16a>
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b2a      	cmp	r3, #42	; 0x2a
 8004068:	d102      	bne.n	8004070 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2222      	movs	r2, #34	; 0x22
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	4619      	mov	r1, r3
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fb6c 	bl	8004754 <I2C_ITError>
      if (treatdmanack == 1U)
 800407c:	e005      	b.n	800408a <I2C_Slave_ISR_DMA+0x18a>
 800407e:	e004      	b.n	800408a <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2210      	movs	r2, #16
 8004086:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004088:	e011      	b.n	80040ae <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800408a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800408c:	e00f      	b.n	80040ae <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	08db      	lsrs	r3, r3, #3
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <I2C_Slave_ISR_DMA+0x1ae>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f809 	bl	80040c0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040d6:	2b28      	cmp	r3, #40	; 0x28
 80040d8:	d16a      	bne.n	80041b0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	0c1b      	lsrs	r3, r3, #16
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80040f8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004106:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004114:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d138      	bne.n	8004190 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800411e:	897b      	ldrh	r3, [r7, #10]
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	b29a      	uxth	r2, r3
 8004124:	89bb      	ldrh	r3, [r7, #12]
 8004126:	4053      	eors	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	f003 0306 	and.w	r3, r3, #6
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11c      	bne.n	800416c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	2b02      	cmp	r3, #2
 8004146:	d13b      	bne.n	80041c0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2208      	movs	r2, #8
 8004154:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800415e:	89ba      	ldrh	r2, [r7, #12]
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fb6d 	bl	8003844 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800416a:	e029      	b.n	80041c0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800416c:	893b      	ldrh	r3, [r7, #8]
 800416e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fcf9 	bl	8004b6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004182:	89ba      	ldrh	r2, [r7, #12]
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fb5b 	bl	8003844 <HAL_I2C_AddrCallback>
}
 800418e:	e017      	b.n	80041c0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fce9 	bl	8004b6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041a2:	89ba      	ldrh	r2, [r7, #12]
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fb4b 	bl	8003844 <HAL_I2C_AddrCallback>
}
 80041ae:	e007      	b.n	80041c0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2208      	movs	r2, #8
 80041b6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b21      	cmp	r3, #33	; 0x21
 80041e2:	d115      	bne.n	8004210 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2211      	movs	r2, #17
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041f8:	2101      	movs	r1, #1
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fcb6 	bl	8004b6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff faf3 	bl	80037f4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800420e:	e014      	b.n	800423a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2212      	movs	r2, #18
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004224:	2102      	movs	r1, #2
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fca0 	bl	8004b6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fae7 	bl	8003808 <HAL_I2C_MasterRxCpltCallback>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0b9b      	lsrs	r3, r3, #14
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e00d      	b.n	8004294 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0bdb      	lsrs	r3, r3, #15
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b29      	cmp	r3, #41	; 0x29
 800429e:	d112      	bne.n	80042c6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2228      	movs	r2, #40	; 0x28
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2221      	movs	r2, #33	; 0x21
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042ae:	2101      	movs	r1, #1
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fc5b 	bl	8004b6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff faac 	bl	800381c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042c4:	e017      	b.n	80042f6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b2a      	cmp	r3, #42	; 0x2a
 80042d0:	d111      	bne.n	80042f6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2228      	movs	r2, #40	; 0x28
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2222      	movs	r2, #34	; 0x22
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042e0:	2102      	movs	r1, #2
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fc42 	bl	8004b6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff fa9d 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2220      	movs	r2, #32
 8004314:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b21      	cmp	r3, #33	; 0x21
 8004320:	d107      	bne.n	8004332 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004322:	2101      	movs	r1, #1
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fc21 	bl	8004b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2211      	movs	r2, #17
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
 8004330:	e00c      	b.n	800434c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b22      	cmp	r3, #34	; 0x22
 800433c:	d106      	bne.n	800434c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800433e:	2102      	movs	r1, #2
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fc13 	bl	8004b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2212      	movs	r2, #18
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b4d      	ldr	r3, [pc, #308]	; (800448c <I2C_ITMasterCplt+0x18c>)
 8004358:	400b      	ands	r3, r1
 800435a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a4a      	ldr	r2, [pc, #296]	; (8004490 <I2C_ITMasterCplt+0x190>)
 8004366:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	091b      	lsrs	r3, r3, #4
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2210      	movs	r2, #16
 800437a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f043 0204 	orr.w	r2, r3, #4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d10b      	bne.n	80043ac <I2C_ITMasterCplt+0xac>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	089b      	lsrs	r3, r3, #2
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d005      	beq.n	80043ac <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80043aa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fac8 	bl	8004942 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b60      	cmp	r3, #96	; 0x60
 80043c2:	d002      	beq.n	80043ca <I2C_ITMasterCplt+0xca>
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f9bf 	bl	8004754 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80043d6:	e054      	b.n	8004482 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b21      	cmp	r3, #33	; 0x21
 80043e2:	d124      	bne.n	800442e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d10b      	bne.n	8004416 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fa30 	bl	8003874 <HAL_I2C_MemTxCpltCallback>
}
 8004414:	e035      	b.n	8004482 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff f9e4 	bl	80037f4 <HAL_I2C_MasterTxCpltCallback>
}
 800442c:	e029      	b.n	8004482 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	d123      	bne.n	8004482 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d10b      	bne.n	800446c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fa0f 	bl	8003888 <HAL_I2C_MemRxCpltCallback>
}
 800446a:	e00a      	b.n	8004482 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff f9c3 	bl	8003808 <HAL_I2C_MasterRxCpltCallback>
}
 8004482:	bf00      	nop
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	fe00e800 	.word	0xfe00e800
 8004490:	ffff0000 	.word	0xffff0000

08004494 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2220      	movs	r2, #32
 80044b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b21      	cmp	r3, #33	; 0x21
 80044be:	d002      	beq.n	80044c6 <I2C_ITSlaveCplt+0x32>
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b29      	cmp	r3, #41	; 0x29
 80044c4:	d108      	bne.n	80044d8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80044c6:	f248 0101 	movw	r1, #32769	; 0x8001
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fb4e 	bl	8004b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2221      	movs	r2, #33	; 0x21
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
 80044d6:	e00d      	b.n	80044f4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d002      	beq.n	80044e4 <I2C_ITSlaveCplt+0x50>
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	2b2a      	cmp	r3, #42	; 0x2a
 80044e2:	d107      	bne.n	80044f4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80044e4:	f248 0102 	movw	r1, #32770	; 0x8002
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fb3f 	bl	8004b6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004502:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <I2C_ITSlaveCplt+0x20c>)
 8004510:	400b      	ands	r3, r1
 8004512:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa14 	bl	8004942 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	0b9b      	lsrs	r3, r3, #14
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d013      	beq.n	800454e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004534:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b29a      	uxth	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800454c:	e018      	b.n	8004580 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	0bdb      	lsrs	r3, r3, #15
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d012      	beq.n	8004580 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	b29a      	uxth	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	089b      	lsrs	r3, r3, #2
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0304 	bic.w	r3, r3, #4
 8004592:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	f043 0204 	orr.w	r2, r3, #4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8a7 	bl	8004754 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b28      	cmp	r3, #40	; 0x28
 8004610:	d141      	bne.n	8004696 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f847 	bl	80046a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800461a:	e03c      	b.n	8004696 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004624:	d014      	beq.n	8004650 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fe0b 	bl	8004242 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <I2C_ITSlaveCplt+0x210>)
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff f909 	bl	8003860 <HAL_I2C_ListenCpltCallback>
}
 800464e:	e022      	b.n	8004696 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b22      	cmp	r3, #34	; 0x22
 800465a:	d10e      	bne.n	800467a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff f8dc 	bl	8003830 <HAL_I2C_SlaveRxCpltCallback>
}
 8004678:	e00d      	b.n	8004696 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7ff f8c3 	bl	800381c <HAL_I2C_SlaveTxCpltCallback>
}
 8004696:	bf00      	nop
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	fe00e800 	.word	0xfe00e800
 80046a4:	ffff0000 	.word	0xffff0000

080046a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a26      	ldr	r2, [pc, #152]	; (8004750 <I2C_ITListenCplt+0xa8>)
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d022      	beq.n	8004726 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d012      	beq.n	8004726 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004726:	f248 0103 	movw	r1, #32771	; 0x8003
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa1e 	bl	8004b6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff f88d 	bl	8003860 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	ffff0000 	.word	0xffff0000

08004754 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a5d      	ldr	r2, [pc, #372]	; (80048e8 <I2C_ITError+0x194>)
 8004772:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b28      	cmp	r3, #40	; 0x28
 800478a:	d005      	beq.n	8004798 <I2C_ITError+0x44>
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b29      	cmp	r3, #41	; 0x29
 8004790:	d002      	beq.n	8004798 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004792:	7bfb      	ldrb	r3, [r7, #15]
 8004794:	2b2a      	cmp	r3, #42	; 0x2a
 8004796:	d10b      	bne.n	80047b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004798:	2103      	movs	r1, #3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9e6 	bl	8004b6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2228      	movs	r2, #40	; 0x28
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a50      	ldr	r2, [pc, #320]	; (80048ec <I2C_ITError+0x198>)
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34
 80047ae:	e011      	b.n	80047d4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9d9 	bl	8004b6c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b60      	cmp	r3, #96	; 0x60
 80047c4:	d003      	beq.n	80047ce <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d039      	beq.n	8004856 <I2C_ITError+0x102>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b11      	cmp	r3, #17
 80047e6:	d002      	beq.n	80047ee <I2C_ITError+0x9a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b21      	cmp	r3, #33	; 0x21
 80047ec:	d133      	bne.n	8004856 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047fc:	d107      	bne.n	800480e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800480c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fb87 	bl	8002f26 <HAL_DMA_GetState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b01      	cmp	r3, #1
 800481c:	d017      	beq.n	800484e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4a33      	ldr	r2, [pc, #204]	; (80048f0 <I2C_ITError+0x19c>)
 8004824:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fb55 	bl	8002ee2 <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04d      	beq.n	80048da <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800484c:	e045      	b.n	80048da <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f850 	bl	80048f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004854:	e041      	b.n	80048da <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d039      	beq.n	80048d2 <I2C_ITError+0x17e>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b12      	cmp	r3, #18
 8004862:	d002      	beq.n	800486a <I2C_ITError+0x116>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b22      	cmp	r3, #34	; 0x22
 8004868:	d133      	bne.n	80048d2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	d107      	bne.n	800488a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004888:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fb49 	bl	8002f26 <HAL_DMA_GetState>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d017      	beq.n	80048ca <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489e:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <I2C_ITError+0x19c>)
 80048a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fb17 	bl	8002ee2 <HAL_DMA_Abort_IT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d011      	beq.n	80048de <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048c4:	4610      	mov	r0, r2
 80048c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048c8:	e009      	b.n	80048de <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f812 	bl	80048f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048d0:	e005      	b.n	80048de <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f80e 	bl	80048f4 <I2C_TreatErrorCallback>
  }
}
 80048d8:	e002      	b.n	80048e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048de:	bf00      	nop
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	ffff0000 	.word	0xffff0000
 80048ec:	08003b15 	.word	0x08003b15
 80048f0:	0800498b 	.word	0x0800498b

080048f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d10e      	bne.n	8004926 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fe ffc6 	bl	80038b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004924:	e009      	b.n	800493a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fe ffb1 	bl	800389c <HAL_I2C_ErrorCallback>
}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d103      	bne.n	8004960 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2200      	movs	r2, #0
 800495e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b01      	cmp	r3, #1
 800496c:	d007      	beq.n	800497e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	619a      	str	r2, [r3, #24]
  }
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	2200      	movs	r2, #0
 80049a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	2200      	movs	r2, #0
 80049b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7ff ff9b 	bl	80048f4 <I2C_TreatErrorCallback>
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d6:	e022      	b.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d01e      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e0:	f7fe f8ce 	bl	8002b80 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d302      	bcc.n	80049f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d113      	bne.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00f      	b.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699a      	ldr	r2, [r3, #24]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4013      	ands	r3, r2
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d0cd      	beq.n	80049d8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	4613      	mov	r3, r2
 8004a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	0d5b      	lsrs	r3, r3, #21
 8004a64:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <I2C_TransferConfig+0x58>)
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	ea02 0103 	and.w	r1, r2, r3
 8004a72:	897b      	ldrh	r3, [r7, #10]
 8004a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a78:	7a7b      	ldrb	r3, [r7, #9]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	03ff63ff 	.word	0x03ff63ff

08004aa4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab8:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <I2C_Enable_IRQ+0xc0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004ac2:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <I2C_Enable_IRQ+0xc4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d11d      	bne.n	8004b04 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ac8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da03      	bge.n	8004ad8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ad6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d103      	bne.n	8004ae6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ae4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d103      	bne.n	8004af4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004af2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004af4:	887b      	ldrh	r3, [r7, #2]
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d125      	bne.n	8004b46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b02:	e020      	b.n	8004b46 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	da03      	bge.n	8004b14 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004b24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004b36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	2b20      	cmp	r3, #32
 8004b3c:	d103      	bne.n	8004b46 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f043 0320 	orr.w	r3, r3, #32
 8004b44:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6819      	ldr	r1, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	08003d1b 	.word	0x08003d1b
 8004b68:	08003f01 	.word	0x08003f01

08004b6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b7c:	887b      	ldrh	r3, [r7, #2]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00f      	beq.n	8004ba6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004b8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b9a:	2b28      	cmp	r3, #40	; 0x28
 8004b9c:	d003      	beq.n	8004ba6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004ba4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00f      	beq.n	8004bd0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004bb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bc4:	2b28      	cmp	r3, #40	; 0x28
 8004bc6:	d003      	beq.n	8004bd0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004bce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da03      	bge.n	8004be0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d103      	bne.n	8004bee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bee:	887b      	ldrh	r3, [r7, #2]
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d103      	bne.n	8004bfc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 0320 	orr.w	r3, r3, #32
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d103      	bne.n	8004c0a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	400a      	ands	r2, r1
 8004c1a:	601a      	str	r2, [r3, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d138      	bne.n	8004cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e032      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2224      	movs	r2, #36	; 0x24
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d139      	bne.n	8004d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e033      	b.n	8004d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0201 	bic.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d48:	2302      	movs	r3, #2
  }
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e291      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 8087 	beq.w	8004e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d7c:	4b96      	ldr	r3, [pc, #600]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 030c 	and.w	r3, r3, #12
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d00c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d88:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d112      	bne.n	8004dba <HAL_RCC_OscConfig+0x62>
 8004d94:	4b90      	ldr	r3, [pc, #576]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da0:	d10b      	bne.n	8004dba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da2:	4b8d      	ldr	r3, [pc, #564]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d06c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x130>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d168      	bne.n	8004e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e26b      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x7a>
 8004dc4:	4b84      	ldr	r3, [pc, #528]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a83      	ldr	r2, [pc, #524]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	e02e      	b.n	8004e30 <HAL_RCC_OscConfig+0xd8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x9c>
 8004dda:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7e      	ldr	r2, [pc, #504]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b7c      	ldr	r3, [pc, #496]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7b      	ldr	r2, [pc, #492]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e01d      	b.n	8004e30 <HAL_RCC_OscConfig+0xd8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dfc:	d10c      	bne.n	8004e18 <HAL_RCC_OscConfig+0xc0>
 8004dfe:	4b76      	ldr	r3, [pc, #472]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a75      	ldr	r2, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	4b73      	ldr	r3, [pc, #460]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a72      	ldr	r2, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e00b      	b.n	8004e30 <HAL_RCC_OscConfig+0xd8>
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b6c      	ldr	r3, [pc, #432]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a6b      	ldr	r2, [pc, #428]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d013      	beq.n	8004e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fea2 	bl	8002b80 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e40:	f7fd fe9e 	bl	8002b80 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b64      	cmp	r3, #100	; 0x64
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e21f      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e52:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0f0      	beq.n	8004e40 <HAL_RCC_OscConfig+0xe8>
 8004e5e:	e014      	b.n	8004e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd fe8e 	bl	8002b80 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fd fe8a 	bl	8002b80 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e20b      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e7a:	4b57      	ldr	r3, [pc, #348]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x110>
 8004e86:	e000      	b.n	8004e8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d069      	beq.n	8004f6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e96:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 030c 	and.w	r3, r3, #12
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ea2:	4b4d      	ldr	r3, [pc, #308]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d11c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x190>
 8004eae:	4b4a      	ldr	r3, [pc, #296]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d116      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eba:	4b47      	ldr	r3, [pc, #284]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x17a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d001      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e1df      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed2:	4b41      	ldr	r3, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	493d      	ldr	r1, [pc, #244]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	e040      	b.n	8004f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d023      	beq.n	8004f38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ef0:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fe40 	bl	8002b80 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fd fe3c 	bl	8002b80 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e1bd      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	4b30      	ldr	r3, [pc, #192]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f22:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	4929      	ldr	r1, [pc, #164]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]
 8004f36:	e018      	b.n	8004f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f38:	4b27      	ldr	r3, [pc, #156]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fd fe1c 	bl	8002b80 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f4c:	f7fd fe18 	bl	8002b80 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e199      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5e:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d038      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d019      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f7e:	4b16      	ldr	r3, [pc, #88]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8a:	f7fd fdf9 	bl	8002b80 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f92:	f7fd fdf5 	bl	8002b80 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e176      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x23a>
 8004fb0:	e01a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fd fddf 	bl	8002b80 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc6:	f7fd fddb 	bl	8002b80 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d903      	bls.n	8004fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e15c      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
 8004fd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fdc:	4b91      	ldr	r3, [pc, #580]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ee      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a4 	beq.w	800513e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff6:	4b8b      	ldr	r3, [pc, #556]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10d      	bne.n	800501e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	4a87      	ldr	r2, [pc, #540]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500c:	6413      	str	r3, [r2, #64]	; 0x40
 800500e:	4b85      	ldr	r3, [pc, #532]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800501e:	4b82      	ldr	r3, [pc, #520]	; (8005228 <HAL_RCC_OscConfig+0x4d0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005026:	2b00      	cmp	r3, #0
 8005028:	d118      	bne.n	800505c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800502a:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <HAL_RCC_OscConfig+0x4d0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a7e      	ldr	r2, [pc, #504]	; (8005228 <HAL_RCC_OscConfig+0x4d0>)
 8005030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005036:	f7fd fda3 	bl	8002b80 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503e:	f7fd fd9f 	bl	8002b80 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b64      	cmp	r3, #100	; 0x64
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e120      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005050:	4b75      	ldr	r3, [pc, #468]	; (8005228 <HAL_RCC_OscConfig+0x4d0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d0f0      	beq.n	800503e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <HAL_RCC_OscConfig+0x31a>
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a6e      	ldr	r2, [pc, #440]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
 8005070:	e02d      	b.n	80050ce <HAL_RCC_OscConfig+0x376>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCC_OscConfig+0x33c>
 800507a:	4b6a      	ldr	r3, [pc, #424]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	4a69      	ldr	r2, [pc, #420]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
 8005086:	4b67      	ldr	r3, [pc, #412]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a66      	ldr	r2, [pc, #408]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
 8005092:	e01c      	b.n	80050ce <HAL_RCC_OscConfig+0x376>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b05      	cmp	r3, #5
 800509a:	d10c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x35e>
 800509c:	4b61      	ldr	r3, [pc, #388]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a60      	ldr	r2, [pc, #384]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	4b5e      	ldr	r3, [pc, #376]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ac:	4a5d      	ldr	r2, [pc, #372]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	6713      	str	r3, [r2, #112]	; 0x70
 80050b4:	e00b      	b.n	80050ce <HAL_RCC_OscConfig+0x376>
 80050b6:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a5a      	ldr	r2, [pc, #360]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
 80050c2:	4b58      	ldr	r3, [pc, #352]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c6:	4a57      	ldr	r2, [pc, #348]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fd fd53 	bl	8002b80 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050de:	f7fd fd4f 	bl	8002b80 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e0ce      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f4:	4b4b      	ldr	r3, [pc, #300]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ee      	beq.n	80050de <HAL_RCC_OscConfig+0x386>
 8005100:	e014      	b.n	800512c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7fd fd3d 	bl	8002b80 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fd fd39 	bl	8002b80 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	4293      	cmp	r3, r2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e0b8      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005120:	4b40      	ldr	r3, [pc, #256]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d105      	bne.n	800513e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005132:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f000 80a4 	beq.w	8005290 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d06b      	beq.n	800522c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d149      	bne.n	80051f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a30      	ldr	r2, [pc, #192]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fd fd0a 	bl	8002b80 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005170:	f7fd fd06 	bl	8002b80 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e087      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005182:	4b28      	ldr	r3, [pc, #160]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1f0      	bne.n	8005170 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	019b      	lsls	r3, r3, #6
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	3b01      	subs	r3, #1
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	4313      	orrs	r3, r2
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051bc:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd fcda 	bl	8002b80 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fd fcd6 	bl	8002b80 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e057      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x478>
 80051ee:	e04f      	b.n	8005290 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fd fcc0 	bl	8002b80 <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005204:	f7fd fcbc 	bl	8002b80 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e03d      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_RCC_OscConfig+0x4cc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x4ac>
 8005222:	e035      	b.n	8005290 <HAL_RCC_OscConfig+0x538>
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <HAL_RCC_OscConfig+0x544>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d028      	beq.n	800528c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d121      	bne.n	800528c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d11a      	bne.n	800528c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005262:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005264:	4293      	cmp	r3, r2
 8005266:	d111      	bne.n	800528c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	3b01      	subs	r3, #1
 8005276:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005278:	429a      	cmp	r2, r3
 800527a:	d107      	bne.n	800528c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40023800 	.word	0x40023800

080052a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d0      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b6a      	ldr	r3, [pc, #424]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d910      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b67      	ldr	r3, [pc, #412]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 020f 	bic.w	r2, r3, #15
 80052ce:	4965      	ldr	r1, [pc, #404]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b63      	ldr	r3, [pc, #396]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0b8      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005300:	4b59      	ldr	r3, [pc, #356]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4a58      	ldr	r2, [pc, #352]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800530a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005318:	4b53      	ldr	r3, [pc, #332]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	4a52      	ldr	r2, [pc, #328]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800531e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005322:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	494d      	ldr	r1, [pc, #308]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d040      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b47      	ldr	r3, [pc, #284]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d115      	bne.n	8005382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e07f      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b41      	ldr	r3, [pc, #260]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e073      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	4b3d      	ldr	r3, [pc, #244]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b39      	ldr	r3, [pc, #228]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4936      	ldr	r1, [pc, #216]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005394:	f7fd fbf4 	bl	8002b80 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fd fbf0 	bl	8002b80 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e053      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b2d      	ldr	r3, [pc, #180]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b27      	ldr	r3, [pc, #156]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d210      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 020f 	bic.w	r2, r3, #15
 80053da:	4922      	ldr	r1, [pc, #136]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b20      	ldr	r3, [pc, #128]	; (8005464 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e032      	b.n	800545a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4916      	ldr	r1, [pc, #88]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800540e:	4313      	orrs	r3, r2
 8005410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	490e      	ldr	r1, [pc, #56]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005432:	f000 f821 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8005436:	4602      	mov	r2, r0
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_ClockConfig+0x1c8>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	490a      	ldr	r1, [pc, #40]	; (800546c <HAL_RCC_ClockConfig+0x1cc>)
 8005444:	5ccb      	ldrb	r3, [r1, r3]
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a09      	ldr	r2, [pc, #36]	; (8005470 <HAL_RCC_ClockConfig+0x1d0>)
 800544c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCC_ClockConfig+0x1d4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fd fb50 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40023c00 	.word	0x40023c00
 8005468:	40023800 	.word	0x40023800
 800546c:	08009438 	.word	0x08009438
 8005470:	20000000 	.word	0x20000000
 8005474:	20000004 	.word	0x20000004

08005478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	607b      	str	r3, [r7, #4]
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	2300      	movs	r3, #0
 800548a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005490:	4b67      	ldr	r3, [pc, #412]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b08      	cmp	r3, #8
 800549a:	d00d      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x40>
 800549c:	2b08      	cmp	r3, #8
 800549e:	f200 80bd 	bhi.w	800561c <HAL_RCC_GetSysClockFreq+0x1a4>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x34>
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d003      	beq.n	80054b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054aa:	e0b7      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054ac:	4b61      	ldr	r3, [pc, #388]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054ae:	60bb      	str	r3, [r7, #8]
      break;
 80054b0:	e0b7      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80054b4:	60bb      	str	r3, [r7, #8]
      break;
 80054b6:	e0b4      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b8:	4b5d      	ldr	r3, [pc, #372]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054c2:	4b5b      	ldr	r3, [pc, #364]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d04d      	beq.n	800556a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ce:	4b58      	ldr	r3, [pc, #352]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	099b      	lsrs	r3, r3, #6
 80054d4:	461a      	mov	r2, r3
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054de:	f04f 0100 	mov.w	r1, #0
 80054e2:	ea02 0800 	and.w	r8, r2, r0
 80054e6:	ea03 0901 	and.w	r9, r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	014b      	lsls	r3, r1, #5
 80054f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054fc:	0142      	lsls	r2, r0, #5
 80054fe:	4610      	mov	r0, r2
 8005500:	4619      	mov	r1, r3
 8005502:	ebb0 0008 	subs.w	r0, r0, r8
 8005506:	eb61 0109 	sbc.w	r1, r1, r9
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	018b      	lsls	r3, r1, #6
 8005514:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005518:	0182      	lsls	r2, r0, #6
 800551a:	1a12      	subs	r2, r2, r0
 800551c:	eb63 0301 	sbc.w	r3, r3, r1
 8005520:	f04f 0000 	mov.w	r0, #0
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	00d9      	lsls	r1, r3, #3
 800552a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800552e:	00d0      	lsls	r0, r2, #3
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	eb12 0208 	adds.w	r2, r2, r8
 8005538:	eb43 0309 	adc.w	r3, r3, r9
 800553c:	f04f 0000 	mov.w	r0, #0
 8005540:	f04f 0100 	mov.w	r1, #0
 8005544:	0259      	lsls	r1, r3, #9
 8005546:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800554a:	0250      	lsls	r0, r2, #9
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4610      	mov	r0, r2
 8005552:	4619      	mov	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f7fa fea8 	bl	80002b0 <__aeabi_uldivmod>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4613      	mov	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e04a      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800556a:	4b31      	ldr	r3, [pc, #196]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f240 10ff 	movw	r0, #511	; 0x1ff
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	ea02 0400 	and.w	r4, r2, r0
 8005582:	ea03 0501 	and.w	r5, r3, r1
 8005586:	4620      	mov	r0, r4
 8005588:	4629      	mov	r1, r5
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	014b      	lsls	r3, r1, #5
 8005594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005598:	0142      	lsls	r2, r0, #5
 800559a:	4610      	mov	r0, r2
 800559c:	4619      	mov	r1, r3
 800559e:	1b00      	subs	r0, r0, r4
 80055a0:	eb61 0105 	sbc.w	r1, r1, r5
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	018b      	lsls	r3, r1, #6
 80055ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b2:	0182      	lsls	r2, r0, #6
 80055b4:	1a12      	subs	r2, r2, r0
 80055b6:	eb63 0301 	sbc.w	r3, r3, r1
 80055ba:	f04f 0000 	mov.w	r0, #0
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	00d9      	lsls	r1, r3, #3
 80055c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c8:	00d0      	lsls	r0, r2, #3
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	1912      	adds	r2, r2, r4
 80055d0:	eb45 0303 	adc.w	r3, r5, r3
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0299      	lsls	r1, r3, #10
 80055de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055e2:	0290      	lsls	r0, r2, #10
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fa fe5c 	bl	80002b0 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	0c1b      	lsrs	r3, r3, #16
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	3301      	adds	r3, #1
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	60bb      	str	r3, [r7, #8]
      break;
 800561a:	e002      	b.n	8005622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800561e:	60bb      	str	r3, [r7, #8]
      break;
 8005620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005622:	68bb      	ldr	r3, [r7, #8]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800562e:	bf00      	nop
 8005630:	40023800 	.word	0x40023800
 8005634:	00f42400 	.word	0x00f42400
 8005638:	007a1200 	.word	0x007a1200

0800563c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <HAL_RCC_GetHCLKFreq+0x14>)
 8005642:	681b      	ldr	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000000 	.word	0x20000000

08005654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005658:	f7ff fff0 	bl	800563c <HAL_RCC_GetHCLKFreq>
 800565c:	4602      	mov	r2, r0
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	0a9b      	lsrs	r3, r3, #10
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800566a:	5ccb      	ldrb	r3, [r1, r3]
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005670:	4618      	mov	r0, r3
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40023800 	.word	0x40023800
 8005678:	08009448 	.word	0x08009448

0800567c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005680:	f7ff ffdc 	bl	800563c <HAL_RCC_GetHCLKFreq>
 8005684:	4602      	mov	r2, r0
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0b5b      	lsrs	r3, r3, #13
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	4903      	ldr	r1, [pc, #12]	; (80056a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005692:	5ccb      	ldrb	r3, [r1, r3]
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40023800 	.word	0x40023800
 80056a0:	08009448 	.word	0x08009448

080056a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d012      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056cc:	4b69      	ldr	r3, [pc, #420]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a68      	ldr	r2, [pc, #416]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056d6:	6093      	str	r3, [r2, #8]
 80056d8:	4b66      	ldr	r3, [pc, #408]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e0:	4964      	ldr	r1, [pc, #400]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d017      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056fe:	4b5d      	ldr	r3, [pc, #372]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570c:	4959      	ldr	r1, [pc, #356]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571c:	d101      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800571e:	2301      	movs	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800572a:	2301      	movs	r3, #1
 800572c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d017      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800573a:	4b4e      	ldr	r3, [pc, #312]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	494a      	ldr	r1, [pc, #296]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	4313      	orrs	r3, r2
 800574c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005758:	d101      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005776:	2301      	movs	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 808b 	beq.w	800589e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005788:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	4a39      	ldr	r2, [pc, #228]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005792:	6413      	str	r3, [r2, #64]	; 0x40
 8005794:	4b37      	ldr	r3, [pc, #220]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a34      	ldr	r2, [pc, #208]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ac:	f7fd f9e8 	bl	8002b80 <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b4:	f7fd f9e4 	bl	8002b80 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b64      	cmp	r3, #100	; 0x64
 80057c0:	d901      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e357      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057c6:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057d2:	4b28      	ldr	r3, [pc, #160]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d035      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d02e      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057f0:	4b20      	ldr	r3, [pc, #128]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005804:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005806:	4b1b      	ldr	r3, [pc, #108]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a1a      	ldr	r2, [pc, #104]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005810:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005818:	4b16      	ldr	r3, [pc, #88]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d114      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005824:	f7fd f9ac 	bl	8002b80 <HAL_GetTick>
 8005828:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582a:	e00a      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582c:	f7fd f9a8 	bl	8002b80 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	f241 3288 	movw	r2, #5000	; 0x1388
 800583a:	4293      	cmp	r3, r2
 800583c:	d901      	bls.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e319      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ee      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585a:	d111      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800586a:	400b      	ands	r3, r1
 800586c:	4901      	ldr	r1, [pc, #4]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
 8005872:	e00b      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005874:	40023800 	.word	0x40023800
 8005878:	40007000 	.word	0x40007000
 800587c:	0ffffcff 	.word	0x0ffffcff
 8005880:	4bb1      	ldr	r3, [pc, #708]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4ab0      	ldr	r2, [pc, #704]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005886:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800588a:	6093      	str	r3, [r2, #8]
 800588c:	4bae      	ldr	r3, [pc, #696]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800588e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	49ab      	ldr	r1, [pc, #684]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800589a:	4313      	orrs	r3, r2
 800589c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058aa:	4ba7      	ldr	r3, [pc, #668]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b0:	4aa5      	ldr	r2, [pc, #660]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80058ba:	4ba3      	ldr	r3, [pc, #652]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	49a0      	ldr	r1, [pc, #640]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058d8:	4b9b      	ldr	r3, [pc, #620]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e6:	4998      	ldr	r1, [pc, #608]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058fa:	4b93      	ldr	r3, [pc, #588]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005908:	498f      	ldr	r1, [pc, #572]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592a:	4987      	ldr	r1, [pc, #540]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800593e:	4b82      	ldr	r3, [pc, #520]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005944:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	497e      	ldr	r1, [pc, #504]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005960:	4b79      	ldr	r3, [pc, #484]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f023 0203 	bic.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	4976      	ldr	r1, [pc, #472]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005982:	4b71      	ldr	r3, [pc, #452]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f023 020c 	bic.w	r2, r3, #12
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005990:	496d      	ldr	r1, [pc, #436]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059a4:	4b68      	ldr	r3, [pc, #416]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b2:	4965      	ldr	r1, [pc, #404]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059c6:	4b60      	ldr	r3, [pc, #384]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	495c      	ldr	r1, [pc, #368]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059e8:	4b57      	ldr	r3, [pc, #348]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f6:	4954      	ldr	r1, [pc, #336]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005a0a:	4b4f      	ldr	r3, [pc, #316]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a18:	494b      	ldr	r1, [pc, #300]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a2c:	4b46      	ldr	r3, [pc, #280]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	4943      	ldr	r1, [pc, #268]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a4e:	4b3e      	ldr	r3, [pc, #248]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5c:	493a      	ldr	r1, [pc, #232]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a70:	4b35      	ldr	r3, [pc, #212]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a7e:	4932      	ldr	r1, [pc, #200]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d011      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a92:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa0:	4929      	ldr	r1, [pc, #164]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ad2:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	4919      	ldr	r1, [pc, #100]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005af4:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b04:	4910      	ldr	r1, [pc, #64]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d006      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80d9 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b20:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005b26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fd f828 	bl	8002b80 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b32:	e00b      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b34:	f7fd f824 	bl	8002b80 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d904      	bls.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e197      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005b46:	bf00      	nop
 8005b48:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b4c:	4b6c      	ldr	r3, [pc, #432]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1ed      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d021      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11d      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b6c:	4b64      	ldr	r3, [pc, #400]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b7a:	4b61      	ldr	r3, [pc, #388]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b80:	0e1b      	lsrs	r3, r3, #24
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	019a      	lsls	r2, r3, #6
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	041b      	lsls	r3, r3, #16
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	061b      	lsls	r3, r3, #24
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	071b      	lsls	r3, r3, #28
 8005ba0:	4957      	ldr	r1, [pc, #348]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d02e      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bd2:	d129      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bd4:	4b4a      	ldr	r3, [pc, #296]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be8:	0f1b      	lsrs	r3, r3, #28
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	019a      	lsls	r2, r3, #6
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	061b      	lsls	r3, r3, #24
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	071b      	lsls	r3, r3, #28
 8005c08:	493d      	ldr	r1, [pc, #244]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c10:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c16:	f023 021f 	bic.w	r2, r3, #31
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4937      	ldr	r1, [pc, #220]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01d      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c34:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3a:	0e1b      	lsrs	r3, r3, #24
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c42:	4b2f      	ldr	r3, [pc, #188]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c48:	0f1b      	lsrs	r3, r3, #28
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	019a      	lsls	r2, r3, #6
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	061b      	lsls	r3, r3, #24
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	071b      	lsls	r3, r3, #28
 8005c68:	4925      	ldr	r1, [pc, #148]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	019a      	lsls	r2, r3, #6
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	071b      	lsls	r3, r3, #28
 8005c98:	4919      	ldr	r1, [pc, #100]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cac:	f7fc ff68 	bl	8002b80 <HAL_GetTick>
 8005cb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cb4:	f7fc ff64 	bl	8002b80 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b64      	cmp	r3, #100	; 0x64
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e0d7      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 80cd 	bne.w	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ce6:	f7fc ff4b 	bl	8002b80 <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cee:	f7fc ff47 	bl	8002b80 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b64      	cmp	r3, #100	; 0x64
 8005cfa:	d903      	bls.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e0ba      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005d00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d04:	4b5e      	ldr	r3, [pc, #376]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d10:	d0ed      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d02e      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d12a      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d3a:	4b51      	ldr	r3, [pc, #324]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d48:	4b4d      	ldr	r3, [pc, #308]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	0f1b      	lsrs	r3, r3, #28
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	019a      	lsls	r2, r3, #6
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	041b      	lsls	r3, r3, #16
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	061b      	lsls	r3, r3, #24
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	071b      	lsls	r3, r3, #28
 8005d6e:	4944      	ldr	r1, [pc, #272]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d76:	4b42      	ldr	r3, [pc, #264]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	3b01      	subs	r3, #1
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	493d      	ldr	r1, [pc, #244]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d022      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da4:	d11d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005da6:	4b36      	ldr	r3, [pc, #216]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db4:	4b32      	ldr	r3, [pc, #200]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	0f1b      	lsrs	r3, r3, #28
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	019a      	lsls	r2, r3, #6
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	061b      	lsls	r3, r3, #24
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	4929      	ldr	r1, [pc, #164]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d028      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df4:	0e1b      	lsrs	r3, r3, #24
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	019a      	lsls	r2, r3, #6
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	431a      	orrs	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	061b      	lsls	r3, r3, #24
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	071b      	lsls	r3, r3, #28
 8005e22:	4917      	ldr	r1, [pc, #92]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	4911      	ldr	r1, [pc, #68]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e40:	4b0f      	ldr	r3, [pc, #60]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0e      	ldr	r2, [pc, #56]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fe98 	bl	8002b80 <HAL_GetTick>
 8005e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e54:	f7fc fe94 	bl	8002b80 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	; 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e007      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e72:	d1ef      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3720      	adds	r7, #32
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40023800 	.word	0x40023800

08005e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e049      	b.n	8005f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7fc fc40 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f000 fb2c 	bl	8006520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d001      	beq.n	8005f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e04c      	b.n	8005fe6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <HAL_TIM_Base_Start+0xc0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d022      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f66:	d01d      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a22      	ldr	r2, [pc, #136]	; (8005ff8 <HAL_TIM_Base_Start+0xc4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <HAL_TIM_Base_Start+0xc8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <HAL_TIM_Base_Start+0xcc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	; (8006004 <HAL_TIM_Base_Start+0xd0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <HAL_TIM_Base_Start+0xd4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_TIM_Base_Start+0x70>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_TIM_Base_Start+0xd8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d115      	bne.n	8005fd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4b19      	ldr	r3, [pc, #100]	; (8006010 <HAL_TIM_Base_Start+0xdc>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b06      	cmp	r3, #6
 8005fb4:	d015      	beq.n	8005fe2 <HAL_TIM_Base_Start+0xae>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbc:	d011      	beq.n	8005fe2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f042 0201 	orr.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	e008      	b.n	8005fe2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	40010000 	.word	0x40010000
 8005ff8:	40000400 	.word	0x40000400
 8005ffc:	40000800 	.word	0x40000800
 8006000:	40000c00 	.word	0x40000c00
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40001800 	.word	0x40001800
 8006010:	00010007 	.word	0x00010007

08006014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d001      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e054      	b.n	80060d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d01d      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_TIM_Base_Start_IT+0xd8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1f      	ldr	r2, [pc, #124]	; (80060f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_TIM_Base_Start_IT+0xe8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d115      	bne.n	80060c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_TIM_Base_Start_IT+0xec>)
 800609c:	4013      	ands	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2b06      	cmp	r3, #6
 80060a4:	d015      	beq.n	80060d2 <HAL_TIM_Base_Start_IT+0xbe>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ac:	d011      	beq.n	80060d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0201 	orr.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060be:	e008      	b.n	80060d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e000      	b.n	80060d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40001800 	.word	0x40001800
 8006100:	00010007 	.word	0x00010007

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d122      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d11b      	bne.n	8006160 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0202 	mvn.w	r2, #2
 8006130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f9cc 	bl	80064e4 <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9be 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9cf 	bl	80064f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b04      	cmp	r3, #4
 800616c:	d122      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b04      	cmp	r3, #4
 800617a:	d11b      	bne.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9a2 	bl	80064e4 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f994 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f9a5 	bl	80064f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d122      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b08      	cmp	r3, #8
 80061ce:	d11b      	bne.n	8006208 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0208 	mvn.w	r2, #8
 80061d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2204      	movs	r2, #4
 80061de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f978 	bl	80064e4 <HAL_TIM_IC_CaptureCallback>
 80061f4:	e005      	b.n	8006202 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f96a 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f97b 	bl	80064f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f003 0310 	and.w	r3, r3, #16
 8006212:	2b10      	cmp	r3, #16
 8006214:	d122      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b10      	cmp	r3, #16
 8006222:	d11b      	bne.n	800625c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f06f 0210 	mvn.w	r2, #16
 800622c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2208      	movs	r2, #8
 8006232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f94e 	bl	80064e4 <HAL_TIM_IC_CaptureCallback>
 8006248:	e005      	b.n	8006256 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f940 	bl	80064d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f951 	bl	80064f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b01      	cmp	r3, #1
 8006268:	d10e      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d107      	bne.n	8006288 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0201 	mvn.w	r2, #1
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc f924 	bl	80024d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	2b80      	cmp	r3, #128	; 0x80
 8006294:	d10e      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	2b80      	cmp	r3, #128	; 0x80
 80062a2:	d107      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb08 	bl	80068c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d10e      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d107      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fafb 	bl	80068d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d10e      	bne.n	800630e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d107      	bne.n	800630e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8ff 	bl	800650c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0320 	and.w	r3, r3, #32
 8006318:	2b20      	cmp	r3, #32
 800631a:	d10e      	bne.n	800633a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b20      	cmp	r3, #32
 8006328:	d107      	bne.n	800633a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0220 	mvn.w	r2, #32
 8006332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fabb 	bl	80068b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIM_ConfigClockSource+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e0b3      	b.n	80064c4 <HAL_TIM_ConfigClockSource+0x180>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4b55      	ldr	r3, [pc, #340]	; (80064cc <HAL_TIM_ConfigClockSource+0x188>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006394:	d03e      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0xd0>
 8006396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639a:	f200 8087 	bhi.w	80064ac <HAL_TIM_ConfigClockSource+0x168>
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	f000 8085 	beq.w	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063aa:	d87f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063ac:	2b70      	cmp	r3, #112	; 0x70
 80063ae:	d01a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xa2>
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d87b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063b4:	2b60      	cmp	r3, #96	; 0x60
 80063b6:	d050      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x116>
 80063b8:	2b60      	cmp	r3, #96	; 0x60
 80063ba:	d877      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063bc:	2b50      	cmp	r3, #80	; 0x50
 80063be:	d03c      	beq.n	800643a <HAL_TIM_ConfigClockSource+0xf6>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d873      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d058      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x136>
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d86f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d064      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d86b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d060      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d867      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05c      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d05a      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063e4:	e062      	b.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f000 f9ad 	bl	8006754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	609a      	str	r2, [r3, #8]
      break;
 8006412:	e04e      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f000 f996 	bl	8006754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006436:	609a      	str	r2, [r3, #8]
      break;
 8006438:	e03b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 f90a 	bl	8006660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2150      	movs	r1, #80	; 0x50
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f963 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006458:	e02b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 f929 	bl	80066be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2160      	movs	r1, #96	; 0x60
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f953 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006478:	e01b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	f000 f8ea 	bl	8006660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f943 	bl	800671e <TIM_ITRx_SetConfig>
      break;
 8006498:	e00b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f000 f93a 	bl	800671e <TIM_ITRx_SetConfig>
        break;
 80064aa:	e002      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	fffeff88 	.word	0xfffeff88

080064d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a40      	ldr	r2, [pc, #256]	; (8006634 <TIM_Base_SetConfig+0x114>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653e:	d00f      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a3d      	ldr	r2, [pc, #244]	; (8006638 <TIM_Base_SetConfig+0x118>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a3c      	ldr	r2, [pc, #240]	; (800663c <TIM_Base_SetConfig+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a3b      	ldr	r2, [pc, #236]	; (8006640 <TIM_Base_SetConfig+0x120>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a3a      	ldr	r2, [pc, #232]	; (8006644 <TIM_Base_SetConfig+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2f      	ldr	r2, [pc, #188]	; (8006634 <TIM_Base_SetConfig+0x114>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d02b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006580:	d027      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <TIM_Base_SetConfig+0x118>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d023      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a2b      	ldr	r2, [pc, #172]	; (800663c <TIM_Base_SetConfig+0x11c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01f      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <TIM_Base_SetConfig+0x120>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a29      	ldr	r2, [pc, #164]	; (8006644 <TIM_Base_SetConfig+0x124>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d017      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a28      	ldr	r2, [pc, #160]	; (8006648 <TIM_Base_SetConfig+0x128>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <TIM_Base_SetConfig+0x12c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00f      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a26      	ldr	r2, [pc, #152]	; (8006650 <TIM_Base_SetConfig+0x130>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a25      	ldr	r2, [pc, #148]	; (8006654 <TIM_Base_SetConfig+0x134>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d007      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a24      	ldr	r2, [pc, #144]	; (8006658 <TIM_Base_SetConfig+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a23      	ldr	r2, [pc, #140]	; (800665c <TIM_Base_SetConfig+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0a      	ldr	r2, [pc, #40]	; (8006634 <TIM_Base_SetConfig+0x114>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_Base_SetConfig+0xf8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <TIM_Base_SetConfig+0x124>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d103      	bne.n	8006620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	615a      	str	r2, [r3, #20]
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40010000 	.word	0x40010000
 8006638:	40000400 	.word	0x40000400
 800663c:	40000800 	.word	0x40000800
 8006640:	40000c00 	.word	0x40000c00
 8006644:	40010400 	.word	0x40010400
 8006648:	40014000 	.word	0x40014000
 800664c:	40014400 	.word	0x40014400
 8006650:	40014800 	.word	0x40014800
 8006654:	40001800 	.word	0x40001800
 8006658:	40001c00 	.word	0x40001c00
 800665c:	40002000 	.word	0x40002000

08006660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800668a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f023 030a 	bic.w	r3, r3, #10
 800669c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066be:	b480      	push	{r7}
 80066c0:	b087      	sub	sp, #28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0210 	bic.w	r2, r3, #16
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	031b      	lsls	r3, r3, #12
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	011b      	lsls	r3, r3, #4
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	f043 0307 	orr.w	r3, r3, #7
 8006740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	609a      	str	r2, [r3, #8]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	021a      	lsls	r2, r3, #8
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	431a      	orrs	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4313      	orrs	r3, r2
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e06d      	b.n	8006888 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a30      	ldr	r2, [pc, #192]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d108      	bne.n	80067f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a20      	ldr	r2, [pc, #128]	; (8006894 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d022      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d01d      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1d      	ldr	r2, [pc, #116]	; (800689c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d018      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1c      	ldr	r2, [pc, #112]	; (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00e      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d009      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a16      	ldr	r2, [pc, #88]	; (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d004      	beq.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a15      	ldr	r2, [pc, #84]	; (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d10c      	bne.n	8006876 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400
 800689c:	40000400 	.word	0x40000400
 80068a0:	40000800 	.word	0x40000800
 80068a4:	40000c00 	.word	0x40000c00
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40001800 	.word	0x40001800

080068b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e040      	b.n	8006980 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7fb ff62 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2224      	movs	r2, #36	; 0x24
 8006918:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fad2 	bl	8006ed4 <UART_SetConfig>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e022      	b.n	8006980 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fd28 	bl	8007398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006956:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006966:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fdaf 	bl	80074dc <UART_CheckIdleState>
 800697e:	4603      	mov	r3, r0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699a:	2b20      	cmp	r3, #32
 800699c:	d145      	bne.n	8006a2a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_UART_Transmit_IT+0x22>
 80069a4:	88fb      	ldrh	r3, [r7, #6]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e03e      	b.n	8006a2c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_UART_Transmit_IT+0x34>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e037      	b.n	8006a2c <HAL_UART_Transmit_IT+0xa4>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2221      	movs	r2, #33	; 0x21
 80069ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f6:	d107      	bne.n	8006a08 <HAL_UART_Transmit_IT+0x80>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a0d      	ldr	r2, [pc, #52]	; (8006a38 <HAL_UART_Transmit_IT+0xb0>)
 8006a04:	669a      	str	r2, [r3, #104]	; 0x68
 8006a06:	e002      	b.n	8006a0e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <HAL_UART_Transmit_IT+0xb4>)
 8006a0c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a24:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	08007849 	.word	0x08007849
 8006a3c:	080077d7 	.word	0x080077d7

08006a40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a52:	2b20      	cmp	r3, #32
 8006a54:	d12c      	bne.n	8006ab0 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <HAL_UART_Receive_IT+0x22>
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e025      	b.n	8006ab2 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_UART_Receive_IT+0x34>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e01e      	b.n	8006ab2 <HAL_UART_Receive_IT+0x72>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a9e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aa0:	88fb      	ldrh	r3, [r7, #6]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 fdc8 	bl	800763c <UART_Start_Receive_IT>
 8006aac:	4603      	mov	r3, r0
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d113      	bne.n	8006b14 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 81b9 	beq.w	8006e7c <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
      }
      return;
 8006b12:	e1b3      	b.n	8006e7c <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 80e3 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4ba5      	ldr	r3, [pc, #660]	; (8006dc0 <HAL_UART_IRQHandler+0x304>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 80d8 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d010      	beq.n	8006b5e <HAL_UART_IRQHandler+0xa2>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b54:	f043 0201 	orr.w	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d010      	beq.n	8006b8a <HAL_UART_IRQHandler+0xce>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2202      	movs	r2, #2
 8006b78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b80:	f043 0204 	orr.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d010      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xfa>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2204      	movs	r2, #4
 8006ba4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d015      	beq.n	8006bec <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d104      	bne.n	8006bd4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2208      	movs	r2, #8
 8006bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be2:	f043 0208 	orr.w	r2, r3, #8
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d011      	beq.n	8006c1a <HAL_UART_IRQHandler+0x15e>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 812d 	beq.w	8006e80 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d007      	beq.n	8006c4a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d004      	beq.n	8006c6a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d031      	beq.n	8006cce <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fd6e 	bl	800774c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d123      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d013      	beq.n	8006cbe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a4a      	ldr	r2, [pc, #296]	; (8006dc4 <HAL_UART_IRQHandler+0x308>)
 8006c9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fc f91d 	bl	8002ee2 <HAL_DMA_Abort_IT>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d017      	beq.n	8006cde <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	e00f      	b.n	8006cde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f8f2 	bl	8006ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	e00b      	b.n	8006cde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f8ee 	bl	8006ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	e007      	b.n	8006cde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8ea 	bl	8006ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006cdc:	e0d0      	b.n	8006e80 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cde:	bf00      	nop
    return;
 8006ce0:	e0ce      	b.n	8006e80 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	f040 80a7 	bne.w	8006e3a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80a1 	beq.w	8006e3a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 809b 	beq.w	8006e3a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2210      	movs	r2, #16
 8006d0a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d156      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006d24:	893b      	ldrh	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 80ac 	beq.w	8006e84 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d32:	893a      	ldrh	r2, [r7, #8]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	f080 80a5 	bcs.w	8006e84 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	893a      	ldrh	r2, [r7, #8]
 8006d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d4c:	d02a      	beq.n	8006da4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d5c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0210 	bic.w	r2, r2, #16
 8006d98:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fc f82f 	bl	8002e02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f87f 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dbe:	e061      	b.n	8006e84 <HAL_UART_IRQHandler+0x3c8>
 8006dc0:	04000120 	.word	0x04000120
 8006dc4:	080077ab 	.word	0x080077ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d050      	beq.n	8006e88 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8006de6:	897b      	ldrh	r3, [r7, #10]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d04d      	beq.n	8006e88 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006dfa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0210 	bic.w	r2, r2, #16
 8006e2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e2e:	897b      	ldrh	r3, [r7, #10]
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f842 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e38:	e026      	b.n	8006e88 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00d      	beq.n	8006e60 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d008      	beq.n	8006e60 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d01a      	beq.n	8006e8c <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
    }
    return;
 8006e5e:	e015      	b.n	8006e8c <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00c      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fd25 	bl	80078c4 <UART_EndTransmit_IT>
    return;
 8006e7a:	e008      	b.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
      return;
 8006e7c:	bf00      	nop
 8006e7e:	e006      	b.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
    return;
 8006e80:	bf00      	nop
 8006e82:	e004      	b.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
      return;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
      return;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <HAL_UART_IRQHandler+0x3d2>
    return;
 8006e8c:	bf00      	nop
  }

}
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4ba7      	ldr	r3, [pc, #668]	; (800719c <UART_SetConfig+0x2c8>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a95      	ldr	r2, [pc, #596]	; (80071a0 <UART_SetConfig+0x2cc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d120      	bne.n	8006f92 <UART_SetConfig+0xbe>
 8006f50:	4b94      	ldr	r3, [pc, #592]	; (80071a4 <UART_SetConfig+0x2d0>)
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d816      	bhi.n	8006f8c <UART_SetConfig+0xb8>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x90>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f7b 	.word	0x08006f7b
 8006f70:	08006f87 	.word	0x08006f87
 8006f74:	2301      	movs	r3, #1
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e14f      	b.n	800721a <UART_SetConfig+0x346>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e14c      	b.n	800721a <UART_SetConfig+0x346>
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e149      	b.n	800721a <UART_SetConfig+0x346>
 8006f86:	2308      	movs	r3, #8
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e146      	b.n	800721a <UART_SetConfig+0x346>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e143      	b.n	800721a <UART_SetConfig+0x346>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a84      	ldr	r2, [pc, #528]	; (80071a8 <UART_SetConfig+0x2d4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d132      	bne.n	8007002 <UART_SetConfig+0x12e>
 8006f9c:	4b81      	ldr	r3, [pc, #516]	; (80071a4 <UART_SetConfig+0x2d0>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b0c      	cmp	r3, #12
 8006fa8:	d828      	bhi.n	8006ffc <UART_SetConfig+0x128>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0xdc>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fe5 	.word	0x08006fe5
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	08006ffd 	.word	0x08006ffd
 8006fbc:	08006ffd 	.word	0x08006ffd
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08006ffd 	.word	0x08006ffd
 8006fc8:	08006ffd 	.word	0x08006ffd
 8006fcc:	08006ffd 	.word	0x08006ffd
 8006fd0:	08006feb 	.word	0x08006feb
 8006fd4:	08006ffd 	.word	0x08006ffd
 8006fd8:	08006ffd 	.word	0x08006ffd
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08006ff7 	.word	0x08006ff7
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e117      	b.n	800721a <UART_SetConfig+0x346>
 8006fea:	2302      	movs	r3, #2
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e114      	b.n	800721a <UART_SetConfig+0x346>
 8006ff0:	2304      	movs	r3, #4
 8006ff2:	77fb      	strb	r3, [r7, #31]
 8006ff4:	e111      	b.n	800721a <UART_SetConfig+0x346>
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	77fb      	strb	r3, [r7, #31]
 8006ffa:	e10e      	b.n	800721a <UART_SetConfig+0x346>
 8006ffc:	2310      	movs	r3, #16
 8006ffe:	77fb      	strb	r3, [r7, #31]
 8007000:	e10b      	b.n	800721a <UART_SetConfig+0x346>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a69      	ldr	r2, [pc, #420]	; (80071ac <UART_SetConfig+0x2d8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d120      	bne.n	800704e <UART_SetConfig+0x17a>
 800700c:	4b65      	ldr	r3, [pc, #404]	; (80071a4 <UART_SetConfig+0x2d0>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007016:	2b30      	cmp	r3, #48	; 0x30
 8007018:	d013      	beq.n	8007042 <UART_SetConfig+0x16e>
 800701a:	2b30      	cmp	r3, #48	; 0x30
 800701c:	d814      	bhi.n	8007048 <UART_SetConfig+0x174>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d009      	beq.n	8007036 <UART_SetConfig+0x162>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d810      	bhi.n	8007048 <UART_SetConfig+0x174>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <UART_SetConfig+0x15c>
 800702a:	2b10      	cmp	r3, #16
 800702c:	d006      	beq.n	800703c <UART_SetConfig+0x168>
 800702e:	e00b      	b.n	8007048 <UART_SetConfig+0x174>
 8007030:	2300      	movs	r3, #0
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e0f1      	b.n	800721a <UART_SetConfig+0x346>
 8007036:	2302      	movs	r3, #2
 8007038:	77fb      	strb	r3, [r7, #31]
 800703a:	e0ee      	b.n	800721a <UART_SetConfig+0x346>
 800703c:	2304      	movs	r3, #4
 800703e:	77fb      	strb	r3, [r7, #31]
 8007040:	e0eb      	b.n	800721a <UART_SetConfig+0x346>
 8007042:	2308      	movs	r3, #8
 8007044:	77fb      	strb	r3, [r7, #31]
 8007046:	e0e8      	b.n	800721a <UART_SetConfig+0x346>
 8007048:	2310      	movs	r3, #16
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e0e5      	b.n	800721a <UART_SetConfig+0x346>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a57      	ldr	r2, [pc, #348]	; (80071b0 <UART_SetConfig+0x2dc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d120      	bne.n	800709a <UART_SetConfig+0x1c6>
 8007058:	4b52      	ldr	r3, [pc, #328]	; (80071a4 <UART_SetConfig+0x2d0>)
 800705a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800705e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007062:	2bc0      	cmp	r3, #192	; 0xc0
 8007064:	d013      	beq.n	800708e <UART_SetConfig+0x1ba>
 8007066:	2bc0      	cmp	r3, #192	; 0xc0
 8007068:	d814      	bhi.n	8007094 <UART_SetConfig+0x1c0>
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d009      	beq.n	8007082 <UART_SetConfig+0x1ae>
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	d810      	bhi.n	8007094 <UART_SetConfig+0x1c0>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <UART_SetConfig+0x1a8>
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d006      	beq.n	8007088 <UART_SetConfig+0x1b4>
 800707a:	e00b      	b.n	8007094 <UART_SetConfig+0x1c0>
 800707c:	2300      	movs	r3, #0
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e0cb      	b.n	800721a <UART_SetConfig+0x346>
 8007082:	2302      	movs	r3, #2
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e0c8      	b.n	800721a <UART_SetConfig+0x346>
 8007088:	2304      	movs	r3, #4
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e0c5      	b.n	800721a <UART_SetConfig+0x346>
 800708e:	2308      	movs	r3, #8
 8007090:	77fb      	strb	r3, [r7, #31]
 8007092:	e0c2      	b.n	800721a <UART_SetConfig+0x346>
 8007094:	2310      	movs	r3, #16
 8007096:	77fb      	strb	r3, [r7, #31]
 8007098:	e0bf      	b.n	800721a <UART_SetConfig+0x346>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a45      	ldr	r2, [pc, #276]	; (80071b4 <UART_SetConfig+0x2e0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d125      	bne.n	80070f0 <UART_SetConfig+0x21c>
 80070a4:	4b3f      	ldr	r3, [pc, #252]	; (80071a4 <UART_SetConfig+0x2d0>)
 80070a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b2:	d017      	beq.n	80070e4 <UART_SetConfig+0x210>
 80070b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b8:	d817      	bhi.n	80070ea <UART_SetConfig+0x216>
 80070ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070be:	d00b      	beq.n	80070d8 <UART_SetConfig+0x204>
 80070c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c4:	d811      	bhi.n	80070ea <UART_SetConfig+0x216>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <UART_SetConfig+0x1fe>
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	d006      	beq.n	80070de <UART_SetConfig+0x20a>
 80070d0:	e00b      	b.n	80070ea <UART_SetConfig+0x216>
 80070d2:	2300      	movs	r3, #0
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e0a0      	b.n	800721a <UART_SetConfig+0x346>
 80070d8:	2302      	movs	r3, #2
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e09d      	b.n	800721a <UART_SetConfig+0x346>
 80070de:	2304      	movs	r3, #4
 80070e0:	77fb      	strb	r3, [r7, #31]
 80070e2:	e09a      	b.n	800721a <UART_SetConfig+0x346>
 80070e4:	2308      	movs	r3, #8
 80070e6:	77fb      	strb	r3, [r7, #31]
 80070e8:	e097      	b.n	800721a <UART_SetConfig+0x346>
 80070ea:	2310      	movs	r3, #16
 80070ec:	77fb      	strb	r3, [r7, #31]
 80070ee:	e094      	b.n	800721a <UART_SetConfig+0x346>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a30      	ldr	r2, [pc, #192]	; (80071b8 <UART_SetConfig+0x2e4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d125      	bne.n	8007146 <UART_SetConfig+0x272>
 80070fa:	4b2a      	ldr	r3, [pc, #168]	; (80071a4 <UART_SetConfig+0x2d0>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007108:	d017      	beq.n	800713a <UART_SetConfig+0x266>
 800710a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800710e:	d817      	bhi.n	8007140 <UART_SetConfig+0x26c>
 8007110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007114:	d00b      	beq.n	800712e <UART_SetConfig+0x25a>
 8007116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800711a:	d811      	bhi.n	8007140 <UART_SetConfig+0x26c>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <UART_SetConfig+0x254>
 8007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007124:	d006      	beq.n	8007134 <UART_SetConfig+0x260>
 8007126:	e00b      	b.n	8007140 <UART_SetConfig+0x26c>
 8007128:	2301      	movs	r3, #1
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e075      	b.n	800721a <UART_SetConfig+0x346>
 800712e:	2302      	movs	r3, #2
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e072      	b.n	800721a <UART_SetConfig+0x346>
 8007134:	2304      	movs	r3, #4
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	e06f      	b.n	800721a <UART_SetConfig+0x346>
 800713a:	2308      	movs	r3, #8
 800713c:	77fb      	strb	r3, [r7, #31]
 800713e:	e06c      	b.n	800721a <UART_SetConfig+0x346>
 8007140:	2310      	movs	r3, #16
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e069      	b.n	800721a <UART_SetConfig+0x346>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1c      	ldr	r2, [pc, #112]	; (80071bc <UART_SetConfig+0x2e8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d137      	bne.n	80071c0 <UART_SetConfig+0x2ec>
 8007150:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <UART_SetConfig+0x2d0>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007156:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800715a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800715e:	d017      	beq.n	8007190 <UART_SetConfig+0x2bc>
 8007160:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007164:	d817      	bhi.n	8007196 <UART_SetConfig+0x2c2>
 8007166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716a:	d00b      	beq.n	8007184 <UART_SetConfig+0x2b0>
 800716c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007170:	d811      	bhi.n	8007196 <UART_SetConfig+0x2c2>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <UART_SetConfig+0x2aa>
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d006      	beq.n	800718a <UART_SetConfig+0x2b6>
 800717c:	e00b      	b.n	8007196 <UART_SetConfig+0x2c2>
 800717e:	2300      	movs	r3, #0
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e04a      	b.n	800721a <UART_SetConfig+0x346>
 8007184:	2302      	movs	r3, #2
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e047      	b.n	800721a <UART_SetConfig+0x346>
 800718a:	2304      	movs	r3, #4
 800718c:	77fb      	strb	r3, [r7, #31]
 800718e:	e044      	b.n	800721a <UART_SetConfig+0x346>
 8007190:	2308      	movs	r3, #8
 8007192:	77fb      	strb	r3, [r7, #31]
 8007194:	e041      	b.n	800721a <UART_SetConfig+0x346>
 8007196:	2310      	movs	r3, #16
 8007198:	77fb      	strb	r3, [r7, #31]
 800719a:	e03e      	b.n	800721a <UART_SetConfig+0x346>
 800719c:	efff69f3 	.word	0xefff69f3
 80071a0:	40011000 	.word	0x40011000
 80071a4:	40023800 	.word	0x40023800
 80071a8:	40004400 	.word	0x40004400
 80071ac:	40004800 	.word	0x40004800
 80071b0:	40004c00 	.word	0x40004c00
 80071b4:	40005000 	.word	0x40005000
 80071b8:	40011400 	.word	0x40011400
 80071bc:	40007800 	.word	0x40007800
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a71      	ldr	r2, [pc, #452]	; (800738c <UART_SetConfig+0x4b8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d125      	bne.n	8007216 <UART_SetConfig+0x342>
 80071ca:	4b71      	ldr	r3, [pc, #452]	; (8007390 <UART_SetConfig+0x4bc>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071d8:	d017      	beq.n	800720a <UART_SetConfig+0x336>
 80071da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80071de:	d817      	bhi.n	8007210 <UART_SetConfig+0x33c>
 80071e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e4:	d00b      	beq.n	80071fe <UART_SetConfig+0x32a>
 80071e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ea:	d811      	bhi.n	8007210 <UART_SetConfig+0x33c>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <UART_SetConfig+0x324>
 80071f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f4:	d006      	beq.n	8007204 <UART_SetConfig+0x330>
 80071f6:	e00b      	b.n	8007210 <UART_SetConfig+0x33c>
 80071f8:	2300      	movs	r3, #0
 80071fa:	77fb      	strb	r3, [r7, #31]
 80071fc:	e00d      	b.n	800721a <UART_SetConfig+0x346>
 80071fe:	2302      	movs	r3, #2
 8007200:	77fb      	strb	r3, [r7, #31]
 8007202:	e00a      	b.n	800721a <UART_SetConfig+0x346>
 8007204:	2304      	movs	r3, #4
 8007206:	77fb      	strb	r3, [r7, #31]
 8007208:	e007      	b.n	800721a <UART_SetConfig+0x346>
 800720a:	2308      	movs	r3, #8
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e004      	b.n	800721a <UART_SetConfig+0x346>
 8007210:	2310      	movs	r3, #16
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e001      	b.n	800721a <UART_SetConfig+0x346>
 8007216:	2310      	movs	r3, #16
 8007218:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007222:	d15b      	bne.n	80072dc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007224:	7ffb      	ldrb	r3, [r7, #31]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d827      	bhi.n	800727a <UART_SetConfig+0x3a6>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x35c>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007255 	.word	0x08007255
 8007234:	0800725d 	.word	0x0800725d
 8007238:	08007265 	.word	0x08007265
 800723c:	0800727b 	.word	0x0800727b
 8007240:	0800726b 	.word	0x0800726b
 8007244:	0800727b 	.word	0x0800727b
 8007248:	0800727b 	.word	0x0800727b
 800724c:	0800727b 	.word	0x0800727b
 8007250:	08007273 	.word	0x08007273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007254:	f7fe f9fe 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8007258:	61b8      	str	r0, [r7, #24]
        break;
 800725a:	e013      	b.n	8007284 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800725c:	f7fe fa0e 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8007260:	61b8      	str	r0, [r7, #24]
        break;
 8007262:	e00f      	b.n	8007284 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007264:	4b4b      	ldr	r3, [pc, #300]	; (8007394 <UART_SetConfig+0x4c0>)
 8007266:	61bb      	str	r3, [r7, #24]
        break;
 8007268:	e00c      	b.n	8007284 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800726a:	f7fe f905 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 800726e:	61b8      	str	r0, [r7, #24]
        break;
 8007270:	e008      	b.n	8007284 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007276:	61bb      	str	r3, [r7, #24]
        break;
 8007278:	e004      	b.n	8007284 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	77bb      	strb	r3, [r7, #30]
        break;
 8007282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d074      	beq.n	8007374 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	005a      	lsls	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	085b      	lsrs	r3, r3, #1
 8007294:	441a      	add	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	fbb2 f3f3 	udiv	r3, r2, r3
 800729e:	b29b      	uxth	r3, r3
 80072a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b0f      	cmp	r3, #15
 80072a6:	d916      	bls.n	80072d6 <UART_SetConfig+0x402>
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ae:	d212      	bcs.n	80072d6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f023 030f 	bic.w	r3, r3, #15
 80072b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	085b      	lsrs	r3, r3, #1
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	89fb      	ldrh	r3, [r7, #14]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	89fa      	ldrh	r2, [r7, #14]
 80072d2:	60da      	str	r2, [r3, #12]
 80072d4:	e04e      	b.n	8007374 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
 80072da:	e04b      	b.n	8007374 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072dc:	7ffb      	ldrb	r3, [r7, #31]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d827      	bhi.n	8007332 <UART_SetConfig+0x45e>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x414>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	0800730d 	.word	0x0800730d
 80072ec:	08007315 	.word	0x08007315
 80072f0:	0800731d 	.word	0x0800731d
 80072f4:	08007333 	.word	0x08007333
 80072f8:	08007323 	.word	0x08007323
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007333 	.word	0x08007333
 8007304:	08007333 	.word	0x08007333
 8007308:	0800732b 	.word	0x0800732b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800730c:	f7fe f9a2 	bl	8005654 <HAL_RCC_GetPCLK1Freq>
 8007310:	61b8      	str	r0, [r7, #24]
        break;
 8007312:	e013      	b.n	800733c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007314:	f7fe f9b2 	bl	800567c <HAL_RCC_GetPCLK2Freq>
 8007318:	61b8      	str	r0, [r7, #24]
        break;
 800731a:	e00f      	b.n	800733c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800731c:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <UART_SetConfig+0x4c0>)
 800731e:	61bb      	str	r3, [r7, #24]
        break;
 8007320:	e00c      	b.n	800733c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007322:	f7fe f8a9 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8007326:	61b8      	str	r0, [r7, #24]
        break;
 8007328:	e008      	b.n	800733c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800732e:	61bb      	str	r3, [r7, #24]
        break;
 8007330:	e004      	b.n	800733c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	77bb      	strb	r3, [r7, #30]
        break;
 800733a:	bf00      	nop
    }

    if (pclk != 0U)
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	085a      	lsrs	r2, r3, #1
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	441a      	add	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	b29b      	uxth	r3, r3
 8007356:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b0f      	cmp	r3, #15
 800735c:	d908      	bls.n	8007370 <UART_SetConfig+0x49c>
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007364:	d204      	bcs.n	8007370 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	60da      	str	r2, [r3, #12]
 800736e:	e001      	b.n	8007374 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007380:	7fbb      	ldrb	r3, [r7, #30]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40007c00 	.word	0x40007c00
 8007390:	40023800 	.word	0x40023800
 8007394:	00f42400 	.word	0x00f42400

08007398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01a      	beq.n	80074ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007496:	d10a      	bne.n	80074ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074ec:	f7fb fb48 	bl	8002b80 <HAL_GetTick>
 80074f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d10e      	bne.n	800751e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f817 	bl	8007542 <UART_WaitOnFlagUntilTimeout>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e00d      	b.n	800753a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	60f8      	str	r0, [r7, #12]
 800754a:	60b9      	str	r1, [r7, #8]
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	e05e      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d05a      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800755c:	f7fb fb10 	bl	8002b80 <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	429a      	cmp	r2, r3
 800756a:	d302      	bcc.n	8007572 <UART_WaitOnFlagUntilTimeout+0x30>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d11b      	bne.n	80075aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007580:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0201 	bic.w	r2, r2, #1
 8007590:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2220      	movs	r2, #32
 8007596:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2220      	movs	r2, #32
 800759c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e043      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d02c      	beq.n	8007612 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c6:	d124      	bne.n	8007612 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0201 	bic.w	r2, r2, #1
 80075f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2220      	movs	r2, #32
 80075fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e00f      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4013      	ands	r3, r2
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	429a      	cmp	r2, r3
 8007620:	bf0c      	ite	eq
 8007622:	2301      	moveq	r3, #1
 8007624:	2300      	movne	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	429a      	cmp	r2, r3
 800762e:	d091      	beq.n	8007554 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	88fa      	ldrh	r2, [r7, #6]
 8007654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	d10e      	bne.n	800768e <UART_Start_Receive_IT+0x52>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d105      	bne.n	8007684 <UART_Start_Receive_IT+0x48>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800767e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007682:	e02d      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	22ff      	movs	r2, #255	; 0xff
 8007688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800768c:	e028      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10d      	bne.n	80076b2 <UART_Start_Receive_IT+0x76>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d104      	bne.n	80076a8 <UART_Start_Receive_IT+0x6c>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	22ff      	movs	r2, #255	; 0xff
 80076a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a6:	e01b      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	227f      	movs	r2, #127	; 0x7f
 80076ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076b0:	e016      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ba:	d10d      	bne.n	80076d8 <UART_Start_Receive_IT+0x9c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <UART_Start_Receive_IT+0x92>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	227f      	movs	r2, #127	; 0x7f
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076cc:	e008      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	223f      	movs	r2, #63	; 0x3f
 80076d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076d6:	e003      	b.n	80076e0 <UART_Start_Receive_IT+0xa4>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2222      	movs	r2, #34	; 0x22
 80076ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007706:	d107      	bne.n	8007718 <UART_Start_Receive_IT+0xdc>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4a0c      	ldr	r2, [pc, #48]	; (8007744 <UART_Start_Receive_IT+0x108>)
 8007714:	665a      	str	r2, [r3, #100]	; 0x64
 8007716:	e002      	b.n	800771e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4a0b      	ldr	r2, [pc, #44]	; (8007748 <UART_Start_Receive_IT+0x10c>)
 800771c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007734:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	080079cb 	.word	0x080079cb
 8007748:	080078f7 	.word	0x080078f7

0800774c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007762:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	2b01      	cmp	r3, #1
 800777a:	d107      	bne.n	800778c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0210 	bic.w	r2, r2, #16
 800778a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff fb6d 	bl	8006ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077e2:	2b21      	cmp	r3, #33	; 0x21
 80077e4:	d12a      	bne.n	800783c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d110      	bne.n	8007814 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007800:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007810:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007812:	e013      	b.n	800783c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007854:	2b21      	cmp	r3, #33	; 0x21
 8007856:	d12f      	bne.n	80078b8 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800785e:	b29b      	uxth	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007872:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007882:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007884:	e018      	b.n	80078b8 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fad3 	bl	8006e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007904:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800790a:	2b22      	cmp	r3, #34	; 0x22
 800790c:	d151      	bne.n	80079b2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007916:	89bb      	ldrh	r3, [r7, #12]
 8007918:	b2d9      	uxtb	r1, r3
 800791a:	89fb      	ldrh	r3, [r7, #14]
 800791c:	b2da      	uxtb	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	400a      	ands	r2, r1
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007938:	b29b      	uxth	r3, r3
 800793a:	3b01      	subs	r3, #1
 800793c:	b29a      	uxth	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d138      	bne.n	80079c2 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800795e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10f      	bne.n	80079a4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0210 	bic.w	r2, r2, #16
 8007992:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff fa8d 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
 80079a2:	e002      	b.n	80079aa <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fa fdaf 	bl	8002508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079b0:	e007      	b.n	80079c2 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699a      	ldr	r2, [r3, #24]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f042 0208 	orr.w	r2, r2, #8
 80079c0:	619a      	str	r2, [r3, #24]
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079d8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079de:	2b22      	cmp	r3, #34	; 0x22
 80079e0:	d151      	bne.n	8007a86 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ee:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80079f0:	89ba      	ldrh	r2, [r7, #12]
 80079f2:	89fb      	ldrh	r3, [r7, #14]
 80079f4:	4013      	ands	r3, r2
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a00:	1c9a      	adds	r2, r3, #2
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d138      	bne.n	8007a96 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007a32:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10f      	bne.n	8007a78 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0210 	bic.w	r2, r2, #16
 8007a66:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff fa23 	bl	8006ebc <HAL_UARTEx_RxEventCallback>
 8007a76:	e002      	b.n	8007a7e <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7fa fd45 	bl	8002508 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a84:	e007      	b.n	8007a96 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0208 	orr.w	r2, r2, #8
 8007a94:	619a      	str	r2, [r3, #24]
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	; (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	2000000c 	.word	0x2000000c

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	; (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	; (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	; (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	; (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f000 ffec 	bl	8008a9c <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	080094f0 	.word	0x080094f0
 8007ae8:	080094f0 	.word	0x080094f0
 8007aec:	080094f0 	.word	0x080094f0
 8007af0:	080094f4 	.word	0x080094f4

08007af4 <memset>:
 8007af4:	4402      	add	r2, r0
 8007af6:	4603      	mov	r3, r0
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d100      	bne.n	8007afe <memset+0xa>
 8007afc:	4770      	bx	lr
 8007afe:	f803 1b01 	strb.w	r1, [r3], #1
 8007b02:	e7f9      	b.n	8007af8 <memset+0x4>

08007b04 <iprintf>:
 8007b04:	b40f      	push	{r0, r1, r2, r3}
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <iprintf+0x2c>)
 8007b08:	b513      	push	{r0, r1, r4, lr}
 8007b0a:	681c      	ldr	r4, [r3, #0]
 8007b0c:	b124      	cbz	r4, 8007b18 <iprintf+0x14>
 8007b0e:	69a3      	ldr	r3, [r4, #24]
 8007b10:	b913      	cbnz	r3, 8007b18 <iprintf+0x14>
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 fa5e 	bl	8007fd4 <__sinit>
 8007b18:	ab05      	add	r3, sp, #20
 8007b1a:	9a04      	ldr	r2, [sp, #16]
 8007b1c:	68a1      	ldr	r1, [r4, #8]
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 fc2f 	bl	8008384 <_vfiprintf_r>
 8007b26:	b002      	add	sp, #8
 8007b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b2c:	b004      	add	sp, #16
 8007b2e:	4770      	bx	lr
 8007b30:	2000000c 	.word	0x2000000c

08007b34 <_puts_r>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	460e      	mov	r6, r1
 8007b38:	4605      	mov	r5, r0
 8007b3a:	b118      	cbz	r0, 8007b44 <_puts_r+0x10>
 8007b3c:	6983      	ldr	r3, [r0, #24]
 8007b3e:	b90b      	cbnz	r3, 8007b44 <_puts_r+0x10>
 8007b40:	f000 fa48 	bl	8007fd4 <__sinit>
 8007b44:	69ab      	ldr	r3, [r5, #24]
 8007b46:	68ac      	ldr	r4, [r5, #8]
 8007b48:	b913      	cbnz	r3, 8007b50 <_puts_r+0x1c>
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f000 fa42 	bl	8007fd4 <__sinit>
 8007b50:	4b2c      	ldr	r3, [pc, #176]	; (8007c04 <_puts_r+0xd0>)
 8007b52:	429c      	cmp	r4, r3
 8007b54:	d120      	bne.n	8007b98 <_puts_r+0x64>
 8007b56:	686c      	ldr	r4, [r5, #4]
 8007b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d405      	bmi.n	8007b6a <_puts_r+0x36>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	0598      	lsls	r0, r3, #22
 8007b62:	d402      	bmi.n	8007b6a <_puts_r+0x36>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f000 fad3 	bl	8008110 <__retarget_lock_acquire_recursive>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	0719      	lsls	r1, r3, #28
 8007b6e:	d51d      	bpl.n	8007bac <_puts_r+0x78>
 8007b70:	6923      	ldr	r3, [r4, #16]
 8007b72:	b1db      	cbz	r3, 8007bac <_puts_r+0x78>
 8007b74:	3e01      	subs	r6, #1
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	bb39      	cbnz	r1, 8007bd2 <_puts_r+0x9e>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da38      	bge.n	8007bf8 <_puts_r+0xc4>
 8007b86:	4622      	mov	r2, r4
 8007b88:	210a      	movs	r1, #10
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f000 f848 	bl	8007c20 <__swbuf_r>
 8007b90:	3001      	adds	r0, #1
 8007b92:	d011      	beq.n	8007bb8 <_puts_r+0x84>
 8007b94:	250a      	movs	r5, #10
 8007b96:	e011      	b.n	8007bbc <_puts_r+0x88>
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <_puts_r+0xd4>)
 8007b9a:	429c      	cmp	r4, r3
 8007b9c:	d101      	bne.n	8007ba2 <_puts_r+0x6e>
 8007b9e:	68ac      	ldr	r4, [r5, #8]
 8007ba0:	e7da      	b.n	8007b58 <_puts_r+0x24>
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <_puts_r+0xd8>)
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	bf08      	it	eq
 8007ba8:	68ec      	ldreq	r4, [r5, #12]
 8007baa:	e7d5      	b.n	8007b58 <_puts_r+0x24>
 8007bac:	4621      	mov	r1, r4
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 f888 	bl	8007cc4 <__swsetup_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d0dd      	beq.n	8007b74 <_puts_r+0x40>
 8007bb8:	f04f 35ff 	mov.w	r5, #4294967295
 8007bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bbe:	07da      	lsls	r2, r3, #31
 8007bc0:	d405      	bmi.n	8007bce <_puts_r+0x9a>
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	059b      	lsls	r3, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_puts_r+0x9a>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bca:	f000 faa2 	bl	8008112 <__retarget_lock_release_recursive>
 8007bce:	4628      	mov	r0, r5
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da04      	bge.n	8007be0 <_puts_r+0xac>
 8007bd6:	69a2      	ldr	r2, [r4, #24]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	dc06      	bgt.n	8007bea <_puts_r+0xb6>
 8007bdc:	290a      	cmp	r1, #10
 8007bde:	d004      	beq.n	8007bea <_puts_r+0xb6>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	7019      	strb	r1, [r3, #0]
 8007be8:	e7c5      	b.n	8007b76 <_puts_r+0x42>
 8007bea:	4622      	mov	r2, r4
 8007bec:	4628      	mov	r0, r5
 8007bee:	f000 f817 	bl	8007c20 <__swbuf_r>
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	d1bf      	bne.n	8007b76 <_puts_r+0x42>
 8007bf6:	e7df      	b.n	8007bb8 <_puts_r+0x84>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	250a      	movs	r5, #10
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	6022      	str	r2, [r4, #0]
 8007c00:	701d      	strb	r5, [r3, #0]
 8007c02:	e7db      	b.n	8007bbc <_puts_r+0x88>
 8007c04:	08009474 	.word	0x08009474
 8007c08:	08009494 	.word	0x08009494
 8007c0c:	08009454 	.word	0x08009454

08007c10 <puts>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <puts+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f7ff bf8d 	b.w	8007b34 <_puts_r>
 8007c1a:	bf00      	nop
 8007c1c:	2000000c 	.word	0x2000000c

08007c20 <__swbuf_r>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	460e      	mov	r6, r1
 8007c24:	4614      	mov	r4, r2
 8007c26:	4605      	mov	r5, r0
 8007c28:	b118      	cbz	r0, 8007c32 <__swbuf_r+0x12>
 8007c2a:	6983      	ldr	r3, [r0, #24]
 8007c2c:	b90b      	cbnz	r3, 8007c32 <__swbuf_r+0x12>
 8007c2e:	f000 f9d1 	bl	8007fd4 <__sinit>
 8007c32:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <__swbuf_r+0x98>)
 8007c34:	429c      	cmp	r4, r3
 8007c36:	d12b      	bne.n	8007c90 <__swbuf_r+0x70>
 8007c38:	686c      	ldr	r4, [r5, #4]
 8007c3a:	69a3      	ldr	r3, [r4, #24]
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	071a      	lsls	r2, r3, #28
 8007c42:	d52f      	bpl.n	8007ca4 <__swbuf_r+0x84>
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b36b      	cbz	r3, 8007ca4 <__swbuf_r+0x84>
 8007c48:	6923      	ldr	r3, [r4, #16]
 8007c4a:	6820      	ldr	r0, [r4, #0]
 8007c4c:	1ac0      	subs	r0, r0, r3
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	b2f6      	uxtb	r6, r6
 8007c52:	4283      	cmp	r3, r0
 8007c54:	4637      	mov	r7, r6
 8007c56:	dc04      	bgt.n	8007c62 <__swbuf_r+0x42>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 f926 	bl	8007eac <_fflush_r>
 8007c60:	bb30      	cbnz	r0, 8007cb0 <__swbuf_r+0x90>
 8007c62:	68a3      	ldr	r3, [r4, #8]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	60a3      	str	r3, [r4, #8]
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	6022      	str	r2, [r4, #0]
 8007c6e:	701e      	strb	r6, [r3, #0]
 8007c70:	6963      	ldr	r3, [r4, #20]
 8007c72:	3001      	adds	r0, #1
 8007c74:	4283      	cmp	r3, r0
 8007c76:	d004      	beq.n	8007c82 <__swbuf_r+0x62>
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	07db      	lsls	r3, r3, #31
 8007c7c:	d506      	bpl.n	8007c8c <__swbuf_r+0x6c>
 8007c7e:	2e0a      	cmp	r6, #10
 8007c80:	d104      	bne.n	8007c8c <__swbuf_r+0x6c>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4628      	mov	r0, r5
 8007c86:	f000 f911 	bl	8007eac <_fflush_r>
 8007c8a:	b988      	cbnz	r0, 8007cb0 <__swbuf_r+0x90>
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <__swbuf_r+0x9c>)
 8007c92:	429c      	cmp	r4, r3
 8007c94:	d101      	bne.n	8007c9a <__swbuf_r+0x7a>
 8007c96:	68ac      	ldr	r4, [r5, #8]
 8007c98:	e7cf      	b.n	8007c3a <__swbuf_r+0x1a>
 8007c9a:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <__swbuf_r+0xa0>)
 8007c9c:	429c      	cmp	r4, r3
 8007c9e:	bf08      	it	eq
 8007ca0:	68ec      	ldreq	r4, [r5, #12]
 8007ca2:	e7ca      	b.n	8007c3a <__swbuf_r+0x1a>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f000 f80c 	bl	8007cc4 <__swsetup_r>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0cb      	beq.n	8007c48 <__swbuf_r+0x28>
 8007cb0:	f04f 37ff 	mov.w	r7, #4294967295
 8007cb4:	e7ea      	b.n	8007c8c <__swbuf_r+0x6c>
 8007cb6:	bf00      	nop
 8007cb8:	08009474 	.word	0x08009474
 8007cbc:	08009494 	.word	0x08009494
 8007cc0:	08009454 	.word	0x08009454

08007cc4 <__swsetup_r>:
 8007cc4:	4b32      	ldr	r3, [pc, #200]	; (8007d90 <__swsetup_r+0xcc>)
 8007cc6:	b570      	push	{r4, r5, r6, lr}
 8007cc8:	681d      	ldr	r5, [r3, #0]
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460c      	mov	r4, r1
 8007cce:	b125      	cbz	r5, 8007cda <__swsetup_r+0x16>
 8007cd0:	69ab      	ldr	r3, [r5, #24]
 8007cd2:	b913      	cbnz	r3, 8007cda <__swsetup_r+0x16>
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f97d 	bl	8007fd4 <__sinit>
 8007cda:	4b2e      	ldr	r3, [pc, #184]	; (8007d94 <__swsetup_r+0xd0>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d10f      	bne.n	8007d00 <__swsetup_r+0x3c>
 8007ce0:	686c      	ldr	r4, [r5, #4]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ce8:	0719      	lsls	r1, r3, #28
 8007cea:	d42c      	bmi.n	8007d46 <__swsetup_r+0x82>
 8007cec:	06dd      	lsls	r5, r3, #27
 8007cee:	d411      	bmi.n	8007d14 <__swsetup_r+0x50>
 8007cf0:	2309      	movs	r3, #9
 8007cf2:	6033      	str	r3, [r6, #0]
 8007cf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	e03e      	b.n	8007d7e <__swsetup_r+0xba>
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <__swsetup_r+0xd4>)
 8007d02:	429c      	cmp	r4, r3
 8007d04:	d101      	bne.n	8007d0a <__swsetup_r+0x46>
 8007d06:	68ac      	ldr	r4, [r5, #8]
 8007d08:	e7eb      	b.n	8007ce2 <__swsetup_r+0x1e>
 8007d0a:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <__swsetup_r+0xd8>)
 8007d0c:	429c      	cmp	r4, r3
 8007d0e:	bf08      	it	eq
 8007d10:	68ec      	ldreq	r4, [r5, #12]
 8007d12:	e7e6      	b.n	8007ce2 <__swsetup_r+0x1e>
 8007d14:	0758      	lsls	r0, r3, #29
 8007d16:	d512      	bpl.n	8007d3e <__swsetup_r+0x7a>
 8007d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d1a:	b141      	cbz	r1, 8007d2e <__swsetup_r+0x6a>
 8007d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d002      	beq.n	8007d2a <__swsetup_r+0x66>
 8007d24:	4630      	mov	r0, r6
 8007d26:	f000 fa59 	bl	80081dc <_free_r>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	2300      	movs	r3, #0
 8007d38:	6063      	str	r3, [r4, #4]
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	f043 0308 	orr.w	r3, r3, #8
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	b94b      	cbnz	r3, 8007d5e <__swsetup_r+0x9a>
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d54:	d003      	beq.n	8007d5e <__swsetup_r+0x9a>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 f9ff 	bl	800815c <__smakebuf_r>
 8007d5e:	89a0      	ldrh	r0, [r4, #12]
 8007d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d64:	f010 0301 	ands.w	r3, r0, #1
 8007d68:	d00a      	beq.n	8007d80 <__swsetup_r+0xbc>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	6963      	ldr	r3, [r4, #20]
 8007d70:	425b      	negs	r3, r3
 8007d72:	61a3      	str	r3, [r4, #24]
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	b943      	cbnz	r3, 8007d8a <__swsetup_r+0xc6>
 8007d78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d7c:	d1ba      	bne.n	8007cf4 <__swsetup_r+0x30>
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	0781      	lsls	r1, r0, #30
 8007d82:	bf58      	it	pl
 8007d84:	6963      	ldrpl	r3, [r4, #20]
 8007d86:	60a3      	str	r3, [r4, #8]
 8007d88:	e7f4      	b.n	8007d74 <__swsetup_r+0xb0>
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	e7f7      	b.n	8007d7e <__swsetup_r+0xba>
 8007d8e:	bf00      	nop
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	08009474 	.word	0x08009474
 8007d98:	08009494 	.word	0x08009494
 8007d9c:	08009454 	.word	0x08009454

08007da0 <__sflush_r>:
 8007da0:	898a      	ldrh	r2, [r1, #12]
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	4605      	mov	r5, r0
 8007da8:	0710      	lsls	r0, r2, #28
 8007daa:	460c      	mov	r4, r1
 8007dac:	d458      	bmi.n	8007e60 <__sflush_r+0xc0>
 8007dae:	684b      	ldr	r3, [r1, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc05      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007db4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc02      	bgt.n	8007dc0 <__sflush_r+0x20>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d0f9      	beq.n	8007dba <__sflush_r+0x1a>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dcc:	682f      	ldr	r7, [r5, #0]
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	d032      	beq.n	8007e38 <__sflush_r+0x98>
 8007dd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	075a      	lsls	r2, r3, #29
 8007dd8:	d505      	bpl.n	8007de6 <__sflush_r+0x46>
 8007dda:	6863      	ldr	r3, [r4, #4]
 8007ddc:	1ac0      	subs	r0, r0, r3
 8007dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de0:	b10b      	cbz	r3, 8007de6 <__sflush_r+0x46>
 8007de2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de4:	1ac0      	subs	r0, r0, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	4602      	mov	r2, r0
 8007dea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	d106      	bne.n	8007e06 <__sflush_r+0x66>
 8007df8:	6829      	ldr	r1, [r5, #0]
 8007dfa:	291d      	cmp	r1, #29
 8007dfc:	d82c      	bhi.n	8007e58 <__sflush_r+0xb8>
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <__sflush_r+0x108>)
 8007e00:	40ca      	lsrs	r2, r1
 8007e02:	07d6      	lsls	r6, r2, #31
 8007e04:	d528      	bpl.n	8007e58 <__sflush_r+0xb8>
 8007e06:	2200      	movs	r2, #0
 8007e08:	6062      	str	r2, [r4, #4]
 8007e0a:	04d9      	lsls	r1, r3, #19
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	d504      	bpl.n	8007e1c <__sflush_r+0x7c>
 8007e12:	1c42      	adds	r2, r0, #1
 8007e14:	d101      	bne.n	8007e1a <__sflush_r+0x7a>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	b903      	cbnz	r3, 8007e1c <__sflush_r+0x7c>
 8007e1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	2900      	cmp	r1, #0
 8007e22:	d0ca      	beq.n	8007dba <__sflush_r+0x1a>
 8007e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <__sflush_r+0x92>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f000 f9d5 	bl	80081dc <_free_r>
 8007e32:	2000      	movs	r0, #0
 8007e34:	6360      	str	r0, [r4, #52]	; 0x34
 8007e36:	e7c1      	b.n	8007dbc <__sflush_r+0x1c>
 8007e38:	6a21      	ldr	r1, [r4, #32]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	47b0      	blx	r6
 8007e40:	1c41      	adds	r1, r0, #1
 8007e42:	d1c7      	bne.n	8007dd4 <__sflush_r+0x34>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0c4      	beq.n	8007dd4 <__sflush_r+0x34>
 8007e4a:	2b1d      	cmp	r3, #29
 8007e4c:	d001      	beq.n	8007e52 <__sflush_r+0xb2>
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	d101      	bne.n	8007e56 <__sflush_r+0xb6>
 8007e52:	602f      	str	r7, [r5, #0]
 8007e54:	e7b1      	b.n	8007dba <__sflush_r+0x1a>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	e7ad      	b.n	8007dbc <__sflush_r+0x1c>
 8007e60:	690f      	ldr	r7, [r1, #16]
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d0a9      	beq.n	8007dba <__sflush_r+0x1a>
 8007e66:	0793      	lsls	r3, r2, #30
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	bf08      	it	eq
 8007e6c:	694b      	ldreq	r3, [r1, #20]
 8007e6e:	600f      	str	r7, [r1, #0]
 8007e70:	bf18      	it	ne
 8007e72:	2300      	movne	r3, #0
 8007e74:	eba6 0807 	sub.w	r8, r6, r7
 8007e78:	608b      	str	r3, [r1, #8]
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	dd9c      	ble.n	8007dba <__sflush_r+0x1a>
 8007e80:	6a21      	ldr	r1, [r4, #32]
 8007e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e84:	4643      	mov	r3, r8
 8007e86:	463a      	mov	r2, r7
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b0      	blx	r6
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	dc06      	bgt.n	8007e9e <__sflush_r+0xfe>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e78e      	b.n	8007dbc <__sflush_r+0x1c>
 8007e9e:	4407      	add	r7, r0
 8007ea0:	eba8 0800 	sub.w	r8, r8, r0
 8007ea4:	e7e9      	b.n	8007e7a <__sflush_r+0xda>
 8007ea6:	bf00      	nop
 8007ea8:	20400001 	.word	0x20400001

08007eac <_fflush_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	b913      	cbnz	r3, 8007ebc <_fflush_r+0x10>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	b118      	cbz	r0, 8007ec6 <_fflush_r+0x1a>
 8007ebe:	6983      	ldr	r3, [r0, #24]
 8007ec0:	b90b      	cbnz	r3, 8007ec6 <_fflush_r+0x1a>
 8007ec2:	f000 f887 	bl	8007fd4 <__sinit>
 8007ec6:	4b14      	ldr	r3, [pc, #80]	; (8007f18 <_fflush_r+0x6c>)
 8007ec8:	429c      	cmp	r4, r3
 8007eca:	d11b      	bne.n	8007f04 <_fflush_r+0x58>
 8007ecc:	686c      	ldr	r4, [r5, #4]
 8007ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0ef      	beq.n	8007eb6 <_fflush_r+0xa>
 8007ed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ed8:	07d0      	lsls	r0, r2, #31
 8007eda:	d404      	bmi.n	8007ee6 <_fflush_r+0x3a>
 8007edc:	0599      	lsls	r1, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_fflush_r+0x3a>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee2:	f000 f915 	bl	8008110 <__retarget_lock_acquire_recursive>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	4621      	mov	r1, r4
 8007eea:	f7ff ff59 	bl	8007da0 <__sflush_r>
 8007eee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef0:	07da      	lsls	r2, r3, #31
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	d4e0      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007ef6:	89a3      	ldrh	r3, [r4, #12]
 8007ef8:	059b      	lsls	r3, r3, #22
 8007efa:	d4dd      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007efe:	f000 f908 	bl	8008112 <__retarget_lock_release_recursive>
 8007f02:	e7d9      	b.n	8007eb8 <_fflush_r+0xc>
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <_fflush_r+0x70>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d101      	bne.n	8007f0e <_fflush_r+0x62>
 8007f0a:	68ac      	ldr	r4, [r5, #8]
 8007f0c:	e7df      	b.n	8007ece <_fflush_r+0x22>
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <_fflush_r+0x74>)
 8007f10:	429c      	cmp	r4, r3
 8007f12:	bf08      	it	eq
 8007f14:	68ec      	ldreq	r4, [r5, #12]
 8007f16:	e7da      	b.n	8007ece <_fflush_r+0x22>
 8007f18:	08009474 	.word	0x08009474
 8007f1c:	08009494 	.word	0x08009494
 8007f20:	08009454 	.word	0x08009454

08007f24 <std>:
 8007f24:	2300      	movs	r3, #0
 8007f26:	b510      	push	{r4, lr}
 8007f28:	4604      	mov	r4, r0
 8007f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f32:	6083      	str	r3, [r0, #8]
 8007f34:	8181      	strh	r1, [r0, #12]
 8007f36:	6643      	str	r3, [r0, #100]	; 0x64
 8007f38:	81c2      	strh	r2, [r0, #14]
 8007f3a:	6183      	str	r3, [r0, #24]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	2208      	movs	r2, #8
 8007f40:	305c      	adds	r0, #92	; 0x5c
 8007f42:	f7ff fdd7 	bl	8007af4 <memset>
 8007f46:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <std+0x38>)
 8007f48:	6263      	str	r3, [r4, #36]	; 0x24
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x3c>)
 8007f4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <std+0x40>)
 8007f50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f52:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <std+0x44>)
 8007f54:	6224      	str	r4, [r4, #32]
 8007f56:	6323      	str	r3, [r4, #48]	; 0x30
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800892d 	.word	0x0800892d
 8007f60:	0800894f 	.word	0x0800894f
 8007f64:	08008987 	.word	0x08008987
 8007f68:	080089ab 	.word	0x080089ab

08007f6c <_cleanup_r>:
 8007f6c:	4901      	ldr	r1, [pc, #4]	; (8007f74 <_cleanup_r+0x8>)
 8007f6e:	f000 b8af 	b.w	80080d0 <_fwalk_reent>
 8007f72:	bf00      	nop
 8007f74:	08007ead 	.word	0x08007ead

08007f78 <__sfmoreglue>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	1e4a      	subs	r2, r1, #1
 8007f7c:	2568      	movs	r5, #104	; 0x68
 8007f7e:	4355      	muls	r5, r2
 8007f80:	460e      	mov	r6, r1
 8007f82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f86:	f000 f979 	bl	800827c <_malloc_r>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	b140      	cbz	r0, 8007fa0 <__sfmoreglue+0x28>
 8007f8e:	2100      	movs	r1, #0
 8007f90:	e9c0 1600 	strd	r1, r6, [r0]
 8007f94:	300c      	adds	r0, #12
 8007f96:	60a0      	str	r0, [r4, #8]
 8007f98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007f9c:	f7ff fdaa 	bl	8007af4 <memset>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}

08007fa4 <__sfp_lock_acquire>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__sfp_lock_acquire+0x8>)
 8007fa6:	f000 b8b3 	b.w	8008110 <__retarget_lock_acquire_recursive>
 8007faa:	bf00      	nop
 8007fac:	200003cc 	.word	0x200003cc

08007fb0 <__sfp_lock_release>:
 8007fb0:	4801      	ldr	r0, [pc, #4]	; (8007fb8 <__sfp_lock_release+0x8>)
 8007fb2:	f000 b8ae 	b.w	8008112 <__retarget_lock_release_recursive>
 8007fb6:	bf00      	nop
 8007fb8:	200003cc 	.word	0x200003cc

08007fbc <__sinit_lock_acquire>:
 8007fbc:	4801      	ldr	r0, [pc, #4]	; (8007fc4 <__sinit_lock_acquire+0x8>)
 8007fbe:	f000 b8a7 	b.w	8008110 <__retarget_lock_acquire_recursive>
 8007fc2:	bf00      	nop
 8007fc4:	200003c7 	.word	0x200003c7

08007fc8 <__sinit_lock_release>:
 8007fc8:	4801      	ldr	r0, [pc, #4]	; (8007fd0 <__sinit_lock_release+0x8>)
 8007fca:	f000 b8a2 	b.w	8008112 <__retarget_lock_release_recursive>
 8007fce:	bf00      	nop
 8007fd0:	200003c7 	.word	0x200003c7

08007fd4 <__sinit>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	f7ff fff0 	bl	8007fbc <__sinit_lock_acquire>
 8007fdc:	69a3      	ldr	r3, [r4, #24]
 8007fde:	b11b      	cbz	r3, 8007fe8 <__sinit+0x14>
 8007fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe4:	f7ff bff0 	b.w	8007fc8 <__sinit_lock_release>
 8007fe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007fec:	6523      	str	r3, [r4, #80]	; 0x50
 8007fee:	4b13      	ldr	r3, [pc, #76]	; (800803c <__sinit+0x68>)
 8007ff0:	4a13      	ldr	r2, [pc, #76]	; (8008040 <__sinit+0x6c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	bf04      	itt	eq
 8007ffa:	2301      	moveq	r3, #1
 8007ffc:	61a3      	streq	r3, [r4, #24]
 8007ffe:	4620      	mov	r0, r4
 8008000:	f000 f820 	bl	8008044 <__sfp>
 8008004:	6060      	str	r0, [r4, #4]
 8008006:	4620      	mov	r0, r4
 8008008:	f000 f81c 	bl	8008044 <__sfp>
 800800c:	60a0      	str	r0, [r4, #8]
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f818 	bl	8008044 <__sfp>
 8008014:	2200      	movs	r2, #0
 8008016:	60e0      	str	r0, [r4, #12]
 8008018:	2104      	movs	r1, #4
 800801a:	6860      	ldr	r0, [r4, #4]
 800801c:	f7ff ff82 	bl	8007f24 <std>
 8008020:	68a0      	ldr	r0, [r4, #8]
 8008022:	2201      	movs	r2, #1
 8008024:	2109      	movs	r1, #9
 8008026:	f7ff ff7d 	bl	8007f24 <std>
 800802a:	68e0      	ldr	r0, [r4, #12]
 800802c:	2202      	movs	r2, #2
 800802e:	2112      	movs	r1, #18
 8008030:	f7ff ff78 	bl	8007f24 <std>
 8008034:	2301      	movs	r3, #1
 8008036:	61a3      	str	r3, [r4, #24]
 8008038:	e7d2      	b.n	8007fe0 <__sinit+0xc>
 800803a:	bf00      	nop
 800803c:	08009450 	.word	0x08009450
 8008040:	08007f6d 	.word	0x08007f6d

08008044 <__sfp>:
 8008044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008046:	4607      	mov	r7, r0
 8008048:	f7ff ffac 	bl	8007fa4 <__sfp_lock_acquire>
 800804c:	4b1e      	ldr	r3, [pc, #120]	; (80080c8 <__sfp+0x84>)
 800804e:	681e      	ldr	r6, [r3, #0]
 8008050:	69b3      	ldr	r3, [r6, #24]
 8008052:	b913      	cbnz	r3, 800805a <__sfp+0x16>
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff ffbd 	bl	8007fd4 <__sinit>
 800805a:	3648      	adds	r6, #72	; 0x48
 800805c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008060:	3b01      	subs	r3, #1
 8008062:	d503      	bpl.n	800806c <__sfp+0x28>
 8008064:	6833      	ldr	r3, [r6, #0]
 8008066:	b30b      	cbz	r3, 80080ac <__sfp+0x68>
 8008068:	6836      	ldr	r6, [r6, #0]
 800806a:	e7f7      	b.n	800805c <__sfp+0x18>
 800806c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008070:	b9d5      	cbnz	r5, 80080a8 <__sfp+0x64>
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <__sfp+0x88>)
 8008074:	60e3      	str	r3, [r4, #12]
 8008076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800807a:	6665      	str	r5, [r4, #100]	; 0x64
 800807c:	f000 f847 	bl	800810e <__retarget_lock_init_recursive>
 8008080:	f7ff ff96 	bl	8007fb0 <__sfp_lock_release>
 8008084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800808c:	6025      	str	r5, [r4, #0]
 800808e:	61a5      	str	r5, [r4, #24]
 8008090:	2208      	movs	r2, #8
 8008092:	4629      	mov	r1, r5
 8008094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008098:	f7ff fd2c 	bl	8007af4 <memset>
 800809c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080a4:	4620      	mov	r0, r4
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a8:	3468      	adds	r4, #104	; 0x68
 80080aa:	e7d9      	b.n	8008060 <__sfp+0x1c>
 80080ac:	2104      	movs	r1, #4
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7ff ff62 	bl	8007f78 <__sfmoreglue>
 80080b4:	4604      	mov	r4, r0
 80080b6:	6030      	str	r0, [r6, #0]
 80080b8:	2800      	cmp	r0, #0
 80080ba:	d1d5      	bne.n	8008068 <__sfp+0x24>
 80080bc:	f7ff ff78 	bl	8007fb0 <__sfp_lock_release>
 80080c0:	230c      	movs	r3, #12
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	e7ee      	b.n	80080a4 <__sfp+0x60>
 80080c6:	bf00      	nop
 80080c8:	08009450 	.word	0x08009450
 80080cc:	ffff0001 	.word	0xffff0001

080080d0 <_fwalk_reent>:
 80080d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d4:	4606      	mov	r6, r0
 80080d6:	4688      	mov	r8, r1
 80080d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080dc:	2700      	movs	r7, #0
 80080de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080e2:	f1b9 0901 	subs.w	r9, r9, #1
 80080e6:	d505      	bpl.n	80080f4 <_fwalk_reent+0x24>
 80080e8:	6824      	ldr	r4, [r4, #0]
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	d1f7      	bne.n	80080de <_fwalk_reent+0xe>
 80080ee:	4638      	mov	r0, r7
 80080f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d907      	bls.n	800810a <_fwalk_reent+0x3a>
 80080fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080fe:	3301      	adds	r3, #1
 8008100:	d003      	beq.n	800810a <_fwalk_reent+0x3a>
 8008102:	4629      	mov	r1, r5
 8008104:	4630      	mov	r0, r6
 8008106:	47c0      	blx	r8
 8008108:	4307      	orrs	r7, r0
 800810a:	3568      	adds	r5, #104	; 0x68
 800810c:	e7e9      	b.n	80080e2 <_fwalk_reent+0x12>

0800810e <__retarget_lock_init_recursive>:
 800810e:	4770      	bx	lr

08008110 <__retarget_lock_acquire_recursive>:
 8008110:	4770      	bx	lr

08008112 <__retarget_lock_release_recursive>:
 8008112:	4770      	bx	lr

08008114 <__swhatbuf_r>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	460e      	mov	r6, r1
 8008118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811c:	2900      	cmp	r1, #0
 800811e:	b096      	sub	sp, #88	; 0x58
 8008120:	4614      	mov	r4, r2
 8008122:	461d      	mov	r5, r3
 8008124:	da07      	bge.n	8008136 <__swhatbuf_r+0x22>
 8008126:	2300      	movs	r3, #0
 8008128:	602b      	str	r3, [r5, #0]
 800812a:	89b3      	ldrh	r3, [r6, #12]
 800812c:	061a      	lsls	r2, r3, #24
 800812e:	d410      	bmi.n	8008152 <__swhatbuf_r+0x3e>
 8008130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008134:	e00e      	b.n	8008154 <__swhatbuf_r+0x40>
 8008136:	466a      	mov	r2, sp
 8008138:	f000 fc5e 	bl	80089f8 <_fstat_r>
 800813c:	2800      	cmp	r0, #0
 800813e:	dbf2      	blt.n	8008126 <__swhatbuf_r+0x12>
 8008140:	9a01      	ldr	r2, [sp, #4]
 8008142:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008146:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800814a:	425a      	negs	r2, r3
 800814c:	415a      	adcs	r2, r3
 800814e:	602a      	str	r2, [r5, #0]
 8008150:	e7ee      	b.n	8008130 <__swhatbuf_r+0x1c>
 8008152:	2340      	movs	r3, #64	; 0x40
 8008154:	2000      	movs	r0, #0
 8008156:	6023      	str	r3, [r4, #0]
 8008158:	b016      	add	sp, #88	; 0x58
 800815a:	bd70      	pop	{r4, r5, r6, pc}

0800815c <__smakebuf_r>:
 800815c:	898b      	ldrh	r3, [r1, #12]
 800815e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008160:	079d      	lsls	r5, r3, #30
 8008162:	4606      	mov	r6, r0
 8008164:	460c      	mov	r4, r1
 8008166:	d507      	bpl.n	8008178 <__smakebuf_r+0x1c>
 8008168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	6123      	str	r3, [r4, #16]
 8008170:	2301      	movs	r3, #1
 8008172:	6163      	str	r3, [r4, #20]
 8008174:	b002      	add	sp, #8
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	ab01      	add	r3, sp, #4
 800817a:	466a      	mov	r2, sp
 800817c:	f7ff ffca 	bl	8008114 <__swhatbuf_r>
 8008180:	9900      	ldr	r1, [sp, #0]
 8008182:	4605      	mov	r5, r0
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f879 	bl	800827c <_malloc_r>
 800818a:	b948      	cbnz	r0, 80081a0 <__smakebuf_r+0x44>
 800818c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008190:	059a      	lsls	r2, r3, #22
 8008192:	d4ef      	bmi.n	8008174 <__smakebuf_r+0x18>
 8008194:	f023 0303 	bic.w	r3, r3, #3
 8008198:	f043 0302 	orr.w	r3, r3, #2
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	e7e3      	b.n	8008168 <__smakebuf_r+0xc>
 80081a0:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <__smakebuf_r+0x7c>)
 80081a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	6020      	str	r0, [r4, #0]
 80081a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	6163      	str	r3, [r4, #20]
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	6120      	str	r0, [r4, #16]
 80081b6:	b15b      	cbz	r3, 80081d0 <__smakebuf_r+0x74>
 80081b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 fc2d 	bl	8008a1c <_isatty_r>
 80081c2:	b128      	cbz	r0, 80081d0 <__smakebuf_r+0x74>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f023 0303 	bic.w	r3, r3, #3
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	89a0      	ldrh	r0, [r4, #12]
 80081d2:	4305      	orrs	r5, r0
 80081d4:	81a5      	strh	r5, [r4, #12]
 80081d6:	e7cd      	b.n	8008174 <__smakebuf_r+0x18>
 80081d8:	08007f6d 	.word	0x08007f6d

080081dc <_free_r>:
 80081dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081de:	2900      	cmp	r1, #0
 80081e0:	d048      	beq.n	8008274 <_free_r+0x98>
 80081e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081e6:	9001      	str	r0, [sp, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f1a1 0404 	sub.w	r4, r1, #4
 80081ee:	bfb8      	it	lt
 80081f0:	18e4      	addlt	r4, r4, r3
 80081f2:	f000 fc35 	bl	8008a60 <__malloc_lock>
 80081f6:	4a20      	ldr	r2, [pc, #128]	; (8008278 <_free_r+0x9c>)
 80081f8:	9801      	ldr	r0, [sp, #4]
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	4615      	mov	r5, r2
 80081fe:	b933      	cbnz	r3, 800820e <_free_r+0x32>
 8008200:	6063      	str	r3, [r4, #4]
 8008202:	6014      	str	r4, [r2, #0]
 8008204:	b003      	add	sp, #12
 8008206:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800820a:	f000 bc2f 	b.w	8008a6c <__malloc_unlock>
 800820e:	42a3      	cmp	r3, r4
 8008210:	d90b      	bls.n	800822a <_free_r+0x4e>
 8008212:	6821      	ldr	r1, [r4, #0]
 8008214:	1862      	adds	r2, r4, r1
 8008216:	4293      	cmp	r3, r2
 8008218:	bf04      	itt	eq
 800821a:	681a      	ldreq	r2, [r3, #0]
 800821c:	685b      	ldreq	r3, [r3, #4]
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	bf04      	itt	eq
 8008222:	1852      	addeq	r2, r2, r1
 8008224:	6022      	streq	r2, [r4, #0]
 8008226:	602c      	str	r4, [r5, #0]
 8008228:	e7ec      	b.n	8008204 <_free_r+0x28>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x58>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x4e>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x78>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1dd      	bne.n	8008204 <_free_r+0x28>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	4421      	add	r1, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	e7d7      	b.n	8008204 <_free_r+0x28>
 8008254:	d902      	bls.n	800825c <_free_r+0x80>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d3      	b.n	8008204 <_free_r+0x28>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7c7      	b.n	8008204 <_free_r+0x28>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	200000fc 	.word	0x200000fc

0800827c <_malloc_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	1ccd      	adds	r5, r1, #3
 8008280:	f025 0503 	bic.w	r5, r5, #3
 8008284:	3508      	adds	r5, #8
 8008286:	2d0c      	cmp	r5, #12
 8008288:	bf38      	it	cc
 800828a:	250c      	movcc	r5, #12
 800828c:	2d00      	cmp	r5, #0
 800828e:	4606      	mov	r6, r0
 8008290:	db01      	blt.n	8008296 <_malloc_r+0x1a>
 8008292:	42a9      	cmp	r1, r5
 8008294:	d903      	bls.n	800829e <_malloc_r+0x22>
 8008296:	230c      	movs	r3, #12
 8008298:	6033      	str	r3, [r6, #0]
 800829a:	2000      	movs	r0, #0
 800829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800829e:	f000 fbdf 	bl	8008a60 <__malloc_lock>
 80082a2:	4921      	ldr	r1, [pc, #132]	; (8008328 <_malloc_r+0xac>)
 80082a4:	680a      	ldr	r2, [r1, #0]
 80082a6:	4614      	mov	r4, r2
 80082a8:	b99c      	cbnz	r4, 80082d2 <_malloc_r+0x56>
 80082aa:	4f20      	ldr	r7, [pc, #128]	; (800832c <_malloc_r+0xb0>)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	b923      	cbnz	r3, 80082ba <_malloc_r+0x3e>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4630      	mov	r0, r6
 80082b4:	f000 fb2a 	bl	800890c <_sbrk_r>
 80082b8:	6038      	str	r0, [r7, #0]
 80082ba:	4629      	mov	r1, r5
 80082bc:	4630      	mov	r0, r6
 80082be:	f000 fb25 	bl	800890c <_sbrk_r>
 80082c2:	1c43      	adds	r3, r0, #1
 80082c4:	d123      	bne.n	800830e <_malloc_r+0x92>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	4630      	mov	r0, r6
 80082cc:	f000 fbce 	bl	8008a6c <__malloc_unlock>
 80082d0:	e7e3      	b.n	800829a <_malloc_r+0x1e>
 80082d2:	6823      	ldr	r3, [r4, #0]
 80082d4:	1b5b      	subs	r3, r3, r5
 80082d6:	d417      	bmi.n	8008308 <_malloc_r+0x8c>
 80082d8:	2b0b      	cmp	r3, #11
 80082da:	d903      	bls.n	80082e4 <_malloc_r+0x68>
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	441c      	add	r4, r3
 80082e0:	6025      	str	r5, [r4, #0]
 80082e2:	e004      	b.n	80082ee <_malloc_r+0x72>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	42a2      	cmp	r2, r4
 80082e8:	bf0c      	ite	eq
 80082ea:	600b      	streq	r3, [r1, #0]
 80082ec:	6053      	strne	r3, [r2, #4]
 80082ee:	4630      	mov	r0, r6
 80082f0:	f000 fbbc 	bl	8008a6c <__malloc_unlock>
 80082f4:	f104 000b 	add.w	r0, r4, #11
 80082f8:	1d23      	adds	r3, r4, #4
 80082fa:	f020 0007 	bic.w	r0, r0, #7
 80082fe:	1ac2      	subs	r2, r0, r3
 8008300:	d0cc      	beq.n	800829c <_malloc_r+0x20>
 8008302:	1a1b      	subs	r3, r3, r0
 8008304:	50a3      	str	r3, [r4, r2]
 8008306:	e7c9      	b.n	800829c <_malloc_r+0x20>
 8008308:	4622      	mov	r2, r4
 800830a:	6864      	ldr	r4, [r4, #4]
 800830c:	e7cc      	b.n	80082a8 <_malloc_r+0x2c>
 800830e:	1cc4      	adds	r4, r0, #3
 8008310:	f024 0403 	bic.w	r4, r4, #3
 8008314:	42a0      	cmp	r0, r4
 8008316:	d0e3      	beq.n	80082e0 <_malloc_r+0x64>
 8008318:	1a21      	subs	r1, r4, r0
 800831a:	4630      	mov	r0, r6
 800831c:	f000 faf6 	bl	800890c <_sbrk_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d1dd      	bne.n	80082e0 <_malloc_r+0x64>
 8008324:	e7cf      	b.n	80082c6 <_malloc_r+0x4a>
 8008326:	bf00      	nop
 8008328:	200000fc 	.word	0x200000fc
 800832c:	20000100 	.word	0x20000100

08008330 <__sfputc_r>:
 8008330:	6893      	ldr	r3, [r2, #8]
 8008332:	3b01      	subs	r3, #1
 8008334:	2b00      	cmp	r3, #0
 8008336:	b410      	push	{r4}
 8008338:	6093      	str	r3, [r2, #8]
 800833a:	da08      	bge.n	800834e <__sfputc_r+0x1e>
 800833c:	6994      	ldr	r4, [r2, #24]
 800833e:	42a3      	cmp	r3, r4
 8008340:	db01      	blt.n	8008346 <__sfputc_r+0x16>
 8008342:	290a      	cmp	r1, #10
 8008344:	d103      	bne.n	800834e <__sfputc_r+0x1e>
 8008346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800834a:	f7ff bc69 	b.w	8007c20 <__swbuf_r>
 800834e:	6813      	ldr	r3, [r2, #0]
 8008350:	1c58      	adds	r0, r3, #1
 8008352:	6010      	str	r0, [r2, #0]
 8008354:	7019      	strb	r1, [r3, #0]
 8008356:	4608      	mov	r0, r1
 8008358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800835c:	4770      	bx	lr

0800835e <__sfputs_r>:
 800835e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	4614      	mov	r4, r2
 8008366:	18d5      	adds	r5, r2, r3
 8008368:	42ac      	cmp	r4, r5
 800836a:	d101      	bne.n	8008370 <__sfputs_r+0x12>
 800836c:	2000      	movs	r0, #0
 800836e:	e007      	b.n	8008380 <__sfputs_r+0x22>
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	463a      	mov	r2, r7
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ffda 	bl	8008330 <__sfputc_r>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d1f3      	bne.n	8008368 <__sfputs_r+0xa>
 8008380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008384 <_vfiprintf_r>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	460d      	mov	r5, r1
 800838a:	b09d      	sub	sp, #116	; 0x74
 800838c:	4614      	mov	r4, r2
 800838e:	4698      	mov	r8, r3
 8008390:	4606      	mov	r6, r0
 8008392:	b118      	cbz	r0, 800839c <_vfiprintf_r+0x18>
 8008394:	6983      	ldr	r3, [r0, #24]
 8008396:	b90b      	cbnz	r3, 800839c <_vfiprintf_r+0x18>
 8008398:	f7ff fe1c 	bl	8007fd4 <__sinit>
 800839c:	4b89      	ldr	r3, [pc, #548]	; (80085c4 <_vfiprintf_r+0x240>)
 800839e:	429d      	cmp	r5, r3
 80083a0:	d11b      	bne.n	80083da <_vfiprintf_r+0x56>
 80083a2:	6875      	ldr	r5, [r6, #4]
 80083a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083a6:	07d9      	lsls	r1, r3, #31
 80083a8:	d405      	bmi.n	80083b6 <_vfiprintf_r+0x32>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	059a      	lsls	r2, r3, #22
 80083ae:	d402      	bmi.n	80083b6 <_vfiprintf_r+0x32>
 80083b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b2:	f7ff fead 	bl	8008110 <__retarget_lock_acquire_recursive>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	071b      	lsls	r3, r3, #28
 80083ba:	d501      	bpl.n	80083c0 <_vfiprintf_r+0x3c>
 80083bc:	692b      	ldr	r3, [r5, #16]
 80083be:	b9eb      	cbnz	r3, 80083fc <_vfiprintf_r+0x78>
 80083c0:	4629      	mov	r1, r5
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7ff fc7e 	bl	8007cc4 <__swsetup_r>
 80083c8:	b1c0      	cbz	r0, 80083fc <_vfiprintf_r+0x78>
 80083ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083cc:	07dc      	lsls	r4, r3, #31
 80083ce:	d50e      	bpl.n	80083ee <_vfiprintf_r+0x6a>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	b01d      	add	sp, #116	; 0x74
 80083d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083da:	4b7b      	ldr	r3, [pc, #492]	; (80085c8 <_vfiprintf_r+0x244>)
 80083dc:	429d      	cmp	r5, r3
 80083de:	d101      	bne.n	80083e4 <_vfiprintf_r+0x60>
 80083e0:	68b5      	ldr	r5, [r6, #8]
 80083e2:	e7df      	b.n	80083a4 <_vfiprintf_r+0x20>
 80083e4:	4b79      	ldr	r3, [pc, #484]	; (80085cc <_vfiprintf_r+0x248>)
 80083e6:	429d      	cmp	r5, r3
 80083e8:	bf08      	it	eq
 80083ea:	68f5      	ldreq	r5, [r6, #12]
 80083ec:	e7da      	b.n	80083a4 <_vfiprintf_r+0x20>
 80083ee:	89ab      	ldrh	r3, [r5, #12]
 80083f0:	0598      	lsls	r0, r3, #22
 80083f2:	d4ed      	bmi.n	80083d0 <_vfiprintf_r+0x4c>
 80083f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083f6:	f7ff fe8c 	bl	8008112 <__retarget_lock_release_recursive>
 80083fa:	e7e9      	b.n	80083d0 <_vfiprintf_r+0x4c>
 80083fc:	2300      	movs	r3, #0
 80083fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008400:	2320      	movs	r3, #32
 8008402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008406:	f8cd 800c 	str.w	r8, [sp, #12]
 800840a:	2330      	movs	r3, #48	; 0x30
 800840c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085d0 <_vfiprintf_r+0x24c>
 8008410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008414:	f04f 0901 	mov.w	r9, #1
 8008418:	4623      	mov	r3, r4
 800841a:	469a      	mov	sl, r3
 800841c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008420:	b10a      	cbz	r2, 8008426 <_vfiprintf_r+0xa2>
 8008422:	2a25      	cmp	r2, #37	; 0x25
 8008424:	d1f9      	bne.n	800841a <_vfiprintf_r+0x96>
 8008426:	ebba 0b04 	subs.w	fp, sl, r4
 800842a:	d00b      	beq.n	8008444 <_vfiprintf_r+0xc0>
 800842c:	465b      	mov	r3, fp
 800842e:	4622      	mov	r2, r4
 8008430:	4629      	mov	r1, r5
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ff93 	bl	800835e <__sfputs_r>
 8008438:	3001      	adds	r0, #1
 800843a:	f000 80aa 	beq.w	8008592 <_vfiprintf_r+0x20e>
 800843e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008440:	445a      	add	r2, fp
 8008442:	9209      	str	r2, [sp, #36]	; 0x24
 8008444:	f89a 3000 	ldrb.w	r3, [sl]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 80a2 	beq.w	8008592 <_vfiprintf_r+0x20e>
 800844e:	2300      	movs	r3, #0
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008458:	f10a 0a01 	add.w	sl, sl, #1
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	9307      	str	r3, [sp, #28]
 8008460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008464:	931a      	str	r3, [sp, #104]	; 0x68
 8008466:	4654      	mov	r4, sl
 8008468:	2205      	movs	r2, #5
 800846a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800846e:	4858      	ldr	r0, [pc, #352]	; (80085d0 <_vfiprintf_r+0x24c>)
 8008470:	f7f7 fece 	bl	8000210 <memchr>
 8008474:	9a04      	ldr	r2, [sp, #16]
 8008476:	b9d8      	cbnz	r0, 80084b0 <_vfiprintf_r+0x12c>
 8008478:	06d1      	lsls	r1, r2, #27
 800847a:	bf44      	itt	mi
 800847c:	2320      	movmi	r3, #32
 800847e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008482:	0713      	lsls	r3, r2, #28
 8008484:	bf44      	itt	mi
 8008486:	232b      	movmi	r3, #43	; 0x2b
 8008488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800848c:	f89a 3000 	ldrb.w	r3, [sl]
 8008490:	2b2a      	cmp	r3, #42	; 0x2a
 8008492:	d015      	beq.n	80084c0 <_vfiprintf_r+0x13c>
 8008494:	9a07      	ldr	r2, [sp, #28]
 8008496:	4654      	mov	r4, sl
 8008498:	2000      	movs	r0, #0
 800849a:	f04f 0c0a 	mov.w	ip, #10
 800849e:	4621      	mov	r1, r4
 80084a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084a4:	3b30      	subs	r3, #48	; 0x30
 80084a6:	2b09      	cmp	r3, #9
 80084a8:	d94e      	bls.n	8008548 <_vfiprintf_r+0x1c4>
 80084aa:	b1b0      	cbz	r0, 80084da <_vfiprintf_r+0x156>
 80084ac:	9207      	str	r2, [sp, #28]
 80084ae:	e014      	b.n	80084da <_vfiprintf_r+0x156>
 80084b0:	eba0 0308 	sub.w	r3, r0, r8
 80084b4:	fa09 f303 	lsl.w	r3, r9, r3
 80084b8:	4313      	orrs	r3, r2
 80084ba:	9304      	str	r3, [sp, #16]
 80084bc:	46a2      	mov	sl, r4
 80084be:	e7d2      	b.n	8008466 <_vfiprintf_r+0xe2>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	1d19      	adds	r1, r3, #4
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	9103      	str	r1, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfbb      	ittet	lt
 80084cc:	425b      	neglt	r3, r3
 80084ce:	f042 0202 	orrlt.w	r2, r2, #2
 80084d2:	9307      	strge	r3, [sp, #28]
 80084d4:	9307      	strlt	r3, [sp, #28]
 80084d6:	bfb8      	it	lt
 80084d8:	9204      	strlt	r2, [sp, #16]
 80084da:	7823      	ldrb	r3, [r4, #0]
 80084dc:	2b2e      	cmp	r3, #46	; 0x2e
 80084de:	d10c      	bne.n	80084fa <_vfiprintf_r+0x176>
 80084e0:	7863      	ldrb	r3, [r4, #1]
 80084e2:	2b2a      	cmp	r3, #42	; 0x2a
 80084e4:	d135      	bne.n	8008552 <_vfiprintf_r+0x1ce>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	1d1a      	adds	r2, r3, #4
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	9203      	str	r2, [sp, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bfb8      	it	lt
 80084f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80084f6:	3402      	adds	r4, #2
 80084f8:	9305      	str	r3, [sp, #20]
 80084fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085e0 <_vfiprintf_r+0x25c>
 80084fe:	7821      	ldrb	r1, [r4, #0]
 8008500:	2203      	movs	r2, #3
 8008502:	4650      	mov	r0, sl
 8008504:	f7f7 fe84 	bl	8000210 <memchr>
 8008508:	b140      	cbz	r0, 800851c <_vfiprintf_r+0x198>
 800850a:	2340      	movs	r3, #64	; 0x40
 800850c:	eba0 000a 	sub.w	r0, r0, sl
 8008510:	fa03 f000 	lsl.w	r0, r3, r0
 8008514:	9b04      	ldr	r3, [sp, #16]
 8008516:	4303      	orrs	r3, r0
 8008518:	3401      	adds	r4, #1
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008520:	482c      	ldr	r0, [pc, #176]	; (80085d4 <_vfiprintf_r+0x250>)
 8008522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008526:	2206      	movs	r2, #6
 8008528:	f7f7 fe72 	bl	8000210 <memchr>
 800852c:	2800      	cmp	r0, #0
 800852e:	d03f      	beq.n	80085b0 <_vfiprintf_r+0x22c>
 8008530:	4b29      	ldr	r3, [pc, #164]	; (80085d8 <_vfiprintf_r+0x254>)
 8008532:	bb1b      	cbnz	r3, 800857c <_vfiprintf_r+0x1f8>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	3307      	adds	r3, #7
 8008538:	f023 0307 	bic.w	r3, r3, #7
 800853c:	3308      	adds	r3, #8
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	443b      	add	r3, r7
 8008544:	9309      	str	r3, [sp, #36]	; 0x24
 8008546:	e767      	b.n	8008418 <_vfiprintf_r+0x94>
 8008548:	fb0c 3202 	mla	r2, ip, r2, r3
 800854c:	460c      	mov	r4, r1
 800854e:	2001      	movs	r0, #1
 8008550:	e7a5      	b.n	800849e <_vfiprintf_r+0x11a>
 8008552:	2300      	movs	r3, #0
 8008554:	3401      	adds	r4, #1
 8008556:	9305      	str	r3, [sp, #20]
 8008558:	4619      	mov	r1, r3
 800855a:	f04f 0c0a 	mov.w	ip, #10
 800855e:	4620      	mov	r0, r4
 8008560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008564:	3a30      	subs	r2, #48	; 0x30
 8008566:	2a09      	cmp	r2, #9
 8008568:	d903      	bls.n	8008572 <_vfiprintf_r+0x1ee>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0c5      	beq.n	80084fa <_vfiprintf_r+0x176>
 800856e:	9105      	str	r1, [sp, #20]
 8008570:	e7c3      	b.n	80084fa <_vfiprintf_r+0x176>
 8008572:	fb0c 2101 	mla	r1, ip, r1, r2
 8008576:	4604      	mov	r4, r0
 8008578:	2301      	movs	r3, #1
 800857a:	e7f0      	b.n	800855e <_vfiprintf_r+0x1da>
 800857c:	ab03      	add	r3, sp, #12
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	462a      	mov	r2, r5
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <_vfiprintf_r+0x258>)
 8008584:	a904      	add	r1, sp, #16
 8008586:	4630      	mov	r0, r6
 8008588:	f3af 8000 	nop.w
 800858c:	4607      	mov	r7, r0
 800858e:	1c78      	adds	r0, r7, #1
 8008590:	d1d6      	bne.n	8008540 <_vfiprintf_r+0x1bc>
 8008592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008594:	07d9      	lsls	r1, r3, #31
 8008596:	d405      	bmi.n	80085a4 <_vfiprintf_r+0x220>
 8008598:	89ab      	ldrh	r3, [r5, #12]
 800859a:	059a      	lsls	r2, r3, #22
 800859c:	d402      	bmi.n	80085a4 <_vfiprintf_r+0x220>
 800859e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085a0:	f7ff fdb7 	bl	8008112 <__retarget_lock_release_recursive>
 80085a4:	89ab      	ldrh	r3, [r5, #12]
 80085a6:	065b      	lsls	r3, r3, #25
 80085a8:	f53f af12 	bmi.w	80083d0 <_vfiprintf_r+0x4c>
 80085ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ae:	e711      	b.n	80083d4 <_vfiprintf_r+0x50>
 80085b0:	ab03      	add	r3, sp, #12
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	462a      	mov	r2, r5
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <_vfiprintf_r+0x258>)
 80085b8:	a904      	add	r1, sp, #16
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 f880 	bl	80086c0 <_printf_i>
 80085c0:	e7e4      	b.n	800858c <_vfiprintf_r+0x208>
 80085c2:	bf00      	nop
 80085c4:	08009474 	.word	0x08009474
 80085c8:	08009494 	.word	0x08009494
 80085cc:	08009454 	.word	0x08009454
 80085d0:	080094b4 	.word	0x080094b4
 80085d4:	080094be 	.word	0x080094be
 80085d8:	00000000 	.word	0x00000000
 80085dc:	0800835f 	.word	0x0800835f
 80085e0:	080094ba 	.word	0x080094ba

080085e4 <_printf_common>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	4616      	mov	r6, r2
 80085ea:	4699      	mov	r9, r3
 80085ec:	688a      	ldr	r2, [r1, #8]
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bfb8      	it	lt
 80085f8:	4613      	movlt	r3, r2
 80085fa:	6033      	str	r3, [r6, #0]
 80085fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008600:	4607      	mov	r7, r0
 8008602:	460c      	mov	r4, r1
 8008604:	b10a      	cbz	r2, 800860a <_printf_common+0x26>
 8008606:	3301      	adds	r3, #1
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	0699      	lsls	r1, r3, #26
 800860e:	bf42      	ittt	mi
 8008610:	6833      	ldrmi	r3, [r6, #0]
 8008612:	3302      	addmi	r3, #2
 8008614:	6033      	strmi	r3, [r6, #0]
 8008616:	6825      	ldr	r5, [r4, #0]
 8008618:	f015 0506 	ands.w	r5, r5, #6
 800861c:	d106      	bne.n	800862c <_printf_common+0x48>
 800861e:	f104 0a19 	add.w	sl, r4, #25
 8008622:	68e3      	ldr	r3, [r4, #12]
 8008624:	6832      	ldr	r2, [r6, #0]
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	42ab      	cmp	r3, r5
 800862a:	dc26      	bgt.n	800867a <_printf_common+0x96>
 800862c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008630:	1e13      	subs	r3, r2, #0
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	bf18      	it	ne
 8008636:	2301      	movne	r3, #1
 8008638:	0692      	lsls	r2, r2, #26
 800863a:	d42b      	bmi.n	8008694 <_printf_common+0xb0>
 800863c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008640:	4649      	mov	r1, r9
 8008642:	4638      	mov	r0, r7
 8008644:	47c0      	blx	r8
 8008646:	3001      	adds	r0, #1
 8008648:	d01e      	beq.n	8008688 <_printf_common+0xa4>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	68e5      	ldr	r5, [r4, #12]
 800864e:	6832      	ldr	r2, [r6, #0]
 8008650:	f003 0306 	and.w	r3, r3, #6
 8008654:	2b04      	cmp	r3, #4
 8008656:	bf08      	it	eq
 8008658:	1aad      	subeq	r5, r5, r2
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	bf0c      	ite	eq
 8008660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008664:	2500      	movne	r5, #0
 8008666:	4293      	cmp	r3, r2
 8008668:	bfc4      	itt	gt
 800866a:	1a9b      	subgt	r3, r3, r2
 800866c:	18ed      	addgt	r5, r5, r3
 800866e:	2600      	movs	r6, #0
 8008670:	341a      	adds	r4, #26
 8008672:	42b5      	cmp	r5, r6
 8008674:	d11a      	bne.n	80086ac <_printf_common+0xc8>
 8008676:	2000      	movs	r0, #0
 8008678:	e008      	b.n	800868c <_printf_common+0xa8>
 800867a:	2301      	movs	r3, #1
 800867c:	4652      	mov	r2, sl
 800867e:	4649      	mov	r1, r9
 8008680:	4638      	mov	r0, r7
 8008682:	47c0      	blx	r8
 8008684:	3001      	adds	r0, #1
 8008686:	d103      	bne.n	8008690 <_printf_common+0xac>
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008690:	3501      	adds	r5, #1
 8008692:	e7c6      	b.n	8008622 <_printf_common+0x3e>
 8008694:	18e1      	adds	r1, r4, r3
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	2030      	movs	r0, #48	; 0x30
 800869a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800869e:	4422      	add	r2, r4
 80086a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086a8:	3302      	adds	r3, #2
 80086aa:	e7c7      	b.n	800863c <_printf_common+0x58>
 80086ac:	2301      	movs	r3, #1
 80086ae:	4622      	mov	r2, r4
 80086b0:	4649      	mov	r1, r9
 80086b2:	4638      	mov	r0, r7
 80086b4:	47c0      	blx	r8
 80086b6:	3001      	adds	r0, #1
 80086b8:	d0e6      	beq.n	8008688 <_printf_common+0xa4>
 80086ba:	3601      	adds	r6, #1
 80086bc:	e7d9      	b.n	8008672 <_printf_common+0x8e>
	...

080086c0 <_printf_i>:
 80086c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c4:	460c      	mov	r4, r1
 80086c6:	4691      	mov	r9, r2
 80086c8:	7e27      	ldrb	r7, [r4, #24]
 80086ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086cc:	2f78      	cmp	r7, #120	; 0x78
 80086ce:	4680      	mov	r8, r0
 80086d0:	469a      	mov	sl, r3
 80086d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086d6:	d807      	bhi.n	80086e8 <_printf_i+0x28>
 80086d8:	2f62      	cmp	r7, #98	; 0x62
 80086da:	d80a      	bhi.n	80086f2 <_printf_i+0x32>
 80086dc:	2f00      	cmp	r7, #0
 80086de:	f000 80d8 	beq.w	8008892 <_printf_i+0x1d2>
 80086e2:	2f58      	cmp	r7, #88	; 0x58
 80086e4:	f000 80a3 	beq.w	800882e <_printf_i+0x16e>
 80086e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086f0:	e03a      	b.n	8008768 <_printf_i+0xa8>
 80086f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086f6:	2b15      	cmp	r3, #21
 80086f8:	d8f6      	bhi.n	80086e8 <_printf_i+0x28>
 80086fa:	a001      	add	r0, pc, #4	; (adr r0, 8008700 <_printf_i+0x40>)
 80086fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008700:	08008759 	.word	0x08008759
 8008704:	0800876d 	.word	0x0800876d
 8008708:	080086e9 	.word	0x080086e9
 800870c:	080086e9 	.word	0x080086e9
 8008710:	080086e9 	.word	0x080086e9
 8008714:	080086e9 	.word	0x080086e9
 8008718:	0800876d 	.word	0x0800876d
 800871c:	080086e9 	.word	0x080086e9
 8008720:	080086e9 	.word	0x080086e9
 8008724:	080086e9 	.word	0x080086e9
 8008728:	080086e9 	.word	0x080086e9
 800872c:	08008879 	.word	0x08008879
 8008730:	0800879d 	.word	0x0800879d
 8008734:	0800885b 	.word	0x0800885b
 8008738:	080086e9 	.word	0x080086e9
 800873c:	080086e9 	.word	0x080086e9
 8008740:	0800889b 	.word	0x0800889b
 8008744:	080086e9 	.word	0x080086e9
 8008748:	0800879d 	.word	0x0800879d
 800874c:	080086e9 	.word	0x080086e9
 8008750:	080086e9 	.word	0x080086e9
 8008754:	08008863 	.word	0x08008863
 8008758:	680b      	ldr	r3, [r1, #0]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	600a      	str	r2, [r1, #0]
 8008760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008768:	2301      	movs	r3, #1
 800876a:	e0a3      	b.n	80088b4 <_printf_i+0x1f4>
 800876c:	6825      	ldr	r5, [r4, #0]
 800876e:	6808      	ldr	r0, [r1, #0]
 8008770:	062e      	lsls	r6, r5, #24
 8008772:	f100 0304 	add.w	r3, r0, #4
 8008776:	d50a      	bpl.n	800878e <_printf_i+0xce>
 8008778:	6805      	ldr	r5, [r0, #0]
 800877a:	600b      	str	r3, [r1, #0]
 800877c:	2d00      	cmp	r5, #0
 800877e:	da03      	bge.n	8008788 <_printf_i+0xc8>
 8008780:	232d      	movs	r3, #45	; 0x2d
 8008782:	426d      	negs	r5, r5
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008788:	485e      	ldr	r0, [pc, #376]	; (8008904 <_printf_i+0x244>)
 800878a:	230a      	movs	r3, #10
 800878c:	e019      	b.n	80087c2 <_printf_i+0x102>
 800878e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008792:	6805      	ldr	r5, [r0, #0]
 8008794:	600b      	str	r3, [r1, #0]
 8008796:	bf18      	it	ne
 8008798:	b22d      	sxthne	r5, r5
 800879a:	e7ef      	b.n	800877c <_printf_i+0xbc>
 800879c:	680b      	ldr	r3, [r1, #0]
 800879e:	6825      	ldr	r5, [r4, #0]
 80087a0:	1d18      	adds	r0, r3, #4
 80087a2:	6008      	str	r0, [r1, #0]
 80087a4:	0628      	lsls	r0, r5, #24
 80087a6:	d501      	bpl.n	80087ac <_printf_i+0xec>
 80087a8:	681d      	ldr	r5, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <_printf_i+0xf2>
 80087ac:	0669      	lsls	r1, r5, #25
 80087ae:	d5fb      	bpl.n	80087a8 <_printf_i+0xe8>
 80087b0:	881d      	ldrh	r5, [r3, #0]
 80087b2:	4854      	ldr	r0, [pc, #336]	; (8008904 <_printf_i+0x244>)
 80087b4:	2f6f      	cmp	r7, #111	; 0x6f
 80087b6:	bf0c      	ite	eq
 80087b8:	2308      	moveq	r3, #8
 80087ba:	230a      	movne	r3, #10
 80087bc:	2100      	movs	r1, #0
 80087be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087c2:	6866      	ldr	r6, [r4, #4]
 80087c4:	60a6      	str	r6, [r4, #8]
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	bfa2      	ittt	ge
 80087ca:	6821      	ldrge	r1, [r4, #0]
 80087cc:	f021 0104 	bicge.w	r1, r1, #4
 80087d0:	6021      	strge	r1, [r4, #0]
 80087d2:	b90d      	cbnz	r5, 80087d8 <_printf_i+0x118>
 80087d4:	2e00      	cmp	r6, #0
 80087d6:	d04d      	beq.n	8008874 <_printf_i+0x1b4>
 80087d8:	4616      	mov	r6, r2
 80087da:	fbb5 f1f3 	udiv	r1, r5, r3
 80087de:	fb03 5711 	mls	r7, r3, r1, r5
 80087e2:	5dc7      	ldrb	r7, [r0, r7]
 80087e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087e8:	462f      	mov	r7, r5
 80087ea:	42bb      	cmp	r3, r7
 80087ec:	460d      	mov	r5, r1
 80087ee:	d9f4      	bls.n	80087da <_printf_i+0x11a>
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d10b      	bne.n	800880c <_printf_i+0x14c>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	07df      	lsls	r7, r3, #31
 80087f8:	d508      	bpl.n	800880c <_printf_i+0x14c>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	6861      	ldr	r1, [r4, #4]
 80087fe:	4299      	cmp	r1, r3
 8008800:	bfde      	ittt	le
 8008802:	2330      	movle	r3, #48	; 0x30
 8008804:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008808:	f106 36ff 	addle.w	r6, r6, #4294967295
 800880c:	1b92      	subs	r2, r2, r6
 800880e:	6122      	str	r2, [r4, #16]
 8008810:	f8cd a000 	str.w	sl, [sp]
 8008814:	464b      	mov	r3, r9
 8008816:	aa03      	add	r2, sp, #12
 8008818:	4621      	mov	r1, r4
 800881a:	4640      	mov	r0, r8
 800881c:	f7ff fee2 	bl	80085e4 <_printf_common>
 8008820:	3001      	adds	r0, #1
 8008822:	d14c      	bne.n	80088be <_printf_i+0x1fe>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b004      	add	sp, #16
 800882a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882e:	4835      	ldr	r0, [pc, #212]	; (8008904 <_printf_i+0x244>)
 8008830:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	680e      	ldr	r6, [r1, #0]
 8008838:	061f      	lsls	r7, r3, #24
 800883a:	f856 5b04 	ldr.w	r5, [r6], #4
 800883e:	600e      	str	r6, [r1, #0]
 8008840:	d514      	bpl.n	800886c <_printf_i+0x1ac>
 8008842:	07d9      	lsls	r1, r3, #31
 8008844:	bf44      	itt	mi
 8008846:	f043 0320 	orrmi.w	r3, r3, #32
 800884a:	6023      	strmi	r3, [r4, #0]
 800884c:	b91d      	cbnz	r5, 8008856 <_printf_i+0x196>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	f023 0320 	bic.w	r3, r3, #32
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	2310      	movs	r3, #16
 8008858:	e7b0      	b.n	80087bc <_printf_i+0xfc>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	f043 0320 	orr.w	r3, r3, #32
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	2378      	movs	r3, #120	; 0x78
 8008864:	4828      	ldr	r0, [pc, #160]	; (8008908 <_printf_i+0x248>)
 8008866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800886a:	e7e3      	b.n	8008834 <_printf_i+0x174>
 800886c:	065e      	lsls	r6, r3, #25
 800886e:	bf48      	it	mi
 8008870:	b2ad      	uxthmi	r5, r5
 8008872:	e7e6      	b.n	8008842 <_printf_i+0x182>
 8008874:	4616      	mov	r6, r2
 8008876:	e7bb      	b.n	80087f0 <_printf_i+0x130>
 8008878:	680b      	ldr	r3, [r1, #0]
 800887a:	6826      	ldr	r6, [r4, #0]
 800887c:	6960      	ldr	r0, [r4, #20]
 800887e:	1d1d      	adds	r5, r3, #4
 8008880:	600d      	str	r5, [r1, #0]
 8008882:	0635      	lsls	r5, r6, #24
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	d501      	bpl.n	800888c <_printf_i+0x1cc>
 8008888:	6018      	str	r0, [r3, #0]
 800888a:	e002      	b.n	8008892 <_printf_i+0x1d2>
 800888c:	0671      	lsls	r1, r6, #25
 800888e:	d5fb      	bpl.n	8008888 <_printf_i+0x1c8>
 8008890:	8018      	strh	r0, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	4616      	mov	r6, r2
 8008898:	e7ba      	b.n	8008810 <_printf_i+0x150>
 800889a:	680b      	ldr	r3, [r1, #0]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	600a      	str	r2, [r1, #0]
 80088a0:	681e      	ldr	r6, [r3, #0]
 80088a2:	6862      	ldr	r2, [r4, #4]
 80088a4:	2100      	movs	r1, #0
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7f7 fcb2 	bl	8000210 <memchr>
 80088ac:	b108      	cbz	r0, 80088b2 <_printf_i+0x1f2>
 80088ae:	1b80      	subs	r0, r0, r6
 80088b0:	6060      	str	r0, [r4, #4]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	2300      	movs	r3, #0
 80088b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088bc:	e7a8      	b.n	8008810 <_printf_i+0x150>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	4632      	mov	r2, r6
 80088c2:	4649      	mov	r1, r9
 80088c4:	4640      	mov	r0, r8
 80088c6:	47d0      	blx	sl
 80088c8:	3001      	adds	r0, #1
 80088ca:	d0ab      	beq.n	8008824 <_printf_i+0x164>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	079b      	lsls	r3, r3, #30
 80088d0:	d413      	bmi.n	80088fa <_printf_i+0x23a>
 80088d2:	68e0      	ldr	r0, [r4, #12]
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	4298      	cmp	r0, r3
 80088d8:	bfb8      	it	lt
 80088da:	4618      	movlt	r0, r3
 80088dc:	e7a4      	b.n	8008828 <_printf_i+0x168>
 80088de:	2301      	movs	r3, #1
 80088e0:	4632      	mov	r2, r6
 80088e2:	4649      	mov	r1, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	47d0      	blx	sl
 80088e8:	3001      	adds	r0, #1
 80088ea:	d09b      	beq.n	8008824 <_printf_i+0x164>
 80088ec:	3501      	adds	r5, #1
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	9903      	ldr	r1, [sp, #12]
 80088f2:	1a5b      	subs	r3, r3, r1
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	dcf2      	bgt.n	80088de <_printf_i+0x21e>
 80088f8:	e7eb      	b.n	80088d2 <_printf_i+0x212>
 80088fa:	2500      	movs	r5, #0
 80088fc:	f104 0619 	add.w	r6, r4, #25
 8008900:	e7f5      	b.n	80088ee <_printf_i+0x22e>
 8008902:	bf00      	nop
 8008904:	080094c5 	.word	0x080094c5
 8008908:	080094d6 	.word	0x080094d6

0800890c <_sbrk_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d06      	ldr	r5, [pc, #24]	; (8008928 <_sbrk_r+0x1c>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7fa f870 	bl	80029fc <_sbrk>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_sbrk_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_sbrk_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	200003d0 	.word	0x200003d0

0800892c <__sread>:
 800892c:	b510      	push	{r4, lr}
 800892e:	460c      	mov	r4, r1
 8008930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008934:	f000 f8a0 	bl	8008a78 <_read_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	bfab      	itete	ge
 800893c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800893e:	89a3      	ldrhlt	r3, [r4, #12]
 8008940:	181b      	addge	r3, r3, r0
 8008942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008946:	bfac      	ite	ge
 8008948:	6563      	strge	r3, [r4, #84]	; 0x54
 800894a:	81a3      	strhlt	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__swrite>:
 800894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008952:	461f      	mov	r7, r3
 8008954:	898b      	ldrh	r3, [r1, #12]
 8008956:	05db      	lsls	r3, r3, #23
 8008958:	4605      	mov	r5, r0
 800895a:	460c      	mov	r4, r1
 800895c:	4616      	mov	r6, r2
 800895e:	d505      	bpl.n	800896c <__swrite+0x1e>
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	2302      	movs	r3, #2
 8008966:	2200      	movs	r2, #0
 8008968:	f000 f868 	bl	8008a3c <_lseek_r>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	f000 b817 	b.w	80089b4 <_write_r>

08008986 <__sseek>:
 8008986:	b510      	push	{r4, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898e:	f000 f855 	bl	8008a3c <_lseek_r>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	bf15      	itete	ne
 8008998:	6560      	strne	r0, [r4, #84]	; 0x54
 800899a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800899e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089a2:	81a3      	strheq	r3, [r4, #12]
 80089a4:	bf18      	it	ne
 80089a6:	81a3      	strhne	r3, [r4, #12]
 80089a8:	bd10      	pop	{r4, pc}

080089aa <__sclose>:
 80089aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ae:	f000 b813 	b.w	80089d8 <_close_r>
	...

080089b4 <_write_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d07      	ldr	r5, [pc, #28]	; (80089d4 <_write_r+0x20>)
 80089b8:	4604      	mov	r4, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	602a      	str	r2, [r5, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7f9 f9e7 	bl	8001d96 <_write>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_write_r+0x1e>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_write_r+0x1e>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200003d0 	.word	0x200003d0

080089d8 <_close_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_close_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 ffd5 	bl	8002992 <_close>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_close_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_close_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	200003d0 	.word	0x200003d0

080089f8 <_fstat_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	; (8008a18 <_fstat_r+0x20>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	f7f9 ffd0 	bl	80029aa <_fstat>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d102      	bne.n	8008a14 <_fstat_r+0x1c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b103      	cbz	r3, 8008a14 <_fstat_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	200003d0 	.word	0x200003d0

08008a1c <_isatty_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	; (8008a38 <_isatty_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 ffcf 	bl	80029ca <_isatty>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_isatty_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_isatty_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	200003d0 	.word	0x200003d0

08008a3c <_lseek_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d07      	ldr	r5, [pc, #28]	; (8008a5c <_lseek_r+0x20>)
 8008a40:	4604      	mov	r4, r0
 8008a42:	4608      	mov	r0, r1
 8008a44:	4611      	mov	r1, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f9 ffc8 	bl	80029e0 <_lseek>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_lseek_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_lseek_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	200003d0 	.word	0x200003d0

08008a60 <__malloc_lock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	; (8008a68 <__malloc_lock+0x8>)
 8008a62:	f7ff bb55 	b.w	8008110 <__retarget_lock_acquire_recursive>
 8008a66:	bf00      	nop
 8008a68:	200003c8 	.word	0x200003c8

08008a6c <__malloc_unlock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__malloc_unlock+0x8>)
 8008a6e:	f7ff bb50 	b.w	8008112 <__retarget_lock_release_recursive>
 8008a72:	bf00      	nop
 8008a74:	200003c8 	.word	0x200003c8

08008a78 <_read_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_read_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7f9 ff66 	bl	8002958 <_read>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_read_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_read_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	200003d0 	.word	0x200003d0

08008a9c <_init>:
 8008a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a9e:	bf00      	nop
 8008aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa2:	bc08      	pop	{r3}
 8008aa4:	469e      	mov	lr, r3
 8008aa6:	4770      	bx	lr

08008aa8 <_fini>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr
