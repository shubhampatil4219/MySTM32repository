
Maint_bat_2_3_pi_to_stm_+.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000074  0800a068  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800a068  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4ba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b15  00000000  00000000  0003f55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00043078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  000443c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e89  00000000  00000000  00045550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b883  00000000  00000000  0004b3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f39c9  00000000  00000000  00066c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015a625  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a8  00000000  00000000  0015a678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e04 	.word	0x08009e04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009e04 	.word	0x08009e04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <update_periodic_flags_during_maintenance_bat1>:


}

 void update_periodic_flags_during_maintenance_bat1()
 {
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

		bat1_geninfo_asoc_counter++;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80005b6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_voltage_counter++;
 80005b8:	4b38      	ldr	r3, [pc, #224]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80005c2:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_remainingcapacity_counter++;
 80005c4:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b34      	ldr	r3, [pc, #208]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80005ce:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_temperature_counter++;
 80005d0:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80005da:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_cycle_counter++;
 80005dc:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 80005e6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_current_counter++;
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 80005f2:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_batterystatus_counter++;
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 80005fe:	801a      	strh	r2, [r3, #0]

			if(bat1_geninfo_asoc_counter==100)
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2b64      	cmp	r3, #100	; 0x64
 8000606:	d105      	bne.n	8000614 <update_periodic_flags_during_maintenance_bat1+0x6c>
			{
				bat1_geninfo_asoc_counter=0;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <update_periodic_flags_during_maintenance_bat1+0xf0>)
 800060a:	2200      	movs	r2, #0
 800060c:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_asoc_flag=true;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <update_periodic_flags_during_maintenance_bat1+0x10c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	2b32      	cmp	r3, #50	; 0x32
 800061a:	d105      	bne.n	8000628 <update_periodic_flags_during_maintenance_bat1+0x80>
			{
				bat1_geninfo_voltage_counter=0;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <update_periodic_flags_during_maintenance_bat1+0xf4>)
 800061e:	2200      	movs	r2, #0
 8000620:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_voltage_flag=true;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <update_periodic_flags_during_maintenance_bat1+0x110>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_remainingcapacity_counter==70)
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	2b46      	cmp	r3, #70	; 0x46
 800062e:	d105      	bne.n	800063c <update_periodic_flags_during_maintenance_bat1+0x94>
			{
				bat1_geninfo_remainingcapacity_counter=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_remainingcapacity_flag=true;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <update_periodic_flags_during_maintenance_bat1+0x114>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_temperature_counter==10)
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d105      	bne.n	8000650 <update_periodic_flags_during_maintenance_bat1+0xa8>
			{
				bat1_geninfo_temperature_counter=0;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_temperature_flag=true;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <update_periodic_flags_during_maintenance_bat1+0x118>)
 800064c:	2201      	movs	r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_cycle_counter==400)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000658:	d105      	bne.n	8000666 <update_periodic_flags_during_maintenance_bat1+0xbe>
			{
				bat1_geninfo_cycle_counter=0;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <update_periodic_flags_during_maintenance_bat1+0x100>)
 800065c:	2200      	movs	r2, #0
 800065e:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_cycle_flag=true;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <update_periodic_flags_during_maintenance_bat1+0x11c>)
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_current_counter==200)
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	2bc8      	cmp	r3, #200	; 0xc8
 800066c:	d105      	bne.n	800067a <update_periodic_flags_during_maintenance_bat1+0xd2>
			{
				bat1_geninfo_current_counter=0;
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_current_flag=true;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <update_periodic_flags_during_maintenance_bat1+0x120>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_batterystatus_counter==25)
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	2b19      	cmp	r3, #25
 8000680:	d105      	bne.n	800068e <update_periodic_flags_during_maintenance_bat1+0xe6>
			{
				bat1_geninfo_batterystatus_counter=0;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <update_periodic_flags_during_maintenance_bat1+0x108>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_batterystatus_flag =true;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <update_periodic_flags_during_maintenance_bat1+0x124>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
			}




		}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	2000009a 	.word	0x2000009a
 800069c:	2000009e 	.word	0x2000009e
 80006a0:	2000009c 	.word	0x2000009c
 80006a4:	200000a0 	.word	0x200000a0
 80006a8:	20000098 	.word	0x20000098
 80006ac:	200000a4 	.word	0x200000a4
 80006b0:	200000a2 	.word	0x200000a2
 80006b4:	200000a7 	.word	0x200000a7
 80006b8:	200000a9 	.word	0x200000a9
 80006bc:	200000a8 	.word	0x200000a8
 80006c0:	200000aa 	.word	0x200000aa
 80006c4:	200000a6 	.word	0x200000a6
 80006c8:	200000ac 	.word	0x200000ac
 80006cc:	200000ab 	.word	0x200000ab

080006d0 <update_voltage_during_maintenance_bat2>:
extern uint16_t bat2_geninfo_current_counter;

uint8_t transmit_info_to_be_updated_bat2_maint[14];

void update_voltage_during_maintenance_bat2()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0


	if(bat2_geninfo_voltage_flag==true)
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <update_voltage_during_maintenance_bat2+0xbc>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d051      	beq.n	8000782 <update_voltage_during_maintenance_bat2+0xb2>
	{
		bat2_geninfo_voltage_flag = false;
 80006de:	4b2b      	ldr	r3, [pc, #172]	; (800078c <update_voltage_during_maintenance_bat2+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]

		uint8_t rx_geninfo_voltage[2]={0x00};
 80006e4:	2300      	movs	r3, #0
 80006e6:	80bb      	strh	r3, [r7, #4]
		uint8_t tx_voltage[1]={0x09};                       // Voltage
 80006e8:	2309      	movs	r3, #9
 80006ea:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage, 1);
 80006ec:	463a      	mov	r2, r7
 80006ee:	2301      	movs	r3, #1
 80006f0:	2116      	movs	r1, #22
 80006f2:	4827      	ldr	r0, [pc, #156]	; (8000790 <update_voltage_during_maintenance_bat2+0xc0>)
 80006f4:	f003 ffa2 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80006f8:	2005      	movs	r0, #5
 80006fa:	f003 fb73 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_geninfo_voltage, 2);
 80006fe:	1d3a      	adds	r2, r7, #4
 8000700:	2302      	movs	r3, #2
 8000702:	2116      	movs	r1, #22
 8000704:	4822      	ldr	r0, [pc, #136]	; (8000790 <update_voltage_during_maintenance_bat2+0xc0>)
 8000706:	f004 f809 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 800070a:	2005      	movs	r0, #5
 800070c:	f003 fb6a 	bl	8003de4 <HAL_Delay>
		uint16_t Bat2_Volt_Maint_GI = rx_geninfo_voltage[1];
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	80fb      	strh	r3, [r7, #6]
		Bat2_Volt_Maint_GI = Bat2_Volt_Maint_GI << 8;
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	80fb      	strh	r3, [r7, #6]
		Bat2_Volt_Maint_GI = Bat2_Volt_Maint_GI + rx_geninfo_voltage[0];
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	b29a      	uxth	r2, r3
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	4413      	add	r3, r2
 8000722:	80fb      	strh	r3, [r7, #6]



		// The following method worked

		transmit_info_to_be_updated_bat2_maint[0]='2';
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000726:	2232      	movs	r2, #50	; 0x32
 8000728:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated_bat2_maint[1]='M';
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800072c:	224d      	movs	r2, #77	; 0x4d
 800072e:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated_bat2_maint[2]='U';
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000732:	2255      	movs	r2, #85	; 0x55
 8000734:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated_bat2_maint[3]='P';
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000738:	2250      	movs	r2, #80	; 0x50
 800073a:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated_bat2_maint[4]='V';
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800073e:	2256      	movs	r2, #86	; 0x56
 8000740:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated_bat2_maint[5]='T';
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000744:	2254      	movs	r2, #84	; 0x54
 8000746:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated_bat2_maint[6]='S';
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800074a:	2253      	movs	r2, #83	; 0x53
 800074c:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated_bat2_maint[7]=rx_geninfo_voltage[1];
 800074e:	797a      	ldrb	r2, [r7, #5]
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000752:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated_bat2_maint[8]=rx_geninfo_voltage[0];
 8000754:	793a      	ldrb	r2, [r7, #4]
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000758:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated_bat2_maint[9]='V';
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800075c:	2256      	movs	r2, #86	; 0x56
 800075e:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated_bat2_maint[10]='T';
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000762:	2254      	movs	r2, #84	; 0x54
 8000764:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated_bat2_maint[11]='U';
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000768:	2255      	movs	r2, #85	; 0x55
 800076a:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated_bat2_maint[12]='P';
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800076e:	2250      	movs	r2, #80	; 0x50
 8000770:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated_bat2_maint[13]='E';
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 8000774:	2245      	movs	r2, #69	; 0x45
 8000776:	735a      	strb	r2, [r3, #13]





HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 8000778:	220e      	movs	r2, #14
 800077a:	4906      	ldr	r1, [pc, #24]	; (8000794 <update_voltage_during_maintenance_bat2+0xc4>)
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <update_voltage_during_maintenance_bat2+0xc8>)
 800077e:	f007 fab7 	bl	8007cf0 <HAL_UART_Transmit_IT>

	}



}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000d3 	.word	0x200000d3
 8000790:	20000210 	.word	0x20000210
 8000794:	20000104 	.word	0x20000104
 8000798:	20000310 	.word	0x20000310

0800079c <update_asoc_during_maintenance_bat2>:

void update_asoc_during_maintenance_bat2()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

if(bat2_geninfo_asoc_flag==true)
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <update_asoc_during_maintenance_bat2+0xa8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d047      	beq.n	800083a <update_asoc_during_maintenance_bat2+0x9e>
{

	bat2_geninfo_asoc_flag = false;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <update_asoc_during_maintenance_bat2+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]

	uint8_t rx_geninfo_asoc[1]={0x00};
 80007b0:	2300      	movs	r3, #0
 80007b2:	713b      	strb	r3, [r7, #4]
	uint8_t tx_geninfo_asoc[1]={0x0E};          // asoc
 80007b4:	230e      	movs	r3, #14
 80007b6:	703b      	strb	r3, [r7, #0]

	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_geninfo_asoc, 1);
 80007b8:	463a      	mov	r2, r7
 80007ba:	2301      	movs	r3, #1
 80007bc:	2116      	movs	r1, #22
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <update_asoc_during_maintenance_bat2+0xac>)
 80007c0:	f003 ff3c 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 80007c4:	2005      	movs	r0, #5
 80007c6:	f003 fb0d 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_geninfo_asoc, 1);
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	2301      	movs	r3, #1
 80007ce:	2116      	movs	r1, #22
 80007d0:	481d      	ldr	r0, [pc, #116]	; (8000848 <update_asoc_during_maintenance_bat2+0xac>)
 80007d2:	f003 ffa3 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 80007d6:	2005      	movs	r0, #5
 80007d8:	f003 fb04 	bl	8003de4 <HAL_Delay>



	transmit_info_to_be_updated_bat2_maint[0]='2';
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007de:	2232      	movs	r2, #50	; 0x32
 80007e0:	701a      	strb	r2, [r3, #0]
	transmit_info_to_be_updated_bat2_maint[1]='M';
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007e4:	224d      	movs	r2, #77	; 0x4d
 80007e6:	705a      	strb	r2, [r3, #1]
	transmit_info_to_be_updated_bat2_maint[2]='U';
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007ea:	2255      	movs	r2, #85	; 0x55
 80007ec:	709a      	strb	r2, [r3, #2]
	transmit_info_to_be_updated_bat2_maint[3]='P';
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007f0:	2250      	movs	r2, #80	; 0x50
 80007f2:	70da      	strb	r2, [r3, #3]
	transmit_info_to_be_updated_bat2_maint[4]='A';
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007f6:	2241      	movs	r2, #65	; 0x41
 80007f8:	711a      	strb	r2, [r3, #4]
	transmit_info_to_be_updated_bat2_maint[5]='S';
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 80007fc:	2253      	movs	r2, #83	; 0x53
 80007fe:	715a      	strb	r2, [r3, #5]
	transmit_info_to_be_updated_bat2_maint[6]='S';
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 8000802:	2253      	movs	r2, #83	; 0x53
 8000804:	719a      	strb	r2, [r3, #6]
	transmit_info_to_be_updated_bat2_maint[7]=rx_geninfo_asoc[0];
 8000806:	793a      	ldrb	r2, [r7, #4]
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 800080a:	71da      	strb	r2, [r3, #7]
	transmit_info_to_be_updated_bat2_maint[8]='A';
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 800080e:	2241      	movs	r2, #65	; 0x41
 8000810:	721a      	strb	r2, [r3, #8]
	transmit_info_to_be_updated_bat2_maint[9]='S';
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 8000814:	2253      	movs	r2, #83	; 0x53
 8000816:	725a      	strb	r2, [r3, #9]
	transmit_info_to_be_updated_bat2_maint[10]='E';
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 800081a:	2245      	movs	r2, #69	; 0x45
 800081c:	729a      	strb	r2, [r3, #10]
	transmit_info_to_be_updated_bat2_maint[11]='U';
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 8000820:	2255      	movs	r2, #85	; 0x55
 8000822:	72da      	strb	r2, [r3, #11]
	transmit_info_to_be_updated_bat2_maint[12]='P';
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 8000826:	2250      	movs	r2, #80	; 0x50
 8000828:	731a      	strb	r2, [r3, #12]
	transmit_info_to_be_updated_bat2_maint[13]='E';
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 800082c:	2245      	movs	r2, #69	; 0x45
 800082e:	735a      	strb	r2, [r3, #13]


	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 8000830:	220e      	movs	r2, #14
 8000832:	4906      	ldr	r1, [pc, #24]	; (800084c <update_asoc_during_maintenance_bat2+0xb0>)
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <update_asoc_during_maintenance_bat2+0xb4>)
 8000836:	f007 fa5b 	bl	8007cf0 <HAL_UART_Transmit_IT>


}


}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000d1 	.word	0x200000d1
 8000848:	20000210 	.word	0x20000210
 800084c:	20000104 	.word	0x20000104
 8000850:	20000310 	.word	0x20000310

08000854 <update_RemCap_during_maintenance_bat2>:

void update_RemCap_during_maintenance_bat2()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

	if(bat2_geninfo_remainingcapacity_flag==true)
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <update_RemCap_during_maintenance_bat2+0xa8>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d047      	beq.n	80008f2 <update_RemCap_during_maintenance_bat2+0x9e>
	{
		bat2_geninfo_remainingcapacity_flag = false;
 8000862:	4b26      	ldr	r3, [pc, #152]	; (80008fc <update_RemCap_during_maintenance_bat2+0xa8>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

		uint8_t rx_geninfo_remcap[2]={0x00};
 8000868:	2300      	movs	r3, #0
 800086a:	80bb      	strh	r3, [r7, #4]
		uint8_t tx_remcap[1]={0x0F};               // Rem Cap
 800086c:	230f      	movs	r3, #15
 800086e:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_remcap, 1);
 8000870:	463a      	mov	r2, r7
 8000872:	2301      	movs	r3, #1
 8000874:	2116      	movs	r1, #22
 8000876:	4822      	ldr	r0, [pc, #136]	; (8000900 <update_RemCap_during_maintenance_bat2+0xac>)
 8000878:	f003 fee0 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 800087c:	2005      	movs	r0, #5
 800087e:	f003 fab1 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_geninfo_remcap, 2);
 8000882:	1d3a      	adds	r2, r7, #4
 8000884:	2302      	movs	r3, #2
 8000886:	2116      	movs	r1, #22
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <update_RemCap_during_maintenance_bat2+0xac>)
 800088a:	f003 ff47 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 800088e:	2005      	movs	r0, #5
 8000890:	f003 faa8 	bl	8003de4 <HAL_Delay>

////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
//


		transmit_info_to_be_updated_bat2_maint[0]='2';
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 8000896:	2232      	movs	r2, #50	; 0x32
 8000898:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated_bat2_maint[1]='M';
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 800089c:	224d      	movs	r2, #77	; 0x4d
 800089e:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated_bat2_maint[2]='U';
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008a2:	2255      	movs	r2, #85	; 0x55
 80008a4:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated_bat2_maint[3]='P';
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008a8:	2250      	movs	r2, #80	; 0x50
 80008aa:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated_bat2_maint[4]='R';
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008ae:	2252      	movs	r2, #82	; 0x52
 80008b0:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated_bat2_maint[5]='C';
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008b4:	2243      	movs	r2, #67	; 0x43
 80008b6:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated_bat2_maint[6]='S';
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008ba:	2253      	movs	r2, #83	; 0x53
 80008bc:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated_bat2_maint[7]=rx_geninfo_remcap[1];
 80008be:	797a      	ldrb	r2, [r7, #5]
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008c2:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated_bat2_maint[8]=rx_geninfo_remcap[0];
 80008c4:	793a      	ldrb	r2, [r7, #4]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008c8:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated_bat2_maint[9]='R';
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008cc:	2252      	movs	r2, #82	; 0x52
 80008ce:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated_bat2_maint[10]='C';
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008d2:	2243      	movs	r2, #67	; 0x43
 80008d4:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated_bat2_maint[11]='U';
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008d8:	2255      	movs	r2, #85	; 0x55
 80008da:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated_bat2_maint[12]='P';
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008de:	2250      	movs	r2, #80	; 0x50
 80008e0:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated_bat2_maint[13]='E';
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008e4:	2245      	movs	r2, #69	; 0x45
 80008e6:	735a      	strb	r2, [r3, #13]





HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 80008e8:	220e      	movs	r2, #14
 80008ea:	4906      	ldr	r1, [pc, #24]	; (8000904 <update_RemCap_during_maintenance_bat2+0xb0>)
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <update_RemCap_during_maintenance_bat2+0xb4>)
 80008ee:	f007 f9ff 	bl	8007cf0 <HAL_UART_Transmit_IT>

	}



}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000d2 	.word	0x200000d2
 8000900:	20000210 	.word	0x20000210
 8000904:	20000104 	.word	0x20000104
 8000908:	20000310 	.word	0x20000310

0800090c <update_cyclecount_during_maintenance_bat2>:


void update_cyclecount_during_maintenance_bat2()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	 if(bat2_geninfo_cycle_flag==true)
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <update_cyclecount_during_maintenance_bat2+0xa8>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d047      	beq.n	80009aa <update_cyclecount_during_maintenance_bat2+0x9e>
	 {
		 bat2_geninfo_cycle_flag=false;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <update_cyclecount_during_maintenance_bat2+0xa8>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
		uint8_t tx_cyclecount[1]={0x17}; // CycleCount
 8000920:	2317      	movs	r3, #23
 8000922:	713b      	strb	r3, [r7, #4]
		uint8_t rx_cyclecount[2]={0x00,0x00};
 8000924:	2300      	movs	r3, #0
 8000926:	803b      	strh	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_cyclecount, 1);
 8000928:	1d3a      	adds	r2, r7, #4
 800092a:	2301      	movs	r3, #1
 800092c:	2116      	movs	r1, #22
 800092e:	4822      	ldr	r0, [pc, #136]	; (80009b8 <update_cyclecount_during_maintenance_bat2+0xac>)
 8000930:	f003 fe84 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000934:	2005      	movs	r0, #5
 8000936:	f003 fa55 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_cyclecount, 2);
 800093a:	463a      	mov	r2, r7
 800093c:	2302      	movs	r3, #2
 800093e:	2116      	movs	r1, #22
 8000940:	481d      	ldr	r0, [pc, #116]	; (80009b8 <update_cyclecount_during_maintenance_bat2+0xac>)
 8000942:	f003 feeb 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 8000946:	2005      	movs	r0, #5
 8000948:	f003 fa4c 	bl	8003de4 <HAL_Delay>

		transmit_info_to_be_updated_bat2_maint[0]='2';
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800094e:	2232      	movs	r2, #50	; 0x32
 8000950:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated_bat2_maint[1]='M';
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000954:	224d      	movs	r2, #77	; 0x4d
 8000956:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated_bat2_maint[2]='U';
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800095a:	2255      	movs	r2, #85	; 0x55
 800095c:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated_bat2_maint[3]='P';
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000960:	2250      	movs	r2, #80	; 0x50
 8000962:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated_bat2_maint[4]='C';
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000966:	2243      	movs	r2, #67	; 0x43
 8000968:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated_bat2_maint[5]='C';
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800096c:	2243      	movs	r2, #67	; 0x43
 800096e:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated_bat2_maint[6]='S';
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000972:	2253      	movs	r2, #83	; 0x53
 8000974:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated_bat2_maint[7]=rx_cyclecount[1];
 8000976:	787a      	ldrb	r2, [r7, #1]
 8000978:	4b10      	ldr	r3, [pc, #64]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800097a:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated_bat2_maint[8]=rx_cyclecount[0];
 800097c:	783a      	ldrb	r2, [r7, #0]
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000980:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated_bat2_maint[9]='C';
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000984:	2243      	movs	r2, #67	; 0x43
 8000986:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated_bat2_maint[10]='C';
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800098a:	2243      	movs	r2, #67	; 0x43
 800098c:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated_bat2_maint[11]='U';
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000990:	2255      	movs	r2, #85	; 0x55
 8000992:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated_bat2_maint[12]='P';
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 8000996:	2250      	movs	r2, #80	; 0x50
 8000998:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated_bat2_maint[13]='E';
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 800099c:	2245      	movs	r2, #69	; 0x45
 800099e:	735a      	strb	r2, [r3, #13]





HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 80009a0:	220e      	movs	r2, #14
 80009a2:	4906      	ldr	r1, [pc, #24]	; (80009bc <update_cyclecount_during_maintenance_bat2+0xb0>)
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <update_cyclecount_during_maintenance_bat2+0xb4>)
 80009a6:	f007 f9a3 	bl	8007cf0 <HAL_UART_Transmit_IT>
	 }




}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000d0 	.word	0x200000d0
 80009b8:	20000210 	.word	0x20000210
 80009bc:	20000104 	.word	0x20000104
 80009c0:	20000310 	.word	0x20000310

080009c4 <update_batstatus_during_maintenance_bat2>:

void update_batstatus_during_maintenance_bat2()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

	 if(bat2_geninfo_batterystatus_flag==true)
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <update_batstatus_during_maintenance_bat2+0xa8>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d047      	beq.n	8000a62 <update_batstatus_during_maintenance_bat2+0x9e>
		 {
		 bat2_geninfo_batterystatus_flag=false;
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <update_batstatus_during_maintenance_bat2+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]

			uint8_t tx_batstatus[1]={0x16}; // Bat status
 80009d8:	2316      	movs	r3, #22
 80009da:	713b      	strb	r3, [r7, #4]
			uint8_t rx_batstatus[2]={0x00,0x00};
 80009dc:	2300      	movs	r3, #0
 80009de:	803b      	strh	r3, [r7, #0]
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_batstatus, 1);
 80009e0:	1d3a      	adds	r2, r7, #4
 80009e2:	2301      	movs	r3, #1
 80009e4:	2116      	movs	r1, #22
 80009e6:	4822      	ldr	r0, [pc, #136]	; (8000a70 <update_batstatus_during_maintenance_bat2+0xac>)
 80009e8:	f003 fe28 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80009ec:	2005      	movs	r0, #5
 80009ee:	f003 f9f9 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 80009f2:	463a      	mov	r2, r7
 80009f4:	2302      	movs	r3, #2
 80009f6:	2116      	movs	r1, #22
 80009f8:	481d      	ldr	r0, [pc, #116]	; (8000a70 <update_batstatus_during_maintenance_bat2+0xac>)
 80009fa:	f003 fe8f 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80009fe:	2005      	movs	r0, #5
 8000a00:	f003 f9f0 	bl	8003de4 <HAL_Delay>

			transmit_info_to_be_updated_bat2_maint[0]='2';
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a06:	2232      	movs	r2, #50	; 0x32
 8000a08:	701a      	strb	r2, [r3, #0]
			transmit_info_to_be_updated_bat2_maint[1]='M';
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a0c:	224d      	movs	r2, #77	; 0x4d
 8000a0e:	705a      	strb	r2, [r3, #1]
			transmit_info_to_be_updated_bat2_maint[2]='U';
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a12:	2255      	movs	r2, #85	; 0x55
 8000a14:	709a      	strb	r2, [r3, #2]
			transmit_info_to_be_updated_bat2_maint[3]='P';
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a18:	2250      	movs	r2, #80	; 0x50
 8000a1a:	70da      	strb	r2, [r3, #3]
			transmit_info_to_be_updated_bat2_maint[4]='B';
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a1e:	2242      	movs	r2, #66	; 0x42
 8000a20:	711a      	strb	r2, [r3, #4]
			transmit_info_to_be_updated_bat2_maint[5]='S';
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a24:	2253      	movs	r2, #83	; 0x53
 8000a26:	715a      	strb	r2, [r3, #5]
			transmit_info_to_be_updated_bat2_maint[6]='S';
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a2a:	2253      	movs	r2, #83	; 0x53
 8000a2c:	719a      	strb	r2, [r3, #6]
			transmit_info_to_be_updated_bat2_maint[7]=rx_batstatus[1];
 8000a2e:	787a      	ldrb	r2, [r7, #1]
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a32:	71da      	strb	r2, [r3, #7]
			transmit_info_to_be_updated_bat2_maint[8]=rx_batstatus[0];
 8000a34:	783a      	ldrb	r2, [r7, #0]
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a38:	721a      	strb	r2, [r3, #8]
			transmit_info_to_be_updated_bat2_maint[9]='B';
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a3c:	2242      	movs	r2, #66	; 0x42
 8000a3e:	725a      	strb	r2, [r3, #9]
			transmit_info_to_be_updated_bat2_maint[10]='S';
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a42:	2253      	movs	r2, #83	; 0x53
 8000a44:	729a      	strb	r2, [r3, #10]
			transmit_info_to_be_updated_bat2_maint[11]='U';
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a48:	2255      	movs	r2, #85	; 0x55
 8000a4a:	72da      	strb	r2, [r3, #11]
			transmit_info_to_be_updated_bat2_maint[12]='P';
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a4e:	2250      	movs	r2, #80	; 0x50
 8000a50:	731a      	strb	r2, [r3, #12]
			transmit_info_to_be_updated_bat2_maint[13]='E';
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a54:	2245      	movs	r2, #69	; 0x45
 8000a56:	735a      	strb	r2, [r3, #13]





	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 8000a58:	220e      	movs	r2, #14
 8000a5a:	4906      	ldr	r1, [pc, #24]	; (8000a74 <update_batstatus_during_maintenance_bat2+0xb0>)
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <update_batstatus_during_maintenance_bat2+0xb4>)
 8000a5e:	f007 f947 	bl	8007cf0 <HAL_UART_Transmit_IT>
		 }




}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200000d5 	.word	0x200000d5
 8000a70:	20000210 	.word	0x20000210
 8000a74:	20000104 	.word	0x20000104
 8000a78:	20000310 	.word	0x20000310

08000a7c <update_temperature_during_maintenance_bat2>:

void update_temperature_during_maintenance_bat2()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
if(bat2_geninfo_temperature_flag==true)
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <update_temperature_during_maintenance_bat2+0xa8>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d047      	beq.n	8000b1a <update_temperature_during_maintenance_bat2+0x9e>
{

	bat2_geninfo_temperature_flag=false;
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <update_temperature_during_maintenance_bat2+0xa8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]

		uint8_t tx_temp[1]={0x08}; // Temperature
 8000a90:	2308      	movs	r3, #8
 8000a92:	713b      	strb	r3, [r7, #4]
				uint8_t rx_temp[2]={0x00,0x00};
 8000a94:	2300      	movs	r3, #0
 8000a96:	803b      	strh	r3, [r7, #0]
				HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_temp, 1);
 8000a98:	1d3a      	adds	r2, r7, #4
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2116      	movs	r1, #22
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <update_temperature_during_maintenance_bat2+0xac>)
 8000aa0:	f003 fdcc 	bl	800463c <HAL_I2C_Master_Transmit_IT>
				HAL_Delay(5);
 8000aa4:	2005      	movs	r0, #5
 8000aa6:	f003 f99d 	bl	8003de4 <HAL_Delay>
				HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_temp, 2);
 8000aaa:	463a      	mov	r2, r7
 8000aac:	2302      	movs	r3, #2
 8000aae:	2116      	movs	r1, #22
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <update_temperature_during_maintenance_bat2+0xac>)
 8000ab2:	f003 fe33 	bl	800471c <HAL_I2C_Master_Receive_IT>
				HAL_Delay(5);
 8000ab6:	2005      	movs	r0, #5
 8000ab8:	f003 f994 	bl	8003de4 <HAL_Delay>

				transmit_info_to_be_updated_bat2_maint[0]='2';
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000abe:	2232      	movs	r2, #50	; 0x32
 8000ac0:	701a      	strb	r2, [r3, #0]
				transmit_info_to_be_updated_bat2_maint[1]='M';
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000ac4:	224d      	movs	r2, #77	; 0x4d
 8000ac6:	705a      	strb	r2, [r3, #1]
				transmit_info_to_be_updated_bat2_maint[2]='U';
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000aca:	2255      	movs	r2, #85	; 0x55
 8000acc:	709a      	strb	r2, [r3, #2]
				transmit_info_to_be_updated_bat2_maint[3]='P';
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000ad0:	2250      	movs	r2, #80	; 0x50
 8000ad2:	70da      	strb	r2, [r3, #3]
				transmit_info_to_be_updated_bat2_maint[4]='T';
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000ad6:	2254      	movs	r2, #84	; 0x54
 8000ad8:	711a      	strb	r2, [r3, #4]
				transmit_info_to_be_updated_bat2_maint[5]='P';
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000adc:	2250      	movs	r2, #80	; 0x50
 8000ade:	715a      	strb	r2, [r3, #5]
				transmit_info_to_be_updated_bat2_maint[6]='S';
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000ae2:	2253      	movs	r2, #83	; 0x53
 8000ae4:	719a      	strb	r2, [r3, #6]
				transmit_info_to_be_updated_bat2_maint[7]=rx_temp[1];
 8000ae6:	787a      	ldrb	r2, [r7, #1]
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000aea:	71da      	strb	r2, [r3, #7]
				transmit_info_to_be_updated_bat2_maint[8]=rx_temp[0];
 8000aec:	783a      	ldrb	r2, [r7, #0]
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000af0:	721a      	strb	r2, [r3, #8]
				transmit_info_to_be_updated_bat2_maint[9]='T';
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000af4:	2254      	movs	r2, #84	; 0x54
 8000af6:	725a      	strb	r2, [r3, #9]
				transmit_info_to_be_updated_bat2_maint[10]='P';
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000afa:	2250      	movs	r2, #80	; 0x50
 8000afc:	729a      	strb	r2, [r3, #10]
				transmit_info_to_be_updated_bat2_maint[11]='U';
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000b00:	2255      	movs	r2, #85	; 0x55
 8000b02:	72da      	strb	r2, [r3, #11]
				transmit_info_to_be_updated_bat2_maint[12]='P';
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000b06:	2250      	movs	r2, #80	; 0x50
 8000b08:	731a      	strb	r2, [r3, #12]
				transmit_info_to_be_updated_bat2_maint[13]='E';
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000b0c:	2245      	movs	r2, #69	; 0x45
 8000b0e:	735a      	strb	r2, [r3, #13]





		HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated_bat2_maint, 14);
 8000b10:	220e      	movs	r2, #14
 8000b12:	4906      	ldr	r1, [pc, #24]	; (8000b2c <update_temperature_during_maintenance_bat2+0xb0>)
 8000b14:	4806      	ldr	r0, [pc, #24]	; (8000b30 <update_temperature_during_maintenance_bat2+0xb4>)
 8000b16:	f007 f8eb 	bl	8007cf0 <HAL_UART_Transmit_IT>

}



}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000d4 	.word	0x200000d4
 8000b28:	20000210 	.word	0x20000210
 8000b2c:	20000104 	.word	0x20000104
 8000b30:	20000310 	.word	0x20000310

08000b34 <update_periodic_flags_during_maintenance_bat2>:



void update_periodic_flags_during_maintenance_bat2()
 {
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

		    bat2_geninfo_asoc_counter++;
 8000b38:	4b3a      	ldr	r3, [pc, #232]	; (8000c24 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b42:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_voltage_counter++;
 8000b44:	4b38      	ldr	r3, [pc, #224]	; (8000c28 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b36      	ldr	r3, [pc, #216]	; (8000c28 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000b4e:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_remainingcapacity_counter++;
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000b5a:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_temperature_counter++;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000b66:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_cycle_counter++;
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b72:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_current_counter++;
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b7e:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_batterystatus_counter++;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000b8a:	801a      	strh	r2, [r3, #0]

			if(bat2_geninfo_asoc_counter==100)
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2b64      	cmp	r3, #100	; 0x64
 8000b92:	d105      	bne.n	8000ba0 <update_periodic_flags_during_maintenance_bat2+0x6c>
			{
				bat2_geninfo_asoc_counter=0;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_asoc_flag=true;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <update_periodic_flags_during_maintenance_bat2+0x10c>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	2b32      	cmp	r3, #50	; 0x32
 8000ba6:	d105      	bne.n	8000bb4 <update_periodic_flags_during_maintenance_bat2+0x80>
			{
				bat2_geninfo_voltage_counter=0;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_voltage_flag=true;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <update_periodic_flags_during_maintenance_bat2+0x110>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_remainingcapacity_counter==70)
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	2b46      	cmp	r3, #70	; 0x46
 8000bba:	d105      	bne.n	8000bc8 <update_periodic_flags_during_maintenance_bat2+0x94>
			{
				bat2_geninfo_remainingcapacity_counter=0;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_remainingcapacity_flag=true;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <update_periodic_flags_during_maintenance_bat2+0x114>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_temperature_counter==10)
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d105      	bne.n	8000bdc <update_periodic_flags_during_maintenance_bat2+0xa8>
			{
				bat2_geninfo_temperature_counter=0;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_temperature_flag=true;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <update_periodic_flags_during_maintenance_bat2+0x118>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_cycle_counter==400)
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000be4:	d105      	bne.n	8000bf2 <update_periodic_flags_during_maintenance_bat2+0xbe>
			{
				bat2_geninfo_cycle_counter=0;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_cycle_flag=true;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <update_periodic_flags_during_maintenance_bat2+0x11c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_current_counter==200)
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	2bc8      	cmp	r3, #200	; 0xc8
 8000bf8:	d105      	bne.n	8000c06 <update_periodic_flags_during_maintenance_bat2+0xd2>
			{
				bat2_geninfo_current_counter=0;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_current_flag=true;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <update_periodic_flags_during_maintenance_bat2+0x120>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_batterystatus_counter==25)
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	2b19      	cmp	r3, #25
 8000c0c:	d105      	bne.n	8000c1a <update_periodic_flags_during_maintenance_bat2+0xe6>
			{
				bat2_geninfo_batterystatus_counter=0;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_batterystatus_flag =true;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <update_periodic_flags_during_maintenance_bat2+0x124>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]
			}




		}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	200000c4 	.word	0x200000c4
 8000c28:	200000c8 	.word	0x200000c8
 8000c2c:	200000c6 	.word	0x200000c6
 8000c30:	200000ca 	.word	0x200000ca
 8000c34:	200000c2 	.word	0x200000c2
 8000c38:	200000ce 	.word	0x200000ce
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	200000d1 	.word	0x200000d1
 8000c44:	200000d3 	.word	0x200000d3
 8000c48:	200000d2 	.word	0x200000d2
 8000c4c:	200000d4 	.word	0x200000d4
 8000c50:	200000d0 	.word	0x200000d0
 8000c54:	200000d6 	.word	0x200000d6
 8000c58:	200000d5 	.word	0x200000d5

08000c5c <update_periodic_flags_during_maintenance_bat3>:
}



void update_periodic_flags_during_maintenance_bat3()
 {
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

		    bat3_geninfo_asoc_counter++;
 8000c60:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c6a:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_voltage_counter++;
 8000c6c:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c76:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_remainingcapacity_counter++;
 8000c78:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c82:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_temperature_counter++;
 8000c84:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c8e:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_cycle_counter++;
 8000c90:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000c9a:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_current_counter++;
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000ca6:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_batterystatus_counter++;
 8000ca8:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000cb2:	801a      	strh	r2, [r3, #0]

			if(bat3_geninfo_asoc_counter==100)
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	2b64      	cmp	r3, #100	; 0x64
 8000cba:	d105      	bne.n	8000cc8 <update_periodic_flags_during_maintenance_bat3+0x6c>
			{
				bat3_geninfo_asoc_counter=0;
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_asoc_flag=true;
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <update_periodic_flags_during_maintenance_bat3+0x10c>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	2b32      	cmp	r3, #50	; 0x32
 8000cce:	d105      	bne.n	8000cdc <update_periodic_flags_during_maintenance_bat3+0x80>
			{
				bat3_geninfo_voltage_counter=0;
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_voltage_flag=true;
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <update_periodic_flags_during_maintenance_bat3+0x110>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_remainingcapacity_counter==70)
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	2b46      	cmp	r3, #70	; 0x46
 8000ce2:	d105      	bne.n	8000cf0 <update_periodic_flags_during_maintenance_bat3+0x94>
			{
				bat3_geninfo_remainingcapacity_counter=0;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_remainingcapacity_flag=true;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <update_periodic_flags_during_maintenance_bat3+0x114>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_temperature_counter==10)
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d105      	bne.n	8000d04 <update_periodic_flags_during_maintenance_bat3+0xa8>
			{
				bat3_geninfo_temperature_counter=0;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_temperature_flag=true;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <update_periodic_flags_during_maintenance_bat3+0x118>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_cycle_counter==400)
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000d0c:	d105      	bne.n	8000d1a <update_periodic_flags_during_maintenance_bat3+0xbe>
			{
				bat3_geninfo_cycle_counter=0;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_cycle_flag=true;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <update_periodic_flags_during_maintenance_bat3+0x11c>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_current_counter==200)
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	2bc8      	cmp	r3, #200	; 0xc8
 8000d20:	d105      	bne.n	8000d2e <update_periodic_flags_during_maintenance_bat3+0xd2>
			{
				bat3_geninfo_current_counter=0;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_current_flag=true;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <update_periodic_flags_during_maintenance_bat3+0x120>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_batterystatus_counter==25)
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	2b19      	cmp	r3, #25
 8000d34:	d105      	bne.n	8000d42 <update_periodic_flags_during_maintenance_bat3+0xe6>
			{
				bat3_geninfo_batterystatus_counter=0;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_batterystatus_flag =true;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <update_periodic_flags_during_maintenance_bat3+0x124>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
			}




		}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200000e2 	.word	0x200000e2
 8000d50:	200000e6 	.word	0x200000e6
 8000d54:	200000e4 	.word	0x200000e4
 8000d58:	200000e8 	.word	0x200000e8
 8000d5c:	200000e0 	.word	0x200000e0
 8000d60:	200000ec 	.word	0x200000ec
 8000d64:	200000ea 	.word	0x200000ea
 8000d68:	200000ef 	.word	0x200000ef
 8000d6c:	200000f1 	.word	0x200000f1
 8000d70:	200000f0 	.word	0x200000f0
 8000d74:	200000f2 	.word	0x200000f2
 8000d78:	200000ee 	.word	0x200000ee
 8000d7c:	200000f4 	.word	0x200000f4
 8000d80:	200000f3 	.word	0x200000f3

08000d84 <Transmit_Bat2_Maintenance_General_Info_to_Raspi>:
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c2;

// This function works
void Transmit_Bat2_Maintenance_General_Info_to_Raspi()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0b4      	sub	sp, #208	; 0xd0
 8000d88:	af00      	add	r7, sp, #0

	// GI function starts From here

		uint8_t tx_serial_number_gen[1]={0x1C};  // Serial No
 8000d8a:	231c      	movs	r3, #28
 8000d8c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
		uint8_t rx_serial_no[2]={0x00};
 8000d90:	2300      	movs	r3, #0
 8000d92:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_serial_number_gen, 1);
 8000d96:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	2116      	movs	r1, #22
 8000d9e:	48f2      	ldr	r0, [pc, #968]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000da0:	f003 fc4c 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000da4:	2005      	movs	r0, #5
 8000da6:	f003 f81d 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_serial_no, 2);
 8000daa:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000dae:	2302      	movs	r3, #2
 8000db0:	2116      	movs	r1, #22
 8000db2:	48ed      	ldr	r0, [pc, #948]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000db4:	f003 fcb2 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f003 f813 	bl	8003de4 <HAL_Delay>
		uint16_t sn = rx_serial_no[1];
 8000dbe:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8000dc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
		sn = sn << 8;
 8000dc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
		sn = sn + rx_serial_no[0];
 8000dd0:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000dda:	4413      	add	r3, r2
 8000ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
		uint8_t send_serial_no[14]={'2','M','G','I','S','N','S',rx_serial_no[1],rx_serial_no[0],'S','N','G','I','E'};
 8000de0:	2332      	movs	r3, #50	; 0x32
 8000de2:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8000de6:	234d      	movs	r3, #77	; 0x4d
 8000de8:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8000dec:	2347      	movs	r3, #71	; 0x47
 8000dee:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8000df2:	2349      	movs	r3, #73	; 0x49
 8000df4:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000df8:	2353      	movs	r3, #83	; 0x53
 8000dfa:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000dfe:	234e      	movs	r3, #78	; 0x4e
 8000e00:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8000e04:	2353      	movs	r3, #83	; 0x53
 8000e06:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000e0a:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8000e0e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000e12:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000e16:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8000e1a:	2353      	movs	r3, #83	; 0x53
 8000e1c:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8000e20:	234e      	movs	r3, #78	; 0x4e
 8000e22:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8000e26:	2347      	movs	r3, #71	; 0x47
 8000e28:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8000e2c:	2349      	movs	r3, #73	; 0x49
 8000e2e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8000e32:	2345      	movs	r3, #69	; 0x45
 8000e34:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		HAL_UART_Transmit_IT(&huart2, send_serial_no, 14);
 8000e38:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000e3c:	220e      	movs	r2, #14
 8000e3e:	4619      	mov	r1, r3
 8000e40:	48ca      	ldr	r0, [pc, #808]	; (800116c <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e8>)
 8000e42:	f006 ff55 	bl	8007cf0 <HAL_UART_Transmit_IT>

		uint8_t tx_manufacturer_date_gen[1]={0x1B}; // Maunfact date
 8000e46:	231b      	movs	r3, #27
 8000e48:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		uint8_t rx_manuf_date[2]={0x00,0x00};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_manufacturer_date_gen, 1);
 8000e52:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000e56:	2301      	movs	r3, #1
 8000e58:	2116      	movs	r1, #22
 8000e5a:	48c3      	ldr	r0, [pc, #780]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000e5c:	f003 fbee 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000e60:	2005      	movs	r0, #5
 8000e62:	f002 ffbf 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_manuf_date, 2);
 8000e66:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	2116      	movs	r1, #22
 8000e6e:	48be      	ldr	r0, [pc, #760]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000e70:	f003 fc54 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f002 ffb5 	bl	8003de4 <HAL_Delay>
		uint16_t val=rx_manuf_date[1];
 8000e7a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000e7e:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		val = val << 8;
 8000e82:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		val = val + rx_manuf_date[0];
 8000e8c:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8000e96:	4413      	add	r3, r2
 8000e98:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
		//	uint16_t m = 0x01E0 & val;
		//	m=m>>5;
		//	uint16_t y=0xFE00 & val;
		//	y=y>>9;
		//	y=y+1980;
		uint8_t send_manuf_date[14]={'2','M','G','I','M','D','S',rx_manuf_date[1],rx_manuf_date[0],'M','D','G','I','E'};
 8000e9c:	2332      	movs	r3, #50	; 0x32
 8000e9e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8000ea2:	234d      	movs	r3, #77	; 0x4d
 8000ea4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000ea8:	2347      	movs	r3, #71	; 0x47
 8000eaa:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8000eae:	2349      	movs	r3, #73	; 0x49
 8000eb0:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000eb4:	234d      	movs	r3, #77	; 0x4d
 8000eb6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8000eba:	2344      	movs	r3, #68	; 0x44
 8000ebc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000ec0:	2353      	movs	r3, #83	; 0x53
 8000ec2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000ec6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000eca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000ece:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000ed2:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8000ed6:	234d      	movs	r3, #77	; 0x4d
 8000ed8:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8000edc:	2344      	movs	r3, #68	; 0x44
 8000ede:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000ee2:	2347      	movs	r3, #71	; 0x47
 8000ee4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000ee8:	2349      	movs	r3, #73	; 0x49
 8000eea:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8000eee:	2345      	movs	r3, #69	; 0x45
 8000ef0:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		HAL_UART_Transmit_IT(&huart2, send_manuf_date, 14);
 8000ef4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ef8:	220e      	movs	r2, #14
 8000efa:	4619      	mov	r1, r3
 8000efc:	489b      	ldr	r0, [pc, #620]	; (800116c <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e8>)
 8000efe:	f006 fef7 	bl	8007cf0 <HAL_UART_Transmit_IT>



		uint8_t tx_cyclecount_gen[1]={0x17}; // CycleCount
 8000f02:	2317      	movs	r3, #23
 8000f04:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		uint8_t rx_cyclecount[2]={0x00,0x00};
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_cyclecount_gen, 1);
 8000f0e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000f12:	2301      	movs	r3, #1
 8000f14:	2116      	movs	r1, #22
 8000f16:	4894      	ldr	r0, [pc, #592]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000f18:	f003 fb90 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000f1c:	2005      	movs	r0, #5
 8000f1e:	f002 ff61 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_cyclecount, 2);
 8000f22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000f26:	2302      	movs	r3, #2
 8000f28:	2116      	movs	r1, #22
 8000f2a:	488f      	ldr	r0, [pc, #572]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000f2c:	f003 fbf6 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f002 ff57 	bl	8003de4 <HAL_Delay>
		uint16_t cc = rx_cyclecount[1];
 8000f36:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000f3a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		cc = cc << 8;
 8000f3e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		cc = cc + rx_cyclecount[0];
 8000f48:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8000f52:	4413      	add	r3, r2
 8000f54:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
		uint8_t send_cyclecount[14]={'2','M','G','I','C','C','S',rx_cyclecount[1],rx_cyclecount[0],'C','C','G','I','E'};
 8000f58:	2332      	movs	r3, #50	; 0x32
 8000f5a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000f5e:	234d      	movs	r3, #77	; 0x4d
 8000f60:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8000f64:	2347      	movs	r3, #71	; 0x47
 8000f66:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8000f6a:	2349      	movs	r3, #73	; 0x49
 8000f6c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000f70:	2343      	movs	r3, #67	; 0x43
 8000f72:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000f76:	2343      	movs	r3, #67	; 0x43
 8000f78:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000f7c:	2353      	movs	r3, #83	; 0x53
 8000f7e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000f82:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000f86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000f8a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000f8e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8000f92:	2343      	movs	r3, #67	; 0x43
 8000f94:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8000f98:	2343      	movs	r3, #67	; 0x43
 8000f9a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8000f9e:	2347      	movs	r3, #71	; 0x47
 8000fa0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8000fa4:	2349      	movs	r3, #73	; 0x49
 8000fa6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8000faa:	2345      	movs	r3, #69	; 0x45
 8000fac:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		HAL_UART_Transmit_IT(&huart2, send_cyclecount, 14);
 8000fb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000fb4:	220e      	movs	r2, #14
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	486c      	ldr	r0, [pc, #432]	; (800116c <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e8>)
 8000fba:	f006 fe99 	bl	8007cf0 <HAL_UART_Transmit_IT>



		uint8_t tx_remaining_capacity_gen[1]={0x0F};  // Remaining Capacity
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		uint8_t rx_remcapacity[2]={0x00,0x00};
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_remaining_capacity_gen, 1);
 8000fca:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2116      	movs	r1, #22
 8000fd2:	4865      	ldr	r0, [pc, #404]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000fd4:	f003 fb32 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f002 ff03 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_remcapacity, 2);
 8000fde:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2116      	movs	r1, #22
 8000fe6:	4860      	ldr	r0, [pc, #384]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8000fe8:	f003 fb98 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f002 fef9 	bl	8003de4 <HAL_Delay>
		uint16_t rc = rx_remcapacity[1];
 8000ff2:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8000ff6:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		rc = rc << 8;
 8000ffa:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		rc = rc + rx_remcapacity[0];
 8001004:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001008:	b29a      	uxth	r2, r3
 800100a:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 800100e:	4413      	add	r3, r2
 8001010:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		uint8_t send_remain_capcacity[14]={'2','M','G','I','R','C','S',rx_remcapacity[1],rx_remcapacity[0],'R','C','G','I','E'};
 8001014:	2332      	movs	r3, #50	; 0x32
 8001016:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800101a:	234d      	movs	r3, #77	; 0x4d
 800101c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8001020:	2347      	movs	r3, #71	; 0x47
 8001022:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001026:	2349      	movs	r3, #73	; 0x49
 8001028:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800102c:	2352      	movs	r3, #82	; 0x52
 800102e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001032:	2343      	movs	r3, #67	; 0x43
 8001034:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001038:	2353      	movs	r3, #83	; 0x53
 800103a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800103e:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001046:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800104a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800104e:	2352      	movs	r3, #82	; 0x52
 8001050:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001054:	2343      	movs	r3, #67	; 0x43
 8001056:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800105a:	2347      	movs	r3, #71	; 0x47
 800105c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001060:	2349      	movs	r3, #73	; 0x49
 8001062:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001066:	2345      	movs	r3, #69	; 0x45
 8001068:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		HAL_UART_Transmit_IT(&huart2, send_remain_capcacity, 14);
 800106c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001070:	220e      	movs	r2, #14
 8001072:	4619      	mov	r1, r3
 8001074:	483d      	ldr	r0, [pc, #244]	; (800116c <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e8>)
 8001076:	f006 fe3b 	bl	8007cf0 <HAL_UART_Transmit_IT>



		uint8_t tx_voltage_gen[1]={0x09};    // Voltage
 800107a:	2309      	movs	r3, #9
 800107c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		uint8_t rx_voltage[2];
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage_gen, 1);
 8001080:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001084:	2301      	movs	r3, #1
 8001086:	2116      	movs	r1, #22
 8001088:	4837      	ldr	r0, [pc, #220]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 800108a:	f003 fad7 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 800108e:	2005      	movs	r0, #5
 8001090:	f002 fea8 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_voltage, 2);
 8001094:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001098:	2302      	movs	r3, #2
 800109a:	2116      	movs	r1, #22
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 800109e:	f003 fb3d 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f002 fe9e 	bl	8003de4 <HAL_Delay>
		uint16_t vt = rx_voltage[1];
 80010a8:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80010ac:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		vt = vt << 8;
 80010b0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		vt = vt + rx_voltage[0];
 80010ba:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80010be:	b29a      	uxth	r2, r3
 80010c0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010c4:	4413      	add	r3, r2
 80010c6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
		printf("\nVolatge in main function = %d",vt);
 80010ca:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80010ce:	4619      	mov	r1, r3
 80010d0:	4827      	ldr	r0, [pc, #156]	; (8001170 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3ec>)
 80010d2:	f007 fecb 	bl	8008e6c <iprintf>

		uint8_t send[14]={'2','M','G','I','V','T','S',rx_voltage[1],rx_voltage[0],'V','T','G','I','E'};
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 80010dc:	234d      	movs	r3, #77	; 0x4d
 80010de:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80010e2:	2347      	movs	r3, #71	; 0x47
 80010e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80010e8:	2349      	movs	r3, #73	; 0x49
 80010ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80010ee:	2356      	movs	r3, #86	; 0x56
 80010f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80010f4:	2354      	movs	r3, #84	; 0x54
 80010f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80010fa:	2353      	movs	r3, #83	; 0x53
 80010fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001100:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001104:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001108:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800110c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001110:	2356      	movs	r3, #86	; 0x56
 8001112:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001116:	2354      	movs	r3, #84	; 0x54
 8001118:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800111c:	2347      	movs	r3, #71	; 0x47
 800111e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001122:	2349      	movs	r3, #73	; 0x49
 8001124:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001128:	2345      	movs	r3, #69	; 0x45
 800112a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
		HAL_UART_Transmit_IT(&huart2, send, 14);
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	220e      	movs	r2, #14
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e8>)
 8001138:	f006 fdda 	bl	8007cf0 <HAL_UART_Transmit_IT>


		uint8_t rx_asoc[1]={0x00};        // ASOC
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint8_t tx_asoc_gen[1]={0x0E};
 8001142:	230e      	movs	r3, #14
 8001144:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_asoc_gen, 1);
 8001148:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800114c:	2301      	movs	r3, #1
 800114e:	2116      	movs	r1, #22
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3e4>)
 8001152:	f003 fa73 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8001156:	2005      	movs	r0, #5
 8001158:	f002 fe44 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_asoc, 1);
 800115c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001160:	2301      	movs	r3, #1
 8001162:	2116      	movs	r1, #22
 8001164:	e006      	b.n	8001174 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x3f0>
 8001166:	bf00      	nop
 8001168:	20000210 	.word	0x20000210
 800116c:	20000310 	.word	0x20000310
 8001170:	08009e1c 	.word	0x08009e1c
 8001174:	4873      	ldr	r0, [pc, #460]	; (8001344 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c0>)
 8001176:	f003 fad1 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f002 fe32 	bl	8003de4 <HAL_Delay>
		uint8_t as=rx_asoc[0];
 8001180:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001184:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
		uint8_t send_asoc[14]={'2','M','G','I','A','S','S',rx_asoc[0],'A','S','E','G','I','E'};
 8001188:	2332      	movs	r3, #50	; 0x32
 800118a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800118e:	234d      	movs	r3, #77	; 0x4d
 8001190:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001194:	2347      	movs	r3, #71	; 0x47
 8001196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800119a:	2349      	movs	r3, #73	; 0x49
 800119c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80011a0:	2341      	movs	r3, #65	; 0x41
 80011a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80011a6:	2353      	movs	r3, #83	; 0x53
 80011a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80011ac:	2353      	movs	r3, #83	; 0x53
 80011ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80011b2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80011b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011ba:	2341      	movs	r3, #65	; 0x41
 80011bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80011c0:	2353      	movs	r3, #83	; 0x53
 80011c2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80011c6:	2345      	movs	r3, #69	; 0x45
 80011c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80011cc:	2347      	movs	r3, #71	; 0x47
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80011d2:	2349      	movs	r3, #73	; 0x49
 80011d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80011d8:	2345      	movs	r3, #69	; 0x45
 80011da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		HAL_UART_Transmit_IT(&huart2, send_asoc, 14);
 80011de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e2:	220e      	movs	r2, #14
 80011e4:	4619      	mov	r1, r3
 80011e6:	4858      	ldr	r0, [pc, #352]	; (8001348 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c4>)
 80011e8:	f006 fd82 	bl	8007cf0 <HAL_UART_Transmit_IT>


		uint8_t tx_temperature_gen[1]={0x08};  // Temperature
 80011ec:	2308      	movs	r3, #8
 80011ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t	rx_temperature[2]={0x00,0x00};
 80011f2:	2300      	movs	r3, #0
 80011f4:	853b      	strh	r3, [r7, #40]	; 0x28
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_temperature_gen, 1);
 80011f6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80011fa:	2301      	movs	r3, #1
 80011fc:	2116      	movs	r1, #22
 80011fe:	4851      	ldr	r0, [pc, #324]	; (8001344 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c0>)
 8001200:	f003 fa1c 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8001204:	2005      	movs	r0, #5
 8001206:	f002 fded 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_temperature, 2);
 800120a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800120e:	2302      	movs	r3, #2
 8001210:	2116      	movs	r1, #22
 8001212:	484c      	ldr	r0, [pc, #304]	; (8001344 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c0>)
 8001214:	f003 fa82 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f002 fde3 	bl	8003de4 <HAL_Delay>
		uint16_t tp = rx_temperature[1];
 800121e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001222:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
		tp = tp << 8;
 8001226:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
		tp = tp + rx_temperature[0];
 8001230:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001234:	b29a      	uxth	r2, r3
 8001236:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800123a:	4413      	add	r3, r2
 800123c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
		uint8_t send_temp[14]={'2','M','G','I','T','P','S',rx_temperature[1],rx_temperature[0],'T','P','G','I','E'};
 8001240:	2332      	movs	r3, #50	; 0x32
 8001242:	763b      	strb	r3, [r7, #24]
 8001244:	234d      	movs	r3, #77	; 0x4d
 8001246:	767b      	strb	r3, [r7, #25]
 8001248:	2347      	movs	r3, #71	; 0x47
 800124a:	76bb      	strb	r3, [r7, #26]
 800124c:	2349      	movs	r3, #73	; 0x49
 800124e:	76fb      	strb	r3, [r7, #27]
 8001250:	2354      	movs	r3, #84	; 0x54
 8001252:	773b      	strb	r3, [r7, #28]
 8001254:	2350      	movs	r3, #80	; 0x50
 8001256:	777b      	strb	r3, [r7, #29]
 8001258:	2353      	movs	r3, #83	; 0x53
 800125a:	77bb      	strb	r3, [r7, #30]
 800125c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001260:	77fb      	strb	r3, [r7, #31]
 8001262:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001266:	f887 3020 	strb.w	r3, [r7, #32]
 800126a:	2354      	movs	r3, #84	; 0x54
 800126c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001270:	2350      	movs	r3, #80	; 0x50
 8001272:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001276:	2347      	movs	r3, #71	; 0x47
 8001278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800127c:	2349      	movs	r3, #73	; 0x49
 800127e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001282:	2345      	movs	r3, #69	; 0x45
 8001284:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		HAL_UART_Transmit_IT(&huart2, send_temp, 14);
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	220e      	movs	r2, #14
 800128e:	4619      	mov	r1, r3
 8001290:	482d      	ldr	r0, [pc, #180]	; (8001348 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c4>)
 8001292:	f006 fd2d 	bl	8007cf0 <HAL_UART_Transmit_IT>



		uint8_t tx_battery_status_gen[1]={0x16}; // Battery Status
 8001296:	2316      	movs	r3, #22
 8001298:	753b      	strb	r3, [r7, #20]
		uint8_t rx_batstatus[2]={0x00,0x00};
 800129a:	2300      	movs	r3, #0
 800129c:	823b      	strh	r3, [r7, #16]
		HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_battery_status_gen, 1);
 800129e:	f107 0214 	add.w	r2, r7, #20
 80012a2:	2301      	movs	r3, #1
 80012a4:	2116      	movs	r1, #22
 80012a6:	4827      	ldr	r0, [pc, #156]	; (8001344 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c0>)
 80012a8:	f003 f9c8 	bl	800463c <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80012ac:	2005      	movs	r0, #5
 80012ae:	f002 fd99 	bl	8003de4 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 80012b2:	f107 0210 	add.w	r2, r7, #16
 80012b6:	2302      	movs	r3, #2
 80012b8:	2116      	movs	r1, #22
 80012ba:	4822      	ldr	r0, [pc, #136]	; (8001344 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c0>)
 80012bc:	f003 fa2e 	bl	800471c <HAL_I2C_Master_Receive_IT>
		HAL_Delay(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f002 fd8f 	bl	8003de4 <HAL_Delay>
		uint16_t bs = rx_batstatus[1];
 80012c6:	7c7b      	ldrb	r3, [r7, #17]
 80012c8:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		bs = bs << 8;
 80012cc:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		bs = bs + rx_batstatus[0];
 80012d6:	7c3b      	ldrb	r3, [r7, #16]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80012de:	4413      	add	r3, r2
 80012e0:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
		uint8_t send_bat_status[14]={'2','M','G','I','B','S','S',rx_batstatus[1],rx_batstatus[0],'B','S','G','I','E'};
 80012e4:	2332      	movs	r3, #50	; 0x32
 80012e6:	703b      	strb	r3, [r7, #0]
 80012e8:	234d      	movs	r3, #77	; 0x4d
 80012ea:	707b      	strb	r3, [r7, #1]
 80012ec:	2347      	movs	r3, #71	; 0x47
 80012ee:	70bb      	strb	r3, [r7, #2]
 80012f0:	2349      	movs	r3, #73	; 0x49
 80012f2:	70fb      	strb	r3, [r7, #3]
 80012f4:	2342      	movs	r3, #66	; 0x42
 80012f6:	713b      	strb	r3, [r7, #4]
 80012f8:	2353      	movs	r3, #83	; 0x53
 80012fa:	717b      	strb	r3, [r7, #5]
 80012fc:	2353      	movs	r3, #83	; 0x53
 80012fe:	71bb      	strb	r3, [r7, #6]
 8001300:	7c7b      	ldrb	r3, [r7, #17]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	7c3b      	ldrb	r3, [r7, #16]
 8001306:	723b      	strb	r3, [r7, #8]
 8001308:	2342      	movs	r3, #66	; 0x42
 800130a:	727b      	strb	r3, [r7, #9]
 800130c:	2353      	movs	r3, #83	; 0x53
 800130e:	72bb      	strb	r3, [r7, #10]
 8001310:	2347      	movs	r3, #71	; 0x47
 8001312:	72fb      	strb	r3, [r7, #11]
 8001314:	2349      	movs	r3, #73	; 0x49
 8001316:	733b      	strb	r3, [r7, #12]
 8001318:	2345      	movs	r3, #69	; 0x45
 800131a:	737b      	strb	r3, [r7, #13]
		HAL_UART_Transmit_IT(&huart2, send_bat_status, 14);
 800131c:	463b      	mov	r3, r7
 800131e:	220e      	movs	r2, #14
 8001320:	4619      	mov	r1, r3
 8001322:	4809      	ldr	r0, [pc, #36]	; (8001348 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c4>)
 8001324:	f006 fce4 	bl	8007cf0 <HAL_UART_Transmit_IT>
		HAL_Delay(1);
 8001328:	2001      	movs	r0, #1
 800132a:	f002 fd5b 	bl	8003de4 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart2, send_bat_status, 14);
 800132e:	463b      	mov	r3, r7
 8001330:	220e      	movs	r2, #14
 8001332:	4619      	mov	r1, r3
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <Transmit_Bat2_Maintenance_General_Info_to_Raspi+0x5c4>)
 8001336:	f006 fcdb 	bl	8007cf0 <HAL_UART_Transmit_IT>





}
 800133a:	bf00      	nop
 800133c:	37d0      	adds	r7, #208	; 0xd0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000210 	.word	0x20000210
 8001348:	20000310 	.word	0x20000310

0800134c <commands_from_pi_to_stm>:
extern bool BAT_3_MAINT_GENERAL_INFO_FLAG;
extern bool BAT_3_MAINTENANCE_FLAG;


void commands_from_pi_to_stm()
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8001350:	4b93      	ldr	r3, [pc, #588]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b42      	cmp	r3, #66	; 0x42
 8001356:	d139      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001358:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	2b41      	cmp	r3, #65	; 0x41
 800135e:	d135      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001360:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	2b54      	cmp	r3, #84	; 0x54
 8001366:	d131      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001368:	4b8d      	ldr	r3, [pc, #564]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b31      	cmp	r3, #49	; 0x31
 800136e:	d12d      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001370:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	2b53      	cmp	r3, #83	; 0x53
 8001376:	d129      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001378:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800137a:	795b      	ldrb	r3, [r3, #5]
 800137c:	2b54      	cmp	r3, #84	; 0x54
 800137e:	d125      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001382:	799b      	ldrb	r3, [r3, #6]
 8001384:	2b52      	cmp	r3, #82	; 0x52
 8001386:	d121      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001388:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800138a:	79db      	ldrb	r3, [r3, #7]
 800138c:	2b4d      	cmp	r3, #77	; 0x4d
 800138e:	d11d      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 8001390:	4b83      	ldr	r3, [pc, #524]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001392:	7a1b      	ldrb	r3, [r3, #8]
 8001394:	2b41      	cmp	r3, #65	; 0x41
 8001396:	d119      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800139a:	7a5b      	ldrb	r3, [r3, #9]
 800139c:	2b49      	cmp	r3, #73	; 0x49
 800139e:	d115      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 80013a0:	4b7f      	ldr	r3, [pc, #508]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013a2:	7a9b      	ldrb	r3, [r3, #10]
 80013a4:	2b4e      	cmp	r3, #78	; 0x4e
 80013a6:	d111      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 80013a8:	4b7d      	ldr	r3, [pc, #500]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013aa:	7adb      	ldrb	r3, [r3, #11]
 80013ac:	2b54      	cmp	r3, #84	; 0x54
 80013ae:	d10d      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 80013b0:	4b7b      	ldr	r3, [pc, #492]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013b2:	7b1b      	ldrb	r3, [r3, #12]
 80013b4:	2b53      	cmp	r3, #83	; 0x53
 80013b6:	d109      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
 80013b8:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013ba:	7b5b      	ldrb	r3, [r3, #13]
 80013bc:	2b54      	cmp	r3, #84	; 0x54
 80013be:	d105      	bne.n	80013cc <commands_from_pi_to_stm+0x80>
	{
		Autotestflag=true;
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <commands_from_pi_to_stm+0x258>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
		update_maintenance_info_flag=true;
 80013c6:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <commands_from_pi_to_stm+0x25c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]

	}


	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80013cc:	4b74      	ldr	r3, [pc, #464]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b42      	cmp	r3, #66	; 0x42
 80013d2:	d136      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 80013d4:	4b72      	ldr	r3, [pc, #456]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	2b41      	cmp	r3, #65	; 0x41
 80013da:	d132      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	2b54      	cmp	r3, #84	; 0x54
 80013e2:	d12e      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 80013e4:	4b6e      	ldr	r3, [pc, #440]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013e6:	78db      	ldrb	r3, [r3, #3]
 80013e8:	2b31      	cmp	r3, #49	; 0x31
 80013ea:	d12a      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 80013ec:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	2b4d      	cmp	r3, #77	; 0x4d
 80013f2:	d126      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013f6:	795b      	ldrb	r3, [r3, #5]
 80013f8:	2b41      	cmp	r3, #65	; 0x41
 80013fa:	d122      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 80013fc:	4b68      	ldr	r3, [pc, #416]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80013fe:	799b      	ldrb	r3, [r3, #6]
 8001400:	2b49      	cmp	r3, #73	; 0x49
 8001402:	d11e      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 8001404:	4b66      	ldr	r3, [pc, #408]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001406:	79db      	ldrb	r3, [r3, #7]
 8001408:	2b4e      	cmp	r3, #78	; 0x4e
 800140a:	d11a      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 800140c:	4b64      	ldr	r3, [pc, #400]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800140e:	7a1b      	ldrb	r3, [r3, #8]
 8001410:	2b44      	cmp	r3, #68	; 0x44
 8001412:	d116      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8001414:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001416:	7a5b      	ldrb	r3, [r3, #9]
 8001418:	2b50      	cmp	r3, #80	; 0x50
 800141a:	d112      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 800141c:	4b60      	ldr	r3, [pc, #384]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800141e:	7a9b      	ldrb	r3, [r3, #10]
 8001420:	2b47      	cmp	r3, #71	; 0x47
 8001422:	d10e      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 8001424:	4b5e      	ldr	r3, [pc, #376]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001426:	7adb      	ldrb	r3, [r3, #11]
 8001428:	2b4e      	cmp	r3, #78	; 0x4e
 800142a:	d10a      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 800142c:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800142e:	7b1b      	ldrb	r3, [r3, #12]
 8001430:	2b49      	cmp	r3, #73	; 0x49
 8001432:	d106      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
 8001434:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001436:	7b5b      	ldrb	r3, [r3, #13]
 8001438:	2b46      	cmp	r3, #70	; 0x46
 800143a:	d102      	bne.n	8001442 <commands_from_pi_to_stm+0xf6>
	{
		BAT_1_MAINT_GENERAL_INFO_FLAG=true;
 800143c:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <commands_from_pi_to_stm+0x260>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]

	}


	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 8001442:	4b57      	ldr	r3, [pc, #348]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b42      	cmp	r3, #66	; 0x42
 8001448:	d136      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800144c:	785b      	ldrb	r3, [r3, #1]
 800144e:	2b41      	cmp	r3, #65	; 0x41
 8001450:	d132      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	2b54      	cmp	r3, #84	; 0x54
 8001458:	d12e      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800145c:	78db      	ldrb	r3, [r3, #3]
 800145e:	2b31      	cmp	r3, #49	; 0x31
 8001460:	d12a      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001464:	791b      	ldrb	r3, [r3, #4]
 8001466:	2b45      	cmp	r3, #69	; 0x45
 8001468:	d126      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 800146a:	4b4d      	ldr	r3, [pc, #308]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	2b4e      	cmp	r3, #78	; 0x4e
 8001470:	d122      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001474:	799b      	ldrb	r3, [r3, #6]
 8001476:	2b54      	cmp	r3, #84	; 0x54
 8001478:	d11e      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800147c:	79db      	ldrb	r3, [r3, #7]
 800147e:	2b45      	cmp	r3, #69	; 0x45
 8001480:	d11a      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001484:	7a1b      	ldrb	r3, [r3, #8]
 8001486:	2b52      	cmp	r3, #82	; 0x52
 8001488:	d116      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 800148a:	4b45      	ldr	r3, [pc, #276]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800148c:	7a5b      	ldrb	r3, [r3, #9]
 800148e:	2b4d      	cmp	r3, #77	; 0x4d
 8001490:	d112      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001494:	7a9b      	ldrb	r3, [r3, #10]
 8001496:	2b41      	cmp	r3, #65	; 0x41
 8001498:	d10e      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800149c:	7adb      	ldrb	r3, [r3, #11]
 800149e:	2b49      	cmp	r3, #73	; 0x49
 80014a0:	d10a      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014a4:	7b1b      	ldrb	r3, [r3, #12]
 80014a6:	2b4e      	cmp	r3, #78	; 0x4e
 80014a8:	d106      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
 80014aa:	4b3d      	ldr	r3, [pc, #244]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014ac:	7b5b      	ldrb	r3, [r3, #13]
 80014ae:	2b54      	cmp	r3, #84	; 0x54
 80014b0:	d102      	bne.n	80014b8 <commands_from_pi_to_stm+0x16c>
	{
		BAT_1_MAINTENANCE_FLAG=true;
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <commands_from_pi_to_stm+0x264>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b42      	cmp	r3, #66	; 0x42
 80014be:	d139      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	2b41      	cmp	r3, #65	; 0x41
 80014c6:	d135      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	2b54      	cmp	r3, #84	; 0x54
 80014ce:	d131      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014d0:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014d2:	78db      	ldrb	r3, [r3, #3]
 80014d4:	2b32      	cmp	r3, #50	; 0x32
 80014d6:	d12d      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	2b53      	cmp	r3, #83	; 0x53
 80014de:	d129      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014e2:	795b      	ldrb	r3, [r3, #5]
 80014e4:	2b54      	cmp	r3, #84	; 0x54
 80014e6:	d125      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014ea:	799b      	ldrb	r3, [r3, #6]
 80014ec:	2b52      	cmp	r3, #82	; 0x52
 80014ee:	d121      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014f2:	79db      	ldrb	r3, [r3, #7]
 80014f4:	2b4d      	cmp	r3, #77	; 0x4d
 80014f6:	d11d      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 80014fa:	7a1b      	ldrb	r3, [r3, #8]
 80014fc:	2b41      	cmp	r3, #65	; 0x41
 80014fe:	d119      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001502:	7a5b      	ldrb	r3, [r3, #9]
 8001504:	2b49      	cmp	r3, #73	; 0x49
 8001506:	d115      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 8001508:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800150a:	7a9b      	ldrb	r3, [r3, #10]
 800150c:	2b4e      	cmp	r3, #78	; 0x4e
 800150e:	d111      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001512:	7adb      	ldrb	r3, [r3, #11]
 8001514:	2b54      	cmp	r3, #84	; 0x54
 8001516:	d10d      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	2b53      	cmp	r3, #83	; 0x53
 800151e:	d109      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001522:	7b5b      	ldrb	r3, [r3, #13]
 8001524:	2b54      	cmp	r3, #84	; 0x54
 8001526:	d105      	bne.n	8001534 <commands_from_pi_to_stm+0x1e8>
	{
		Bat2_Maint_Autotestflag=true;
 8001528:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <commands_from_pi_to_stm+0x268>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
		bat2_update_maintenance_info_flag=true;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <commands_from_pi_to_stm+0x26c>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b42      	cmp	r3, #66	; 0x42
 800153a:	d146      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	2b41      	cmp	r3, #65	; 0x41
 8001542:	d142      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	2b54      	cmp	r3, #84	; 0x54
 800154a:	d13e      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	2b32      	cmp	r3, #50	; 0x32
 8001552:	d13a      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001556:	791b      	ldrb	r3, [r3, #4]
 8001558:	2b4d      	cmp	r3, #77	; 0x4d
 800155a:	d136      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800155e:	795b      	ldrb	r3, [r3, #5]
 8001560:	2b41      	cmp	r3, #65	; 0x41
 8001562:	d132      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001566:	799b      	ldrb	r3, [r3, #6]
 8001568:	2b49      	cmp	r3, #73	; 0x49
 800156a:	d12e      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800156e:	79db      	ldrb	r3, [r3, #7]
 8001570:	2b4e      	cmp	r3, #78	; 0x4e
 8001572:	d12a      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001576:	7a1b      	ldrb	r3, [r3, #8]
 8001578:	2b44      	cmp	r3, #68	; 0x44
 800157a:	d126      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800157e:	7a5b      	ldrb	r3, [r3, #9]
 8001580:	2b50      	cmp	r3, #80	; 0x50
 8001582:	d122      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001586:	7a9b      	ldrb	r3, [r3, #10]
 8001588:	2b47      	cmp	r3, #71	; 0x47
 800158a:	d11e      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 800158e:	7adb      	ldrb	r3, [r3, #11]
 8001590:	2b4e      	cmp	r3, #78	; 0x4e
 8001592:	d11a      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <commands_from_pi_to_stm+0x254>)
 8001596:	7b1b      	ldrb	r3, [r3, #12]
 8001598:	2b49      	cmp	r3, #73	; 0x49
 800159a:	d116      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
 800159c:	e00e      	b.n	80015bc <commands_from_pi_to_stm+0x270>
 800159e:	bf00      	nop
 80015a0:	200002b0 	.word	0x200002b0
 80015a4:	20000095 	.word	0x20000095
 80015a8:	200000ad 	.word	0x200000ad
 80015ac:	20000097 	.word	0x20000097
 80015b0:	20000096 	.word	0x20000096
 80015b4:	200000bc 	.word	0x200000bc
 80015b8:	200000d7 	.word	0x200000d7
 80015bc:	4b7d      	ldr	r3, [pc, #500]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015be:	7b5b      	ldrb	r3, [r3, #13]
 80015c0:	2b46      	cmp	r3, #70	; 0x46
 80015c2:	d102      	bne.n	80015ca <commands_from_pi_to_stm+0x27e>
	{
		BAT_2_MAINT_GENERAL_INFO_FLAG=true;
 80015c4:	4b7c      	ldr	r3, [pc, #496]	; (80017b8 <commands_from_pi_to_stm+0x46c>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 80015ca:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b42      	cmp	r3, #66	; 0x42
 80015d0:	d136      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	2b41      	cmp	r3, #65	; 0x41
 80015d8:	d132      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 80015da:	4b76      	ldr	r3, [pc, #472]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015dc:	789b      	ldrb	r3, [r3, #2]
 80015de:	2b54      	cmp	r3, #84	; 0x54
 80015e0:	d12e      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 80015e2:	4b74      	ldr	r3, [pc, #464]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	2b32      	cmp	r3, #50	; 0x32
 80015e8:	d12a      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 80015ea:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	2b45      	cmp	r3, #69	; 0x45
 80015f0:	d126      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 80015f2:	4b70      	ldr	r3, [pc, #448]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015f4:	795b      	ldrb	r3, [r3, #5]
 80015f6:	2b4e      	cmp	r3, #78	; 0x4e
 80015f8:	d122      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80015fc:	799b      	ldrb	r3, [r3, #6]
 80015fe:	2b54      	cmp	r3, #84	; 0x54
 8001600:	d11e      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 8001602:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001604:	79db      	ldrb	r3, [r3, #7]
 8001606:	2b45      	cmp	r3, #69	; 0x45
 8001608:	d11a      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 800160a:	4b6a      	ldr	r3, [pc, #424]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800160c:	7a1b      	ldrb	r3, [r3, #8]
 800160e:	2b52      	cmp	r3, #82	; 0x52
 8001610:	d116      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001614:	7a5b      	ldrb	r3, [r3, #9]
 8001616:	2b4d      	cmp	r3, #77	; 0x4d
 8001618:	d112      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 800161a:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800161c:	7a9b      	ldrb	r3, [r3, #10]
 800161e:	2b41      	cmp	r3, #65	; 0x41
 8001620:	d10e      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 8001622:	4b64      	ldr	r3, [pc, #400]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001624:	7adb      	ldrb	r3, [r3, #11]
 8001626:	2b49      	cmp	r3, #73	; 0x49
 8001628:	d10a      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800162c:	7b1b      	ldrb	r3, [r3, #12]
 800162e:	2b4e      	cmp	r3, #78	; 0x4e
 8001630:	d106      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
 8001632:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001634:	7b5b      	ldrb	r3, [r3, #13]
 8001636:	2b54      	cmp	r3, #84	; 0x54
 8001638:	d102      	bne.n	8001640 <commands_from_pi_to_stm+0x2f4>
	{
		BAT_2_MAINTENANCE_FLAG=true;
 800163a:	4b60      	ldr	r3, [pc, #384]	; (80017bc <commands_from_pi_to_stm+0x470>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8001640:	4b5c      	ldr	r3, [pc, #368]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b42      	cmp	r3, #66	; 0x42
 8001646:	d139      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001648:	4b5a      	ldr	r3, [pc, #360]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	2b41      	cmp	r3, #65	; 0x41
 800164e:	d135      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	2b54      	cmp	r3, #84	; 0x54
 8001656:	d131      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001658:	4b56      	ldr	r3, [pc, #344]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800165a:	78db      	ldrb	r3, [r3, #3]
 800165c:	2b33      	cmp	r3, #51	; 0x33
 800165e:	d12d      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001660:	4b54      	ldr	r3, [pc, #336]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	2b53      	cmp	r3, #83	; 0x53
 8001666:	d129      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001668:	4b52      	ldr	r3, [pc, #328]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800166a:	795b      	ldrb	r3, [r3, #5]
 800166c:	2b54      	cmp	r3, #84	; 0x54
 800166e:	d125      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8001670:	4b50      	ldr	r3, [pc, #320]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001672:	799b      	ldrb	r3, [r3, #6]
 8001674:	2b52      	cmp	r3, #82	; 0x52
 8001676:	d121      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001678:	4b4e      	ldr	r3, [pc, #312]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800167a:	79db      	ldrb	r3, [r3, #7]
 800167c:	2b4d      	cmp	r3, #77	; 0x4d
 800167e:	d11d      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001680:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001682:	7a1b      	ldrb	r3, [r3, #8]
 8001684:	2b41      	cmp	r3, #65	; 0x41
 8001686:	d119      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800168a:	7a5b      	ldrb	r3, [r3, #9]
 800168c:	2b49      	cmp	r3, #73	; 0x49
 800168e:	d115      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001690:	4b48      	ldr	r3, [pc, #288]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001692:	7a9b      	ldrb	r3, [r3, #10]
 8001694:	2b4e      	cmp	r3, #78	; 0x4e
 8001696:	d111      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800169a:	7adb      	ldrb	r3, [r3, #11]
 800169c:	2b54      	cmp	r3, #84	; 0x54
 800169e:	d10d      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 80016a0:	4b44      	ldr	r3, [pc, #272]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016a2:	7b1b      	ldrb	r3, [r3, #12]
 80016a4:	2b53      	cmp	r3, #83	; 0x53
 80016a6:	d109      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
 80016a8:	4b42      	ldr	r3, [pc, #264]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016aa:	7b5b      	ldrb	r3, [r3, #13]
 80016ac:	2b54      	cmp	r3, #84	; 0x54
 80016ae:	d105      	bne.n	80016bc <commands_from_pi_to_stm+0x370>
	{
		Bat3_Maint_Autotestflag=true;
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <commands_from_pi_to_stm+0x474>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
		bat3_update_maintenance_info_flag=true;
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <commands_from_pi_to_stm+0x478>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80016bc:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b42      	cmp	r3, #66	; 0x42
 80016c2:	d136      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016c4:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	2b41      	cmp	r3, #65	; 0x41
 80016ca:	d132      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016ce:	789b      	ldrb	r3, [r3, #2]
 80016d0:	2b54      	cmp	r3, #84	; 0x54
 80016d2:	d12e      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016d4:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	2b33      	cmp	r3, #51	; 0x33
 80016da:	d12a      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016de:	791b      	ldrb	r3, [r3, #4]
 80016e0:	2b4d      	cmp	r3, #77	; 0x4d
 80016e2:	d126      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016e6:	795b      	ldrb	r3, [r3, #5]
 80016e8:	2b41      	cmp	r3, #65	; 0x41
 80016ea:	d122      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016ee:	799b      	ldrb	r3, [r3, #6]
 80016f0:	2b49      	cmp	r3, #73	; 0x49
 80016f2:	d11e      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016f4:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016f6:	79db      	ldrb	r3, [r3, #7]
 80016f8:	2b4e      	cmp	r3, #78	; 0x4e
 80016fa:	d11a      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 80016fe:	7a1b      	ldrb	r3, [r3, #8]
 8001700:	2b44      	cmp	r3, #68	; 0x44
 8001702:	d116      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001706:	7a5b      	ldrb	r3, [r3, #9]
 8001708:	2b50      	cmp	r3, #80	; 0x50
 800170a:	d112      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800170e:	7a9b      	ldrb	r3, [r3, #10]
 8001710:	2b47      	cmp	r3, #71	; 0x47
 8001712:	d10e      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001716:	7adb      	ldrb	r3, [r3, #11]
 8001718:	2b4e      	cmp	r3, #78	; 0x4e
 800171a:	d10a      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b49      	cmp	r3, #73	; 0x49
 8001722:	d106      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001726:	7b5b      	ldrb	r3, [r3, #13]
 8001728:	2b46      	cmp	r3, #70	; 0x46
 800172a:	d102      	bne.n	8001732 <commands_from_pi_to_stm+0x3e6>
	{
		BAT_3_MAINT_GENERAL_INFO_FLAG=true;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <commands_from_pi_to_stm+0x47c>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 8001732:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b42      	cmp	r3, #66	; 0x42
 8001738:	d136      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	2b41      	cmp	r3, #65	; 0x41
 8001740:	d132      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	2b54      	cmp	r3, #84	; 0x54
 8001748:	d12e      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800174c:	78db      	ldrb	r3, [r3, #3]
 800174e:	2b33      	cmp	r3, #51	; 0x33
 8001750:	d12a      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001754:	791b      	ldrb	r3, [r3, #4]
 8001756:	2b45      	cmp	r3, #69	; 0x45
 8001758:	d126      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800175c:	795b      	ldrb	r3, [r3, #5]
 800175e:	2b4e      	cmp	r3, #78	; 0x4e
 8001760:	d122      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001764:	799b      	ldrb	r3, [r3, #6]
 8001766:	2b54      	cmp	r3, #84	; 0x54
 8001768:	d11e      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800176a:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800176c:	79db      	ldrb	r3, [r3, #7]
 800176e:	2b45      	cmp	r3, #69	; 0x45
 8001770:	d11a      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001774:	7a1b      	ldrb	r3, [r3, #8]
 8001776:	2b52      	cmp	r3, #82	; 0x52
 8001778:	d116      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800177c:	7a5b      	ldrb	r3, [r3, #9]
 800177e:	2b4d      	cmp	r3, #77	; 0x4d
 8001780:	d112      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001784:	7a9b      	ldrb	r3, [r3, #10]
 8001786:	2b41      	cmp	r3, #65	; 0x41
 8001788:	d10e      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800178c:	7adb      	ldrb	r3, [r3, #11]
 800178e:	2b49      	cmp	r3, #73	; 0x49
 8001790:	d10a      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 8001794:	7b1b      	ldrb	r3, [r3, #12]
 8001796:	2b4e      	cmp	r3, #78	; 0x4e
 8001798:	d106      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <commands_from_pi_to_stm+0x468>)
 800179c:	7b5b      	ldrb	r3, [r3, #13]
 800179e:	2b54      	cmp	r3, #84	; 0x54
 80017a0:	d102      	bne.n	80017a8 <commands_from_pi_to_stm+0x45c>
	{
		BAT_3_MAINTENANCE_FLAG=true;
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <commands_from_pi_to_stm+0x480>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
	}




}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	200000bf 	.word	0x200000bf
 80017bc:	200000bd 	.word	0x200000bd
 80017c0:	200000dd 	.word	0x200000dd
 80017c4:	200000f5 	.word	0x200000f5
 80017c8:	200000df 	.word	0x200000df
 80017cc:	200000de 	.word	0x200000de

080017d0 <gpio_func_bat2_chg_dschg>:


}

void gpio_func_bat2_chg_dschg()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

	if(bat2charge==true)
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <gpio_func_bat2_chg_dschg+0x5c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <gpio_func_bat2_chg_dschg+0x16>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);  // PC5 charge // PC6 Discharge
 80017dc:	2201      	movs	r2, #1
 80017de:	2120      	movs	r1, #32
 80017e0:	4813      	ldr	r0, [pc, #76]	; (8001830 <gpio_func_bat2_chg_dschg+0x60>)
 80017e2:	f002 fe81 	bl	80044e8 <HAL_GPIO_WritePin>
	}

	if(bat2charge==false)
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <gpio_func_bat2_chg_dschg+0x5c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <gpio_func_bat2_chg_dschg+0x2e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2120      	movs	r1, #32
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <gpio_func_bat2_chg_dschg+0x60>)
 80017fa:	f002 fe75 	bl	80044e8 <HAL_GPIO_WritePin>
	}

	if(bat2discharge==true)
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <gpio_func_bat2_chg_dschg+0x64>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <gpio_func_bat2_chg_dschg+0x40>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	2140      	movs	r1, #64	; 0x40
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <gpio_func_bat2_chg_dschg+0x60>)
 800180c:	f002 fe6c 	bl	80044e8 <HAL_GPIO_WritePin>
	}

	if(bat2discharge==false)
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <gpio_func_bat2_chg_dschg+0x64>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f083 0301 	eor.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <gpio_func_bat2_chg_dschg+0x58>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2140      	movs	r1, #64	; 0x40
 8001822:	4803      	ldr	r0, [pc, #12]	; (8001830 <gpio_func_bat2_chg_dschg+0x60>)
 8001824:	f002 fe60 	bl	80044e8 <HAL_GPIO_WritePin>
	}


}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000b3 	.word	0x200000b3
 8001830:	40020800 	.word	0x40020800
 8001834:	200000b4 	.word	0x200000b4

08001838 <connect_to_Pi>:

// This is a workaround which works, but not an ideal solution. When an effective solution to this
// problem is found, this function connect_to_Pi() can be deleted from the STM32 program.

void connect_to_Pi()
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
if(connect_flag==true)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <connect_to_Pi+0x5c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d022      	beq.n	800188c <connect_to_Pi+0x54>
{
	uint8_t tx_voltage_auto[1]={0x09};
 8001846:	2309      	movs	r3, #9
 8001848:	753b      	strb	r3, [r7, #20]
	uint8_t rx_voltage[2]={0x00,0x00};
 800184a:	2300      	movs	r3, #0
 800184c:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_auto, 1);
 800184e:	f107 0214 	add.w	r2, r7, #20
 8001852:	2301      	movs	r3, #1
 8001854:	2116      	movs	r1, #22
 8001856:	4810      	ldr	r0, [pc, #64]	; (8001898 <connect_to_Pi+0x60>)
 8001858:	f002 fef0 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 800185c:	2005      	movs	r0, #5
 800185e:	f002 fac1 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8001862:	f107 0210 	add.w	r2, r7, #16
 8001866:	2302      	movs	r3, #2
 8001868:	2116      	movs	r1, #22
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <connect_to_Pi+0x60>)
 800186c:	f002 ff56 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 8001870:	2005      	movs	r0, #5
 8001872:	f002 fab7 	bl	8003de4 <HAL_Delay>
	uint8_t send_conn[14]={'I','N','I','T','I','A','L','I','S','E','C','O','N','N'};
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <connect_to_Pi+0x64>)
 8001878:	463c      	mov	r4, r7
 800187a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800187c:	c407      	stmia	r4!, {r0, r1, r2}
 800187e:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart2, send_conn, 14);
 8001880:	463b      	mov	r3, r7
 8001882:	220e      	movs	r2, #14
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <connect_to_Pi+0x68>)
 8001888:	f006 fa32 	bl	8007cf0 <HAL_UART_Transmit_IT>

}


}
 800188c:	bf00      	nop
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd90      	pop	{r4, r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	200001c4 	.word	0x200001c4
 800189c:	08009e3c 	.word	0x08009e3c
 80018a0:	20000310 	.word	0x20000310

080018a4 <Read_Bat2_Maint_autotest_result_first_80_percent>:


 extern int _write(int file, char *ptr, int len);

void Read_Bat2_Maint_autotest_result_first_80_percent()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a4      	sub	sp, #144	; 0x90
 80018a8:	af00      	add	r7, sp, #0


	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 80018aa:	230e      	movs	r3, #14
 80018ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 80018b0:	2309      	movs	r3, #9
 80018b2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 80018b6:	2308      	movs	r3, #8
 80018b8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 80018bc:	2316      	movs	r3, #22
 80018be:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 80018c2:	230f      	movs	r3, #15
 80018c4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 80018c8:	2317      	movs	r3, #23
 80018ca:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_cyclecount_auto, 1);
 80018d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80018d8:	2301      	movs	r3, #1
 80018da:	2116      	movs	r1, #22
 80018dc:	48d0      	ldr	r0, [pc, #832]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 80018de:	f002 fead 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80018e2:	2005      	movs	r0, #5
 80018e4:	f002 fa7e 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_cyclecount, 2);
 80018e8:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018ec:	2302      	movs	r3, #2
 80018ee:	2116      	movs	r1, #22
 80018f0:	48cb      	ldr	r0, [pc, #812]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 80018f2:	f002 ff13 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80018f6:	2005      	movs	r0, #5
 80018f8:	f002 fa74 	bl	8003de4 <HAL_Delay>
			uint8_t send_cycount[14]={'2','M','R','F','8','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D'};
 80018fc:	2332      	movs	r3, #50	; 0x32
 80018fe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001902:	234d      	movs	r3, #77	; 0x4d
 8001904:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001908:	2352      	movs	r3, #82	; 0x52
 800190a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800190e:	2346      	movs	r3, #70	; 0x46
 8001910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001914:	2338      	movs	r3, #56	; 0x38
 8001916:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800191a:	2343      	movs	r3, #67	; 0x43
 800191c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001920:	2343      	movs	r3, #67	; 0x43
 8001922:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001926:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800192a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800192e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001932:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001936:	2343      	movs	r3, #67	; 0x43
 8001938:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800193c:	2343      	movs	r3, #67	; 0x43
 800193e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001942:	2345      	movs	r3, #69	; 0x45
 8001944:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001948:	234e      	movs	r3, #78	; 0x4e
 800194a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800194e:	2344      	movs	r3, #68	; 0x44
 8001950:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			HAL_UART_Transmit_IT(&huart2, send_cycount, 14);
 8001954:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001958:	220e      	movs	r2, #14
 800195a:	4619      	mov	r1, r3
 800195c:	48b1      	ldr	r0, [pc, #708]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 800195e:	f006 f9c7 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 8001962:	2300      	movs	r3, #0
 8001964:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_remaining_capacity_auto, 1);
 8001968:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800196c:	2301      	movs	r3, #1
 800196e:	2116      	movs	r1, #22
 8001970:	48ab      	ldr	r0, [pc, #684]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001972:	f002 fe63 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001976:	2005      	movs	r0, #5
 8001978:	f002 fa34 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_remcapacity, 2);
 800197c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001980:	2302      	movs	r3, #2
 8001982:	2116      	movs	r1, #22
 8001984:	48a6      	ldr	r0, [pc, #664]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001986:	f002 fec9 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 800198a:	2005      	movs	r0, #5
 800198c:	f002 fa2a 	bl	8003de4 <HAL_Delay>
			uint8_t send_remcap[14]={'2','M','R','F','8','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D'};
 8001990:	2332      	movs	r3, #50	; 0x32
 8001992:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001996:	234d      	movs	r3, #77	; 0x4d
 8001998:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800199c:	2352      	movs	r3, #82	; 0x52
 800199e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80019a2:	2346      	movs	r3, #70	; 0x46
 80019a4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80019a8:	2338      	movs	r3, #56	; 0x38
 80019aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80019ae:	2352      	movs	r3, #82	; 0x52
 80019b0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80019b4:	2343      	movs	r3, #67	; 0x43
 80019b6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80019ba:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80019be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80019c2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80019c6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80019ca:	2352      	movs	r3, #82	; 0x52
 80019cc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80019d0:	2343      	movs	r3, #67	; 0x43
 80019d2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80019d6:	2345      	movs	r3, #69	; 0x45
 80019d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80019dc:	234e      	movs	r3, #78	; 0x4e
 80019de:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80019e2:	2344      	movs	r3, #68	; 0x44
 80019e4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			HAL_UART_Transmit_IT(&huart2, send_remcap, 14);
 80019e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ec:	220e      	movs	r2, #14
 80019ee:	4619      	mov	r1, r3
 80019f0:	488c      	ldr	r0, [pc, #560]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 80019f2:	f006 f97d 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_asoc_auto, 1);
 80019fc:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a00:	2301      	movs	r3, #1
 8001a02:	2116      	movs	r1, #22
 8001a04:	4886      	ldr	r0, [pc, #536]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001a06:	f002 fe19 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f002 f9ea 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_asoc, 1);
 8001a10:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001a14:	2301      	movs	r3, #1
 8001a16:	2116      	movs	r1, #22
 8001a18:	4881      	ldr	r0, [pc, #516]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001a1a:	f002 fe7f 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001a1e:	2005      	movs	r0, #5
 8001a20:	f002 f9e0 	bl	8003de4 <HAL_Delay>
			uint8_t send_asoc[14]={'2','M','R','F','8','A','S',rx_asoc[0],'A','S','E','E','N','D'};
 8001a24:	2332      	movs	r3, #50	; 0x32
 8001a26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001a2a:	234d      	movs	r3, #77	; 0x4d
 8001a2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001a30:	2352      	movs	r3, #82	; 0x52
 8001a32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001a36:	2346      	movs	r3, #70	; 0x46
 8001a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a3c:	2338      	movs	r3, #56	; 0x38
 8001a3e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001a42:	2341      	movs	r3, #65	; 0x41
 8001a44:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001a48:	2353      	movs	r3, #83	; 0x53
 8001a4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001a4e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001a56:	2341      	movs	r3, #65	; 0x41
 8001a58:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001a5c:	2353      	movs	r3, #83	; 0x53
 8001a5e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001a62:	2345      	movs	r3, #69	; 0x45
 8001a64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001a68:	2345      	movs	r3, #69	; 0x45
 8001a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001a6e:	234e      	movs	r3, #78	; 0x4e
 8001a70:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001a74:	2344      	movs	r3, #68	; 0x44
 8001a76:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			HAL_UART_Transmit_IT(&huart2, send_asoc, 14);
 8001a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7e:	220e      	movs	r2, #14
 8001a80:	4619      	mov	r1, r3
 8001a82:	4868      	ldr	r0, [pc, #416]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 8001a84:	f006 f934 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8001a88:	2300      	movs	r3, #0
 8001a8a:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage_auto, 1);
 8001a8c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a90:	2301      	movs	r3, #1
 8001a92:	2116      	movs	r1, #22
 8001a94:	4862      	ldr	r0, [pc, #392]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001a96:	f002 fdd1 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f002 f9a2 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_voltage, 2);
 8001aa0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	2116      	movs	r1, #22
 8001aa8:	485d      	ldr	r0, [pc, #372]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001aaa:	f002 fe37 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001aae:	2005      	movs	r0, #5
 8001ab0:	f002 f998 	bl	8003de4 <HAL_Delay>
			uint8_t send_voltage[14]={'2','M','R','F','8','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D'};
 8001ab4:	2332      	movs	r3, #50	; 0x32
 8001ab6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001aba:	234d      	movs	r3, #77	; 0x4d
 8001abc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ac0:	2352      	movs	r3, #82	; 0x52
 8001ac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001ac6:	2346      	movs	r3, #70	; 0x46
 8001ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001acc:	2338      	movs	r3, #56	; 0x38
 8001ace:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001ad2:	2356      	movs	r3, #86	; 0x56
 8001ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001ad8:	2354      	movs	r3, #84	; 0x54
 8001ada:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001ade:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ae6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001aea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001aee:	2356      	movs	r3, #86	; 0x56
 8001af0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001af4:	2354      	movs	r3, #84	; 0x54
 8001af6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001afa:	2345      	movs	r3, #69	; 0x45
 8001afc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001b00:	234e      	movs	r3, #78	; 0x4e
 8001b02:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001b06:	2344      	movs	r3, #68	; 0x44
 8001b08:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			HAL_UART_Transmit_IT(&huart2, send_voltage, 14);
 8001b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b10:	220e      	movs	r2, #14
 8001b12:	4619      	mov	r1, r3
 8001b14:	4843      	ldr	r0, [pc, #268]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 8001b16:	f006 f8eb 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_temperature_auto, 1);
 8001b1e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b22:	2301      	movs	r3, #1
 8001b24:	2116      	movs	r1, #22
 8001b26:	483e      	ldr	r0, [pc, #248]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001b28:	f002 fd88 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001b2c:	2005      	movs	r0, #5
 8001b2e:	f002 f959 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_temperature, 2);
 8001b32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b36:	2302      	movs	r3, #2
 8001b38:	2116      	movs	r1, #22
 8001b3a:	4839      	ldr	r0, [pc, #228]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001b3c:	f002 fdee 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001b40:	2005      	movs	r0, #5
 8001b42:	f002 f94f 	bl	8003de4 <HAL_Delay>
			uint8_t send_temp[14]={'2','M','R','F','8','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D'};
 8001b46:	2332      	movs	r3, #50	; 0x32
 8001b48:	753b      	strb	r3, [r7, #20]
 8001b4a:	234d      	movs	r3, #77	; 0x4d
 8001b4c:	757b      	strb	r3, [r7, #21]
 8001b4e:	2352      	movs	r3, #82	; 0x52
 8001b50:	75bb      	strb	r3, [r7, #22]
 8001b52:	2346      	movs	r3, #70	; 0x46
 8001b54:	75fb      	strb	r3, [r7, #23]
 8001b56:	2338      	movs	r3, #56	; 0x38
 8001b58:	763b      	strb	r3, [r7, #24]
 8001b5a:	2354      	movs	r3, #84	; 0x54
 8001b5c:	767b      	strb	r3, [r7, #25]
 8001b5e:	2350      	movs	r3, #80	; 0x50
 8001b60:	76bb      	strb	r3, [r7, #26]
 8001b62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b66:	76fb      	strb	r3, [r7, #27]
 8001b68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b6c:	773b      	strb	r3, [r7, #28]
 8001b6e:	2354      	movs	r3, #84	; 0x54
 8001b70:	777b      	strb	r3, [r7, #29]
 8001b72:	2350      	movs	r3, #80	; 0x50
 8001b74:	77bb      	strb	r3, [r7, #30]
 8001b76:	2345      	movs	r3, #69	; 0x45
 8001b78:	77fb      	strb	r3, [r7, #31]
 8001b7a:	234e      	movs	r3, #78	; 0x4e
 8001b7c:	f887 3020 	strb.w	r3, [r7, #32]
 8001b80:	2344      	movs	r3, #68	; 0x44
 8001b82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			HAL_UART_Transmit_IT(&huart2, send_temp, 14);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	220e      	movs	r2, #14
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 8001b90:	f006 f8ae 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 8001b94:	2300      	movs	r3, #0
 8001b96:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_battery_status_auto, 1);
 8001b98:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	2116      	movs	r1, #22
 8001ba0:	481f      	ldr	r0, [pc, #124]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001ba2:	f002 fd4b 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001ba6:	2005      	movs	r0, #5
 8001ba8:	f002 f91c 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 8001bac:	f107 0210 	add.w	r2, r7, #16
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	2116      	movs	r1, #22
 8001bb4:	481a      	ldr	r0, [pc, #104]	; (8001c20 <Read_Bat2_Maint_autotest_result_first_80_percent+0x37c>)
 8001bb6:	f002 fdb1 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001bba:	2005      	movs	r0, #5
 8001bbc:	f002 f912 	bl	8003de4 <HAL_Delay>
			uint8_t send_battery_status[14]={'2','M','R','F','8','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D'};
 8001bc0:	2332      	movs	r3, #50	; 0x32
 8001bc2:	703b      	strb	r3, [r7, #0]
 8001bc4:	234d      	movs	r3, #77	; 0x4d
 8001bc6:	707b      	strb	r3, [r7, #1]
 8001bc8:	2352      	movs	r3, #82	; 0x52
 8001bca:	70bb      	strb	r3, [r7, #2]
 8001bcc:	2346      	movs	r3, #70	; 0x46
 8001bce:	70fb      	strb	r3, [r7, #3]
 8001bd0:	2338      	movs	r3, #56	; 0x38
 8001bd2:	713b      	strb	r3, [r7, #4]
 8001bd4:	2342      	movs	r3, #66	; 0x42
 8001bd6:	717b      	strb	r3, [r7, #5]
 8001bd8:	2353      	movs	r3, #83	; 0x53
 8001bda:	71bb      	strb	r3, [r7, #6]
 8001bdc:	7c7b      	ldrb	r3, [r7, #17]
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	7c3b      	ldrb	r3, [r7, #16]
 8001be2:	723b      	strb	r3, [r7, #8]
 8001be4:	2342      	movs	r3, #66	; 0x42
 8001be6:	727b      	strb	r3, [r7, #9]
 8001be8:	2353      	movs	r3, #83	; 0x53
 8001bea:	72bb      	strb	r3, [r7, #10]
 8001bec:	2345      	movs	r3, #69	; 0x45
 8001bee:	72fb      	strb	r3, [r7, #11]
 8001bf0:	234e      	movs	r3, #78	; 0x4e
 8001bf2:	733b      	strb	r3, [r7, #12]
 8001bf4:	2344      	movs	r3, #68	; 0x44
 8001bf6:	737b      	strb	r3, [r7, #13]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	220e      	movs	r2, #14
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 8001c00:	f006 f876 	bl	8007cf0 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f002 f8ed 	bl	8003de4 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);  // Transmitted 2 times because data was not
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	220e      	movs	r2, #14
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <Read_Bat2_Maint_autotest_result_first_80_percent+0x380>)
 8001c12:	f006 f86d 	bl	8007cf0 <HAL_UART_Transmit_IT>





}
 8001c16:	bf00      	nop
 8001c18:	3790      	adds	r7, #144	; 0x90
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000210 	.word	0x20000210
 8001c24:	20000310 	.word	0x20000310

08001c28 <Read_Bat2_Maint_autotest_result_middle_10_percent>:




void Read_Bat2_Maint_autotest_result_middle_10_percent()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0a4      	sub	sp, #144	; 0x90
 8001c2c:	af00      	add	r7, sp, #0

	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 8001c2e:	230e      	movs	r3, #14
 8001c30:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 8001c34:	2309      	movs	r3, #9
 8001c36:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 8001c40:	2316      	movs	r3, #22
 8001c42:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 8001c46:	230f      	movs	r3, #15
 8001c48:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 8001c4c:	2317      	movs	r3, #23
 8001c4e:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_cyclecount_auto, 1);
 8001c58:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	2116      	movs	r1, #22
 8001c60:	48d0      	ldr	r0, [pc, #832]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001c62:	f002 fceb 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001c66:	2005      	movs	r0, #5
 8001c68:	f002 f8bc 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_cyclecount, 2);
 8001c6c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001c70:	2302      	movs	r3, #2
 8001c72:	2116      	movs	r1, #22
 8001c74:	48cb      	ldr	r0, [pc, #812]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001c76:	f002 fd51 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f002 f8b2 	bl	8003de4 <HAL_Delay>
			uint8_t send_cycount[14]={'2','M','R','M','1','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D'};
 8001c80:	2332      	movs	r3, #50	; 0x32
 8001c82:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001c86:	234d      	movs	r3, #77	; 0x4d
 8001c88:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001c8c:	2352      	movs	r3, #82	; 0x52
 8001c8e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001c92:	234d      	movs	r3, #77	; 0x4d
 8001c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001c98:	2331      	movs	r3, #49	; 0x31
 8001c9a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001c9e:	2343      	movs	r3, #67	; 0x43
 8001ca0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001ca4:	2343      	movs	r3, #67	; 0x43
 8001ca6:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001caa:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001cae:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001cb2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001cb6:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001cba:	2343      	movs	r3, #67	; 0x43
 8001cbc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001cc0:	2343      	movs	r3, #67	; 0x43
 8001cc2:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001cc6:	2345      	movs	r3, #69	; 0x45
 8001cc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001ccc:	234e      	movs	r3, #78	; 0x4e
 8001cce:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8001cd2:	2344      	movs	r3, #68	; 0x44
 8001cd4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			HAL_UART_Transmit_IT(&huart2, send_cycount, 14);
 8001cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cdc:	220e      	movs	r2, #14
 8001cde:	4619      	mov	r1, r3
 8001ce0:	48b1      	ldr	r0, [pc, #708]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001ce2:	f006 f805 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_remaining_capacity_auto, 1);
 8001cec:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	2116      	movs	r1, #22
 8001cf4:	48ab      	ldr	r0, [pc, #684]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001cf6:	f002 fca1 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f002 f872 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_remcapacity, 2);
 8001d00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d04:	2302      	movs	r3, #2
 8001d06:	2116      	movs	r1, #22
 8001d08:	48a6      	ldr	r0, [pc, #664]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001d0a:	f002 fd07 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001d0e:	2005      	movs	r0, #5
 8001d10:	f002 f868 	bl	8003de4 <HAL_Delay>
			uint8_t send_remcap[14]={'2','M','R','M','1','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D'};
 8001d14:	2332      	movs	r3, #50	; 0x32
 8001d16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001d1a:	234d      	movs	r3, #77	; 0x4d
 8001d1c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001d20:	2352      	movs	r3, #82	; 0x52
 8001d22:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001d26:	234d      	movs	r3, #77	; 0x4d
 8001d28:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001d2c:	2331      	movs	r3, #49	; 0x31
 8001d2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001d32:	2352      	movs	r3, #82	; 0x52
 8001d34:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001d38:	2343      	movs	r3, #67	; 0x43
 8001d3a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001d3e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001d46:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001d4a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001d4e:	2352      	movs	r3, #82	; 0x52
 8001d50:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001d54:	2343      	movs	r3, #67	; 0x43
 8001d56:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001d5a:	2345      	movs	r3, #69	; 0x45
 8001d5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001d60:	234e      	movs	r3, #78	; 0x4e
 8001d62:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001d66:	2344      	movs	r3, #68	; 0x44
 8001d68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			HAL_UART_Transmit_IT(&huart2, send_remcap, 14);
 8001d6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d70:	220e      	movs	r2, #14
 8001d72:	4619      	mov	r1, r3
 8001d74:	488c      	ldr	r0, [pc, #560]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001d76:	f005 ffbb 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_asoc_auto, 1);
 8001d80:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d84:	2301      	movs	r3, #1
 8001d86:	2116      	movs	r1, #22
 8001d88:	4886      	ldr	r0, [pc, #536]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001d8a:	f002 fc57 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001d8e:	2005      	movs	r0, #5
 8001d90:	f002 f828 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_asoc, 1);
 8001d94:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001d98:	2301      	movs	r3, #1
 8001d9a:	2116      	movs	r1, #22
 8001d9c:	4881      	ldr	r0, [pc, #516]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001d9e:	f002 fcbd 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001da2:	2005      	movs	r0, #5
 8001da4:	f002 f81e 	bl	8003de4 <HAL_Delay>
			uint8_t send_asoc[14]={'2','M','R','M','1','A','S',rx_asoc[0],'A','S','E','E','N','D'};
 8001da8:	2332      	movs	r3, #50	; 0x32
 8001daa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001dae:	234d      	movs	r3, #77	; 0x4d
 8001db0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001db4:	2352      	movs	r3, #82	; 0x52
 8001db6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001dba:	234d      	movs	r3, #77	; 0x4d
 8001dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001dc0:	2331      	movs	r3, #49	; 0x31
 8001dc2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001dc6:	2341      	movs	r3, #65	; 0x41
 8001dc8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001dcc:	2353      	movs	r3, #83	; 0x53
 8001dce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001dd2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001dda:	2341      	movs	r3, #65	; 0x41
 8001ddc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001de0:	2353      	movs	r3, #83	; 0x53
 8001de2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001de6:	2345      	movs	r3, #69	; 0x45
 8001de8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001dec:	2345      	movs	r3, #69	; 0x45
 8001dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001df2:	234e      	movs	r3, #78	; 0x4e
 8001df4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001df8:	2344      	movs	r3, #68	; 0x44
 8001dfa:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			HAL_UART_Transmit_IT(&huart2, send_asoc, 14);
 8001dfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e02:	220e      	movs	r2, #14
 8001e04:	4619      	mov	r1, r3
 8001e06:	4868      	ldr	r0, [pc, #416]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001e08:	f005 ff72 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage_auto, 1);
 8001e10:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e14:	2301      	movs	r3, #1
 8001e16:	2116      	movs	r1, #22
 8001e18:	4862      	ldr	r0, [pc, #392]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001e1a:	f002 fc0f 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001e1e:	2005      	movs	r0, #5
 8001e20:	f001 ffe0 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_voltage, 2);
 8001e24:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e28:	2302      	movs	r3, #2
 8001e2a:	2116      	movs	r1, #22
 8001e2c:	485d      	ldr	r0, [pc, #372]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001e2e:	f002 fc75 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001e32:	2005      	movs	r0, #5
 8001e34:	f001 ffd6 	bl	8003de4 <HAL_Delay>
			uint8_t send_voltage[14]={'2','M','R','M','1','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D'};
 8001e38:	2332      	movs	r3, #50	; 0x32
 8001e3a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001e3e:	234d      	movs	r3, #77	; 0x4d
 8001e40:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001e44:	2352      	movs	r3, #82	; 0x52
 8001e46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001e4a:	234d      	movs	r3, #77	; 0x4d
 8001e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001e50:	2331      	movs	r3, #49	; 0x31
 8001e52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001e56:	2356      	movs	r3, #86	; 0x56
 8001e58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001e5c:	2354      	movs	r3, #84	; 0x54
 8001e5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001e62:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001e66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e6a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001e6e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001e72:	2356      	movs	r3, #86	; 0x56
 8001e74:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001e78:	2354      	movs	r3, #84	; 0x54
 8001e7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001e7e:	2345      	movs	r3, #69	; 0x45
 8001e80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001e84:	234e      	movs	r3, #78	; 0x4e
 8001e86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001e8a:	2344      	movs	r3, #68	; 0x44
 8001e8c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			HAL_UART_Transmit_IT(&huart2, send_voltage, 14);
 8001e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e94:	220e      	movs	r2, #14
 8001e96:	4619      	mov	r1, r3
 8001e98:	4843      	ldr	r0, [pc, #268]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001e9a:	f005 ff29 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_temperature_auto, 1);
 8001ea2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	2116      	movs	r1, #22
 8001eaa:	483e      	ldr	r0, [pc, #248]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001eac:	f002 fbc6 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	f001 ff97 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_temperature, 2);
 8001eb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001eba:	2302      	movs	r3, #2
 8001ebc:	2116      	movs	r1, #22
 8001ebe:	4839      	ldr	r0, [pc, #228]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001ec0:	f002 fc2c 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001ec4:	2005      	movs	r0, #5
 8001ec6:	f001 ff8d 	bl	8003de4 <HAL_Delay>
			uint8_t send_temp[14]={'2','M','R','M','1','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D'};
 8001eca:	2332      	movs	r3, #50	; 0x32
 8001ecc:	753b      	strb	r3, [r7, #20]
 8001ece:	234d      	movs	r3, #77	; 0x4d
 8001ed0:	757b      	strb	r3, [r7, #21]
 8001ed2:	2352      	movs	r3, #82	; 0x52
 8001ed4:	75bb      	strb	r3, [r7, #22]
 8001ed6:	234d      	movs	r3, #77	; 0x4d
 8001ed8:	75fb      	strb	r3, [r7, #23]
 8001eda:	2331      	movs	r3, #49	; 0x31
 8001edc:	763b      	strb	r3, [r7, #24]
 8001ede:	2354      	movs	r3, #84	; 0x54
 8001ee0:	767b      	strb	r3, [r7, #25]
 8001ee2:	2350      	movs	r3, #80	; 0x50
 8001ee4:	76bb      	strb	r3, [r7, #26]
 8001ee6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eea:	76fb      	strb	r3, [r7, #27]
 8001eec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ef0:	773b      	strb	r3, [r7, #28]
 8001ef2:	2354      	movs	r3, #84	; 0x54
 8001ef4:	777b      	strb	r3, [r7, #29]
 8001ef6:	2350      	movs	r3, #80	; 0x50
 8001ef8:	77bb      	strb	r3, [r7, #30]
 8001efa:	2345      	movs	r3, #69	; 0x45
 8001efc:	77fb      	strb	r3, [r7, #31]
 8001efe:	234e      	movs	r3, #78	; 0x4e
 8001f00:	f887 3020 	strb.w	r3, [r7, #32]
 8001f04:	2344      	movs	r3, #68	; 0x44
 8001f06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			HAL_UART_Transmit_IT(&huart2, send_temp, 14);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	220e      	movs	r2, #14
 8001f10:	4619      	mov	r1, r3
 8001f12:	4825      	ldr	r0, [pc, #148]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001f14:	f005 feec 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 8001f18:	2300      	movs	r3, #0
 8001f1a:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_battery_status_auto, 1);
 8001f1c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001f20:	2301      	movs	r3, #1
 8001f22:	2116      	movs	r1, #22
 8001f24:	481f      	ldr	r0, [pc, #124]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001f26:	f002 fb89 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f001 ff5a 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 8001f30:	f107 0210 	add.w	r2, r7, #16
 8001f34:	2302      	movs	r3, #2
 8001f36:	2116      	movs	r1, #22
 8001f38:	481a      	ldr	r0, [pc, #104]	; (8001fa4 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x37c>)
 8001f3a:	f002 fbef 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001f3e:	2005      	movs	r0, #5
 8001f40:	f001 ff50 	bl	8003de4 <HAL_Delay>
			uint8_t send_battery_status[14]={'2','M','R','M','1','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D'};
 8001f44:	2332      	movs	r3, #50	; 0x32
 8001f46:	703b      	strb	r3, [r7, #0]
 8001f48:	234d      	movs	r3, #77	; 0x4d
 8001f4a:	707b      	strb	r3, [r7, #1]
 8001f4c:	2352      	movs	r3, #82	; 0x52
 8001f4e:	70bb      	strb	r3, [r7, #2]
 8001f50:	234d      	movs	r3, #77	; 0x4d
 8001f52:	70fb      	strb	r3, [r7, #3]
 8001f54:	2331      	movs	r3, #49	; 0x31
 8001f56:	713b      	strb	r3, [r7, #4]
 8001f58:	2342      	movs	r3, #66	; 0x42
 8001f5a:	717b      	strb	r3, [r7, #5]
 8001f5c:	2353      	movs	r3, #83	; 0x53
 8001f5e:	71bb      	strb	r3, [r7, #6]
 8001f60:	7c7b      	ldrb	r3, [r7, #17]
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	7c3b      	ldrb	r3, [r7, #16]
 8001f66:	723b      	strb	r3, [r7, #8]
 8001f68:	2342      	movs	r3, #66	; 0x42
 8001f6a:	727b      	strb	r3, [r7, #9]
 8001f6c:	2353      	movs	r3, #83	; 0x53
 8001f6e:	72bb      	strb	r3, [r7, #10]
 8001f70:	2345      	movs	r3, #69	; 0x45
 8001f72:	72fb      	strb	r3, [r7, #11]
 8001f74:	234e      	movs	r3, #78	; 0x4e
 8001f76:	733b      	strb	r3, [r7, #12]
 8001f78:	2344      	movs	r3, #68	; 0x44
 8001f7a:	737b      	strb	r3, [r7, #13]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	220e      	movs	r2, #14
 8001f80:	4619      	mov	r1, r3
 8001f82:	4809      	ldr	r0, [pc, #36]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001f84:	f005 feb4 	bl	8007cf0 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f001 ff2b 	bl	8003de4 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);  // Transmitted 2 times because data was not
 8001f8e:	463b      	mov	r3, r7
 8001f90:	220e      	movs	r2, #14
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <Read_Bat2_Maint_autotest_result_middle_10_percent+0x380>)
 8001f96:	f005 feab 	bl	8007cf0 <HAL_UART_Transmit_IT>
																	 // received correctly first time


}
 8001f9a:	bf00      	nop
 8001f9c:	3790      	adds	r7, #144	; 0x90
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000210 	.word	0x20000210
 8001fa8:	20000310 	.word	0x20000310

08001fac <Read_Bat2_Maint_autotest_result_last_80_percent>:
//
//
//
//
void Read_Bat2_Maint_autotest_result_last_80_percent()
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0a4      	sub	sp, #144	; 0x90
 8001fb0:	af00      	add	r7, sp, #0


	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 8001fb2:	230e      	movs	r3, #14
 8001fb4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 8001fb8:	2309      	movs	r3, #9
 8001fba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 8001fc4:	2316      	movs	r3, #22
 8001fc6:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 8001fca:	230f      	movs	r3, #15
 8001fcc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 8001fd0:	2317      	movs	r3, #23
 8001fd2:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_cyclecount_auto, 1);
 8001fdc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	2116      	movs	r1, #22
 8001fe4:	48d0      	ldr	r0, [pc, #832]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 8001fe6:	f002 fb29 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001fea:	2005      	movs	r0, #5
 8001fec:	f001 fefa 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_cyclecount, 2);
 8001ff0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	2116      	movs	r1, #22
 8001ff8:	48cb      	ldr	r0, [pc, #812]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 8001ffa:	f002 fb8f 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001ffe:	2005      	movs	r0, #5
 8002000:	f001 fef0 	bl	8003de4 <HAL_Delay>
			uint8_t send_cycount[14]={'2','M','R','L','8','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D'};
 8002004:	2332      	movs	r3, #50	; 0x32
 8002006:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800200a:	234d      	movs	r3, #77	; 0x4d
 800200c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8002010:	2352      	movs	r3, #82	; 0x52
 8002012:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8002016:	234c      	movs	r3, #76	; 0x4c
 8002018:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800201c:	2338      	movs	r3, #56	; 0x38
 800201e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8002022:	2343      	movs	r3, #67	; 0x43
 8002024:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8002028:	2343      	movs	r3, #67	; 0x43
 800202a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800202e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002032:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8002036:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800203a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800203e:	2343      	movs	r3, #67	; 0x43
 8002040:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8002044:	2343      	movs	r3, #67	; 0x43
 8002046:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800204a:	2345      	movs	r3, #69	; 0x45
 800204c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002050:	234e      	movs	r3, #78	; 0x4e
 8002052:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8002056:	2344      	movs	r3, #68	; 0x44
 8002058:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			HAL_UART_Transmit_IT(&huart2, send_cycount, 14);
 800205c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002060:	220e      	movs	r2, #14
 8002062:	4619      	mov	r1, r3
 8002064:	48b1      	ldr	r0, [pc, #708]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 8002066:	f005 fe43 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 800206a:	2300      	movs	r3, #0
 800206c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_remaining_capacity_auto, 1);
 8002070:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002074:	2301      	movs	r3, #1
 8002076:	2116      	movs	r1, #22
 8002078:	48ab      	ldr	r0, [pc, #684]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 800207a:	f002 fadf 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800207e:	2005      	movs	r0, #5
 8002080:	f001 feb0 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_remcapacity, 2);
 8002084:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002088:	2302      	movs	r3, #2
 800208a:	2116      	movs	r1, #22
 800208c:	48a6      	ldr	r0, [pc, #664]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 800208e:	f002 fb45 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8002092:	2005      	movs	r0, #5
 8002094:	f001 fea6 	bl	8003de4 <HAL_Delay>
			uint8_t send_remcap[14]={'2','M','R','L','8','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D'};
 8002098:	2332      	movs	r3, #50	; 0x32
 800209a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800209e:	234d      	movs	r3, #77	; 0x4d
 80020a0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80020a4:	2352      	movs	r3, #82	; 0x52
 80020a6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80020aa:	234c      	movs	r3, #76	; 0x4c
 80020ac:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80020b0:	2338      	movs	r3, #56	; 0x38
 80020b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80020b6:	2352      	movs	r3, #82	; 0x52
 80020b8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80020bc:	2343      	movs	r3, #67	; 0x43
 80020be:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80020c2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80020c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80020ca:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80020ce:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80020d2:	2352      	movs	r3, #82	; 0x52
 80020d4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80020d8:	2343      	movs	r3, #67	; 0x43
 80020da:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80020de:	2345      	movs	r3, #69	; 0x45
 80020e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80020e4:	234e      	movs	r3, #78	; 0x4e
 80020e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80020ea:	2344      	movs	r3, #68	; 0x44
 80020ec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			HAL_UART_Transmit_IT(&huart2, send_remcap, 14);
 80020f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020f4:	220e      	movs	r2, #14
 80020f6:	4619      	mov	r1, r3
 80020f8:	488c      	ldr	r0, [pc, #560]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 80020fa:	f005 fdf9 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_asoc_auto, 1);
 8002104:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002108:	2301      	movs	r3, #1
 800210a:	2116      	movs	r1, #22
 800210c:	4886      	ldr	r0, [pc, #536]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 800210e:	f002 fa95 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8002112:	2005      	movs	r0, #5
 8002114:	f001 fe66 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_asoc, 1);
 8002118:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800211c:	2301      	movs	r3, #1
 800211e:	2116      	movs	r1, #22
 8002120:	4881      	ldr	r0, [pc, #516]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 8002122:	f002 fafb 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8002126:	2005      	movs	r0, #5
 8002128:	f001 fe5c 	bl	8003de4 <HAL_Delay>
			uint8_t send_asoc[14]={'2','M','R','L','8','A','S',rx_asoc[0],'A','S','E','E','N','D'};
 800212c:	2332      	movs	r3, #50	; 0x32
 800212e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002132:	234d      	movs	r3, #77	; 0x4d
 8002134:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002138:	2352      	movs	r3, #82	; 0x52
 800213a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800213e:	234c      	movs	r3, #76	; 0x4c
 8002140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002144:	2338      	movs	r3, #56	; 0x38
 8002146:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 800214a:	2341      	movs	r3, #65	; 0x41
 800214c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002150:	2353      	movs	r3, #83	; 0x53
 8002152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002156:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800215e:	2341      	movs	r3, #65	; 0x41
 8002160:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002164:	2353      	movs	r3, #83	; 0x53
 8002166:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800216a:	2345      	movs	r3, #69	; 0x45
 800216c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002170:	2345      	movs	r3, #69	; 0x45
 8002172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002176:	234e      	movs	r3, #78	; 0x4e
 8002178:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800217c:	2344      	movs	r3, #68	; 0x44
 800217e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
			HAL_UART_Transmit_IT(&huart2, send_asoc, 14);
 8002182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002186:	220e      	movs	r2, #14
 8002188:	4619      	mov	r1, r3
 800218a:	4868      	ldr	r0, [pc, #416]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 800218c:	f005 fdb0 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8002190:	2300      	movs	r3, #0
 8002192:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage_auto, 1);
 8002194:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002198:	2301      	movs	r3, #1
 800219a:	2116      	movs	r1, #22
 800219c:	4862      	ldr	r0, [pc, #392]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 800219e:	f002 fa4d 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80021a2:	2005      	movs	r0, #5
 80021a4:	f001 fe1e 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_voltage, 2);
 80021a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021ac:	2302      	movs	r3, #2
 80021ae:	2116      	movs	r1, #22
 80021b0:	485d      	ldr	r0, [pc, #372]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 80021b2:	f002 fab3 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80021b6:	2005      	movs	r0, #5
 80021b8:	f001 fe14 	bl	8003de4 <HAL_Delay>
			uint8_t send_voltage[14]={'2','M','R','L','8','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D'};
 80021bc:	2332      	movs	r3, #50	; 0x32
 80021be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80021c2:	234d      	movs	r3, #77	; 0x4d
 80021c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80021c8:	2352      	movs	r3, #82	; 0x52
 80021ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80021ce:	234c      	movs	r3, #76	; 0x4c
 80021d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021d4:	2338      	movs	r3, #56	; 0x38
 80021d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80021da:	2356      	movs	r3, #86	; 0x56
 80021dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80021e0:	2354      	movs	r3, #84	; 0x54
 80021e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021e6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80021ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80021f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80021f6:	2356      	movs	r3, #86	; 0x56
 80021f8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80021fc:	2354      	movs	r3, #84	; 0x54
 80021fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002202:	2345      	movs	r3, #69	; 0x45
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002208:	234e      	movs	r3, #78	; 0x4e
 800220a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800220e:	2344      	movs	r3, #68	; 0x44
 8002210:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			HAL_UART_Transmit_IT(&huart2, send_voltage, 14);
 8002214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002218:	220e      	movs	r2, #14
 800221a:	4619      	mov	r1, r3
 800221c:	4843      	ldr	r0, [pc, #268]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 800221e:	f005 fd67 	bl	8007cf0 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8002222:	2300      	movs	r3, #0
 8002224:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_temperature_auto, 1);
 8002226:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800222a:	2301      	movs	r3, #1
 800222c:	2116      	movs	r1, #22
 800222e:	483e      	ldr	r0, [pc, #248]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 8002230:	f002 fa04 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8002234:	2005      	movs	r0, #5
 8002236:	f001 fdd5 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_temperature, 2);
 800223a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800223e:	2302      	movs	r3, #2
 8002240:	2116      	movs	r1, #22
 8002242:	4839      	ldr	r0, [pc, #228]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 8002244:	f002 fa6a 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8002248:	2005      	movs	r0, #5
 800224a:	f001 fdcb 	bl	8003de4 <HAL_Delay>
			uint8_t send_temp[14]={'2','M','R','L','8','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D'};
 800224e:	2332      	movs	r3, #50	; 0x32
 8002250:	753b      	strb	r3, [r7, #20]
 8002252:	234d      	movs	r3, #77	; 0x4d
 8002254:	757b      	strb	r3, [r7, #21]
 8002256:	2352      	movs	r3, #82	; 0x52
 8002258:	75bb      	strb	r3, [r7, #22]
 800225a:	234c      	movs	r3, #76	; 0x4c
 800225c:	75fb      	strb	r3, [r7, #23]
 800225e:	2338      	movs	r3, #56	; 0x38
 8002260:	763b      	strb	r3, [r7, #24]
 8002262:	2354      	movs	r3, #84	; 0x54
 8002264:	767b      	strb	r3, [r7, #25]
 8002266:	2350      	movs	r3, #80	; 0x50
 8002268:	76bb      	strb	r3, [r7, #26]
 800226a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800226e:	76fb      	strb	r3, [r7, #27]
 8002270:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002274:	773b      	strb	r3, [r7, #28]
 8002276:	2354      	movs	r3, #84	; 0x54
 8002278:	777b      	strb	r3, [r7, #29]
 800227a:	2350      	movs	r3, #80	; 0x50
 800227c:	77bb      	strb	r3, [r7, #30]
 800227e:	2345      	movs	r3, #69	; 0x45
 8002280:	77fb      	strb	r3, [r7, #31]
 8002282:	234e      	movs	r3, #78	; 0x4e
 8002284:	f887 3020 	strb.w	r3, [r7, #32]
 8002288:	2344      	movs	r3, #68	; 0x44
 800228a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			HAL_UART_Transmit_IT(&huart2, send_temp, 14);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	220e      	movs	r2, #14
 8002294:	4619      	mov	r1, r3
 8002296:	4825      	ldr	r0, [pc, #148]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 8002298:	f005 fd2a 	bl	8007cf0 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 800229c:	2300      	movs	r3, #0
 800229e:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_battery_status_auto, 1);
 80022a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80022a4:	2301      	movs	r3, #1
 80022a6:	2116      	movs	r1, #22
 80022a8:	481f      	ldr	r0, [pc, #124]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 80022aa:	f002 f9c7 	bl	800463c <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80022ae:	2005      	movs	r0, #5
 80022b0:	f001 fd98 	bl	8003de4 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 80022b4:	f107 0210 	add.w	r2, r7, #16
 80022b8:	2302      	movs	r3, #2
 80022ba:	2116      	movs	r1, #22
 80022bc:	481a      	ldr	r0, [pc, #104]	; (8002328 <Read_Bat2_Maint_autotest_result_last_80_percent+0x37c>)
 80022be:	f002 fa2d 	bl	800471c <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80022c2:	2005      	movs	r0, #5
 80022c4:	f001 fd8e 	bl	8003de4 <HAL_Delay>
			uint8_t send_battery_status[14]={'2','M','R','L','8','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D'};
 80022c8:	2332      	movs	r3, #50	; 0x32
 80022ca:	703b      	strb	r3, [r7, #0]
 80022cc:	234d      	movs	r3, #77	; 0x4d
 80022ce:	707b      	strb	r3, [r7, #1]
 80022d0:	2352      	movs	r3, #82	; 0x52
 80022d2:	70bb      	strb	r3, [r7, #2]
 80022d4:	234c      	movs	r3, #76	; 0x4c
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	2338      	movs	r3, #56	; 0x38
 80022da:	713b      	strb	r3, [r7, #4]
 80022dc:	2342      	movs	r3, #66	; 0x42
 80022de:	717b      	strb	r3, [r7, #5]
 80022e0:	2353      	movs	r3, #83	; 0x53
 80022e2:	71bb      	strb	r3, [r7, #6]
 80022e4:	7c7b      	ldrb	r3, [r7, #17]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	7c3b      	ldrb	r3, [r7, #16]
 80022ea:	723b      	strb	r3, [r7, #8]
 80022ec:	2342      	movs	r3, #66	; 0x42
 80022ee:	727b      	strb	r3, [r7, #9]
 80022f0:	2353      	movs	r3, #83	; 0x53
 80022f2:	72bb      	strb	r3, [r7, #10]
 80022f4:	2345      	movs	r3, #69	; 0x45
 80022f6:	72fb      	strb	r3, [r7, #11]
 80022f8:	234e      	movs	r3, #78	; 0x4e
 80022fa:	733b      	strb	r3, [r7, #12]
 80022fc:	2344      	movs	r3, #68	; 0x44
 80022fe:	737b      	strb	r3, [r7, #13]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);
 8002300:	463b      	mov	r3, r7
 8002302:	220e      	movs	r2, #14
 8002304:	4619      	mov	r1, r3
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 8002308:	f005 fcf2 	bl	8007cf0 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 800230c:	2001      	movs	r0, #1
 800230e:	f001 fd69 	bl	8003de4 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 14);  // Transmitted 2 times because data was not
 8002312:	463b      	mov	r3, r7
 8002314:	220e      	movs	r2, #14
 8002316:	4619      	mov	r1, r3
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <Read_Bat2_Maint_autotest_result_last_80_percent+0x380>)
 800231a:	f005 fce9 	bl	8007cf0 <HAL_UART_Transmit_IT>





}
 800231e:	bf00      	nop
 8002320:	3790      	adds	r7, #144	; 0x90
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000210 	.word	0x20000210
 800232c:	20000310 	.word	0x20000310

08002330 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi>:

//extern int _write(int file, char *ptr, int len);


void Read_and_Compare_Specific_para_Bat2_STM_to_Pi()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b094      	sub	sp, #80	; 0x50
 8002334:	af00      	add	r7, sp, #0


	uint8_t tx_bat2_specf_battery_status[1] = {0x16};		// 0x16
 8002336:	2316      	movs	r3, #22
 8002338:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	//uint8_t tx_bat1_specf_run_time_to_empty[1]={0x11};	// 0x11

	printf("Maintenance Use Case Bat 2 Specific parameters\n");
 800233c:	488d      	ldr	r0, [pc, #564]	; (8002574 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x244>)
 800233e:	f006 fe1b 	bl	8008f78 <puts>
	// Battery Status
	uint8_t rx_batstatus[2]={0x00,0x00};
 8002342:	2300      	movs	r3, #0
 8002344:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_bat2_specf_battery_status, 1);
 8002348:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800234c:	2301      	movs	r3, #1
 800234e:	2116      	movs	r1, #22
 8002350:	4889      	ldr	r0, [pc, #548]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 8002352:	f002 f973 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 8002356:	2005      	movs	r0, #5
 8002358:	f001 fd44 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_batstatus, 2);
 800235c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002360:	2302      	movs	r3, #2
 8002362:	2116      	movs	r1, #22
 8002364:	4884      	ldr	r0, [pc, #528]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 8002366:	f002 f9d9 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f001 fd3a 	bl	8003de4 <HAL_Delay>
	uint16_t bs = rx_batstatus[1];
 8002370:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002374:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	bs = bs << 8;
 8002378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	bs = bs + rx_batstatus[0];
 8002382:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002386:	b29a      	uxth	r2, r3
 8002388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800238c:	4413      	add	r3, r2
 800238e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	printf("Battery Status = %d\n",bs);
 8002392:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002396:	4619      	mov	r1, r3
 8002398:	4878      	ldr	r0, [pc, #480]	; (800257c <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x24c>)
 800239a:	f006 fd67 	bl	8008e6c <iprintf>

	uint8_t send_specific_batstatus[14]={'2','M','S','I','B','S','S',rx_batstatus[1],rx_batstatus[0],'B','S','S','I','E'};
 800239e:	2332      	movs	r3, #50	; 0x32
 80023a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80023a4:	234d      	movs	r3, #77	; 0x4d
 80023a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80023aa:	2353      	movs	r3, #83	; 0x53
 80023ac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80023b0:	2349      	movs	r3, #73	; 0x49
 80023b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023b6:	2342      	movs	r3, #66	; 0x42
 80023b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80023bc:	2353      	movs	r3, #83	; 0x53
 80023be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80023c2:	2353      	movs	r3, #83	; 0x53
 80023c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80023c8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80023cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80023d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80023d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80023d8:	2342      	movs	r3, #66	; 0x42
 80023da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80023de:	2353      	movs	r3, #83	; 0x53
 80023e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80023e4:	2353      	movs	r3, #83	; 0x53
 80023e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023ea:	2349      	movs	r3, #73	; 0x49
 80023ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80023f0:	2345      	movs	r3, #69	; 0x45
 80023f2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	HAL_UART_Transmit_IT(&huart2, send_specific_batstatus, 14);
 80023f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fa:	220e      	movs	r2, #14
 80023fc:	4619      	mov	r1, r3
 80023fe:	4860      	ldr	r0, [pc, #384]	; (8002580 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x250>)
 8002400:	f005 fc76 	bl	8007cf0 <HAL_UART_Transmit_IT>



	// Battery Full Charge Capacity
	uint8_t tx_bat2_specf_full_charge_capacity[1]={0x10};	// 0x10
 8002404:	2310      	movs	r3, #16
 8002406:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t rx_full_charge_capacity[2]={0x00,0x00};
 800240a:	2300      	movs	r3, #0
 800240c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_bat2_specf_full_charge_capacity, 1);
 800240e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002412:	2301      	movs	r3, #1
 8002414:	2116      	movs	r1, #22
 8002416:	4858      	ldr	r0, [pc, #352]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 8002418:	f002 f910 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 800241c:	2005      	movs	r0, #5
 800241e:	f001 fce1 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_full_charge_capacity, 2);
 8002422:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002426:	2302      	movs	r3, #2
 8002428:	2116      	movs	r1, #22
 800242a:	4853      	ldr	r0, [pc, #332]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 800242c:	f002 f976 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f001 fcd7 	bl	8003de4 <HAL_Delay>
	uint16_t fcc = rx_full_charge_capacity[1];
 8002436:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	fcc = fcc << 8;
 800243e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	fcc = fcc + rx_full_charge_capacity[0];
 8002448:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800244c:	b29a      	uxth	r2, r3
 800244e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002452:	4413      	add	r3, r2
 8002454:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
//	printf("Full Charge Capacity = %d\n",fcc);

	uint8_t send_specific_fcc[14]={'2','M','S','I','F','C','S',rx_full_charge_capacity[1],rx_full_charge_capacity[0],'F','C','S','I','E'};
 8002458:	2332      	movs	r3, #50	; 0x32
 800245a:	773b      	strb	r3, [r7, #28]
 800245c:	234d      	movs	r3, #77	; 0x4d
 800245e:	777b      	strb	r3, [r7, #29]
 8002460:	2353      	movs	r3, #83	; 0x53
 8002462:	77bb      	strb	r3, [r7, #30]
 8002464:	2349      	movs	r3, #73	; 0x49
 8002466:	77fb      	strb	r3, [r7, #31]
 8002468:	2346      	movs	r3, #70	; 0x46
 800246a:	f887 3020 	strb.w	r3, [r7, #32]
 800246e:	2343      	movs	r3, #67	; 0x43
 8002470:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002474:	2353      	movs	r3, #83	; 0x53
 8002476:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800247a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800247e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002486:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800248a:	2346      	movs	r3, #70	; 0x46
 800248c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002490:	2343      	movs	r3, #67	; 0x43
 8002492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002496:	2353      	movs	r3, #83	; 0x53
 8002498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800249c:	2349      	movs	r3, #73	; 0x49
 800249e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80024a2:	2345      	movs	r3, #69	; 0x45
 80024a4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	HAL_UART_Transmit_IT(&huart2, send_specific_fcc, 14);
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	220e      	movs	r2, #14
 80024ae:	4619      	mov	r1, r3
 80024b0:	4833      	ldr	r0, [pc, #204]	; (8002580 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x250>)
 80024b2:	f005 fc1d 	bl	8007cf0 <HAL_UART_Transmit_IT>




	// Battery Design Capacity
	uint8_t tx_bat2_specf_design_capacity[1]={0x18};		// 0x18
 80024b6:	2318      	movs	r3, #24
 80024b8:	763b      	strb	r3, [r7, #24]
	uint8_t rx_design_capacity[2]={0x00,0x00};
 80024ba:	2300      	movs	r3, #0
 80024bc:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16,tx_bat2_specf_design_capacity, 1);
 80024be:	f107 0218 	add.w	r2, r7, #24
 80024c2:	2301      	movs	r3, #1
 80024c4:	2116      	movs	r1, #22
 80024c6:	482c      	ldr	r0, [pc, #176]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 80024c8:	f002 f8b8 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 80024cc:	2005      	movs	r0, #5
 80024ce:	f001 fc89 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_design_capacity, 2);
 80024d2:	f107 0214 	add.w	r2, r7, #20
 80024d6:	2302      	movs	r3, #2
 80024d8:	2116      	movs	r1, #22
 80024da:	4827      	ldr	r0, [pc, #156]	; (8002578 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x248>)
 80024dc:	f002 f91e 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f001 fc7f 	bl	8003de4 <HAL_Delay>
	uint16_t designcap = rx_design_capacity[1];
 80024e6:	7d7b      	ldrb	r3, [r7, #21]
 80024e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	designcap = designcap << 8;
 80024ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	designcap = designcap + rx_design_capacity[0];
 80024f6:	7d3b      	ldrb	r3, [r7, #20]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80024fe:	4413      	add	r3, r2
 8002500:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
//	printf("Design Capacity = %d\n",designcap);

	uint8_t send_specific_design_cap[14]={'2','M','S','I','D','C','S',rx_design_capacity[1],rx_design_capacity[0],'D','C','S','I','E'};
 8002504:	2332      	movs	r3, #50	; 0x32
 8002506:	713b      	strb	r3, [r7, #4]
 8002508:	234d      	movs	r3, #77	; 0x4d
 800250a:	717b      	strb	r3, [r7, #5]
 800250c:	2353      	movs	r3, #83	; 0x53
 800250e:	71bb      	strb	r3, [r7, #6]
 8002510:	2349      	movs	r3, #73	; 0x49
 8002512:	71fb      	strb	r3, [r7, #7]
 8002514:	2344      	movs	r3, #68	; 0x44
 8002516:	723b      	strb	r3, [r7, #8]
 8002518:	2343      	movs	r3, #67	; 0x43
 800251a:	727b      	strb	r3, [r7, #9]
 800251c:	2353      	movs	r3, #83	; 0x53
 800251e:	72bb      	strb	r3, [r7, #10]
 8002520:	7d7b      	ldrb	r3, [r7, #21]
 8002522:	72fb      	strb	r3, [r7, #11]
 8002524:	7d3b      	ldrb	r3, [r7, #20]
 8002526:	733b      	strb	r3, [r7, #12]
 8002528:	2344      	movs	r3, #68	; 0x44
 800252a:	737b      	strb	r3, [r7, #13]
 800252c:	2343      	movs	r3, #67	; 0x43
 800252e:	73bb      	strb	r3, [r7, #14]
 8002530:	2353      	movs	r3, #83	; 0x53
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	2349      	movs	r3, #73	; 0x49
 8002536:	743b      	strb	r3, [r7, #16]
 8002538:	2345      	movs	r3, #69	; 0x45
 800253a:	747b      	strb	r3, [r7, #17]
	HAL_UART_Transmit_IT(&huart2, send_specific_design_cap, 14);
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	220e      	movs	r2, #14
 8002540:	4619      	mov	r1, r3
 8002542:	480f      	ldr	r0, [pc, #60]	; (8002580 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x250>)
 8002544:	f005 fbd4 	bl	8007cf0 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f001 fc4b 	bl	8003de4 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_design_cap, 14);
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	220e      	movs	r2, #14
 8002552:	4619      	mov	r1, r3
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi+0x250>)
 8002556:	f005 fbcb 	bl	8007cf0 <HAL_UART_Transmit_IT>



	Compare_Specifi_para_Bat2(fcc,designcap,bs);   // Function to compare specific parameters of battery 1
 800255a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800255e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002562:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f80c 	bl	8002584 <Compare_Specifi_para_Bat2>





}
 800256c:	bf00      	nop
 800256e:	3750      	adds	r7, #80	; 0x50
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	08009e4c 	.word	0x08009e4c
 8002578:	20000210 	.word	0x20000210
 800257c:	08009e7c 	.word	0x08009e7c
 8002580:	20000310 	.word	0x20000310

08002584 <Compare_Specifi_para_Bat2>:

void Compare_Specifi_para_Bat2(uint16_t fullchargecap , uint16_t designcap, uint16_t batterystatus)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
 800258e:	460b      	mov	r3, r1
 8002590:	80bb      	strh	r3, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	807b      	strh	r3, [r7, #2]

	// Here Design Capacity and Full Charge Capacity are compared
	if(fullchargecap >4620  &&  fullchargecap <= designcap)
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f241 220c 	movw	r2, #4620	; 0x120c
 800259c:	4293      	cmp	r3, r2
 800259e:	d907      	bls.n	80025b0 <Compare_Specifi_para_Bat2+0x2c>
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	88bb      	ldrh	r3, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d803      	bhi.n	80025b0 <Compare_Specifi_para_Bat2+0x2c>
	{
		printf("Battery is in good condition\n");
 80025a8:	4821      	ldr	r0, [pc, #132]	; (8002630 <Compare_Specifi_para_Bat2+0xac>)
 80025aa:	f006 fce5 	bl	8008f78 <puts>
		__NOP();  // It means no operation does nothing
 80025ae:	bf00      	nop

	}


	if(fullchargecap<4620 && fullchargecap!=0)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	f241 220b 	movw	r2, #4619	; 0x120b
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d805      	bhi.n	80025c6 <Compare_Specifi_para_Bat2+0x42>
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <Compare_Specifi_para_Bat2+0x42>
	{
		Bat2_Maint_Autotestflag = false;   // // Abort the test
 80025c0:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <Compare_Specifi_para_Bat2+0xb0>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
	}

	// Function To convert decimal to binary. Add this function on Raspi Side
	uint8_t bat_status_array[16];
	if(0<=batterystatus && batterystatus<=65535){
		for(int j = 0; j < 16; j++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	e018      	b.n	80025fe <Compare_Specifi_para_Bat2+0x7a>
			if (batterystatus % 2 == 0) {
 80025cc:	887b      	ldrh	r3, [r7, #2]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <Compare_Specifi_para_Bat2+0x62>
				bat_status_array[j] = 0;
 80025d8:	f107 020c 	add.w	r2, r7, #12
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <Compare_Specifi_para_Bat2+0x6e>
			}
			else {
				bat_status_array[j] = 1;
 80025e6:	f107 020c 	add.w	r2, r7, #12
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
			}
			batterystatus = batterystatus / 2;
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	807b      	strh	r3, [r7, #2]
		for(int j = 0; j < 16; j++) {
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3301      	adds	r3, #1
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	dde3      	ble.n	80025cc <Compare_Specifi_para_Bat2+0x48>
		}
	}

	if(bat_status_array[15] == 1 || bat_status_array[14] == 1 || bat_status_array[12] == 1 || bat_status_array[11] == 1 )
 8002604:	7efb      	ldrb	r3, [r7, #27]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d008      	beq.n	800261c <Compare_Specifi_para_Bat2+0x98>
 800260a:	7ebb      	ldrb	r3, [r7, #26]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d005      	beq.n	800261c <Compare_Specifi_para_Bat2+0x98>
 8002610:	7e3b      	ldrb	r3, [r7, #24]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d002      	beq.n	800261c <Compare_Specifi_para_Bat2+0x98>
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <Compare_Specifi_para_Bat2+0xa4>

	{


		Bat2_Maint_Autotestflag = false;  // Abort the test
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <Compare_Specifi_para_Bat2+0xb0>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

		printf("Auto test is terminated because one of the alarm flag is set\n");
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <Compare_Specifi_para_Bat2+0xb4>)
 8002624:	f006 fca8 	bl	8008f78 <puts>

	}


}
 8002628:	bf00      	nop
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	08009e94 	.word	0x08009e94
 8002634:	200000bc 	.word	0x200000bc
 8002638:	08009eb4 	.word	0x08009eb4

0800263c <Read_bat2_maint_Run_time_to_empty_start_of_discharge>:


void Read_bat2_maint_Run_time_to_empty_start_of_discharge()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0

	uint8_t tx_rte[1]={0x11};	// 0x11
 8002642:	2311      	movs	r3, #17
 8002644:	753b      	strb	r3, [r7, #20]
	uint8_t rx_rte[2]={0x00,0x00};
 8002646:	2300      	movs	r3, #0
 8002648:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_rte, 1);
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	2301      	movs	r3, #1
 8002650:	2116      	movs	r1, #22
 8002652:	4824      	ldr	r0, [pc, #144]	; (80026e4 <Read_bat2_maint_Run_time_to_empty_start_of_discharge+0xa8>)
 8002654:	f001 fff2 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 8002658:	2005      	movs	r0, #5
 800265a:	f001 fbc3 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_rte, 2);
 800265e:	f107 0210 	add.w	r2, r7, #16
 8002662:	2302      	movs	r3, #2
 8002664:	2116      	movs	r1, #22
 8002666:	481f      	ldr	r0, [pc, #124]	; (80026e4 <Read_bat2_maint_Run_time_to_empty_start_of_discharge+0xa8>)
 8002668:	f002 f858 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 800266c:	2005      	movs	r0, #5
 800266e:	f001 fbb9 	bl	8003de4 <HAL_Delay>
	uint16_t rte = rx_rte[1];
 8002672:	7c7b      	ldrb	r3, [r7, #17]
 8002674:	82fb      	strh	r3, [r7, #22]
	rte = rte << 8;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	82fb      	strh	r3, [r7, #22]
	rte = rte + rx_rte[0];
 800267c:	7c3b      	ldrb	r3, [r7, #16]
 800267e:	b29a      	uxth	r2, r3
 8002680:	8afb      	ldrh	r3, [r7, #22]
 8002682:	4413      	add	r3, r2
 8002684:	82fb      	strh	r3, [r7, #22]
	uint8_t send_specific_rte[14]={'2','M','S','I','R','T','S',rx_rte[1],rx_rte[0],'R','T','F','I','E'};
 8002686:	2332      	movs	r3, #50	; 0x32
 8002688:	703b      	strb	r3, [r7, #0]
 800268a:	234d      	movs	r3, #77	; 0x4d
 800268c:	707b      	strb	r3, [r7, #1]
 800268e:	2353      	movs	r3, #83	; 0x53
 8002690:	70bb      	strb	r3, [r7, #2]
 8002692:	2349      	movs	r3, #73	; 0x49
 8002694:	70fb      	strb	r3, [r7, #3]
 8002696:	2352      	movs	r3, #82	; 0x52
 8002698:	713b      	strb	r3, [r7, #4]
 800269a:	2354      	movs	r3, #84	; 0x54
 800269c:	717b      	strb	r3, [r7, #5]
 800269e:	2353      	movs	r3, #83	; 0x53
 80026a0:	71bb      	strb	r3, [r7, #6]
 80026a2:	7c7b      	ldrb	r3, [r7, #17]
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	7c3b      	ldrb	r3, [r7, #16]
 80026a8:	723b      	strb	r3, [r7, #8]
 80026aa:	2352      	movs	r3, #82	; 0x52
 80026ac:	727b      	strb	r3, [r7, #9]
 80026ae:	2354      	movs	r3, #84	; 0x54
 80026b0:	72bb      	strb	r3, [r7, #10]
 80026b2:	2346      	movs	r3, #70	; 0x46
 80026b4:	72fb      	strb	r3, [r7, #11]
 80026b6:	2349      	movs	r3, #73	; 0x49
 80026b8:	733b      	strb	r3, [r7, #12]
 80026ba:	2345      	movs	r3, #69	; 0x45
 80026bc:	737b      	strb	r3, [r7, #13]



	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 14);
 80026be:	463b      	mov	r3, r7
 80026c0:	220e      	movs	r2, #14
 80026c2:	4619      	mov	r1, r3
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <Read_bat2_maint_Run_time_to_empty_start_of_discharge+0xac>)
 80026c6:	f005 fb13 	bl	8007cf0 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f001 fb8a 	bl	8003de4 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 14);
 80026d0:	463b      	mov	r3, r7
 80026d2:	220e      	movs	r2, #14
 80026d4:	4619      	mov	r1, r3
 80026d6:	4804      	ldr	r0, [pc, #16]	; (80026e8 <Read_bat2_maint_Run_time_to_empty_start_of_discharge+0xac>)
 80026d8:	f005 fb0a 	bl	8007cf0 <HAL_UART_Transmit_IT>




}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000210 	.word	0x20000210
 80026e8:	20000310 	.word	0x20000310

080026ec <Read_bat2_maint_Run_time_to_empty_end_of_discharge>:


void Read_bat2_maint_Run_time_to_empty_end_of_discharge()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0

	uint8_t tx_rte[1]={0x11};	// 0x11
 80026f2:	2311      	movs	r3, #17
 80026f4:	753b      	strb	r3, [r7, #20]
	uint8_t rx_rte[2]={0x00,0x00};
 80026f6:	2300      	movs	r3, #0
 80026f8:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_rte, 1);
 80026fa:	f107 0214 	add.w	r2, r7, #20
 80026fe:	2301      	movs	r3, #1
 8002700:	2116      	movs	r1, #22
 8002702:	4824      	ldr	r0, [pc, #144]	; (8002794 <Read_bat2_maint_Run_time_to_empty_end_of_discharge+0xa8>)
 8002704:	f001 ff9a 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 8002708:	2005      	movs	r0, #5
 800270a:	f001 fb6b 	bl	8003de4 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_rte, 2);
 800270e:	f107 0210 	add.w	r2, r7, #16
 8002712:	2302      	movs	r3, #2
 8002714:	2116      	movs	r1, #22
 8002716:	481f      	ldr	r0, [pc, #124]	; (8002794 <Read_bat2_maint_Run_time_to_empty_end_of_discharge+0xa8>)
 8002718:	f002 f800 	bl	800471c <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 800271c:	2005      	movs	r0, #5
 800271e:	f001 fb61 	bl	8003de4 <HAL_Delay>
	uint16_t rte = rx_rte[1];
 8002722:	7c7b      	ldrb	r3, [r7, #17]
 8002724:	82fb      	strh	r3, [r7, #22]
	rte = rte << 8;
 8002726:	8afb      	ldrh	r3, [r7, #22]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	82fb      	strh	r3, [r7, #22]
	rte = rte + rx_rte[0];
 800272c:	7c3b      	ldrb	r3, [r7, #16]
 800272e:	b29a      	uxth	r2, r3
 8002730:	8afb      	ldrh	r3, [r7, #22]
 8002732:	4413      	add	r3, r2
 8002734:	82fb      	strh	r3, [r7, #22]
	uint8_t send_specific_rte[14]={'2','M','S','I','R','T','S',rx_rte[1],rx_rte[0],'R','T','L','I','E'};
 8002736:	2332      	movs	r3, #50	; 0x32
 8002738:	703b      	strb	r3, [r7, #0]
 800273a:	234d      	movs	r3, #77	; 0x4d
 800273c:	707b      	strb	r3, [r7, #1]
 800273e:	2353      	movs	r3, #83	; 0x53
 8002740:	70bb      	strb	r3, [r7, #2]
 8002742:	2349      	movs	r3, #73	; 0x49
 8002744:	70fb      	strb	r3, [r7, #3]
 8002746:	2352      	movs	r3, #82	; 0x52
 8002748:	713b      	strb	r3, [r7, #4]
 800274a:	2354      	movs	r3, #84	; 0x54
 800274c:	717b      	strb	r3, [r7, #5]
 800274e:	2353      	movs	r3, #83	; 0x53
 8002750:	71bb      	strb	r3, [r7, #6]
 8002752:	7c7b      	ldrb	r3, [r7, #17]
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	7c3b      	ldrb	r3, [r7, #16]
 8002758:	723b      	strb	r3, [r7, #8]
 800275a:	2352      	movs	r3, #82	; 0x52
 800275c:	727b      	strb	r3, [r7, #9]
 800275e:	2354      	movs	r3, #84	; 0x54
 8002760:	72bb      	strb	r3, [r7, #10]
 8002762:	234c      	movs	r3, #76	; 0x4c
 8002764:	72fb      	strb	r3, [r7, #11]
 8002766:	2349      	movs	r3, #73	; 0x49
 8002768:	733b      	strb	r3, [r7, #12]
 800276a:	2345      	movs	r3, #69	; 0x45
 800276c:	737b      	strb	r3, [r7, #13]



	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 14);
 800276e:	463b      	mov	r3, r7
 8002770:	220e      	movs	r2, #14
 8002772:	4619      	mov	r1, r3
 8002774:	4808      	ldr	r0, [pc, #32]	; (8002798 <Read_bat2_maint_Run_time_to_empty_end_of_discharge+0xac>)
 8002776:	f005 fabb 	bl	8007cf0 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 800277a:	2001      	movs	r0, #1
 800277c:	f001 fb32 	bl	8003de4 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 14);
 8002780:	463b      	mov	r3, r7
 8002782:	220e      	movs	r2, #14
 8002784:	4619      	mov	r1, r3
 8002786:	4804      	ldr	r0, [pc, #16]	; (8002798 <Read_bat2_maint_Run_time_to_empty_end_of_discharge+0xac>)
 8002788:	f005 fab2 	bl	8007cf0 <HAL_UART_Transmit_IT>


}
 800278c:	bf00      	nop
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000210 	.word	0x20000210
 8002798:	20000310 	.word	0x20000310

0800279c <substatemachine_battery2_maintenance>:
extern TIM_HandleTypeDef htim4;

extern UART_HandleTypeDef huart2;

void substatemachine_battery2_maintenance()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0

	if(BAT_2_MAINTENANCE_FLAG == true)   // Works with GUI updated periodically
 80027a0:	4ba7      	ldr	r3, [pc, #668]	; (8002a40 <substatemachine_battery2_maintenance+0x2a4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 829c 	beq.w	8002ce2 <substatemachine_battery2_maintenance+0x546>
	{

		if(BAT_2_MAINTENANCE_ENTERED_GUARD_FLAG==false)
 80027aa:	4ba6      	ldr	r3, [pc, #664]	; (8002a44 <substatemachine_battery2_maintenance+0x2a8>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <substatemachine_battery2_maintenance+0x28>
		{
			printf("Battery has entered Maintenance Use case \n");  // Displayed only once
 80027b8:	48a3      	ldr	r0, [pc, #652]	; (8002a48 <substatemachine_battery2_maintenance+0x2ac>)
 80027ba:	f006 fbdd 	bl	8008f78 <puts>
			BAT_2_MAINTENANCE_ENTERED_GUARD_FLAG = true;
 80027be:	4ba1      	ldr	r3, [pc, #644]	; (8002a44 <substatemachine_battery2_maintenance+0x2a8>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
		}




		if(BAT_2_MAINT_GENERAL_INFO_FLAG == true)
 80027c4:	4ba1      	ldr	r3, [pc, #644]	; (8002a4c <substatemachine_battery2_maintenance+0x2b0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d029      	beq.n	8002820 <substatemachine_battery2_maintenance+0x84>
		{
			connect_flag = false;
 80027cc:	4ba0      	ldr	r3, [pc, #640]	; (8002a50 <substatemachine_battery2_maintenance+0x2b4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
			if(BAT_2_MAINT_GENERAL_INFO_GUARD_FLAG==false)
 80027d2:	4ba0      	ldr	r3, [pc, #640]	; (8002a54 <substatemachine_battery2_maintenance+0x2b8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <substatemachine_battery2_maintenance+0x50>
			{
				BAT_2_MAINT_GENERAL_INFO_GUARD_FLAG = true;
 80027e0:	4b9c      	ldr	r3, [pc, #624]	; (8002a54 <substatemachine_battery2_maintenance+0x2b8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]

				//printf("Displayed General Info once \n");

				Transmit_Bat2_Maintenance_General_Info_to_Raspi(); // This function is working now
 80027e6:	f7fe facd 	bl	8000d84 <Transmit_Bat2_Maintenance_General_Info_to_Raspi>
 80027ea:	e019      	b.n	8002820 <substatemachine_battery2_maintenance+0x84>




			}
			else if(BAT_2_MAINT_GENERAL_INFO_GUARD_FLAG == true)
 80027ec:	4b99      	ldr	r3, [pc, #612]	; (8002a54 <substatemachine_battery2_maintenance+0x2b8>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <substatemachine_battery2_maintenance+0x84>
			{
				connect_flag=true;
 80027f4:	4b96      	ldr	r3, [pc, #600]	; (8002a50 <substatemachine_battery2_maintenance+0x2b4>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
			   // Update general info periodically // this function works
				if(bat2_update_maintenance_info_flag==true)
 80027fa:	4b97      	ldr	r3, [pc, #604]	; (8002a58 <substatemachine_battery2_maintenance+0x2bc>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <substatemachine_battery2_maintenance+0x84>
				{
					connect_flag=false;
 8002802:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <substatemachine_battery2_maintenance+0x2b4>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
				update_RemCap_during_maintenance_bat2();
 8002808:	f7fe f824 	bl	8000854 <update_RemCap_during_maintenance_bat2>
				update_voltage_during_maintenance_bat2();
 800280c:	f7fd ff60 	bl	80006d0 <update_voltage_during_maintenance_bat2>
				update_asoc_during_maintenance_bat2();
 8002810:	f7fd ffc4 	bl	800079c <update_asoc_during_maintenance_bat2>
				update_cyclecount_during_maintenance_bat2();
 8002814:	f7fe f87a 	bl	800090c <update_cyclecount_during_maintenance_bat2>
				update_batstatus_during_maintenance_bat2();
 8002818:	f7fe f8d4 	bl	80009c4 <update_batstatus_during_maintenance_bat2>
				update_temperature_during_maintenance_bat2();
 800281c:	f7fe f92e 	bl	8000a7c <update_temperature_during_maintenance_bat2>
				}

			}
		}

		if(*BAT2_MAINT_STATE==0)
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f993 3000 	ldrsb.w	r3, [r3]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <substatemachine_battery2_maintenance+0xa0>
		{
			bat2charge = false;
 800282c:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <substatemachine_battery2_maintenance+0x2c4>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
			bat2discharge = false;
 8002832:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <substatemachine_battery2_maintenance+0x2c8>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
			gpio_func_bat2_chg_dschg();
 8002838:	f7fe ffca 	bl	80017d0 <gpio_func_bat2_chg_dschg>

		}

		if(Bat2_Maint_Autotestflag == true)
 800283c:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <substatemachine_battery2_maintenance+0x2cc>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 824e 	beq.w	8002ce2 <substatemachine_battery2_maintenance+0x546>
		{


			if(Bat_2_MAINT_SPECIFIC_PARA_GUARD_FLAG ==false)
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <substatemachine_battery2_maintenance+0x2d0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <substatemachine_battery2_maintenance+0xc2>
			{
				Bat_2_MAINT_SPECIFIC_PARA_GUARD_FLAG = true;
 8002854:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <substatemachine_battery2_maintenance+0x2d0>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
			    Read_and_Compare_Specific_para_Bat2_STM_to_Pi();  // This function is also working
 800285a:	f7ff fd69 	bl	8002330 <Read_and_Compare_Specific_para_Bat2_STM_to_Pi>



			}

			if(*BAT2_MAINT_STATE == 0 && *BAT2_MAINT_STATE !=1 && *BAT2_MAINT_STATE !=2
 800285e:	4b7f      	ldr	r3, [pc, #508]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f993 3000 	ldrsb.w	r3, [r3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d133      	bne.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 800286a:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f993 3000 	ldrsb.w	r3, [r3]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d02d      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 8002876:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f993 3000 	ldrsb.w	r3, [r3]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d027      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
					&& *BAT2_MAINT_STATE !=3 && *BAT2_MAINT_STATE !=4 && *BAT2_MAINT_STATE !=5
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f993 3000 	ldrsb.w	r3, [r3]
 800288a:	2b03      	cmp	r3, #3
 800288c:	d021      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 800288e:	4b73      	ldr	r3, [pc, #460]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f993 3000 	ldrsb.w	r3, [r3]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d01b      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 800289a:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f993 3000 	ldrsb.w	r3, [r3]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d015      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
					&& *BAT2_MAINT_STATE !=6 && *BAT2_MAINT_STATE !=7 && *BAT2_MAINT_STATE !=8)
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f993 3000 	ldrsb.w	r3, [r3]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d00f      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f993 3000 	ldrsb.w	r3, [r3]
 80028ba:	2b07      	cmp	r3, #7
 80028bc:	d009      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
 80028be:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f993 3000 	ldrsb.w	r3, [r3]
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d003      	beq.n	80028d2 <substatemachine_battery2_maintenance+0x136>
			{
				*BAT2_MAINT_STATE = 1;
 80028ca:	4b64      	ldr	r3, [pc, #400]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
			}

			switch(*BAT2_MAINT_STATE)
 80028d2:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f993 3000 	ldrsb.w	r3, [r3]
 80028da:	3b01      	subs	r3, #1
 80028dc:	2b07      	cmp	r3, #7
 80028de:	f200 81fb 	bhi.w	8002cd8 <substatemachine_battery2_maintenance+0x53c>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <substatemachine_battery2_maintenance+0x14c>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	08002909 	.word	0x08002909
 80028ec:	0800294d 	.word	0x0800294d
 80028f0:	080029c5 	.word	0x080029c5
 80028f4:	08002a1b 	.word	0x08002a1b
 80028f8:	08002ac1 	.word	0x08002ac1
 80028fc:	08002b43 	.word	0x08002b43
 8002900:	08002bbf 	.word	0x08002bbf
 8002904:	08002c23 	.word	0x08002c23
			{

			case 1:  // 80 % start state

				    BAT_2_ASOC_MAINTENANCE = read_bat2_asoc();
 8002908:	f000 fa80 	bl	8002e0c <read_bat2_asoc>
 800290c:	4603      	mov	r3, r0
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b57      	ldr	r3, [pc, #348]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 8002912:	801a      	strh	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE==BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002914:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b55      	cmp	r3, #85	; 0x55
 800291a:	d104      	bne.n	8002926 <substatemachine_battery2_maintenance+0x18a>
					{
						*BAT2_MAINT_STATE = 2;
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
					{
						*BAT2_MAINT_STATE = 4;
					}


				break;
 8002924:	e1df      	b.n	8002ce6 <substatemachine_battery2_maintenance+0x54a>
					else if(BAT_2_ASOC_MAINTENANCE <BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002926:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2b54      	cmp	r3, #84	; 0x54
 800292c:	d804      	bhi.n	8002938 <substatemachine_battery2_maintenance+0x19c>
						*BAT2_MAINT_STATE = 3;
 800292e:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2203      	movs	r2, #3
 8002934:	701a      	strb	r2, [r3, #0]
				break;
 8002936:	e1d6      	b.n	8002ce6 <substatemachine_battery2_maintenance+0x54a>
					else if(BAT_2_ASOC_MAINTENANCE >BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	2b55      	cmp	r3, #85	; 0x55
 800293e:	f240 81d2 	bls.w	8002ce6 <substatemachine_battery2_maintenance+0x54a>
						*BAT2_MAINT_STATE = 4;
 8002942:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	701a      	strb	r2, [r3, #0]
				break;
 800294a:	e1cc      	b.n	8002ce6 <substatemachine_battery2_maintenance+0x54a>

			case 2:    // = 80 % state

				if(bat2_maint_state2guard == false)
 800294c:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <substatemachine_battery2_maintenance+0x2d8>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f083 0301 	eor.w	r3, r3, #1
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <substatemachine_battery2_maintenance+0x1dc>
				{
					bat2charge = false;
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <substatemachine_battery2_maintenance+0x2c4>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
					bat2discharge = false;
 8002960:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <substatemachine_battery2_maintenance+0x2c8>)
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002966:	f7fe ff33 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					_bat2timerfunc = true;
 800296a:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <substatemachine_battery2_maintenance+0x2dc>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
					bat2_maint_state2guard = true;
 8002970:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <substatemachine_battery2_maintenance+0x2d8>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
						bat2_update_maintenance_info_flag=true;
					}
				}

				break;
 8002976:	e1b8      	b.n	8002cea <substatemachine_battery2_maintenance+0x54e>
				else if(bat2_maint_state2guard == true)
 8002978:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <substatemachine_battery2_maintenance+0x2d8>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 81b4 	beq.w	8002cea <substatemachine_battery2_maintenance+0x54e>
					if(_bat2_15min_wait_over==true)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <substatemachine_battery2_maintenance+0x2e0>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 81af 	beq.w	8002cea <substatemachine_battery2_maintenance+0x54e>
						HAL_TIM_Base_Stop_IT(&htim2);
 800298c:	483c      	ldr	r0, [pc, #240]	; (8002a80 <substatemachine_battery2_maintenance+0x2e4>)
 800298e:	f004 fd3f 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						HAL_TIM_Base_Stop_IT(&htim3);
 8002992:	483c      	ldr	r0, [pc, #240]	; (8002a84 <substatemachine_battery2_maintenance+0x2e8>)
 8002994:	f004 fd3c 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						bat2_update_maintenance_info_flag=false;
 8002998:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <substatemachine_battery2_maintenance+0x2bc>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
						Read_Bat2_Maint_autotest_result_first_80_percent(); // This function works
 800299e:	f7fe ff81 	bl	80018a4 <Read_Bat2_Maint_autotest_result_first_80_percent>
						*BAT2_MAINT_STATE = 5;
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2205      	movs	r2, #5
 80029a8:	701a      	strb	r2, [r3, #0]
						bat2_maint_state2guard = false;
 80029aa:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <substatemachine_battery2_maintenance+0x2d8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim2);
 80029b0:	4833      	ldr	r0, [pc, #204]	; (8002a80 <substatemachine_battery2_maintenance+0x2e4>)
 80029b2:	f004 fcb5 	bl	8007320 <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Start_IT(&htim3);
 80029b6:	4833      	ldr	r0, [pc, #204]	; (8002a84 <substatemachine_battery2_maintenance+0x2e8>)
 80029b8:	f004 fcb2 	bl	8007320 <HAL_TIM_Base_Start_IT>
						bat2_update_maintenance_info_flag=true;
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <substatemachine_battery2_maintenance+0x2bc>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
				break;
 80029c2:	e192      	b.n	8002cea <substatemachine_battery2_maintenance+0x54e>

			case 3:    // <80 % state

				if(bat2_maint_state3guard == false)
 80029c4:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <substatemachine_battery2_maintenance+0x2ec>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	f083 0301 	eor.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <substatemachine_battery2_maintenance+0x24e>
				{
					bat2charge = true;
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <substatemachine_battery2_maintenance+0x2c4>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
					bat2discharge = false;
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <substatemachine_battery2_maintenance+0x2c8>)
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 80029de:	f7fe fef7 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					bat2_maint_state3guard = true;
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <substatemachine_battery2_maintenance+0x2ec>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
					{
						*BAT2_MAINT_STATE = 2;
						bat2_maint_state3guard = false;
					}
				}
				break;
 80029e8:	e181      	b.n	8002cee <substatemachine_battery2_maintenance+0x552>
				else if(bat2_maint_state3guard == true)
 80029ea:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <substatemachine_battery2_maintenance+0x2ec>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 817d 	beq.w	8002cee <substatemachine_battery2_maintenance+0x552>
					BAT_2_ASOC_MAINTENANCE = read_bat2_asoc();
 80029f4:	f000 fa0a 	bl	8002e0c <read_bat2_asoc>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 80029fe:	801a      	strh	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE == BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <substatemachine_battery2_maintenance+0x2d4>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	2b55      	cmp	r3, #85	; 0x55
 8002a06:	f040 8172 	bne.w	8002cee <substatemachine_battery2_maintenance+0x552>
						*BAT2_MAINT_STATE = 2;
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <substatemachine_battery2_maintenance+0x2c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	701a      	strb	r2, [r3, #0]
						bat2_maint_state3guard = false;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <substatemachine_battery2_maintenance+0x2ec>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
				break;
 8002a18:	e169      	b.n	8002cee <substatemachine_battery2_maintenance+0x552>




			case 4:   // > 80 % state
				if(bat2_maint_state4guard == false)
 8002a1a:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <substatemachine_battery2_maintenance+0x2f0>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	f083 0301 	eor.w	r3, r3, #1
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d033      	beq.n	8002a90 <substatemachine_battery2_maintenance+0x2f4>
				{
					bat2discharge = true;
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <substatemachine_battery2_maintenance+0x2c8>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
					bat2charge = false;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <substatemachine_battery2_maintenance+0x2c4>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002a34:	f7fe fecc 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					bat2_maint_state4guard = true;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <substatemachine_battery2_maintenance+0x2f0>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
					{
						*BAT2_MAINT_STATE = 2;
						bat2_maint_state4guard = false;
					}
				}
				break;
 8002a3e:	e158      	b.n	8002cf2 <substatemachine_battery2_maintenance+0x556>
 8002a40:	200000bd 	.word	0x200000bd
 8002a44:	200000be 	.word	0x200000be
 8002a48:	08009ef4 	.word	0x08009ef4
 8002a4c:	200000bf 	.word	0x200000bf
 8002a50:	20000000 	.word	0x20000000
 8002a54:	200000c0 	.word	0x200000c0
 8002a58:	200000d7 	.word	0x200000d7
 8002a5c:	20000118 	.word	0x20000118
 8002a60:	200000b3 	.word	0x200000b3
 8002a64:	200000b4 	.word	0x200000b4
 8002a68:	200000bc 	.word	0x200000bc
 8002a6c:	200000c1 	.word	0x200000c1
 8002a70:	2000025c 	.word	0x2000025c
 8002a74:	200000b5 	.word	0x200000b5
 8002a78:	200000ae 	.word	0x200000ae
 8002a7c:	200000af 	.word	0x200000af
 8002a80:	200002c4 	.word	0x200002c4
 8002a84:	20000264 	.word	0x20000264
 8002a88:	200000b6 	.word	0x200000b6
 8002a8c:	200000b7 	.word	0x200000b7
				else if(bat2_maint_state4guard == true)
 8002a90:	4b9d      	ldr	r3, [pc, #628]	; (8002d08 <substatemachine_battery2_maintenance+0x56c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 812c 	beq.w	8002cf2 <substatemachine_battery2_maintenance+0x556>
					BAT_2_ASOC_MAINTENANCE = read_bat2_asoc();
 8002a9a:	f000 f9b7 	bl	8002e0c <read_bat2_asoc>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	4b9a      	ldr	r3, [pc, #616]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002aa4:	801a      	strh	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE == BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002aa6:	4b99      	ldr	r3, [pc, #612]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	2b55      	cmp	r3, #85	; 0x55
 8002aac:	f040 8121 	bne.w	8002cf2 <substatemachine_battery2_maintenance+0x556>
						*BAT2_MAINT_STATE = 2;
 8002ab0:	4b97      	ldr	r3, [pc, #604]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	701a      	strb	r2, [r3, #0]
						bat2_maint_state4guard = false;
 8002ab8:	4b93      	ldr	r3, [pc, #588]	; (8002d08 <substatemachine_battery2_maintenance+0x56c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
				break;
 8002abe:	e118      	b.n	8002cf2 <substatemachine_battery2_maintenance+0x556>

			case 5:   // Discharge to 10 %

				if(bat2_maint_state5guard==false)
 8002ac0:	4b94      	ldr	r3, [pc, #592]	; (8002d14 <substatemachine_battery2_maintenance+0x578>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d014      	beq.n	8002af8 <substatemachine_battery2_maintenance+0x35c>
				{
					bat2discharge = true;
 8002ace:	4b92      	ldr	r3, [pc, #584]	; (8002d18 <substatemachine_battery2_maintenance+0x57c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
					bat2charge = false;
 8002ad4:	4b91      	ldr	r3, [pc, #580]	; (8002d1c <substatemachine_battery2_maintenance+0x580>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002ada:	f7fe fe79 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					bat2_maint_state5guard = true;
 8002ade:	4b8d      	ldr	r3, [pc, #564]	; (8002d14 <substatemachine_battery2_maintenance+0x578>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
					_bat2timerfunc=false;
 8002ae4:	4b8e      	ldr	r3, [pc, #568]	; (8002d20 <substatemachine_battery2_maintenance+0x584>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
					_bat2_15min_wait_over=false;
 8002aea:	4b8e      	ldr	r3, [pc, #568]	; (8002d24 <substatemachine_battery2_maintenance+0x588>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
					_bat2_counter_var = 0;
 8002af0:	4b8d      	ldr	r3, [pc, #564]	; (8002d28 <substatemachine_battery2_maintenance+0x58c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
						*BAT2_MAINT_STATE = 6;
						bat2_maint_state5guard=false;
					}

				}
				break;
 8002af6:	e0fe      	b.n	8002cf6 <substatemachine_battery2_maintenance+0x55a>
				else if(bat2_maint_state5guard==true)
 8002af8:	4b86      	ldr	r3, [pc, #536]	; (8002d14 <substatemachine_battery2_maintenance+0x578>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80fa 	beq.w	8002cf6 <substatemachine_battery2_maintenance+0x55a>
					BAT_2_ASOC_MAINTENANCE = read_bat2_asoc();
 8002b02:	f000 f983 	bl	8002e0c <read_bat2_asoc>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b80      	ldr	r3, [pc, #512]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002b0c:	801a      	strh	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE==83 && bat2_specific_info_rte_flag==true)
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	2b53      	cmp	r3, #83	; 0x53
 8002b14:	d108      	bne.n	8002b28 <substatemachine_battery2_maintenance+0x38c>
 8002b16:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <substatemachine_battery2_maintenance+0x590>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <substatemachine_battery2_maintenance+0x38c>
						Read_bat2_maint_Run_time_to_empty_start_of_discharge();
 8002b1e:	f7ff fd8d 	bl	800263c <Read_bat2_maint_Run_time_to_empty_start_of_discharge>
						bat2_specific_info_rte_flag=false;
 8002b22:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <substatemachine_battery2_maintenance+0x590>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE ==BAT_AUTOTEST_MAINTENANCE_ASOC_10)   // 72
 8002b28:	4b78      	ldr	r3, [pc, #480]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	2b53      	cmp	r3, #83	; 0x53
 8002b2e:	f040 80e2 	bne.w	8002cf6 <substatemachine_battery2_maintenance+0x55a>
						*BAT2_MAINT_STATE = 6;
 8002b32:	4b77      	ldr	r3, [pc, #476]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2206      	movs	r2, #6
 8002b38:	701a      	strb	r2, [r3, #0]
						bat2_maint_state5guard=false;
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <substatemachine_battery2_maintenance+0x578>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
				break;
 8002b40:	e0d9      	b.n	8002cf6 <substatemachine_battery2_maintenance+0x55a>

			case 6:  // ASOC = 10% state
				if(bat2_maint_state6guard==false)
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <substatemachine_battery2_maintenance+0x594>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	f083 0301 	eor.w	r3, r3, #1
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <substatemachine_battery2_maintenance+0x3d6>
				{
					bat2charge=false;
 8002b50:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <substatemachine_battery2_maintenance+0x580>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
					bat2discharge=false;
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <substatemachine_battery2_maintenance+0x57c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002b5c:	f7fe fe38 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					_bat2timerfunc=true;
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <substatemachine_battery2_maintenance+0x584>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
					bat2_maint_state6guard=true;
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <substatemachine_battery2_maintenance+0x594>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
					Read_bat2_maint_Run_time_to_empty_end_of_discharge();  // RTE
 8002b6c:	f7ff fdbe 	bl	80026ec <Read_bat2_maint_Run_time_to_empty_end_of_discharge>
						HAL_TIM_Base_Start_IT(&htim3);
						bat2_update_maintenance_info_flag=true;
						bat2_maint_state6guard=false;
					}
				}
				break;
 8002b70:	e0c3      	b.n	8002cfa <substatemachine_battery2_maintenance+0x55e>
				else if(bat2_maint_state6guard==true)
 8002b72:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <substatemachine_battery2_maintenance+0x594>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80bf 	beq.w	8002cfa <substatemachine_battery2_maintenance+0x55e>
					if(_bat2_15min_wait_over==true)
 8002b7c:	4b69      	ldr	r3, [pc, #420]	; (8002d24 <substatemachine_battery2_maintenance+0x588>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80ba 	beq.w	8002cfa <substatemachine_battery2_maintenance+0x55e>
						HAL_TIM_Base_Stop_IT(&htim2);
 8002b86:	486b      	ldr	r0, [pc, #428]	; (8002d34 <substatemachine_battery2_maintenance+0x598>)
 8002b88:	f004 fc42 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						HAL_TIM_Base_Stop_IT(&htim3);
 8002b8c:	486a      	ldr	r0, [pc, #424]	; (8002d38 <substatemachine_battery2_maintenance+0x59c>)
 8002b8e:	f004 fc3f 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						bat2_update_maintenance_info_flag=false;
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <substatemachine_battery2_maintenance+0x5a0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
						Read_Bat2_Maint_autotest_result_middle_10_percent();
 8002b98:	f7ff f846 	bl	8001c28 <Read_Bat2_Maint_autotest_result_middle_10_percent>
						*BAT2_MAINT_STATE=7;
 8002b9c:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim2);
 8002ba4:	4863      	ldr	r0, [pc, #396]	; (8002d34 <substatemachine_battery2_maintenance+0x598>)
 8002ba6:	f004 fbbb 	bl	8007320 <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Start_IT(&htim3);
 8002baa:	4863      	ldr	r0, [pc, #396]	; (8002d38 <substatemachine_battery2_maintenance+0x59c>)
 8002bac:	f004 fbb8 	bl	8007320 <HAL_TIM_Base_Start_IT>
						bat2_update_maintenance_info_flag=true;
 8002bb0:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <substatemachine_battery2_maintenance+0x5a0>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
						bat2_maint_state6guard=false;
 8002bb6:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <substatemachine_battery2_maintenance+0x594>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
				break;
 8002bbc:	e09d      	b.n	8002cfa <substatemachine_battery2_maintenance+0x55e>

			case 7:  // Again charge to 80 % state
				if(bat2_maint_state7guard == false)
 8002bbe:	4b60      	ldr	r3, [pc, #384]	; (8002d40 <substatemachine_battery2_maintenance+0x5a4>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d014      	beq.n	8002bf6 <substatemachine_battery2_maintenance+0x45a>
				{
					bat2charge=true;
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <substatemachine_battery2_maintenance+0x580>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
					bat2discharge=false;
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <substatemachine_battery2_maintenance+0x57c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002bd8:	f7fe fdfa 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					bat2_maint_state7guard = true;
 8002bdc:	4b58      	ldr	r3, [pc, #352]	; (8002d40 <substatemachine_battery2_maintenance+0x5a4>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
					_bat2timerfunc = false;
 8002be2:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <substatemachine_battery2_maintenance+0x584>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
					_bat2_15min_wait_over=false;
 8002be8:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <substatemachine_battery2_maintenance+0x588>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
					_bat2_counter_var = 0;
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <substatemachine_battery2_maintenance+0x58c>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
					{
						*BAT2_MAINT_STATE=8;
						bat2_maint_state7guard=false;
					}
				}
				break;
 8002bf4:	e083      	b.n	8002cfe <substatemachine_battery2_maintenance+0x562>
				else if(bat2_maint_state7guard==true)
 8002bf6:	4b52      	ldr	r3, [pc, #328]	; (8002d40 <substatemachine_battery2_maintenance+0x5a4>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d07f      	beq.n	8002cfe <substatemachine_battery2_maintenance+0x562>
					BAT_2_ASOC_MAINTENANCE = read_bat2_asoc();
 8002bfe:	f000 f905 	bl	8002e0c <read_bat2_asoc>
 8002c02:	4603      	mov	r3, r0
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	4b41      	ldr	r3, [pc, #260]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002c08:	801a      	strh	r2, [r3, #0]
					if(BAT_2_ASOC_MAINTENANCE==BAT_AUTOTEST_MAINTENANCE_ASOC_80)   // 73
 8002c0a:	4b40      	ldr	r3, [pc, #256]	; (8002d0c <substatemachine_battery2_maintenance+0x570>)
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2b55      	cmp	r3, #85	; 0x55
 8002c10:	d175      	bne.n	8002cfe <substatemachine_battery2_maintenance+0x562>
						*BAT2_MAINT_STATE=8;
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2208      	movs	r2, #8
 8002c18:	701a      	strb	r2, [r3, #0]
						bat2_maint_state7guard=false;
 8002c1a:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <substatemachine_battery2_maintenance+0x5a4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
				break;
 8002c20:	e06d      	b.n	8002cfe <substatemachine_battery2_maintenance+0x562>

			case 8:
				if(bat2_maint_state8guard==false)
 8002c22:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <substatemachine_battery2_maintenance+0x5a8>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	f083 0301 	eor.w	r3, r3, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00e      	beq.n	8002c4e <substatemachine_battery2_maintenance+0x4b2>
				{
					bat2discharge=false;
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <substatemachine_battery2_maintenance+0x57c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
					bat2charge=false;
 8002c36:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <substatemachine_battery2_maintenance+0x580>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
					gpio_func_bat2_chg_dschg();
 8002c3c:	f7fe fdc8 	bl	80017d0 <gpio_func_bat2_chg_dschg>
					_bat2timerfunc=true;
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <substatemachine_battery2_maintenance+0x584>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
					bat2_maint_state8guard=true;
 8002c46:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <substatemachine_battery2_maintenance+0x5a8>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
					//	bat2_update_maintenance_info_flag=true;
						connect_flag = true;

					}
				}
				break;
 8002c4c:	e059      	b.n	8002d02 <substatemachine_battery2_maintenance+0x566>
				else if(bat2_maint_state8guard==true)
 8002c4e:	4b3d      	ldr	r3, [pc, #244]	; (8002d44 <substatemachine_battery2_maintenance+0x5a8>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d055      	beq.n	8002d02 <substatemachine_battery2_maintenance+0x566>
					if(_bat2_15min_wait_over==true)
 8002c56:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <substatemachine_battery2_maintenance+0x588>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d051      	beq.n	8002d02 <substatemachine_battery2_maintenance+0x566>
						HAL_TIM_Base_Stop_IT(&htim2);
 8002c5e:	4835      	ldr	r0, [pc, #212]	; (8002d34 <substatemachine_battery2_maintenance+0x598>)
 8002c60:	f004 fbd6 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						HAL_TIM_Base_Stop_IT(&htim3);
 8002c64:	4834      	ldr	r0, [pc, #208]	; (8002d38 <substatemachine_battery2_maintenance+0x59c>)
 8002c66:	f004 fbd3 	bl	8007410 <HAL_TIM_Base_Stop_IT>
						bat2_update_maintenance_info_flag=false;
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <substatemachine_battery2_maintenance+0x5a0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
	          Read_Bat2_Maint_autotest_result_last_80_percent();
 8002c70:	f7ff f99c 	bl	8001fac <Read_Bat2_Maint_autotest_result_last_80_percent>
	          bat2_maint_state8guard=false;
 8002c74:	4b33      	ldr	r3, [pc, #204]	; (8002d44 <substatemachine_battery2_maintenance+0x5a8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
						_bat2timerfunc=false;
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <substatemachine_battery2_maintenance+0x584>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
						_bat2_15min_wait_over=false;
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <substatemachine_battery2_maintenance+0x588>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
						_bat2_counter_var = 0;
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <substatemachine_battery2_maintenance+0x58c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	801a      	strh	r2, [r3, #0]
						Bat2_Maint_Autotestflag = false;
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <substatemachine_battery2_maintenance+0x5ac>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
						BAT_2_MAINTENANCE_FLAG = false;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <substatemachine_battery2_maintenance+0x5b0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
						BAT_2_MAINT_GENERAL_INFO_FLAG = false;
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <substatemachine_battery2_maintenance+0x5b4>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
						BAT_2_MAINTENANCE_ENTERED_GUARD_FLAG=false;
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <substatemachine_battery2_maintenance+0x5b8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
						BAT_2_MAINT_GENERAL_INFO_GUARD_FLAG=false;
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	; (8002d58 <substatemachine_battery2_maintenance+0x5bc>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
						Bat_2_MAINT_SPECIFIC_PARA_GUARD_FLAG=false;
 8002caa:	4b2c      	ldr	r3, [pc, #176]	; (8002d5c <substatemachine_battery2_maintenance+0x5c0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
						bat2_specific_info_rte_flag=true;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <substatemachine_battery2_maintenance+0x590>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
						printf("Auotest is finished\n");
 8002cb6:	482a      	ldr	r0, [pc, #168]	; (8002d60 <substatemachine_battery2_maintenance+0x5c4>)
 8002cb8:	f006 f95e 	bl	8008f78 <puts>
						*BAT2_MAINT_STATE=0;
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim2);
 8002cc4:	481b      	ldr	r0, [pc, #108]	; (8002d34 <substatemachine_battery2_maintenance+0x598>)
 8002cc6:	f004 fb2b 	bl	8007320 <HAL_TIM_Base_Start_IT>
						HAL_TIM_Base_Start_IT(&htim3);
 8002cca:	481b      	ldr	r0, [pc, #108]	; (8002d38 <substatemachine_battery2_maintenance+0x59c>)
 8002ccc:	f004 fb28 	bl	8007320 <HAL_TIM_Base_Start_IT>
						connect_flag = true;
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <substatemachine_battery2_maintenance+0x5c8>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
				break;
 8002cd6:	e014      	b.n	8002d02 <substatemachine_battery2_maintenance+0x566>

			default:
				*BAT2_MAINT_STATE = 0;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <substatemachine_battery2_maintenance+0x574>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
				break;
 8002ce0:	e010      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
			}

		}   // End of Autotest
 8002ce2:	bf00      	nop
 8002ce4:	e00e      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002ce6:	bf00      	nop
 8002ce8:	e00c      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cea:	bf00      	nop
 8002cec:	e00a      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cee:	bf00      	nop
 8002cf0:	e008      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cf2:	bf00      	nop
 8002cf4:	e006      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cf6:	bf00      	nop
 8002cf8:	e004      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cfa:	bf00      	nop
 8002cfc:	e002      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <substatemachine_battery2_maintenance+0x568>
				break;
 8002d02:	bf00      	nop





}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200000b7 	.word	0x200000b7
 8002d0c:	2000025c 	.word	0x2000025c
 8002d10:	20000118 	.word	0x20000118
 8002d14:	200000b8 	.word	0x200000b8
 8002d18:	200000b4 	.word	0x200000b4
 8002d1c:	200000b3 	.word	0x200000b3
 8002d20:	200000ae 	.word	0x200000ae
 8002d24:	200000af 	.word	0x200000af
 8002d28:	200000b0 	.word	0x200000b0
 8002d2c:	20000001 	.word	0x20000001
 8002d30:	200000b9 	.word	0x200000b9
 8002d34:	200002c4 	.word	0x200002c4
 8002d38:	20000264 	.word	0x20000264
 8002d3c:	200000d7 	.word	0x200000d7
 8002d40:	200000ba 	.word	0x200000ba
 8002d44:	200000bb 	.word	0x200000bb
 8002d48:	200000bc 	.word	0x200000bc
 8002d4c:	200000bd 	.word	0x200000bd
 8002d50:	200000bf 	.word	0x200000bf
 8002d54:	200000be 	.word	0x200000be
 8002d58:	200000c0 	.word	0x200000c0
 8002d5c:	200000c1 	.word	0x200000c1
 8002d60:	08009f20 	.word	0x08009f20
 8002d64:	20000000 	.word	0x20000000

08002d68 <Timer_15min>:
extern uint16_t _bat3_counter_var;	//   Variable as a counter
extern bool _bat3_15min_wait_over;


void Timer_15min()
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
	if(_bat1timerfunc==true)
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <Timer_15min+0x80>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00e      	beq.n	8002d92 <Timer_15min+0x2a>
	{
		_bat1_counter_var++;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <Timer_15min+0x84>)
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <Timer_15min+0x84>)
 8002d7e:	801a      	strh	r2, [r3, #0]
		if(_bat1_counter_var==6000)
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <Timer_15min+0x84>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d102      	bne.n	8002d92 <Timer_15min+0x2a>
		{
			_bat1_15min_wait_over = true;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <Timer_15min+0x88>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	701a      	strb	r2, [r3, #0]
		}
	}


	if(_bat2timerfunc==true)
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <Timer_15min+0x8c>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <Timer_15min+0x50>
	{
		_bat2_counter_var++;
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <Timer_15min+0x90>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <Timer_15min+0x90>)
 8002da4:	801a      	strh	r2, [r3, #0]
		if(_bat2_counter_var==6000)
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <Timer_15min+0x90>)
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	f241 7270 	movw	r2, #6000	; 0x1770
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d102      	bne.n	8002db8 <Timer_15min+0x50>
		{
			_bat2_15min_wait_over = true;
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <Timer_15min+0x94>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(_bat3timerfunc==true)
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <Timer_15min+0x98>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00e      	beq.n	8002dde <Timer_15min+0x76>
		{
			_bat3_counter_var++;
 8002dc0:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <Timer_15min+0x9c>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <Timer_15min+0x9c>)
 8002dca:	801a      	strh	r2, [r3, #0]
			if(_bat3_counter_var==6000)
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <Timer_15min+0x9c>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	f241 7270 	movw	r2, #6000	; 0x1770
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d102      	bne.n	8002dde <Timer_15min+0x76>
			{
				_bat3_15min_wait_over = true;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <Timer_15min+0xa0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]





}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	20000090 	.word	0x20000090
 8002dec:	20000092 	.word	0x20000092
 8002df0:	20000091 	.word	0x20000091
 8002df4:	200000ae 	.word	0x200000ae
 8002df8:	200000b0 	.word	0x200000b0
 8002dfc:	200000af 	.word	0x200000af
 8002e00:	200000d8 	.word	0x200000d8
 8002e04:	200000da 	.word	0x200000da
 8002e08:	200000d9 	.word	0x200000d9

08002e0c <read_bat2_asoc>:


extern I2C_HandleTypeDef hi2c2;

int read_bat2_asoc()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
	uint8_t rx_bat2_asoc[1]={0x00};
 8002e12:	2300      	movs	r3, #0
 8002e14:	733b      	strb	r3, [r7, #12]
	uint8_t tx_asoc[1]={0x0E};
 8002e16:	230e      	movs	r3, #14
 8002e18:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_asoc, 1);
 8002e1a:	f107 0208 	add.w	r2, r7, #8
 8002e1e:	2301      	movs	r3, #1
 8002e20:	2116      	movs	r1, #22
 8002e22:	4822      	ldr	r0, [pc, #136]	; (8002eac <read_bat2_asoc+0xa0>)
 8002e24:	f001 fc0a 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8002e28:	2005      	movs	r0, #5
 8002e2a:	f000 ff3d 	bl	8003ca8 <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_bat2_asoc, 1);
 8002e2e:	f107 020c 	add.w	r2, r7, #12
 8002e32:	2301      	movs	r3, #1
 8002e34:	2116      	movs	r1, #22
 8002e36:	481d      	ldr	r0, [pc, #116]	; (8002eac <read_bat2_asoc+0xa0>)
 8002e38:	f001 fc70 	bl	800471c <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	f000 ff33 	bl	8003ca8 <msdelay>
	uint16_t BAT_2_ASOC_Read = rx_bat2_asoc[0];
 8002e42:	7b3b      	ldrb	r3, [r7, #12]
 8002e44:	81fb      	strh	r3, [r7, #14]
	rx_bat2_asoc[0]=0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	733b      	strb	r3, [r7, #12]


	uint8_t tx_voltage[1]={0x09};
 8002e4a:	2309      	movs	r3, #9
 8002e4c:	713b      	strb	r3, [r7, #4]
	uint8_t rx_bat2_volt[2]={0x00,0x00};
 8002e4e:	2300      	movs	r3, #0
 8002e50:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c2, 0x16, tx_voltage, 1);
 8002e52:	1d3a      	adds	r2, r7, #4
 8002e54:	2301      	movs	r3, #1
 8002e56:	2116      	movs	r1, #22
 8002e58:	4814      	ldr	r0, [pc, #80]	; (8002eac <read_bat2_asoc+0xa0>)
 8002e5a:	f001 fbef 	bl	800463c <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8002e5e:	2005      	movs	r0, #5
 8002e60:	f000 ff22 	bl	8003ca8 <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c2, 0x16, rx_bat2_volt, 2);
 8002e64:	463a      	mov	r2, r7
 8002e66:	2302      	movs	r3, #2
 8002e68:	2116      	movs	r1, #22
 8002e6a:	4810      	ldr	r0, [pc, #64]	; (8002eac <read_bat2_asoc+0xa0>)
 8002e6c:	f001 fc56 	bl	800471c <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f000 ff19 	bl	8003ca8 <msdelay>
	BAT2_VOLTAGE_MAINTENANCE = rx_bat2_volt[1];
 8002e76:	787b      	ldrb	r3, [r7, #1]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <read_bat2_asoc+0xa4>)
 8002e7c:	801a      	strh	r2, [r3, #0]
	BAT2_VOLTAGE_MAINTENANCE = BAT2_VOLTAGE_MAINTENANCE << 8;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <read_bat2_asoc+0xa4>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <read_bat2_asoc+0xa4>)
 8002e88:	801a      	strh	r2, [r3, #0]
	BAT2_VOLTAGE_MAINTENANCE = BAT2_VOLTAGE_MAINTENANCE + rx_bat2_volt[0];
 8002e8a:	783b      	ldrb	r3, [r7, #0]
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <read_bat2_asoc+0xa4>)
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <read_bat2_asoc+0xa4>)
 8002e98:	801a      	strh	r2, [r3, #0]
	rx_bat2_volt[0]=0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	703b      	strb	r3, [r7, #0]
	rx_bat2_volt[1]=0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	707b      	strb	r3, [r7, #1]

	return BAT_2_ASOC_Read;
 8002ea2:	89fb      	ldrh	r3, [r7, #14]

}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000210 	.word	0x20000210
 8002eb0:	200002be 	.word	0x200002be

08002eb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ebc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ec0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ecc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ed0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002ed4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00b      	beq.n	8002ef4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002edc:	e000      	b.n	8002ee0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002ede:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002ee0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f9      	beq.n	8002ede <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002eea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002ef4:	687b      	ldr	r3, [r7, #4]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e009      	b.n	8002f2c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	60ba      	str	r2, [r7, #8]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ffc7 	bl	8002eb4 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	dbf1      	blt.n	8002f18 <_write+0x16>
	return len;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f44:	f000 fef1 	bl	8003d2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f48:	f000 f876 	bl	8003038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f4c:	f000 fae0 	bl	8003510 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f50:	f000 f904 	bl	800315c <MX_I2C1_Init>
  MX_TIM3_Init();
 8002f54:	f000 fa10 	bl	8003378 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f58:	f000 fa5c 	bl	8003414 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002f5c:	f000 faa8 	bl	80034b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002f60:	f000 f9bc 	bl	80032dc <MX_TIM2_Init>
  MX_I2C2_Init();
 8002f64:	f000 f93a 	bl	80031dc <MX_I2C2_Init>
  MX_I2C3_Init();
 8002f68:	f000 f978 	bl	800325c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);        // Timer 4 for providing delay
 8002f6c:	4824      	ldr	r0, [pc, #144]	; (8003000 <main+0xc0>)
 8002f6e:	f004 f967 	bl	8007240 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);	   // Timer 3 for waiting purpose in the maintenance case
 8002f72:	4824      	ldr	r0, [pc, #144]	; (8003004 <main+0xc4>)
 8002f74:	f004 f9d4 	bl	8007320 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	   // Timer 2 to update the maintenance use case parameters periodically
 8002f78:	4823      	ldr	r0, [pc, #140]	; (8003008 <main+0xc8>)
 8002f7a:	f004 f9d1 	bl	8007320 <HAL_TIM_Base_Start_IT>



	if(HAL_I2C_IsDeviceReady(&hi2c1,0x16, 5, 10)==HAL_OK)
 8002f7e:	230a      	movs	r3, #10
 8002f80:	2205      	movs	r2, #5
 8002f82:	2116      	movs	r1, #22
 8002f84:	4821      	ldr	r0, [pc, #132]	; (800300c <main+0xcc>)
 8002f86:	f001 fc39 	bl	80047fc <HAL_I2C_IsDeviceReady>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <main+0x5a>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002f90:	2201      	movs	r2, #1
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	481e      	ldr	r0, [pc, #120]	; (8003010 <main+0xd0>)
 8002f96:	f001 faa7 	bl	80044e8 <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c2,0x16, 5, 10)==HAL_OK)
 8002f9a:	230a      	movs	r3, #10
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	2116      	movs	r1, #22
 8002fa0:	481c      	ldr	r0, [pc, #112]	; (8003014 <main+0xd4>)
 8002fa2:	f001 fc2b 	bl	80047fc <HAL_I2C_IsDeviceReady>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <main+0x78>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8002fac:	2201      	movs	r2, #1
 8002fae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fb2:	4817      	ldr	r0, [pc, #92]	; (8003010 <main+0xd0>)
 8002fb4:	f001 fa98 	bl	80044e8 <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c3,0x16, 5, 10)==HAL_OK)
 8002fb8:	230a      	movs	r3, #10
 8002fba:	2205      	movs	r2, #5
 8002fbc:	2116      	movs	r1, #22
 8002fbe:	4816      	ldr	r0, [pc, #88]	; (8003018 <main+0xd8>)
 8002fc0:	f001 fc1c 	bl	80047fc <HAL_I2C_IsDeviceReady>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <main+0x94>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2101      	movs	r1, #1
 8002fce:	4810      	ldr	r0, [pc, #64]	; (8003010 <main+0xd0>)
 8002fd0:	f001 fa8a 	bl	80044e8 <HAL_GPIO_WritePin>
	}




	__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <main+0xdc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <main+0xdc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	601a      	str	r2, [r3, #0]

	BAT1_MAINT_STATE = &bat1_state;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <main+0xe0>)
 8002fe6:	4a0f      	ldr	r2, [pc, #60]	; (8003024 <main+0xe4>)
 8002fe8:	601a      	str	r2, [r3, #0]
	BAT2_MAINT_STATE = &bat2_state;
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <main+0xe8>)
 8002fec:	4a0f      	ldr	r2, [pc, #60]	; (800302c <main+0xec>)
 8002fee:	601a      	str	r2, [r3, #0]
	BAT3_MAINT_STATE = &bat3_state;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <main+0xf0>)
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <main+0xf4>)
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		connect_to_Pi();
 8002ff6:	f7fe fc1f 	bl	8001838 <connect_to_Pi>
//		substatemachine_battery1_maintenance(); // This function Works
		substatemachine_battery2_maintenance(); // This function Works
 8002ffa:	f7ff fbcf 	bl	800279c <substatemachine_battery2_maintenance>
		connect_to_Pi();
 8002ffe:	e7fa      	b.n	8002ff6 <main+0xb6>
 8003000:	20000168 	.word	0x20000168
 8003004:	20000264 	.word	0x20000264
 8003008:	200002c4 	.word	0x200002c4
 800300c:	200001c4 	.word	0x200001c4
 8003010:	40020400 	.word	0x40020400
 8003014:	20000210 	.word	0x20000210
 8003018:	2000011c 	.word	0x2000011c
 800301c:	20000310 	.word	0x20000310
 8003020:	20000260 	.word	0x20000260
 8003024:	20000094 	.word	0x20000094
 8003028:	20000118 	.word	0x20000118
 800302c:	200000b2 	.word	0x200000b2
 8003030:	20000394 	.word	0x20000394
 8003034:	200000dc 	.word	0x200000dc

08003038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b0b4      	sub	sp, #208	; 0xd0
 800303c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800303e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003042:	2230      	movs	r2, #48	; 0x30
 8003044:	2100      	movs	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f005 ff08 	bl	8008e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800304c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800305c:	f107 0308 	add.w	r3, r7, #8
 8003060:	2284      	movs	r2, #132	; 0x84
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f005 fef9 	bl	8008e5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b39      	ldr	r3, [pc, #228]	; (8003150 <SystemClock_Config+0x118>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a38      	ldr	r2, [pc, #224]	; (8003150 <SystemClock_Config+0x118>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <SystemClock_Config+0x118>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <SystemClock_Config+0x11c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <SystemClock_Config+0x11c>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b30      	ldr	r3, [pc, #192]	; (8003154 <SystemClock_Config+0x11c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800309e:	2302      	movs	r3, #2
 80030a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030aa:	2310      	movs	r3, #16
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030bc:	2308      	movs	r3, #8
 80030be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80030c2:	2348      	movs	r3, #72	; 0x48
 80030c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80030ce:	2303      	movs	r3, #3
 80030d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 ffc3 	bl	8006064 <HAL_RCC_OscConfig>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80030e4:	f000 fae2 	bl	80036ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030e8:	230f      	movs	r3, #15
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ee:	2302      	movs	r3, #2
 80030f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003108:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fa4c 	bl	80065ac <HAL_RCC_ClockConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800311a:	f000 fac7 	bl	80036ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <SystemClock_Config+0x120>)
 8003120:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003122:	2300      	movs	r3, #0
 8003124:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003126:	2300      	movs	r3, #0
 8003128:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800312a:	2300      	movs	r3, #0
 800312c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800312e:	2300      	movs	r3, #0
 8003130:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	4618      	mov	r0, r3
 8003138:	f003 fc3a 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8003142:	f000 fab3 	bl	80036ac <Error_Handler>
  }
}
 8003146:	bf00      	nop
 8003148:	37d0      	adds	r7, #208	; 0xd0
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40007000 	.word	0x40007000
 8003158:	0001c080 	.word	0x0001c080

0800315c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003162:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <MX_I2C1_Init+0x78>)
 8003164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <MX_I2C1_Init+0x7c>)
 800316a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <MX_I2C1_Init+0x74>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003174:	2201      	movs	r2, #1
 8003176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <MX_I2C1_Init+0x74>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003184:	4b12      	ldr	r3, [pc, #72]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003186:	2200      	movs	r2, #0
 8003188:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <MX_I2C1_Init+0x74>)
 800318c:	2200      	movs	r2, #0
 800318e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003192:	2200      	movs	r2, #0
 8003194:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003196:	480e      	ldr	r0, [pc, #56]	; (80031d0 <MX_I2C1_Init+0x74>)
 8003198:	f001 f9c0 	bl	800451c <HAL_I2C_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031a2:	f000 fa83 	bl	80036ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031a6:	2100      	movs	r1, #0
 80031a8:	4809      	ldr	r0, [pc, #36]	; (80031d0 <MX_I2C1_Init+0x74>)
 80031aa:	f002 fec3 	bl	8005f34 <HAL_I2CEx_ConfigAnalogFilter>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031b4:	f000 fa7a 	bl	80036ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031b8:	2100      	movs	r1, #0
 80031ba:	4805      	ldr	r0, [pc, #20]	; (80031d0 <MX_I2C1_Init+0x74>)
 80031bc:	f002 ff05 	bl	8005fca <HAL_I2CEx_ConfigDigitalFilter>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031c6:	f000 fa71 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	200001c4 	.word	0x200001c4
 80031d4:	40005400 	.word	0x40005400
 80031d8:	00808cd2 	.word	0x00808cd2

080031dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80031e0:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <MX_I2C2_Init+0x74>)
 80031e2:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <MX_I2C2_Init+0x78>)
 80031e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <MX_I2C2_Init+0x74>)
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <MX_I2C2_Init+0x7c>)
 80031ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <MX_I2C2_Init+0x74>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <MX_I2C2_Init+0x74>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <MX_I2C2_Init+0x74>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <MX_I2C2_Init+0x74>)
 8003200:	2200      	movs	r2, #0
 8003202:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <MX_I2C2_Init+0x74>)
 8003206:	2200      	movs	r2, #0
 8003208:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_I2C2_Init+0x74>)
 800320c:	2200      	movs	r2, #0
 800320e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <MX_I2C2_Init+0x74>)
 8003212:	2200      	movs	r2, #0
 8003214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003216:	480e      	ldr	r0, [pc, #56]	; (8003250 <MX_I2C2_Init+0x74>)
 8003218:	f001 f980 	bl	800451c <HAL_I2C_Init>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003222:	f000 fa43 	bl	80036ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003226:	2100      	movs	r1, #0
 8003228:	4809      	ldr	r0, [pc, #36]	; (8003250 <MX_I2C2_Init+0x74>)
 800322a:	f002 fe83 	bl	8005f34 <HAL_I2CEx_ConfigAnalogFilter>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003234:	f000 fa3a 	bl	80036ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003238:	2100      	movs	r1, #0
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <MX_I2C2_Init+0x74>)
 800323c:	f002 fec5 	bl	8005fca <HAL_I2CEx_ConfigDigitalFilter>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003246:	f000 fa31 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000210 	.word	0x20000210
 8003254:	40005800 	.word	0x40005800
 8003258:	00808cd2 	.word	0x00808cd2

0800325c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <MX_I2C3_Init+0x78>)
 8003264:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00808CD2;
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <MX_I2C3_Init+0x7c>)
 800326a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_I2C3_Init+0x74>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003274:	2201      	movs	r2, #1
 8003276:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <MX_I2C3_Init+0x74>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <MX_I2C3_Init+0x74>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003296:	480e      	ldr	r0, [pc, #56]	; (80032d0 <MX_I2C3_Init+0x74>)
 8003298:	f001 f940 	bl	800451c <HAL_I2C_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80032a2:	f000 fa03 	bl	80036ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032a6:	2100      	movs	r1, #0
 80032a8:	4809      	ldr	r0, [pc, #36]	; (80032d0 <MX_I2C3_Init+0x74>)
 80032aa:	f002 fe43 	bl	8005f34 <HAL_I2CEx_ConfigAnalogFilter>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80032b4:	f000 f9fa 	bl	80036ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80032b8:	2100      	movs	r1, #0
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_I2C3_Init+0x74>)
 80032bc:	f002 fe85 	bl	8005fca <HAL_I2CEx_ConfigDigitalFilter>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80032c6:	f000 f9f1 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2000011c 	.word	0x2000011c
 80032d4:	40005c00 	.word	0x40005c00
 80032d8:	00808cd2 	.word	0x00808cd2

080032dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032e2:	f107 0310 	add.w	r3, r7, #16
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <MX_TIM2_Init+0x98>)
 80032fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003300:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <MX_TIM2_Init+0x98>)
 8003304:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003308:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <MX_TIM2_Init+0x98>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003310:	4b18      	ldr	r3, [pc, #96]	; (8003374 <MX_TIM2_Init+0x98>)
 8003312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003316:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <MX_TIM2_Init+0x98>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <MX_TIM2_Init+0x98>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003324:	4813      	ldr	r0, [pc, #76]	; (8003374 <MX_TIM2_Init+0x98>)
 8003326:	f003 ff33 	bl	8007190 <HAL_TIM_Base_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003330:	f000 f9bc 	bl	80036ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003338:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800333a:	f107 0310 	add.w	r3, r7, #16
 800333e:	4619      	mov	r1, r3
 8003340:	480c      	ldr	r0, [pc, #48]	; (8003374 <MX_TIM2_Init+0x98>)
 8003342:	f004 f9b3 	bl	80076ac <HAL_TIM_ConfigClockSource>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800334c:	f000 f9ae 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	4619      	mov	r1, r3
 800335c:	4805      	ldr	r0, [pc, #20]	; (8003374 <MX_TIM2_Init+0x98>)
 800335e:	f004 fbcd 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003368:	f000 f9a0 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800336c:	bf00      	nop
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	200002c4 	.word	0x200002c4

08003378 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800337e:	f107 0310 	add.w	r3, r7, #16
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003396:	4b1d      	ldr	r3, [pc, #116]	; (800340c <MX_TIM3_Init+0x94>)
 8003398:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <MX_TIM3_Init+0x98>)
 800339a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <MX_TIM3_Init+0x94>)
 800339e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80033a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <MX_TIM3_Init+0x94>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <MX_TIM3_Init+0x94>)
 80033ac:	2263      	movs	r2, #99	; 0x63
 80033ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b0:	4b16      	ldr	r3, [pc, #88]	; (800340c <MX_TIM3_Init+0x94>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <MX_TIM3_Init+0x94>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033bc:	4813      	ldr	r0, [pc, #76]	; (800340c <MX_TIM3_Init+0x94>)
 80033be:	f003 fee7 	bl	8007190 <HAL_TIM_Base_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80033c8:	f000 f970 	bl	80036ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033d2:	f107 0310 	add.w	r3, r7, #16
 80033d6:	4619      	mov	r1, r3
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <MX_TIM3_Init+0x94>)
 80033da:	f004 f967 	bl	80076ac <HAL_TIM_ConfigClockSource>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80033e4:	f000 f962 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033e8:	2300      	movs	r3, #0
 80033ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <MX_TIM3_Init+0x94>)
 80033f6:	f004 fb81 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003400:	f000 f954 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003404:	bf00      	nop
 8003406:	3720      	adds	r7, #32
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000264 	.word	0x20000264
 8003410:	40000400 	.word	0x40000400

08003414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <MX_TIM4_Init+0x98>)
 8003436:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <MX_TIM4_Init+0x94>)
 800343a:	2247      	movs	r2, #71	; 0x47
 800343c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003444:	4b18      	ldr	r3, [pc, #96]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800344a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <MX_TIM4_Init+0x94>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003458:	4813      	ldr	r0, [pc, #76]	; (80034a8 <MX_TIM4_Init+0x94>)
 800345a:	f003 fe99 	bl	8007190 <HAL_TIM_Base_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003464:	f000 f922 	bl	80036ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800346e:	f107 0310 	add.w	r3, r7, #16
 8003472:	4619      	mov	r1, r3
 8003474:	480c      	ldr	r0, [pc, #48]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003476:	f004 f919 	bl	80076ac <HAL_TIM_ConfigClockSource>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003480:	f000 f914 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	; (80034a8 <MX_TIM4_Init+0x94>)
 8003492:	f004 fb33 	bl	8007afc <HAL_TIMEx_MasterConfigSynchronization>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800349c:	f000 f906 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034a0:	bf00      	nop
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000168 	.word	0x20000168
 80034ac:	40000800 	.word	0x40000800

080034b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <MX_USART2_UART_Init+0x5c>)
 80034b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034d6:	220c      	movs	r2, #12
 80034d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_USART2_UART_Init+0x58>)
 80034f4:	f004 fbae 	bl	8007c54 <HAL_UART_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80034fe:	f000 f8d5 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000310 	.word	0x20000310
 800350c:	40004400 	.word	0x40004400

08003510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
 8003524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <MX_GPIO_Init+0x13c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a48      	ldr	r2, [pc, #288]	; (800364c <MX_GPIO_Init+0x13c>)
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b46      	ldr	r3, [pc, #280]	; (800364c <MX_GPIO_Init+0x13c>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <MX_GPIO_Init+0x13c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a42      	ldr	r2, [pc, #264]	; (800364c <MX_GPIO_Init+0x13c>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b40      	ldr	r3, [pc, #256]	; (800364c <MX_GPIO_Init+0x13c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003556:	4b3d      	ldr	r3, [pc, #244]	; (800364c <MX_GPIO_Init+0x13c>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a3c      	ldr	r2, [pc, #240]	; (800364c <MX_GPIO_Init+0x13c>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b3a      	ldr	r3, [pc, #232]	; (800364c <MX_GPIO_Init+0x13c>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800356e:	4b37      	ldr	r3, [pc, #220]	; (800364c <MX_GPIO_Init+0x13c>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a36      	ldr	r2, [pc, #216]	; (800364c <MX_GPIO_Init+0x13c>)
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <MX_GPIO_Init+0x13c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <MX_GPIO_Init+0x13c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <MX_GPIO_Init+0x13c>)
 800358c:	f043 0308 	orr.w	r3, r3, #8
 8003590:	6313      	str	r3, [r2, #48]	; 0x30
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <MX_GPIO_Init+0x13c>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800359e:	2200      	movs	r2, #0
 80035a0:	2160      	movs	r1, #96	; 0x60
 80035a2:	482b      	ldr	r0, [pc, #172]	; (8003650 <MX_GPIO_Init+0x140>)
 80035a4:	f000 ffa0 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80035a8:	2200      	movs	r2, #0
 80035aa:	f247 0181 	movw	r1, #28801	; 0x7081
 80035ae:	4829      	ldr	r0, [pc, #164]	; (8003654 <MX_GPIO_Init+0x144>)
 80035b0:	f000 ff9a 	bl	80044e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035ba:	4827      	ldr	r0, [pc, #156]	; (8003658 <MX_GPIO_Init+0x148>)
 80035bc:	f000 ff94 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035c6:	4825      	ldr	r0, [pc, #148]	; (800365c <MX_GPIO_Init+0x14c>)
 80035c8:	f000 ff8e 	bl	80044e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035cc:	2360      	movs	r3, #96	; 0x60
 80035ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d0:	2301      	movs	r3, #1
 80035d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	481b      	ldr	r0, [pc, #108]	; (8003650 <MX_GPIO_Init+0x140>)
 80035e4:	f000 fdd4 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80035e8:	f247 0381 	movw	r3, #28801	; 0x7081
 80035ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	2300      	movs	r3, #0
 80035f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4814      	ldr	r0, [pc, #80]	; (8003654 <MX_GPIO_Init+0x144>)
 8003602:	f000 fdc5 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800360a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800360c:	2301      	movs	r3, #1
 800360e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	4619      	mov	r1, r3
 800361e:	480e      	ldr	r0, [pc, #56]	; (8003658 <MX_GPIO_Init+0x148>)
 8003620:	f000 fdb6 	bl	8004190 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	4807      	ldr	r0, [pc, #28]	; (800365c <MX_GPIO_Init+0x14c>)
 800363e:	f000 fda7 	bl	8004190 <HAL_GPIO_Init>

}
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023800 	.word	0x40023800
 8003650:	40020800 	.word	0x40020800
 8003654:	40020400 	.word	0x40020400
 8003658:	40020c00 	.word	0x40020c00
 800365c:	40020000 	.word	0x40020000

08003660 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 16-bit TIM3 is used as an interrupt - every 10 ms
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Timer_15min();
 8003670:	f7ff fb7a 	bl	8002d68 <Timer_15min>

	}

	if(htim==&htim2)  // Configured as an interrupt - every 100 ms
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a07      	ldr	r2, [pc, #28]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d105      	bne.n	8003688 <HAL_TIM_PeriodElapsedCallback+0x28>
	{


		update_periodic_flags_during_maintenance_bat1();
 800367c:	f7fc ff94 	bl	80005a8 <update_periodic_flags_during_maintenance_bat1>
		update_periodic_flags_during_maintenance_bat2();
 8003680:	f7fd fa58 	bl	8000b34 <update_periodic_flags_during_maintenance_bat2>
		update_periodic_flags_during_maintenance_bat3();
 8003684:	f7fd faea 	bl	8000c5c <update_periodic_flags_during_maintenance_bat3>

	}
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000264 	.word	0x20000264
 8003694:	200002c4 	.word	0x200002c4

08003698 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	// UNUSED(huart);


	commands_from_pi_to_stm();
 80036a0:	f7fd fe54 	bl	800134c <commands_from_pi_to_stm>


}
 80036a4:	bf00      	nop
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b0:	b672      	cpsid	i
}
 80036b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80036b4:	e7fe      	b.n	80036b4 <Error_Handler+0x8>
	...

080036b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <HAL_MspInit+0x44>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <HAL_MspInit+0x44>)
 80036c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_MspInit+0x44>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d2:	607b      	str	r3, [r7, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_MspInit+0x44>)
 80036d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_MspInit+0x44>)
 80036dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036e0:	6453      	str	r3, [r2, #68]	; 0x44
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_MspInit+0x44>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08e      	sub	sp, #56	; 0x38
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <HAL_I2C_MspInit+0x1d0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d139      	bne.n	8003796 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	4b6c      	ldr	r3, [pc, #432]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a6b      	ldr	r2, [pc, #428]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800373a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003740:	2312      	movs	r3, #18
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003744:	2301      	movs	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	2303      	movs	r3, #3
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374c:	2304      	movs	r3, #4
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003754:	4619      	mov	r1, r3
 8003756:	4860      	ldr	r0, [pc, #384]	; (80038d8 <HAL_I2C_MspInit+0x1d8>)
 8003758:	f000 fd1a 	bl	8004190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800375c:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003762:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003766:	6413      	str	r3, [r2, #64]	; 0x40
 8003768:	4b5a      	ldr	r3, [pc, #360]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	201f      	movs	r0, #31
 800377a:	f000 fc32 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800377e:	201f      	movs	r0, #31
 8003780:	f000 fc4b 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	2100      	movs	r1, #0
 8003788:	2020      	movs	r0, #32
 800378a:	f000 fc2a 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800378e:	2020      	movs	r0, #32
 8003790:	f000 fc43 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003794:	e098      	b.n	80038c8 <HAL_I2C_MspInit+0x1c8>
  else if(hi2c->Instance==I2C2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a50      	ldr	r2, [pc, #320]	; (80038dc <HAL_I2C_MspInit+0x1dc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d138      	bne.n	8003812 <HAL_I2C_MspInit+0x112>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037a0:	4b4c      	ldr	r3, [pc, #304]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4a4b      	ldr	r2, [pc, #300]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037a6:	f043 0320 	orr.w	r3, r3, #32
 80037aa:	6313      	str	r3, [r2, #48]	; 0x30
 80037ac:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b8:	2303      	movs	r3, #3
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037bc:	2312      	movs	r3, #18
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80037c8:	2304      	movs	r3, #4
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d0:	4619      	mov	r1, r3
 80037d2:	4843      	ldr	r0, [pc, #268]	; (80038e0 <HAL_I2C_MspInit+0x1e0>)
 80037d4:	f000 fcdc 	bl	8004190 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
 80037e4:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	2021      	movs	r0, #33	; 0x21
 80037f6:	f000 fbf4 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80037fa:	2021      	movs	r0, #33	; 0x21
 80037fc:	f000 fc0d 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2022      	movs	r0, #34	; 0x22
 8003806:	f000 fbec 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800380a:	2022      	movs	r0, #34	; 0x22
 800380c:	f000 fc05 	bl	800401a <HAL_NVIC_EnableIRQ>
}
 8003810:	e05a      	b.n	80038c8 <HAL_I2C_MspInit+0x1c8>
  else if(hi2c->Instance==I2C3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a33      	ldr	r2, [pc, #204]	; (80038e4 <HAL_I2C_MspInit+0x1e4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d155      	bne.n	80038c8 <HAL_I2C_MspInit+0x1c8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800381c:	4b2d      	ldr	r3, [pc, #180]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	4a2c      	ldr	r2, [pc, #176]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003822:	f043 0304 	orr.w	r3, r3, #4
 8003826:	6313      	str	r3, [r2, #48]	; 0x30
 8003828:	4b2a      	ldr	r3, [pc, #168]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4a26      	ldr	r2, [pc, #152]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6313      	str	r3, [r2, #48]	; 0x30
 8003840:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800384c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003852:	2312      	movs	r3, #18
 8003854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	2303      	movs	r3, #3
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800385e:	2304      	movs	r3, #4
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003866:	4619      	mov	r1, r3
 8003868:	481f      	ldr	r0, [pc, #124]	; (80038e8 <HAL_I2C_MspInit+0x1e8>)
 800386a:	f000 fc91 	bl	8004190 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003874:	2312      	movs	r3, #18
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387c:	2303      	movs	r3, #3
 800387e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003880:	2304      	movs	r3, #4
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003888:	4619      	mov	r1, r3
 800388a:	4818      	ldr	r0, [pc, #96]	; (80038ec <HAL_I2C_MspInit+0x1ec>)
 800388c:	f000 fc80 	bl	8004190 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 8003896:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800389a:	6413      	str	r3, [r2, #64]	; 0x40
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <HAL_I2C_MspInit+0x1d4>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	2100      	movs	r1, #0
 80038ac:	2048      	movs	r0, #72	; 0x48
 80038ae:	f000 fb98 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80038b2:	2048      	movs	r0, #72	; 0x48
 80038b4:	f000 fbb1 	bl	800401a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2049      	movs	r0, #73	; 0x49
 80038be:	f000 fb90 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80038c2:	2049      	movs	r0, #73	; 0x49
 80038c4:	f000 fba9 	bl	800401a <HAL_NVIC_EnableIRQ>
}
 80038c8:	bf00      	nop
 80038ca:	3738      	adds	r7, #56	; 0x38
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40005400 	.word	0x40005400
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020400 	.word	0x40020400
 80038dc:	40005800 	.word	0x40005800
 80038e0:	40021400 	.word	0x40021400
 80038e4:	40005c00 	.word	0x40005c00
 80038e8:	40020800 	.word	0x40020800
 80038ec:	40020000 	.word	0x40020000

080038f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003900:	d114      	bne.n	800392c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b1f      	ldr	r3, [pc, #124]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2102      	movs	r1, #2
 800391e:	201c      	movs	r0, #28
 8003920:	f000 fb5f 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003924:	201c      	movs	r0, #28
 8003926:	f000 fb78 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800392a:	e02a      	b.n	8003982 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_TIM_Base_MspInit+0xa0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d114      	bne.n	8003960 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 800393c:	f043 0302 	orr.w	r3, r3, #2
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2101      	movs	r1, #1
 8003952:	201d      	movs	r0, #29
 8003954:	f000 fb45 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003958:	201d      	movs	r0, #29
 800395a:	f000 fb5e 	bl	800401a <HAL_NVIC_EnableIRQ>
}
 800395e:	e010      	b.n	8003982 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <HAL_TIM_Base_MspInit+0xa4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10b      	bne.n	8003982 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_TIM_Base_MspInit+0x9c>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800

08003998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_UART_MspInit+0x8c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12f      	bne.n	8003a1a <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	4b15      	ldr	r3, [pc, #84]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6313      	str	r3, [r2, #48]	; 0x30
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_UART_MspInit+0x90>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039ea:	230c      	movs	r3, #12
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f6:	2303      	movs	r3, #3
 80039f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039fa:	2307      	movs	r3, #7
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	4619      	mov	r1, r3
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <HAL_UART_MspInit+0x94>)
 8003a06:	f000 fbc3 	bl	8004190 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	2026      	movs	r0, #38	; 0x26
 8003a10:	f000 fae7 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a14:	2026      	movs	r0, #38	; 0x26
 8003a16:	f000 fb00 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a1a:	bf00      	nop
 8003a1c:	3728      	adds	r7, #40	; 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40004400 	.word	0x40004400
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020000 	.word	0x40020000

08003a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <NMI_Handler+0x4>

08003a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <HardFault_Handler+0x4>

08003a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a40:	e7fe      	b.n	8003a40 <MemManage_Handler+0x4>

08003a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a46:	e7fe      	b.n	8003a46 <BusFault_Handler+0x4>

08003a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a4c:	e7fe      	b.n	8003a4c <UsageFault_Handler+0x4>

08003a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a7c:	f000 f992 	bl	8003da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <TIM2_IRQHandler+0x10>)
 8003a8a:	f003 fcf0 	bl	800746e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200002c4 	.word	0x200002c4

08003a98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <TIM3_IRQHandler+0x10>)
 8003a9e:	f003 fce6 	bl	800746e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000264 	.word	0x20000264

08003aac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <I2C1_EV_IRQHandler+0x10>)
 8003ab2:	f000 ffab 	bl	8004a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200001c4 	.word	0x200001c4

08003ac0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <I2C1_ER_IRQHandler+0x10>)
 8003ac6:	f000 ffbb 	bl	8004a40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200001c4 	.word	0x200001c4

08003ad4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <I2C2_EV_IRQHandler+0x10>)
 8003ada:	f000 ff97 	bl	8004a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000210 	.word	0x20000210

08003ae8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <I2C2_ER_IRQHandler+0x10>)
 8003aee:	f000 ffa7 	bl	8004a40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000210 	.word	0x20000210

08003afc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b00:	4804      	ldr	r0, [pc, #16]	; (8003b14 <USART2_IRQHandler+0x18>)
 8003b02:	f004 f98f 	bl	8007e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 14);
 8003b06:	220e      	movs	r2, #14
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <USART2_IRQHandler+0x1c>)
 8003b0a:	4802      	ldr	r0, [pc, #8]	; (8003b14 <USART2_IRQHandler+0x18>)
 8003b0c:	f004 f94c 	bl	8007da8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000310 	.word	0x20000310
 8003b18:	200002b0 	.word	0x200002b0

08003b1c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003b20:	4802      	ldr	r0, [pc, #8]	; (8003b2c <I2C3_EV_IRQHandler+0x10>)
 8003b22:	f000 ff73 	bl	8004a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000011c 	.word	0x2000011c

08003b30 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <I2C3_ER_IRQHandler+0x10>)
 8003b36:	f000 ff83 	bl	8004a40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000011c 	.word	0x2000011c

08003b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b56:	f3af 8000 	nop.w
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	dbf0      	blt.n	8003b56 <_read+0x12>
	}

return len;
 8003b74:	687b      	ldr	r3, [r7, #4]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
	return -1;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <_isatty>:

int _isatty(int file)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
	return 1;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf0:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <_sbrk+0x5c>)
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <_sbrk+0x60>)
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <_sbrk+0x64>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <_sbrk+0x64>)
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <_sbrk+0x68>)
 8003c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <_sbrk+0x64>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d207      	bcs.n	8003c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c18:	f005 f8f6 	bl	8008e08 <__errno>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	220c      	movs	r2, #12
 8003c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c22:	f04f 33ff 	mov.w	r3, #4294967295
 8003c26:	e009      	b.n	8003c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <_sbrk+0x64>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	; (8003c4c <_sbrk+0x64>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <_sbrk+0x64>)
 8003c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20050000 	.word	0x20050000
 8003c48:	00000400 	.word	0x00000400
 8003c4c:	200000f8 	.word	0x200000f8
 8003c50:	200003b0 	.word	0x200003b0

08003c54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <SystemInit+0x20>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <SystemInit+0x20>)
 8003c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <usdelay>:

extern TIM_HandleTypeDef htim4;


void usdelay (uint32_t us)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <usdelay+0x2c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8003c88:	bf00      	nop
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <usdelay+0x2c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d8f9      	bhi.n	8003c8a <usdelay+0x12>
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000168 	.word	0x20000168

08003ca8 <msdelay>:

void msdelay(uint32_t ms)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<ms;i++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e006      	b.n	8003cc4 <msdelay+0x1c>
	{
		usdelay(1000);                  // 1ms delay
 8003cb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cba:	f7ff ffdd 	bl	8003c78 <usdelay>
	for(uint32_t i=0;i<ms;i++)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d3f4      	bcc.n	8003cb6 <msdelay+0xe>
	}
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cdc:	480d      	ldr	r0, [pc, #52]	; (8003d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cde:	490e      	ldr	r1, [pc, #56]	; (8003d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce4:	e002      	b.n	8003cec <LoopCopyDataInit>

08003ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cea:	3304      	adds	r3, #4

08003cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf0:	d3f9      	bcc.n	8003ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cf4:	4c0b      	ldr	r4, [pc, #44]	; (8003d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cf8:	e001      	b.n	8003cfe <LoopFillZerobss>

08003cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cfc:	3204      	adds	r2, #4

08003cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d00:	d3fb      	bcc.n	8003cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d02:	f7ff ffa7 	bl	8003c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d06:	f005 f885 	bl	8008e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d0a:	f7ff f919 	bl	8002f40 <main>
  bx  lr    
 8003d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003d1c:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 8003d20:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003d24:	200003ac 	.word	0x200003ac

08003d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC_IRQHandler>

08003d2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d2e:	2003      	movs	r0, #3
 8003d30:	f000 f94c 	bl	8003fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f000 f805 	bl	8003d44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003d3a:	f7ff fcbd 	bl	80036b8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <HAL_InitTick+0x54>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_InitTick+0x58>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f967 	bl	8004036 <HAL_SYSTICK_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00e      	b.n	8003d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d80a      	bhi.n	8003d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f000 f92f 	bl	8003fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <HAL_InitTick+0x5c>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	20000008 	.word	0x20000008

08003da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_IncTick+0x20>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c
 8003dc8:	20000398 	.word	0x20000398

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_GetTick+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000398 	.word	0x20000398

08003de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff ffee 	bl	8003dcc <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d005      	beq.n	8003e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_Delay+0x44>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e0a:	bf00      	nop
 8003e0c:	f7ff ffde 	bl	8003dcc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d8f7      	bhi.n	8003e0c <HAL_Delay+0x28>
  {
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <__NVIC_SetPriorityGrouping>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <__NVIC_SetPriorityGrouping+0x40>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5a:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <__NVIC_SetPriorityGrouping+0x40>)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	60d3      	str	r3, [r2, #12]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	e000ed00 	.word	0xe000ed00
 8003e70:	05fa0000 	.word	0x05fa0000

08003e74 <__NVIC_GetPriorityGrouping>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <SysTick_Config>:
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f98:	d301      	bcc.n	8003f9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00f      	b.n	8003fbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <SysTick_Config+0x40>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f7ff ff8e 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb8:	2207      	movs	r2, #7
 8003fba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	e000e010 	.word	0xe000e010

08003fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff29 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff4:	f7ff ff3e 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 8003ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff8e 	bl	8003f20 <NVIC_EncodePriority>
 8004004:	4602      	mov	r2, r0
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff5d 	bl	8003ecc <__NVIC_SetPriority>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff31 	bl	8003e90 <__NVIC_EnableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffa2 	bl	8003f88 <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800405c:	f7ff feb6 	bl	8003dcc <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d008      	beq.n	8004080 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e052      	b.n	8004126 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0216 	bic.w	r2, r2, #22
 800408e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800409e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d103      	bne.n	80040b0 <HAL_DMA_Abort+0x62>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d007      	beq.n	80040c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0208 	bic.w	r2, r2, #8
 80040be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d0:	e013      	b.n	80040fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040d2:	f7ff fe7b 	bl	8003dcc <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d90c      	bls.n	80040fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e015      	b.n	8004126 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e4      	bne.n	80040d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	223f      	movs	r2, #63	; 0x3f
 800410e:	409a      	lsls	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d004      	beq.n	800414c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2280      	movs	r2, #128	; 0x80
 8004146:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e00c      	b.n	8004166 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2205      	movs	r2, #5
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004180:	b2db      	uxtb	r3, r3
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041a6:	2300      	movs	r3, #0
 80041a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
 80041ae:	e175      	b.n	800449c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041b0:	2201      	movs	r2, #1
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	f040 8164 	bne.w	8004496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d00b      	beq.n	80041ee <HAL_GPIO_Init+0x5e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d007      	beq.n	80041ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041e2:	2b11      	cmp	r3, #17
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b12      	cmp	r3, #18
 80041ec:	d130      	bne.n	8004250 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	2203      	movs	r2, #3
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43db      	mvns	r3, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	4013      	ands	r3, r2
 8004204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004224:	2201      	movs	r2, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 0201 	and.w	r2, r3, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	2203      	movs	r2, #3
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x100>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b12      	cmp	r3, #18
 800428e:	d123      	bne.n	80042d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	08da      	lsrs	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3208      	adds	r2, #8
 8004298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4013      	ands	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	08da      	lsrs	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3208      	adds	r2, #8
 80042d2:	69b9      	ldr	r1, [r7, #24]
 80042d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4313      	orrs	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80be 	beq.w	8004496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431a:	4b66      	ldr	r3, [pc, #408]	; (80044b4 <HAL_GPIO_Init+0x324>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	4a65      	ldr	r2, [pc, #404]	; (80044b4 <HAL_GPIO_Init+0x324>)
 8004320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_GPIO_Init+0x324>)
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004332:	4a61      	ldr	r2, [pc, #388]	; (80044b8 <HAL_GPIO_Init+0x328>)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	3302      	adds	r3, #2
 800433a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	220f      	movs	r2, #15
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <HAL_GPIO_Init+0x32c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d037      	beq.n	80043ce <HAL_GPIO_Init+0x23e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a57      	ldr	r2, [pc, #348]	; (80044c0 <HAL_GPIO_Init+0x330>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d031      	beq.n	80043ca <HAL_GPIO_Init+0x23a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a56      	ldr	r2, [pc, #344]	; (80044c4 <HAL_GPIO_Init+0x334>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <HAL_GPIO_Init+0x236>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a55      	ldr	r2, [pc, #340]	; (80044c8 <HAL_GPIO_Init+0x338>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d025      	beq.n	80043c2 <HAL_GPIO_Init+0x232>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a54      	ldr	r2, [pc, #336]	; (80044cc <HAL_GPIO_Init+0x33c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <HAL_GPIO_Init+0x22e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a53      	ldr	r2, [pc, #332]	; (80044d0 <HAL_GPIO_Init+0x340>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_Init+0x22a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a52      	ldr	r2, [pc, #328]	; (80044d4 <HAL_GPIO_Init+0x344>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_Init+0x226>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a51      	ldr	r2, [pc, #324]	; (80044d8 <HAL_GPIO_Init+0x348>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_Init+0x222>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a50      	ldr	r2, [pc, #320]	; (80044dc <HAL_GPIO_Init+0x34c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_Init+0x21e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4f      	ldr	r2, [pc, #316]	; (80044e0 <HAL_GPIO_Init+0x350>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_Init+0x21a>
 80043a6:	2309      	movs	r3, #9
 80043a8:	e012      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043aa:	230a      	movs	r3, #10
 80043ac:	e010      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043ae:	2308      	movs	r3, #8
 80043b0:	e00e      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043b2:	2307      	movs	r3, #7
 80043b4:	e00c      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043b6:	2306      	movs	r3, #6
 80043b8:	e00a      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043ba:	2305      	movs	r3, #5
 80043bc:	e008      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043be:	2304      	movs	r3, #4
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043c2:	2303      	movs	r3, #3
 80043c4:	e004      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e002      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <HAL_GPIO_Init+0x240>
 80043ce:	2300      	movs	r3, #0
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f002 0203 	and.w	r2, r2, #3
 80043d6:	0092      	lsls	r2, r2, #2
 80043d8:	4093      	lsls	r3, r2
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043e0:	4935      	ldr	r1, [pc, #212]	; (80044b8 <HAL_GPIO_Init+0x328>)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	089b      	lsrs	r3, r3, #2
 80043e6:	3302      	adds	r3, #2
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_GPIO_Init+0x354>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004412:	4a34      	ldr	r2, [pc, #208]	; (80044e4 <HAL_GPIO_Init+0x354>)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004418:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <HAL_GPIO_Init+0x354>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800443c:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_GPIO_Init+0x354>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004442:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_GPIO_Init+0x354>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800445e:	69ba      	ldr	r2, [r7, #24]
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004466:	4a1f      	ldr	r2, [pc, #124]	; (80044e4 <HAL_GPIO_Init+0x354>)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_GPIO_Init+0x354>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	43db      	mvns	r3, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4013      	ands	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_GPIO_Init+0x354>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3301      	adds	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	f67f ae86 	bls.w	80041b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3724      	adds	r7, #36	; 0x24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40020000 	.word	0x40020000
 80044c0:	40020400 	.word	0x40020400
 80044c4:	40020800 	.word	0x40020800
 80044c8:	40020c00 	.word	0x40020c00
 80044cc:	40021000 	.word	0x40021000
 80044d0:	40021400 	.word	0x40021400
 80044d4:	40021800 	.word	0x40021800
 80044d8:	40021c00 	.word	0x40021c00
 80044dc:	40022000 	.word	0x40022000
 80044e0:	40022400 	.word	0x40022400
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	807b      	strh	r3, [r7, #2]
 80044f4:	4613      	mov	r3, r2
 80044f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044f8:	787b      	ldrb	r3, [r7, #1]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044fe:	887a      	ldrh	r2, [r7, #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004504:	e003      	b.n	800450e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004506:	887b      	ldrh	r3, [r7, #2]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	619a      	str	r2, [r3, #24]
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07f      	b.n	800462e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff f8dc 	bl	8003700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800456c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	e006      	b.n	80045a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d104      	bne.n	80045b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <HAL_I2C_Init+0x11c>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	ea42 0103 	orr.w	r1, r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69d9      	ldr	r1, [r3, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	02008000 	.word	0x02008000

0800463c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	461a      	mov	r2, r3
 8004648:	460b      	mov	r3, r1
 800464a:	817b      	strh	r3, [r7, #10]
 800464c:	4613      	mov	r3, r2
 800464e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d153      	bne.n	8004704 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466a:	d101      	bne.n	8004670 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
 800466e:	e04a      	b.n	8004706 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2C_Master_Transmit_IT+0x42>
 800467a:	2302      	movs	r3, #2
 800467c:	e043      	b.n	8004706 <HAL_I2C_Master_Transmit_IT+0xca>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2221      	movs	r2, #33	; 0x21
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2210      	movs	r2, #16
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	893a      	ldrh	r2, [r7, #8]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4a19      	ldr	r2, [pc, #100]	; (8004710 <HAL_I2C_Master_Transmit_IT+0xd4>)
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a18      	ldr	r2, [pc, #96]	; (8004714 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80046b2:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2bff      	cmp	r3, #255	; 0xff
 80046bc:	d906      	bls.n	80046cc <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80046c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e007      	b.n	80046dc <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80046d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046da:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	8979      	ldrh	r1, [r7, #10]
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <HAL_I2C_Master_Transmit_IT+0xdc>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f001 fb32 	bl	8005d54 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046f8:	2101      	movs	r1, #1
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f001 fb58 	bl	8005db0 <I2C_Enable_IRQ>

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	ffff0000 	.word	0xffff0000
 8004714:	08004bd3 	.word	0x08004bd3
 8004718:	80002000 	.word	0x80002000

0800471c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
 800472c:	4613      	mov	r3, r2
 800472e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	d153      	bne.n	80047e4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474a:	d101      	bne.n	8004750 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	e04a      	b.n	80047e6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_I2C_Master_Receive_IT+0x42>
 800475a:	2302      	movs	r3, #2
 800475c:	e043      	b.n	80047e6 <HAL_I2C_Master_Receive_IT+0xca>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2222      	movs	r2, #34	; 0x22
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2210      	movs	r2, #16
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a18      	ldr	r2, [pc, #96]	; (80047f4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8004792:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2bff      	cmp	r3, #255	; 0xff
 800479c:	d906      	bls.n	80047ac <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80047a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e007      	b.n	80047bc <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80047b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ba:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	8979      	ldrh	r1, [r7, #10]
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_I2C_Master_Receive_IT+0xdc>)
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f001 fac2 	bl	8005d54 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047d8:	2102      	movs	r1, #2
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f001 fae8 	bl	8005db0 <I2C_Enable_IRQ>

    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80047e4:	2302      	movs	r3, #2
  }
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	ffff0000 	.word	0xffff0000
 80047f4:	08004bd3 	.word	0x08004bd3
 80047f8:	80002400 	.word	0x80002400

080047fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	; 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	460b      	mov	r3, r1
 800480a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b20      	cmp	r3, #32
 800481a:	f040 80ef 	bne.w	80049fc <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482c:	d101      	bne.n	8004832 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800482e:	2302      	movs	r3, #2
 8004830:	e0e5      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_I2C_IsDeviceReady+0x44>
 800483c:	2302      	movs	r3, #2
 800483e:	e0de      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_I2C_IsDeviceReady+0x6e>
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_I2C_IsDeviceReady+0x20c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	e004      	b.n	8004874 <HAL_I2C_IsDeviceReady+0x78>
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004870:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800487a:	f7ff faa7 	bl	8003dcc <HAL_GetTick>
 800487e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048ac:	e034      	b.n	8004918 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d01a      	beq.n	80048ec <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7ff fa89 	bl	8003dcc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <HAL_I2C_IsDeviceReady+0xd0>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10f      	bne.n	80048ec <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f043 0220 	orr.w	r2, r3, #32
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e088      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b10      	cmp	r3, #16
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004918:	7ffb      	ldrb	r3, [r7, #31]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d102      	bne.n	8004924 <HAL_I2C_IsDeviceReady+0x128>
 800491e:	7fbb      	ldrb	r3, [r7, #30]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0c4      	beq.n	80048ae <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f003 0310 	and.w	r3, r3, #16
 800492e:	2b10      	cmp	r3, #16
 8004930:	d01a      	beq.n	8004968 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2200      	movs	r2, #0
 800493a:	2120      	movs	r1, #32
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f001 f9c8 	bl	8005cd2 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e058      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2220      	movs	r2, #32
 8004952:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e04a      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	2120      	movs	r1, #32
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f001 f9ad 	bl	8005cd2 <I2C_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e03d      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2210      	movs	r2, #16
 8004988:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2220      	movs	r2, #32
 8004990:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	429a      	cmp	r2, r3
 8004998:	d118      	bne.n	80049cc <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2120      	movs	r1, #32
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f001 f98c 	bl	8005cd2 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01c      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2220      	movs	r2, #32
 80049ca:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	f63f af3d 	bhi.w	8004856 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	f043 0220 	orr.w	r2, r3, #32
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	02002000 	.word	0x02002000

08004a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0a1b      	lsrs	r3, r3, #8
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d010      	beq.n	8004a86 <HAL_I2C_ER_IRQHandler+0x46>
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a74:	f043 0201 	orr.w	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a84:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	0a9b      	lsrs	r3, r3, #10
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d010      	beq.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x74>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	09db      	lsrs	r3, r3, #7
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f043 0208 	orr.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	0a5b      	lsrs	r3, r3, #9
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <HAL_I2C_ER_IRQHandler+0xa2>
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	09db      	lsrs	r3, r3, #7
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad0:	f043 0202 	orr.w	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 030b 	and.w	r3, r3, #11
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 ffb3 	bl	8005a60 <I2C_ITError>
  }
}
 8004afa:	bf00      	nop
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b088      	sub	sp, #32
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <I2C_Master_ISR_IT+0x1e>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e114      	b.n	8004e1a <I2C_Master_ISR_IT+0x248>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <I2C_Master_ISR_IT+0x5a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2210      	movs	r2, #16
 8004c16:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	f043 0204 	orr.w	r2, r3, #4
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f001 f812 	bl	8005c4e <I2C_Flush_TXDR>
 8004c2a:	e0e1      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d023      	beq.n	8004c80 <I2C_Master_ISR_IT+0xae>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01d      	beq.n	8004c80 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0304 	bic.w	r3, r3, #4
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c7e:	e0b7      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01e      	beq.n	8004cca <I2C_Master_ISR_IT+0xf8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d018      	beq.n	8004cca <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc8:	e092      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d05d      	beq.n	8004d92 <I2C_Master_ISR_IT+0x1c0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	099b      	lsrs	r3, r3, #6
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d057      	beq.n	8004d92 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d040      	beq.n	8004d6e <I2C_Master_ISR_IT+0x19c>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d13c      	bne.n	8004d6e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d00:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2bff      	cmp	r3, #255	; 0xff
 8004d0a:	d90e      	bls.n	8004d2a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	22ff      	movs	r2, #255	; 0xff
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	8a79      	ldrh	r1, [r7, #18]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f001 f816 	bl	8005d54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d28:	e032      	b.n	8004d90 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3c:	d00b      	beq.n	8004d56 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	8a79      	ldrh	r1, [r7, #18]
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	9000      	str	r0, [sp, #0]
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f001 f800 	bl	8005d54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d54:	e01c      	b.n	8004d90 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	8a79      	ldrh	r1, [r7, #18]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fff4 	bl	8005d54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d6c:	e010      	b.n	8004d90 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d7c:	d003      	beq.n	8004d86 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fba9 	bl	80054d6 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d84:	e034      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d86:	2140      	movs	r1, #64	; 0x40
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fe69 	bl	8005a60 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d8e:	e02f      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
 8004d90:	e02e      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	099b      	lsrs	r3, r3, #6
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d028      	beq.n	8004df0 <I2C_Master_ISR_IT+0x21e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	099b      	lsrs	r3, r3, #6
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d022      	beq.n	8004df0 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d119      	bne.n	8004de8 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc2:	d015      	beq.n	8004df0 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dcc:	d108      	bne.n	8004de0 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	e007      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 fb78 	bl	80054d6 <I2C_ITMasterSeqCplt>
 8004de6:	e003      	b.n	8004df0 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004de8:	2140      	movs	r1, #64	; 0x40
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fe38 	bl	8005a60 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <I2C_Master_ISR_IT+0x23e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	095b      	lsrs	r3, r3, #5
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fbfe 	bl	800560c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <I2C_Slave_ISR_IT+0x24>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0ec      	b.n	8005020 <I2C_Slave_ISR_IT+0x1fe>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <I2C_Slave_ISR_IT+0x4c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fc99 	bl	80057a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d04d      	beq.n	8004f16 <I2C_Slave_ISR_IT+0xf4>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d047      	beq.n	8004f16 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d128      	bne.n	8004ee2 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b28      	cmp	r3, #40	; 0x28
 8004e9a:	d108      	bne.n	8004eae <I2C_Slave_ISR_IT+0x8c>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea2:	d104      	bne.n	8004eae <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ea4:	6939      	ldr	r1, [r7, #16]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fd84 	bl	80059b4 <I2C_ITListenCplt>
 8004eac:	e032      	b.n	8004f14 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b29      	cmp	r3, #41	; 0x29
 8004eb8:	d10e      	bne.n	8004ed8 <I2C_Slave_ISR_IT+0xb6>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ec0:	d00a      	beq.n	8004ed8 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 febf 	bl	8005c4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fb3d 	bl	8005550 <I2C_ITSlaveSeqCplt>
 8004ed6:	e01d      	b.n	8004f14 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2210      	movs	r2, #16
 8004ede:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004ee0:	e096      	b.n	8005010 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <I2C_Slave_ISR_IT+0xe4>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f02:	f040 8085 	bne.w	8005010 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fda7 	bl	8005a60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004f12:	e07d      	b.n	8005010 <I2C_Slave_ISR_IT+0x1ee>
 8004f14:	e07c      	b.n	8005010 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d030      	beq.n	8004f84 <I2C_Slave_ISR_IT+0x162>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d02a      	beq.n	8004f84 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d018      	beq.n	8004f6a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	3b01      	subs	r3, #1
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d14f      	bne.n	8005014 <I2C_Slave_ISR_IT+0x1f2>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7a:	d04b      	beq.n	8005014 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fae7 	bl	8005550 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004f82:	e047      	b.n	8005014 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	08db      	lsrs	r3, r3, #3
 8004f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004f9c:	6939      	ldr	r1, [r7, #16]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa15 	bl	80053ce <I2C_ITAddrCplt>
 8004fa4:	e037      	b.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	085b      	lsrs	r3, r3, #1
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d031      	beq.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d02b      	beq.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d018      	beq.n	8004ffa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	781a      	ldrb	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ff8:	e00d      	b.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005000:	d002      	beq.n	8005008 <I2C_Slave_ISR_IT+0x1e6>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d106      	bne.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 faa1 	bl	8005550 <I2C_ITSlaveSeqCplt>
 800500e:	e002      	b.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005014:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b088      	sub	sp, #32
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <I2C_Master_ISR_DMA+0x1a>
 800503e:	2302      	movs	r3, #2
 8005040:	e0e1      	b.n	8005206 <I2C_Master_ISR_DMA+0x1de>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d017      	beq.n	8005086 <I2C_Master_ISR_DMA+0x5e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d011      	beq.n	8005086 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2210      	movs	r2, #16
 8005068:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f043 0204 	orr.w	r2, r3, #4
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005076:	2120      	movs	r1, #32
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fe99 	bl	8005db0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fde5 	bl	8005c4e <I2C_Flush_TXDR>
 8005084:	e0ba      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	09db      	lsrs	r3, r3, #7
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d072      	beq.n	8005178 <I2C_Master_ISR_DMA+0x150>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	099b      	lsrs	r3, r3, #6
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d06c      	beq.n	8005178 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d04e      	beq.n	8005156 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2bff      	cmp	r3, #255	; 0xff
 80050ce:	d906      	bls.n	80050de <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	22ff      	movs	r2, #255	; 0xff
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80050d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e010      	b.n	8005100 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f0:	d003      	beq.n	80050fa <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	e002      	b.n	8005100 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80050fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	b2da      	uxtb	r2, r3
 8005106:	8a79      	ldrh	r1, [r7, #18]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fe20 	bl	8005d54 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	; 0x22
 8005130:	d108      	bne.n	8005144 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005140:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005142:	e05b      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005152:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005154:	e052      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005164:	d003      	beq.n	800516e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9b5 	bl	80054d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800516c:	e046      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 fc75 	bl	8005a60 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005176:	e041      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d029      	beq.n	80051d8 <I2C_Master_ISR_DMA+0x1b0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d023      	beq.n	80051d8 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d119      	bne.n	80051ce <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a8:	d027      	beq.n	80051fa <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b2:	d108      	bne.n	80051c6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80051c4:	e019      	b.n	80051fa <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f985 	bl	80054d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80051cc:	e015      	b.n	80051fa <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80051ce:	2140      	movs	r1, #64	; 0x40
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fc45 	bl	8005a60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80051d6:	e010      	b.n	80051fa <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa0a 	bl	800560c <I2C_ITMasterCplt>
 80051f8:	e000      	b.n	80051fc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80051fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b088      	sub	sp, #32
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <I2C_Slave_ISR_DMA+0x24>
 800522e:	2302      	movs	r3, #2
 8005230:	e0c9      	b.n	80053c6 <I2C_Slave_ISR_DMA+0x1b8>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <I2C_Slave_ISR_DMA+0x4c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 faa3 	bl	80057a0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 809a 	beq.w	800539c <I2C_Slave_ISR_DMA+0x18e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8093 	beq.w	800539c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0b9b      	lsrs	r3, r3, #14
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0bdb      	lsrs	r3, r3, #15
 8005286:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800528a:	2b00      	cmp	r3, #0
 800528c:	d07f      	beq.n	800538e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00d      	beq.n	80052b2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0bdb      	lsrs	r3, r3, #15
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0b9b      	lsrs	r3, r3, #14
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d128      	bne.n	800532e <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b28      	cmp	r3, #40	; 0x28
 80052e6:	d108      	bne.n	80052fa <I2C_Slave_ISR_DMA+0xec>
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ee:	d104      	bne.n	80052fa <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fb5e 	bl	80059b4 <I2C_ITListenCplt>
 80052f8:	e048      	b.n	800538c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b29      	cmp	r3, #41	; 0x29
 8005304:	d10e      	bne.n	8005324 <I2C_Slave_ISR_DMA+0x116>
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800530c:	d00a      	beq.n	8005324 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2210      	movs	r2, #16
 8005314:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fc99 	bl	8005c4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f917 	bl	8005550 <I2C_ITSlaveSeqCplt>
 8005322:	e033      	b.n	800538c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2210      	movs	r2, #16
 800532a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800532c:	e034      	b.n	8005398 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2210      	movs	r2, #16
 8005334:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <I2C_Slave_ISR_DMA+0x14a>
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005356:	d11f      	bne.n	8005398 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b21      	cmp	r3, #33	; 0x21
 800535c:	d002      	beq.n	8005364 <I2C_Slave_ISR_DMA+0x156>
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	2b29      	cmp	r3, #41	; 0x29
 8005362:	d103      	bne.n	800536c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2221      	movs	r2, #33	; 0x21
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
 800536a:	e008      	b.n	800537e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	2b22      	cmp	r3, #34	; 0x22
 8005370:	d002      	beq.n	8005378 <I2C_Slave_ISR_DMA+0x16a>
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	2b2a      	cmp	r3, #42	; 0x2a
 8005376:	d102      	bne.n	800537e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2222      	movs	r2, #34	; 0x22
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fb6b 	bl	8005a60 <I2C_ITError>
      if (treatdmanack == 1U)
 800538a:	e005      	b.n	8005398 <I2C_Slave_ISR_DMA+0x18a>
 800538c:	e004      	b.n	8005398 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2210      	movs	r2, #16
 8005394:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005396:	e011      	b.n	80053bc <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8005398:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800539a:	e00f      	b.n	80053bc <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	08db      	lsrs	r3, r3, #3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <I2C_Slave_ISR_DMA+0x1ae>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	08db      	lsrs	r3, r3, #3
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f809 	bl	80053ce <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053e4:	2b28      	cmp	r3, #40	; 0x28
 80053e6:	d16a      	bne.n	80054be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	0c1b      	lsrs	r3, r3, #16
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	b29b      	uxth	r3, r3
 8005402:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005406:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005414:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	b29b      	uxth	r3, r3
 800541e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005422:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d138      	bne.n	800549e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800542c:	897b      	ldrh	r3, [r7, #10]
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	b29a      	uxth	r2, r3
 8005432:	89bb      	ldrh	r3, [r7, #12]
 8005434:	4053      	eors	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	f003 0306 	and.w	r3, r3, #6
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11c      	bne.n	800547a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005440:	897b      	ldrh	r3, [r7, #10]
 8005442:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005452:	2b02      	cmp	r3, #2
 8005454:	d13b      	bne.n	80054ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2208      	movs	r2, #8
 8005462:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800546c:	89ba      	ldrh	r2, [r7, #12]
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fb6d 	bl	8004b52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005478:	e029      	b.n	80054ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800547a:	893b      	ldrh	r3, [r7, #8]
 800547c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800547e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fcf8 	bl	8005e78 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005490:	89ba      	ldrh	r2, [r7, #12]
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff fb5b 	bl	8004b52 <HAL_I2C_AddrCallback>
}
 800549c:	e017      	b.n	80054ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800549e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fce8 	bl	8005e78 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054b0:	89ba      	ldrh	r2, [r7, #12]
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fb4b 	bl	8004b52 <HAL_I2C_AddrCallback>
}
 80054bc:	e007      	b.n	80054ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2208      	movs	r2, #8
 80054c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b21      	cmp	r3, #33	; 0x21
 80054f0:	d115      	bne.n	800551e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2211      	movs	r2, #17
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005506:	2101      	movs	r1, #1
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fcb5 	bl	8005e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff faf3 	bl	8004b02 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800551c:	e014      	b.n	8005548 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2212      	movs	r2, #18
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005532:	2102      	movs	r1, #2
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc9f 	bl	8005e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fae7 	bl	8004b16 <HAL_I2C_MasterRxCpltCallback>
}
 8005548:	bf00      	nop
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	0b9b      	lsrs	r3, r3, #14
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e00d      	b.n	80055a2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	0bdb      	lsrs	r3, r3, #15
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b29      	cmp	r3, #41	; 0x29
 80055ac:	d112      	bne.n	80055d4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2228      	movs	r2, #40	; 0x28
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2221      	movs	r2, #33	; 0x21
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055bc:	2101      	movs	r1, #1
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fc5a 	bl	8005e78 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff faac 	bl	8004b2a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80055d2:	e017      	b.n	8005604 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d111      	bne.n	8005604 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2228      	movs	r2, #40	; 0x28
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2222      	movs	r2, #34	; 0x22
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80055ee:	2102      	movs	r1, #2
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fc41 	bl	8005e78 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fa9d 	bl	8004b3e <HAL_I2C_SlaveRxCpltCallback>
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2220      	movs	r2, #32
 8005620:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b21      	cmp	r3, #33	; 0x21
 800562c:	d107      	bne.n	800563e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800562e:	2101      	movs	r1, #1
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fc21 	bl	8005e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2211      	movs	r2, #17
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
 800563c:	e00c      	b.n	8005658 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b22      	cmp	r3, #34	; 0x22
 8005648:	d106      	bne.n	8005658 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800564a:	2102      	movs	r1, #2
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fc13 	bl	8005e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2212      	movs	r2, #18
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6859      	ldr	r1, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b4d      	ldr	r3, [pc, #308]	; (8005798 <I2C_ITMasterCplt+0x18c>)
 8005664:	400b      	ands	r3, r1
 8005666:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a4a      	ldr	r2, [pc, #296]	; (800579c <I2C_ITMasterCplt+0x190>)
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2210      	movs	r2, #16
 8005686:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b60      	cmp	r3, #96	; 0x60
 800569e:	d10b      	bne.n	80056b8 <I2C_ITMasterCplt+0xac>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80056b6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fac8 	bl	8005c4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056c2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b60      	cmp	r3, #96	; 0x60
 80056ce:	d002      	beq.n	80056d6 <I2C_ITMasterCplt+0xca>
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f9bf 	bl	8005a60 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80056e2:	e054      	b.n	800578e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b21      	cmp	r3, #33	; 0x21
 80056ee:	d124      	bne.n	800573a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d10b      	bne.n	8005722 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fa31 	bl	8004b82 <HAL_I2C_MemTxCpltCallback>
}
 8005720:	e035      	b.n	800578e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff f9e5 	bl	8004b02 <HAL_I2C_MasterTxCpltCallback>
}
 8005738:	e029      	b.n	800578e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b22      	cmp	r3, #34	; 0x22
 8005744:	d123      	bne.n	800578e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d10b      	bne.n	8005778 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fa10 	bl	8004b96 <HAL_I2C_MemRxCpltCallback>
}
 8005776:	e00a      	b.n	800578e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff f9c4 	bl	8004b16 <HAL_I2C_MasterRxCpltCallback>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	fe00e800 	.word	0xfe00e800
 800579c:	ffff0000 	.word	0xffff0000

080057a0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057bc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2220      	movs	r2, #32
 80057c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b21      	cmp	r3, #33	; 0x21
 80057ca:	d002      	beq.n	80057d2 <I2C_ITSlaveCplt+0x32>
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b29      	cmp	r3, #41	; 0x29
 80057d0:	d108      	bne.n	80057e4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80057d2:	f248 0101 	movw	r1, #32769	; 0x8001
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb4e 	bl	8005e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	631a      	str	r2, [r3, #48]	; 0x30
 80057e2:	e00d      	b.n	8005800 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b22      	cmp	r3, #34	; 0x22
 80057e8:	d002      	beq.n	80057f0 <I2C_ITSlaveCplt+0x50>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b2a      	cmp	r3, #42	; 0x2a
 80057ee:	d107      	bne.n	8005800 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80057f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fb3f 	bl	8005e78 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2222      	movs	r2, #34	; 0x22
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800580e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6859      	ldr	r1, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b64      	ldr	r3, [pc, #400]	; (80059ac <I2C_ITSlaveCplt+0x20c>)
 800581c:	400b      	ands	r3, r1
 800581e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa14 	bl	8005c4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	0b9b      	lsrs	r3, r3, #14
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d013      	beq.n	800585a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005840:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b29a      	uxth	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005858:	e018      	b.n	800588c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	0bdb      	lsrs	r3, r3, #15
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d012      	beq.n	800588c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005874:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d006      	beq.n	800588c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0304 	bic.w	r3, r3, #4
 800589e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00c      	beq.n	80058da <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	f043 0204 	orr.w	r2, r3, #4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	2b00      	cmp	r3, #0
 8005904:	d010      	beq.n	8005928 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8a7 	bl	8005a60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b28      	cmp	r3, #40	; 0x28
 800591c:	d141      	bne.n	80059a2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800591e:	6979      	ldr	r1, [r7, #20]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f847 	bl	80059b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005926:	e03c      	b.n	80059a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005930:	d014      	beq.n	800595c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fe0c 	bl	8005550 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a1d      	ldr	r2, [pc, #116]	; (80059b0 <I2C_ITSlaveCplt+0x210>)
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff f90a 	bl	8004b6e <HAL_I2C_ListenCpltCallback>
}
 800595a:	e022      	b.n	80059a2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b22      	cmp	r3, #34	; 0x22
 8005966:	d10e      	bne.n	8005986 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff f8dd 	bl	8004b3e <HAL_I2C_SlaveRxCpltCallback>
}
 8005984:	e00d      	b.n	80059a2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff f8c4 	bl	8004b2a <HAL_I2C_SlaveTxCpltCallback>
}
 80059a2:	bf00      	nop
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	fe00e800 	.word	0xfe00e800
 80059b0:	ffff0000 	.word	0xffff0000

080059b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <I2C_ITListenCplt+0xa8>)
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d022      	beq.n	8005a32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f043 0204 	orr.w	r2, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005a32:	f248 0103 	movw	r1, #32771	; 0x8003
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa1e 	bl	8005e78 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2210      	movs	r2, #16
 8005a42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff f88e 	bl	8004b6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	ffff0000 	.word	0xffff0000

08005a60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a5d      	ldr	r2, [pc, #372]	; (8005bf4 <I2C_ITError+0x194>)
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	2b28      	cmp	r3, #40	; 0x28
 8005a96:	d005      	beq.n	8005aa4 <I2C_ITError+0x44>
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b29      	cmp	r3, #41	; 0x29
 8005a9c:	d002      	beq.n	8005aa4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa2:	d10b      	bne.n	8005abc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005aa4:	2103      	movs	r1, #3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f9e6 	bl	8005e78 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2228      	movs	r2, #40	; 0x28
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a50      	ldr	r2, [pc, #320]	; (8005bf8 <I2C_ITError+0x198>)
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8005aba:	e011      	b.n	8005ae0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005abc:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9d9 	bl	8005e78 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b60      	cmp	r3, #96	; 0x60
 8005ad0:	d003      	beq.n	8005ada <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d039      	beq.n	8005b62 <I2C_ITError+0x102>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b11      	cmp	r3, #17
 8005af2:	d002      	beq.n	8005afa <I2C_ITError+0x9a>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b21      	cmp	r3, #33	; 0x21
 8005af8:	d133      	bne.n	8005b62 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b08:	d107      	bne.n	8005b1a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fb27 	bl	8004172 <HAL_DMA_GetState>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d017      	beq.n	8005b5a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	4a33      	ldr	r2, [pc, #204]	; (8005bfc <I2C_ITError+0x19c>)
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe faf5 	bl	800412e <HAL_DMA_Abort_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d04d      	beq.n	8005be6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b58:	e045      	b.n	8005be6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f850 	bl	8005c00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b60:	e041      	b.n	8005be6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d039      	beq.n	8005bde <I2C_ITError+0x17e>
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b12      	cmp	r3, #18
 8005b6e:	d002      	beq.n	8005b76 <I2C_ITError+0x116>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b22      	cmp	r3, #34	; 0x22
 8005b74:	d133      	bne.n	8005bde <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b84:	d107      	bne.n	8005b96 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fae9 	bl	8004172 <HAL_DMA_GetState>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d017      	beq.n	8005bd6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <I2C_ITError+0x19c>)
 8005bac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fab7 	bl	800412e <HAL_DMA_Abort_IT>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d011      	beq.n	8005bea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bd4:	e009      	b.n	8005bea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f812 	bl	8005c00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bdc:	e005      	b.n	8005bea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f80e 	bl	8005c00 <I2C_TreatErrorCallback>
  }
}
 8005be4:	e002      	b.n	8005bec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bea:	bf00      	nop
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	ffff0000 	.word	0xffff0000
 8005bf8:	08004e23 	.word	0x08004e23
 8005bfc:	08005c97 	.word	0x08005c97

08005c00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b60      	cmp	r3, #96	; 0x60
 8005c12:	d10e      	bne.n	8005c32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fe ffc7 	bl	8004bbe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c30:	e009      	b.n	8005c46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fe ffb2 	bl	8004baa <HAL_I2C_ErrorCallback>
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d103      	bne.n	8005c6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d007      	beq.n	8005c8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	619a      	str	r2, [r3, #24]
  }
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff ff9b 	bl	8005c00 <I2C_TreatErrorCallback>
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce2:	e022      	b.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	d01e      	beq.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fe f86e 	bl	8003dcc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d113      	bne.n	8005d2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e00f      	b.n	8005d4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	bf0c      	ite	eq
 8005d3a:	2301      	moveq	r3, #1
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	461a      	mov	r2, r3
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d0cd      	beq.n	8005ce4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	607b      	str	r3, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	4613      	mov	r3, r2
 8005d64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	0d5b      	lsrs	r3, r3, #21
 8005d70:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005d74:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <I2C_TransferConfig+0x58>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	43db      	mvns	r3, r3
 8005d7a:	ea02 0103 	and.w	r1, r2, r3
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d84:	7a7b      	ldrb	r3, [r7, #9]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	431a      	orrs	r2, r3
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	431a      	orrs	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005d9e:	bf00      	nop
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	03ff63ff 	.word	0x03ff63ff

08005db0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	4a2a      	ldr	r2, [pc, #168]	; (8005e70 <I2C_Enable_IRQ+0xc0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005dce:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <I2C_Enable_IRQ+0xc4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d11d      	bne.n	8005e10 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005dd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da03      	bge.n	8005de4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005de2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005de4:	887b      	ldrh	r3, [r7, #2]
 8005de6:	2b10      	cmp	r3, #16
 8005de8:	d103      	bne.n	8005df2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005df0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005df2:	887b      	ldrh	r3, [r7, #2]
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d103      	bne.n	8005e00 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e00:	887b      	ldrh	r3, [r7, #2]
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d125      	bne.n	8005e52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005e0e:	e020      	b.n	8005e52 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da03      	bge.n	8005e20 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005e1e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005e30:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005e32:	887b      	ldrh	r3, [r7, #2]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005e42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005e44:	887b      	ldrh	r3, [r7, #2]
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	d103      	bne.n	8005e52 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f043 0320 	orr.w	r3, r3, #32
 8005e50:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6819      	ldr	r1, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	601a      	str	r2, [r3, #0]
}
 8005e62:	bf00      	nop
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	08005029 	.word	0x08005029
 8005e74:	0800520f 	.word	0x0800520f

08005e78 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e88:	887b      	ldrh	r3, [r7, #2]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005e98:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ea6:	2b28      	cmp	r3, #40	; 0x28
 8005ea8:	d003      	beq.n	8005eb2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005eb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005eb2:	887b      	ldrh	r3, [r7, #2]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00f      	beq.n	8005edc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005ec2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ed0:	2b28      	cmp	r3, #40	; 0x28
 8005ed2:	d003      	beq.n	8005edc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005eda:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da03      	bge.n	8005eec <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005eea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005eec:	887b      	ldrh	r3, [r7, #2]
 8005eee:	2b10      	cmp	r3, #16
 8005ef0:	d103      	bne.n	8005efa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005ef8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005efa:	887b      	ldrh	r3, [r7, #2]
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d103      	bne.n	8005f08 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f043 0320 	orr.w	r3, r3, #32
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d103      	bne.n	8005f16 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6819      	ldr	r1, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	43da      	mvns	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	400a      	ands	r2, r1
 8005f26:	601a      	str	r2, [r3, #0]
}
 8005f28:	bf00      	nop
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b20      	cmp	r3, #32
 8005f48:	d138      	bne.n	8005fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e032      	b.n	8005fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	; 0x24
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6819      	ldr	r1, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d139      	bne.n	8006054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e033      	b.n	8006056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2224      	movs	r2, #36	; 0x24
 8005ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0201 	bic.w	r2, r2, #1
 800600c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800601c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2220      	movs	r2, #32
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	e000      	b.n	8006056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800606c:	2300      	movs	r3, #0
 800606e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e291      	b.n	800659e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8087 	beq.w	8006196 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006088:	4b96      	ldr	r3, [pc, #600]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f003 030c 	and.w	r3, r3, #12
 8006090:	2b04      	cmp	r3, #4
 8006092:	d00c      	beq.n	80060ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006094:	4b93      	ldr	r3, [pc, #588]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b08      	cmp	r3, #8
 800609e:	d112      	bne.n	80060c6 <HAL_RCC_OscConfig+0x62>
 80060a0:	4b90      	ldr	r3, [pc, #576]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ac:	d10b      	bne.n	80060c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ae:	4b8d      	ldr	r3, [pc, #564]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d06c      	beq.n	8006194 <HAL_RCC_OscConfig+0x130>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d168      	bne.n	8006194 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e26b      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ce:	d106      	bne.n	80060de <HAL_RCC_OscConfig+0x7a>
 80060d0:	4b84      	ldr	r3, [pc, #528]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a83      	ldr	r2, [pc, #524]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e02e      	b.n	800613c <HAL_RCC_OscConfig+0xd8>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10c      	bne.n	8006100 <HAL_RCC_OscConfig+0x9c>
 80060e6:	4b7f      	ldr	r3, [pc, #508]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a7e      	ldr	r2, [pc, #504]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	4b7c      	ldr	r3, [pc, #496]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a7b      	ldr	r2, [pc, #492]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80060f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e01d      	b.n	800613c <HAL_RCC_OscConfig+0xd8>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006108:	d10c      	bne.n	8006124 <HAL_RCC_OscConfig+0xc0>
 800610a:	4b76      	ldr	r3, [pc, #472]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a75      	ldr	r2, [pc, #468]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	4b73      	ldr	r3, [pc, #460]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a72      	ldr	r2, [pc, #456]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800611c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	e00b      	b.n	800613c <HAL_RCC_OscConfig+0xd8>
 8006124:	4b6f      	ldr	r3, [pc, #444]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a6e      	ldr	r2, [pc, #440]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800612a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b6c      	ldr	r3, [pc, #432]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800613a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d013      	beq.n	800616c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006144:	f7fd fe42 	bl	8003dcc <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800614c:	f7fd fe3e 	bl	8003dcc <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	; 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e21f      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615e:	4b61      	ldr	r3, [pc, #388]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCC_OscConfig+0xe8>
 800616a:	e014      	b.n	8006196 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fd fe2e 	bl	8003dcc <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006174:	f7fd fe2a 	bl	8003dcc <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b64      	cmp	r3, #100	; 0x64
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e20b      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006186:	4b57      	ldr	r3, [pc, #348]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x110>
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d069      	beq.n	8006276 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061a2:	4b50      	ldr	r3, [pc, #320]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 030c 	and.w	r3, r3, #12
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00b      	beq.n	80061c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ae:	4b4d      	ldr	r3, [pc, #308]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 030c 	and.w	r3, r3, #12
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d11c      	bne.n	80061f4 <HAL_RCC_OscConfig+0x190>
 80061ba:	4b4a      	ldr	r3, [pc, #296]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d116      	bne.n	80061f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061c6:	4b47      	ldr	r3, [pc, #284]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_RCC_OscConfig+0x17a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d001      	beq.n	80061de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e1df      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061de:	4b41      	ldr	r3, [pc, #260]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	493d      	ldr	r1, [pc, #244]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061f2:	e040      	b.n	8006276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d023      	beq.n	8006244 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061fc:	4b39      	ldr	r3, [pc, #228]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a38      	ldr	r2, [pc, #224]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006208:	f7fd fde0 	bl	8003dcc <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006210:	f7fd fddc 	bl	8003dcc <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e1bd      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0f0      	beq.n	8006210 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	4b2d      	ldr	r3, [pc, #180]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4929      	ldr	r1, [pc, #164]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
 8006242:	e018      	b.n	8006276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006244:	4b27      	ldr	r3, [pc, #156]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fd fdbc 	bl	8003dcc <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006258:	f7fd fdb8 	bl	8003dcc <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e199      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626a:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d038      	beq.n	80062f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d019      	beq.n	80062be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800628a:	4b16      	ldr	r3, [pc, #88]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 800628c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628e:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006296:	f7fd fd99 	bl	8003dcc <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800629c:	e008      	b.n	80062b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800629e:	f7fd fd95 	bl	8003dcc <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d901      	bls.n	80062b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e176      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80062b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0f0      	beq.n	800629e <HAL_RCC_OscConfig+0x23a>
 80062bc:	e01a      	b.n	80062f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80062c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <HAL_RCC_OscConfig+0x280>)
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ca:	f7fd fd7f 	bl	8003dcc <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d2:	f7fd fd7b 	bl	8003dcc <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d903      	bls.n	80062e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e15c      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
 80062e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062e8:	4b91      	ldr	r3, [pc, #580]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80062ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ee      	bne.n	80062d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 80a4 	beq.w	800644a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006302:	4b8b      	ldr	r3, [pc, #556]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10d      	bne.n	800632a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800630e:	4b88      	ldr	r3, [pc, #544]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	4a87      	ldr	r2, [pc, #540]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006318:	6413      	str	r3, [r2, #64]	; 0x40
 800631a:	4b85      	ldr	r3, [pc, #532]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800632a:	4b82      	ldr	r3, [pc, #520]	; (8006534 <HAL_RCC_OscConfig+0x4d0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d118      	bne.n	8006368 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006336:	4b7f      	ldr	r3, [pc, #508]	; (8006534 <HAL_RCC_OscConfig+0x4d0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a7e      	ldr	r2, [pc, #504]	; (8006534 <HAL_RCC_OscConfig+0x4d0>)
 800633c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006342:	f7fd fd43 	bl	8003dcc <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634a:	f7fd fd3f 	bl	8003dcc <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b64      	cmp	r3, #100	; 0x64
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e120      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800635c:	4b75      	ldr	r3, [pc, #468]	; (8006534 <HAL_RCC_OscConfig+0x4d0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d106      	bne.n	800637e <HAL_RCC_OscConfig+0x31a>
 8006370:	4b6f      	ldr	r3, [pc, #444]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	4a6e      	ldr	r2, [pc, #440]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	6713      	str	r3, [r2, #112]	; 0x70
 800637c:	e02d      	b.n	80063da <HAL_RCC_OscConfig+0x376>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x33c>
 8006386:	4b6a      	ldr	r3, [pc, #424]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	4a69      	ldr	r2, [pc, #420]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	6713      	str	r3, [r2, #112]	; 0x70
 8006392:	4b67      	ldr	r3, [pc, #412]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	4a66      	ldr	r2, [pc, #408]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006398:	f023 0304 	bic.w	r3, r3, #4
 800639c:	6713      	str	r3, [r2, #112]	; 0x70
 800639e:	e01c      	b.n	80063da <HAL_RCC_OscConfig+0x376>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d10c      	bne.n	80063c2 <HAL_RCC_OscConfig+0x35e>
 80063a8:	4b61      	ldr	r3, [pc, #388]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ac:	4a60      	ldr	r2, [pc, #384]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	6713      	str	r3, [r2, #112]	; 0x70
 80063b4:	4b5e      	ldr	r3, [pc, #376]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b8:	4a5d      	ldr	r2, [pc, #372]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6713      	str	r3, [r2, #112]	; 0x70
 80063c0:	e00b      	b.n	80063da <HAL_RCC_OscConfig+0x376>
 80063c2:	4b5b      	ldr	r3, [pc, #364]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c6:	4a5a      	ldr	r2, [pc, #360]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	6713      	str	r3, [r2, #112]	; 0x70
 80063ce:	4b58      	ldr	r3, [pc, #352]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	4a57      	ldr	r2, [pc, #348]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d015      	beq.n	800640e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e2:	f7fd fcf3 	bl	8003dcc <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063e8:	e00a      	b.n	8006400 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ea:	f7fd fcef 	bl	8003dcc <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e0ce      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ee      	beq.n	80063ea <HAL_RCC_OscConfig+0x386>
 800640c:	e014      	b.n	8006438 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640e:	f7fd fcdd 	bl	8003dcc <HAL_GetTick>
 8006412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006414:	e00a      	b.n	800642c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006416:	f7fd fcd9 	bl	8003dcc <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	f241 3288 	movw	r2, #5000	; 0x1388
 8006424:	4293      	cmp	r3, r2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e0b8      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1ee      	bne.n	8006416 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d105      	bne.n	800644a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800643e:	4b3c      	ldr	r3, [pc, #240]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	4a3b      	ldr	r2, [pc, #236]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80a4 	beq.w	800659c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006454:	4b36      	ldr	r3, [pc, #216]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b08      	cmp	r3, #8
 800645e:	d06b      	beq.n	8006538 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d149      	bne.n	80064fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006468:	4b31      	ldr	r3, [pc, #196]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a30      	ldr	r2, [pc, #192]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 800646e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fd fcaa 	bl	8003dcc <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647c:	f7fd fca6 	bl	8003dcc <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e087      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800648e:	4b28      	ldr	r3, [pc, #160]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f0      	bne.n	800647c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	019b      	lsls	r3, r3, #6
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	3b01      	subs	r3, #1
 80064b4:	041b      	lsls	r3, r3, #16
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	4313      	orrs	r3, r2
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80064c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064c8:	4b19      	ldr	r3, [pc, #100]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a18      	ldr	r2, [pc, #96]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80064ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d4:	f7fd fc7a 	bl	8003dcc <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fd fc76 	bl	8003dcc <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e057      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0f0      	beq.n	80064dc <HAL_RCC_OscConfig+0x478>
 80064fa:	e04f      	b.n	800659c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064fc:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fd fc60 	bl	8003dcc <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006510:	f7fd fc5c 	bl	8003dcc <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e03d      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006522:	4b03      	ldr	r3, [pc, #12]	; (8006530 <HAL_RCC_OscConfig+0x4cc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x4ac>
 800652e:	e035      	b.n	800659c <HAL_RCC_OscConfig+0x538>
 8006530:	40023800 	.word	0x40023800
 8006534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006538:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <HAL_RCC_OscConfig+0x544>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d028      	beq.n	8006598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006550:	429a      	cmp	r2, r3
 8006552:	d121      	bne.n	8006598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d11a      	bne.n	8006598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006568:	4013      	ands	r3, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800656e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	3b01      	subs	r3, #1
 8006582:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006584:	429a      	cmp	r2, r3
 8006586:	d107      	bne.n	8006598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006594:	429a      	cmp	r2, r3
 8006596:	d001      	beq.n	800659c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800

080065ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0d0      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c4:	4b6a      	ldr	r3, [pc, #424]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d910      	bls.n	80065f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	4b67      	ldr	r3, [pc, #412]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 020f 	bic.w	r2, r3, #15
 80065da:	4965      	ldr	r1, [pc, #404]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	4313      	orrs	r3, r2
 80065e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e2:	4b63      	ldr	r3, [pc, #396]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 030f 	and.w	r3, r3, #15
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d001      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e0b8      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d020      	beq.n	8006642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800660c:	4b59      	ldr	r3, [pc, #356]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4a58      	ldr	r2, [pc, #352]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006624:	4b53      	ldr	r3, [pc, #332]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	4a52      	ldr	r2, [pc, #328]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800662a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800662e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006630:	4b50      	ldr	r3, [pc, #320]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	494d      	ldr	r1, [pc, #308]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800663e:	4313      	orrs	r3, r2
 8006640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d040      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d107      	bne.n	8006666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b47      	ldr	r3, [pc, #284]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d115      	bne.n	800668e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e07f      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d107      	bne.n	800667e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800666e:	4b41      	ldr	r3, [pc, #260]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e073      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800667e:	4b3d      	ldr	r3, [pc, #244]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e06b      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800668e:	4b39      	ldr	r3, [pc, #228]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f023 0203 	bic.w	r2, r3, #3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4936      	ldr	r1, [pc, #216]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800669c:	4313      	orrs	r3, r2
 800669e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a0:	f7fd fb94 	bl	8003dcc <HAL_GetTick>
 80066a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066a6:	e00a      	b.n	80066be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a8:	f7fd fb90 	bl	8003dcc <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e053      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066be:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 020c 	and.w	r2, r3, #12
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d1eb      	bne.n	80066a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d0:	4b27      	ldr	r3, [pc, #156]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d210      	bcs.n	8006700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f023 020f 	bic.w	r2, r3, #15
 80066e6:	4922      	ldr	r1, [pc, #136]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	4b20      	ldr	r3, [pc, #128]	; (8006770 <HAL_RCC_ClockConfig+0x1c4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d001      	beq.n	8006700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e032      	b.n	8006766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4916      	ldr	r1, [pc, #88]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	490e      	ldr	r1, [pc, #56]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800673e:	f000 f821 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 8006742:	4602      	mov	r2, r0
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_RCC_ClockConfig+0x1c8>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	091b      	lsrs	r3, r3, #4
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	490a      	ldr	r1, [pc, #40]	; (8006778 <HAL_RCC_ClockConfig+0x1cc>)
 8006750:	5ccb      	ldrb	r3, [r1, r3]
 8006752:	fa22 f303 	lsr.w	r3, r2, r3
 8006756:	4a09      	ldr	r2, [pc, #36]	; (800677c <HAL_RCC_ClockConfig+0x1d0>)
 8006758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800675a:	4b09      	ldr	r3, [pc, #36]	; (8006780 <HAL_RCC_ClockConfig+0x1d4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fd faf0 	bl	8003d44 <HAL_InitTick>

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40023c00 	.word	0x40023c00
 8006774:	40023800 	.word	0x40023800
 8006778:	08009f34 	.word	0x08009f34
 800677c:	20000004 	.word	0x20000004
 8006780:	20000008 	.word	0x20000008

08006784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800679c:	4b67      	ldr	r3, [pc, #412]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 030c 	and.w	r3, r3, #12
 80067a4:	2b08      	cmp	r3, #8
 80067a6:	d00d      	beq.n	80067c4 <HAL_RCC_GetSysClockFreq+0x40>
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	f200 80bd 	bhi.w	8006928 <HAL_RCC_GetSysClockFreq+0x1a4>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x34>
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d003      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x3a>
 80067b6:	e0b7      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067b8:	4b61      	ldr	r3, [pc, #388]	; (8006940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80067ba:	60bb      	str	r3, [r7, #8]
      break;
 80067bc:	e0b7      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067be:	4b61      	ldr	r3, [pc, #388]	; (8006944 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80067c0:	60bb      	str	r3, [r7, #8]
      break;
 80067c2:	e0b4      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067c4:	4b5d      	ldr	r3, [pc, #372]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ce:	4b5b      	ldr	r3, [pc, #364]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04d      	beq.n	8006876 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067da:	4b58      	ldr	r3, [pc, #352]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	099b      	lsrs	r3, r3, #6
 80067e0:	461a      	mov	r2, r3
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067ea:	f04f 0100 	mov.w	r1, #0
 80067ee:	ea02 0800 	and.w	r8, r2, r0
 80067f2:	ea03 0901 	and.w	r9, r3, r1
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	f04f 0300 	mov.w	r3, #0
 8006802:	014b      	lsls	r3, r1, #5
 8006804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006808:	0142      	lsls	r2, r0, #5
 800680a:	4610      	mov	r0, r2
 800680c:	4619      	mov	r1, r3
 800680e:	ebb0 0008 	subs.w	r0, r0, r8
 8006812:	eb61 0109 	sbc.w	r1, r1, r9
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	018b      	lsls	r3, r1, #6
 8006820:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006824:	0182      	lsls	r2, r0, #6
 8006826:	1a12      	subs	r2, r2, r0
 8006828:	eb63 0301 	sbc.w	r3, r3, r1
 800682c:	f04f 0000 	mov.w	r0, #0
 8006830:	f04f 0100 	mov.w	r1, #0
 8006834:	00d9      	lsls	r1, r3, #3
 8006836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800683a:	00d0      	lsls	r0, r2, #3
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	eb12 0208 	adds.w	r2, r2, r8
 8006844:	eb43 0309 	adc.w	r3, r3, r9
 8006848:	f04f 0000 	mov.w	r0, #0
 800684c:	f04f 0100 	mov.w	r1, #0
 8006850:	0259      	lsls	r1, r3, #9
 8006852:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006856:	0250      	lsls	r0, r2, #9
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4610      	mov	r0, r2
 800685e:	4619      	mov	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	461a      	mov	r2, r3
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	f7f9 fd22 	bl	80002b0 <__aeabi_uldivmod>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4613      	mov	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	e04a      	b.n	800690c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006876:	4b31      	ldr	r3, [pc, #196]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	461a      	mov	r2, r3
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006886:	f04f 0100 	mov.w	r1, #0
 800688a:	ea02 0400 	and.w	r4, r2, r0
 800688e:	ea03 0501 	and.w	r5, r3, r1
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	014b      	lsls	r3, r1, #5
 80068a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068a4:	0142      	lsls	r2, r0, #5
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	1b00      	subs	r0, r0, r4
 80068ac:	eb61 0105 	sbc.w	r1, r1, r5
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	018b      	lsls	r3, r1, #6
 80068ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068be:	0182      	lsls	r2, r0, #6
 80068c0:	1a12      	subs	r2, r2, r0
 80068c2:	eb63 0301 	sbc.w	r3, r3, r1
 80068c6:	f04f 0000 	mov.w	r0, #0
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	00d9      	lsls	r1, r3, #3
 80068d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068d4:	00d0      	lsls	r0, r2, #3
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	1912      	adds	r2, r2, r4
 80068dc:	eb45 0303 	adc.w	r3, r5, r3
 80068e0:	f04f 0000 	mov.w	r0, #0
 80068e4:	f04f 0100 	mov.w	r1, #0
 80068e8:	0299      	lsls	r1, r3, #10
 80068ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068ee:	0290      	lsls	r0, r2, #10
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	461a      	mov	r2, r3
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	f7f9 fcd6 	bl	80002b0 <__aeabi_uldivmod>
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4613      	mov	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	3301      	adds	r3, #1
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	fbb2 f3f3 	udiv	r3, r2, r3
 8006924:	60bb      	str	r3, [r7, #8]
      break;
 8006926:	e002      	b.n	800692e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006928:	4b05      	ldr	r3, [pc, #20]	; (8006940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800692a:	60bb      	str	r3, [r7, #8]
      break;
 800692c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800692e:	68bb      	ldr	r3, [r7, #8]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800693a:	bf00      	nop
 800693c:	40023800 	.word	0x40023800
 8006940:	00f42400 	.word	0x00f42400
 8006944:	007a1200 	.word	0x007a1200

08006948 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800694c:	4b03      	ldr	r3, [pc, #12]	; (800695c <HAL_RCC_GetHCLKFreq+0x14>)
 800694e:	681b      	ldr	r3, [r3, #0]
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	20000004 	.word	0x20000004

08006960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006964:	f7ff fff0 	bl	8006948 <HAL_RCC_GetHCLKFreq>
 8006968:	4602      	mov	r2, r0
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	0a9b      	lsrs	r3, r3, #10
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	4903      	ldr	r1, [pc, #12]	; (8006984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006976:	5ccb      	ldrb	r3, [r1, r3]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800697c:	4618      	mov	r0, r3
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40023800 	.word	0x40023800
 8006984:	08009f44 	.word	0x08009f44

08006988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800698c:	f7ff ffdc 	bl	8006948 <HAL_RCC_GetHCLKFreq>
 8006990:	4602      	mov	r2, r0
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	0b5b      	lsrs	r3, r3, #13
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	4903      	ldr	r1, [pc, #12]	; (80069ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800699e:	5ccb      	ldrb	r3, [r1, r3]
 80069a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40023800 	.word	0x40023800
 80069ac:	08009f44 	.word	0x08009f44

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d012      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069d8:	4b69      	ldr	r3, [pc, #420]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	4a68      	ldr	r2, [pc, #416]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80069e2:	6093      	str	r3, [r2, #8]
 80069e4:	4b66      	ldr	r3, [pc, #408]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	4964      	ldr	r1, [pc, #400]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80069fa:	2301      	movs	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d017      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a0a:	4b5d      	ldr	r3, [pc, #372]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a18:	4959      	ldr	r1, [pc, #356]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a28:	d101      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a46:	4b4e      	ldr	r3, [pc, #312]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	494a      	ldr	r1, [pc, #296]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a64:	d101      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006a82:	2301      	movs	r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 808b 	beq.w	8006baa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a94:	4b3a      	ldr	r3, [pc, #232]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	4a39      	ldr	r2, [pc, #228]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa0:	4b37      	ldr	r3, [pc, #220]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006aac:	4b35      	ldr	r3, [pc, #212]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a34      	ldr	r2, [pc, #208]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab8:	f7fd f988 	bl	8003dcc <HAL_GetTick>
 8006abc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac0:	f7fd f984 	bl	8003dcc <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	; 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e357      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ad2:	4b2c      	ldr	r3, [pc, #176]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ade:	4b28      	ldr	r3, [pc, #160]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ae6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d035      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d02e      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006afc:	4b20      	ldr	r3, [pc, #128]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b06:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b12:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b1e:	4a18      	ldr	r2, [pc, #96]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b24:	4b16      	ldr	r3, [pc, #88]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d114      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b30:	f7fd f94c 	bl	8003dcc <HAL_GetTick>
 8006b34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fd f948 	bl	8003dcc <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e319      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0ee      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b66:	d111      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b76:	400b      	ands	r3, r1
 8006b78:	4901      	ldr	r1, [pc, #4]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
 8006b7e:	e00b      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40007000 	.word	0x40007000
 8006b88:	0ffffcff 	.word	0x0ffffcff
 8006b8c:	4bb1      	ldr	r3, [pc, #708]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4ab0      	ldr	r2, [pc, #704]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b96:	6093      	str	r3, [r2, #8]
 8006b98:	4bae      	ldr	r3, [pc, #696]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba4:	49ab      	ldr	r1, [pc, #684]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb6:	4ba7      	ldr	r3, [pc, #668]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bbc:	4aa5      	ldr	r2, [pc, #660]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bc6:	4ba3      	ldr	r3, [pc, #652]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	49a0      	ldr	r1, [pc, #640]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006be4:	4b9b      	ldr	r3, [pc, #620]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf2:	4998      	ldr	r1, [pc, #608]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00a      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c06:	4b93      	ldr	r3, [pc, #588]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c14:	498f      	ldr	r1, [pc, #572]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c28:	4b8a      	ldr	r3, [pc, #552]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c36:	4987      	ldr	r1, [pc, #540]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c4a:	4b82      	ldr	r3, [pc, #520]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c58:	497e      	ldr	r1, [pc, #504]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c6c:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f023 0203 	bic.w	r2, r3, #3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	4976      	ldr	r1, [pc, #472]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c8e:	4b71      	ldr	r3, [pc, #452]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c94:	f023 020c 	bic.w	r2, r3, #12
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9c:	496d      	ldr	r1, [pc, #436]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cb0:	4b68      	ldr	r3, [pc, #416]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbe:	4965      	ldr	r1, [pc, #404]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006cd2:	4b60      	ldr	r3, [pc, #384]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	495c      	ldr	r1, [pc, #368]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00a      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cf4:	4b57      	ldr	r3, [pc, #348]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	4954      	ldr	r1, [pc, #336]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d16:	4b4f      	ldr	r3, [pc, #316]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	494b      	ldr	r1, [pc, #300]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00a      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d38:	4b46      	ldr	r3, [pc, #280]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	4943      	ldr	r1, [pc, #268]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d5a:	4b3e      	ldr	r3, [pc, #248]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d68:	493a      	ldr	r1, [pc, #232]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d7c:	4b35      	ldr	r3, [pc, #212]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d8a:	4932      	ldr	r1, [pc, #200]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d011      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d9e:	4b2d      	ldr	r3, [pc, #180]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dac:	4929      	ldr	r1, [pc, #164]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbc:	d101      	bne.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006dde:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dec:	4919      	ldr	r1, [pc, #100]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e00:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e10:	4910      	ldr	r1, [pc, #64]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d006      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80d9 	beq.w	8006fde <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e2c:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e38:	f7fc ffc8 	bl	8003dcc <HAL_GetTick>
 8006e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e3e:	e00b      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e40:	f7fc ffc4 	bl	8003dcc <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b64      	cmp	r3, #100	; 0x64
 8006e4c:	d904      	bls.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e197      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006e52:	bf00      	nop
 8006e54:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e58:	4b6c      	ldr	r3, [pc, #432]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ed      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d021      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11d      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006e78:	4b64      	ldr	r3, [pc, #400]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e86:	4b61      	ldr	r3, [pc, #388]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8c:	0e1b      	lsrs	r3, r3, #24
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	019a      	lsls	r2, r3, #6
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	061b      	lsls	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	071b      	lsls	r3, r3, #28
 8006eac:	4957      	ldr	r1, [pc, #348]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d02e      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ede:	d129      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006ee0:	4b4a      	ldr	r3, [pc, #296]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee6:	0c1b      	lsrs	r3, r3, #16
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006eee:	4b47      	ldr	r3, [pc, #284]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef4:	0f1b      	lsrs	r3, r3, #28
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	019a      	lsls	r2, r3, #6
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	431a      	orrs	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	061b      	lsls	r3, r3, #24
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	071b      	lsls	r3, r3, #28
 8006f14:	493d      	ldr	r1, [pc, #244]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f22:	f023 021f 	bic.w	r2, r3, #31
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	4937      	ldr	r1, [pc, #220]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01d      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f40:	4b32      	ldr	r3, [pc, #200]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f46:	0e1b      	lsrs	r3, r3, #24
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f4e:	4b2f      	ldr	r3, [pc, #188]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f54:	0f1b      	lsrs	r3, r3, #28
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	019a      	lsls	r2, r3, #6
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	061b      	lsls	r3, r3, #24
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	071b      	lsls	r3, r3, #28
 8006f74:	4925      	ldr	r1, [pc, #148]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f76:	4313      	orrs	r3, r2
 8006f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d011      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	019a      	lsls	r2, r3, #6
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	041b      	lsls	r3, r3, #16
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	061b      	lsls	r3, r3, #24
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	071b      	lsls	r3, r3, #28
 8006fa4:	4919      	ldr	r1, [pc, #100]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a16      	ldr	r2, [pc, #88]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb8:	f7fc ff08 	bl	8003dcc <HAL_GetTick>
 8006fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fc0:	f7fc ff04 	bl	8003dcc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b64      	cmp	r3, #100	; 0x64
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0d7      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fd2:	4b0e      	ldr	r3, [pc, #56]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	f040 80cd 	bne.w	8007180 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006fe6:	4b09      	ldr	r3, [pc, #36]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff2:	f7fc feeb 	bl	8003dcc <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006ffa:	f7fc fee7 	bl	8003dcc <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b64      	cmp	r3, #100	; 0x64
 8007006:	d903      	bls.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e0ba      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800700c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007010:	4b5e      	ldr	r3, [pc, #376]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701c:	d0ed      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02e      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d12a      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007046:	4b51      	ldr	r3, [pc, #324]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007054:	4b4d      	ldr	r3, [pc, #308]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	0f1b      	lsrs	r3, r3, #28
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	019a      	lsls	r2, r3, #6
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	061b      	lsls	r3, r3, #24
 8007074:	431a      	orrs	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	071b      	lsls	r3, r3, #28
 800707a:	4944      	ldr	r1, [pc, #272]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007082:	4b42      	ldr	r3, [pc, #264]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	3b01      	subs	r3, #1
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	493d      	ldr	r1, [pc, #244]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d022      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b0:	d11d      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070b2:	4b36      	ldr	r3, [pc, #216]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	0f1b      	lsrs	r3, r3, #28
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	019a      	lsls	r2, r3, #6
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	4929      	ldr	r1, [pc, #164]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d028      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070fa:	4b24      	ldr	r3, [pc, #144]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	0e1b      	lsrs	r3, r3, #24
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007108:	4b20      	ldr	r3, [pc, #128]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	019a      	lsls	r2, r3, #6
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	431a      	orrs	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	061b      	lsls	r3, r3, #24
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	69db      	ldr	r3, [r3, #28]
 800712c:	071b      	lsls	r3, r3, #28
 800712e:	4917      	ldr	r1, [pc, #92]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007136:	4b15      	ldr	r3, [pc, #84]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	4911      	ldr	r1, [pc, #68]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800714c:	4b0f      	ldr	r3, [pc, #60]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007158:	f7fc fe38 	bl	8003dcc <HAL_GetTick>
 800715c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800715e:	e008      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007160:	f7fc fe34 	bl	8003dcc <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b64      	cmp	r3, #100	; 0x64
 800716c:	d901      	bls.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e007      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d1ef      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3720      	adds	r7, #32
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800

08007190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e049      	b.n	8007236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fc fb9a 	bl	80038f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	3304      	adds	r3, #4
 80071cc:	4619      	mov	r1, r3
 80071ce:	4610      	mov	r0, r2
 80071d0:	f000 fb5a 	bl	8007888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	d001      	beq.n	8007258 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e04c      	b.n	80072f2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a26      	ldr	r2, [pc, #152]	; (8007300 <HAL_TIM_Base_Start+0xc0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d022      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007272:	d01d      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a22      	ldr	r2, [pc, #136]	; (8007304 <HAL_TIM_Base_Start+0xc4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d018      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <HAL_TIM_Base_Start+0xc8>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d013      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <HAL_TIM_Base_Start+0xcc>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d00e      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <HAL_TIM_Base_Start+0xd0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d009      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <HAL_TIM_Base_Start+0xd4>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d004      	beq.n	80072b0 <HAL_TIM_Base_Start+0x70>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <HAL_TIM_Base_Start+0xd8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d115      	bne.n	80072dc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689a      	ldr	r2, [r3, #8]
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <HAL_TIM_Base_Start+0xdc>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b06      	cmp	r3, #6
 80072c0:	d015      	beq.n	80072ee <HAL_TIM_Base_Start+0xae>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c8:	d011      	beq.n	80072ee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0201 	orr.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072da:	e008      	b.n	80072ee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e000      	b.n	80072f0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40010000 	.word	0x40010000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40010400 	.word	0x40010400
 8007314:	40014000 	.word	0x40014000
 8007318:	40001800 	.word	0x40001800
 800731c:	00010007 	.word	0x00010007

08007320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b01      	cmp	r3, #1
 8007332:	d001      	beq.n	8007338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e054      	b.n	80073e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0201 	orr.w	r2, r2, #1
 800734e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a26      	ldr	r2, [pc, #152]	; (80073f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007362:	d01d      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a22      	ldr	r2, [pc, #136]	; (80073f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a21      	ldr	r2, [pc, #132]	; (80073f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <HAL_TIM_Base_Start_IT+0xdc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <HAL_TIM_Base_Start_IT+0xe0>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1c      	ldr	r2, [pc, #112]	; (8007404 <HAL_TIM_Base_Start_IT+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_TIM_Base_Start_IT+0x80>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1b      	ldr	r2, [pc, #108]	; (8007408 <HAL_TIM_Base_Start_IT+0xe8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d115      	bne.n	80073cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <HAL_TIM_Base_Start_IT+0xec>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d015      	beq.n	80073de <HAL_TIM_Base_Start_IT+0xbe>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d011      	beq.n	80073de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0201 	orr.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ca:	e008      	b.n	80073de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f042 0201 	orr.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e000      	b.n	80073e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40010400 	.word	0x40010400
 8007404:	40014000 	.word	0x40014000
 8007408:	40001800 	.word	0x40001800
 800740c:	00010007 	.word	0x00010007

08007410 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6a1a      	ldr	r2, [r3, #32]
 800742e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007432:	4013      	ands	r3, r2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10f      	bne.n	8007458 <HAL_TIM_Base_Stop_IT+0x48>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f240 4344 	movw	r3, #1092	; 0x444
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <HAL_TIM_Base_Stop_IT+0x48>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0201 	bic.w	r2, r2, #1
 8007456:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b02      	cmp	r3, #2
 8007482:	d122      	bne.n	80074ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b02      	cmp	r3, #2
 8007490:	d11b      	bne.n	80074ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0202 	mvn.w	r2, #2
 800749a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f9cb 	bl	800784c <HAL_TIM_IC_CaptureCallback>
 80074b6:	e005      	b.n	80074c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9bd 	bl	8007838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9ce 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d122      	bne.n	800751e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d11b      	bne.n	800751e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f06f 0204 	mvn.w	r2, #4
 80074ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9a1 	bl	800784c <HAL_TIM_IC_CaptureCallback>
 800750a:	e005      	b.n	8007518 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f993 	bl	8007838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9a4 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b08      	cmp	r3, #8
 800752a:	d122      	bne.n	8007572 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f003 0308 	and.w	r3, r3, #8
 8007536:	2b08      	cmp	r3, #8
 8007538:	d11b      	bne.n	8007572 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f06f 0208 	mvn.w	r2, #8
 8007542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2204      	movs	r2, #4
 8007548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f977 	bl	800784c <HAL_TIM_IC_CaptureCallback>
 800755e:	e005      	b.n	800756c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f969 	bl	8007838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f97a 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b10      	cmp	r3, #16
 800757e:	d122      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b10      	cmp	r3, #16
 800758c:	d11b      	bne.n	80075c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f06f 0210 	mvn.w	r2, #16
 8007596:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2208      	movs	r2, #8
 800759c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69db      	ldr	r3, [r3, #28]
 80075a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f94d 	bl	800784c <HAL_TIM_IC_CaptureCallback>
 80075b2:	e005      	b.n	80075c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f93f 	bl	8007838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f950 	bl	8007860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d10e      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d107      	bne.n	80075f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f06f 0201 	mvn.w	r2, #1
 80075ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7fc f837 	bl	8003660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075fc:	2b80      	cmp	r3, #128	; 0x80
 80075fe:	d10e      	bne.n	800761e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760a:	2b80      	cmp	r3, #128	; 0x80
 800760c:	d107      	bne.n	800761e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb07 	bl	8007c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762c:	d10e      	bne.n	800764c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007638:	2b80      	cmp	r3, #128	; 0x80
 800763a:	d107      	bne.n	800764c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fafa 	bl	8007c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d10e      	bne.n	8007678 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d107      	bne.n	8007678 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f8fe 	bl	8007874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b20      	cmp	r3, #32
 8007684:	d10e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b20      	cmp	r3, #32
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0220 	mvn.w	r2, #32
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 faba 	bl	8007c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d101      	bne.n	80076c4 <HAL_TIM_ConfigClockSource+0x18>
 80076c0:	2302      	movs	r3, #2
 80076c2:	e0b3      	b.n	800782c <HAL_TIM_ConfigClockSource+0x180>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4b55      	ldr	r3, [pc, #340]	; (8007834 <HAL_TIM_ConfigClockSource+0x188>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fc:	d03e      	beq.n	800777c <HAL_TIM_ConfigClockSource+0xd0>
 80076fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007702:	f200 8087 	bhi.w	8007814 <HAL_TIM_ConfigClockSource+0x168>
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770a:	f000 8085 	beq.w	8007818 <HAL_TIM_ConfigClockSource+0x16c>
 800770e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007712:	d87f      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 8007714:	2b70      	cmp	r3, #112	; 0x70
 8007716:	d01a      	beq.n	800774e <HAL_TIM_ConfigClockSource+0xa2>
 8007718:	2b70      	cmp	r3, #112	; 0x70
 800771a:	d87b      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 800771c:	2b60      	cmp	r3, #96	; 0x60
 800771e:	d050      	beq.n	80077c2 <HAL_TIM_ConfigClockSource+0x116>
 8007720:	2b60      	cmp	r3, #96	; 0x60
 8007722:	d877      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 8007724:	2b50      	cmp	r3, #80	; 0x50
 8007726:	d03c      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0xf6>
 8007728:	2b50      	cmp	r3, #80	; 0x50
 800772a:	d873      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d058      	beq.n	80077e2 <HAL_TIM_ConfigClockSource+0x136>
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d86f      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 8007734:	2b30      	cmp	r3, #48	; 0x30
 8007736:	d064      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x156>
 8007738:	2b30      	cmp	r3, #48	; 0x30
 800773a:	d86b      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 800773c:	2b20      	cmp	r3, #32
 800773e:	d060      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x156>
 8007740:	2b20      	cmp	r3, #32
 8007742:	d867      	bhi.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d05c      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x156>
 8007748:	2b10      	cmp	r3, #16
 800774a:	d05a      	beq.n	8007802 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800774c:	e062      	b.n	8007814 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6899      	ldr	r1, [r3, #8]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685a      	ldr	r2, [r3, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f000 f9ad 	bl	8007abc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007770:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	609a      	str	r2, [r3, #8]
      break;
 800777a:	e04e      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	6899      	ldr	r1, [r3, #8]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f000 f996 	bl	8007abc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800779e:	609a      	str	r2, [r3, #8]
      break;
 80077a0:	e03b      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6859      	ldr	r1, [r3, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	f000 f90a 	bl	80079c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2150      	movs	r1, #80	; 0x50
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f963 	bl	8007a86 <TIM_ITRx_SetConfig>
      break;
 80077c0:	e02b      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	6859      	ldr	r1, [r3, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	461a      	mov	r2, r3
 80077d0:	f000 f929 	bl	8007a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2160      	movs	r1, #96	; 0x60
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f953 	bl	8007a86 <TIM_ITRx_SetConfig>
      break;
 80077e0:	e01b      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6818      	ldr	r0, [r3, #0]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6859      	ldr	r1, [r3, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	461a      	mov	r2, r3
 80077f0:	f000 f8ea 	bl	80079c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2140      	movs	r1, #64	; 0x40
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 f943 	bl	8007a86 <TIM_ITRx_SetConfig>
      break;
 8007800:	e00b      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f000 f93a 	bl	8007a86 <TIM_ITRx_SetConfig>
        break;
 8007812:	e002      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007814:	bf00      	nop
 8007816:	e000      	b.n	800781a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007818:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	fffeff88 	.word	0xfffeff88

08007838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a40      	ldr	r2, [pc, #256]	; (800799c <TIM_Base_SetConfig+0x114>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d013      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a6:	d00f      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a3d      	ldr	r2, [pc, #244]	; (80079a0 <TIM_Base_SetConfig+0x118>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00b      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3c      	ldr	r2, [pc, #240]	; (80079a4 <TIM_Base_SetConfig+0x11c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d007      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3b      	ldr	r2, [pc, #236]	; (80079a8 <TIM_Base_SetConfig+0x120>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3a      	ldr	r2, [pc, #232]	; (80079ac <TIM_Base_SetConfig+0x124>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d108      	bne.n	80078da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2f      	ldr	r2, [pc, #188]	; (800799c <TIM_Base_SetConfig+0x114>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02b      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078e8:	d027      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2c      	ldr	r2, [pc, #176]	; (80079a0 <TIM_Base_SetConfig+0x118>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d023      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2b      	ldr	r2, [pc, #172]	; (80079a4 <TIM_Base_SetConfig+0x11c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d01f      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2a      	ldr	r2, [pc, #168]	; (80079a8 <TIM_Base_SetConfig+0x120>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01b      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a29      	ldr	r2, [pc, #164]	; (80079ac <TIM_Base_SetConfig+0x124>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d017      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <TIM_Base_SetConfig+0x128>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d013      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a27      	ldr	r2, [pc, #156]	; (80079b4 <TIM_Base_SetConfig+0x12c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00f      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a26      	ldr	r2, [pc, #152]	; (80079b8 <TIM_Base_SetConfig+0x130>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00b      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a25      	ldr	r2, [pc, #148]	; (80079bc <TIM_Base_SetConfig+0x134>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <TIM_Base_SetConfig+0x138>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a23      	ldr	r2, [pc, #140]	; (80079c4 <TIM_Base_SetConfig+0x13c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d108      	bne.n	800794c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a0a      	ldr	r2, [pc, #40]	; (800799c <TIM_Base_SetConfig+0x114>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_Base_SetConfig+0xf8>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a0c      	ldr	r2, [pc, #48]	; (80079ac <TIM_Base_SetConfig+0x124>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d103      	bne.n	8007988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	615a      	str	r2, [r3, #20]
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	40010000 	.word	0x40010000
 80079a0:	40000400 	.word	0x40000400
 80079a4:	40000800 	.word	0x40000800
 80079a8:	40000c00 	.word	0x40000c00
 80079ac:	40010400 	.word	0x40010400
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800
 80079bc:	40001800 	.word	0x40001800
 80079c0:	40001c00 	.word	0x40001c00
 80079c4:	40002000 	.word	0x40002000

080079c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 030a 	bic.w	r3, r3, #10
 8007a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b087      	sub	sp, #28
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	f023 0210 	bic.w	r2, r3, #16
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	621a      	str	r2, [r3, #32]
}
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f043 0307 	orr.w	r3, r3, #7
 8007aa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]
}
 8007ab0:	bf00      	nop
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	371c      	adds	r7, #28
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e06d      	b.n	8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a30      	ldr	r2, [pc, #192]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d004      	beq.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2f      	ldr	r2, [pc, #188]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d108      	bne.n	8007b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a20      	ldr	r2, [pc, #128]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d022      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b86:	d01d      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d013      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1a      	ldr	r2, [pc, #104]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10c      	bne.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40010400 	.word	0x40010400
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40001800 	.word	0x40001800

08007c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e040      	b.n	8007ce8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d106      	bne.n	8007c7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fb fe8e 	bl	8003998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2224      	movs	r2, #36	; 0x24
 8007c80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fad2 	bl	800823c <UART_SetConfig>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e022      	b.n	8007ce8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fd28 	bl	8008700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fdaf 	bl	8008844 <UART_CheckIdleState>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d145      	bne.n	8007d92 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <HAL_UART_Transmit_IT+0x22>
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e03e      	b.n	8007d94 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_UART_Transmit_IT+0x34>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e037      	b.n	8007d94 <HAL_UART_Transmit_IT+0xa4>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2221      	movs	r2, #33	; 0x21
 8007d54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5e:	d107      	bne.n	8007d70 <HAL_UART_Transmit_IT+0x80>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d103      	bne.n	8007d70 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <HAL_UART_Transmit_IT+0xb0>)
 8007d6c:	669a      	str	r2, [r3, #104]	; 0x68
 8007d6e:	e002      	b.n	8007d76 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4a0c      	ldr	r2, [pc, #48]	; (8007da4 <HAL_UART_Transmit_IT+0xb4>)
 8007d74:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d8c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e000      	b.n	8007d94 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
  }
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	08008bb1 	.word	0x08008bb1
 8007da4:	08008b3f 	.word	0x08008b3f

08007da8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d12c      	bne.n	8007e18 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <HAL_UART_Receive_IT+0x22>
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e025      	b.n	8007e1a <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_UART_Receive_IT+0x34>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e01e      	b.n	8007e1a <HAL_UART_Receive_IT+0x72>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d007      	beq.n	8007e08 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007e06:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e08:	88fb      	ldrh	r3, [r7, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f000 fdc8 	bl	80089a4 <UART_Start_Receive_IT>
 8007e14:	4603      	mov	r3, r0
 8007e16:	e000      	b.n	8007e1a <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007e18:	2302      	movs	r3, #2
  }
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d113      	bne.n	8007e7c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00e      	beq.n	8007e7c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d009      	beq.n	8007e7c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 81b9 	beq.w	80081e4 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
      }
      return;
 8007e7a:	e1b3      	b.n	80081e4 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 80e3 	beq.w	800804a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d105      	bne.n	8007e9a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	4ba5      	ldr	r3, [pc, #660]	; (8008128 <HAL_UART_IRQHandler+0x304>)
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 80d8 	beq.w	800804a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d010      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xa2>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00b      	beq.n	8007ec6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ebc:	f043 0201 	orr.w	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d010      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xce>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ee8:	f043 0204 	orr.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <HAL_UART_IRQHandler+0xfa>
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2204      	movs	r2, #4
 8007f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f14:	f043 0202 	orr.w	r2, r3, #2
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d015      	beq.n	8007f54 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2208      	movs	r2, #8
 8007f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4a:	f043 0208 	orr.w	r2, r3, #8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d011      	beq.n	8007f82 <HAL_UART_IRQHandler+0x15e>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00c      	beq.n	8007f82 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 812d 	beq.w	80081e8 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fb8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d004      	beq.n	8007fd2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d031      	beq.n	8008036 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fd6e 	bl	8008ab4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d123      	bne.n	800802e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ff4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d013      	beq.n	8008026 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	4a4a      	ldr	r2, [pc, #296]	; (800812c <HAL_UART_IRQHandler+0x308>)
 8008004:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	4618      	mov	r0, r3
 800800c:	f7fc f88f 	bl	800412e <HAL_DMA_Abort_IT>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d017      	beq.n	8008046 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008020:	4610      	mov	r0, r2
 8008022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008024:	e00f      	b.n	8008046 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f8f2 	bl	8008210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802c:	e00b      	b.n	8008046 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8ee 	bl	8008210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008034:	e007      	b.n	8008046 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8ea 	bl	8008210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008044:	e0d0      	b.n	80081e8 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008046:	bf00      	nop
    return;
 8008048:	e0ce      	b.n	80081e8 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800804e:	2b01      	cmp	r3, #1
 8008050:	f040 80a7 	bne.w	80081a2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80a1 	beq.w	80081a2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 809b 	beq.w	80081a2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2210      	movs	r2, #16
 8008072:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d156      	bne.n	8008130 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800808c:	893b      	ldrh	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80ac 	beq.w	80081ec <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800809a:	893a      	ldrh	r2, [r7, #8]
 800809c:	429a      	cmp	r2, r3
 800809e:	f080 80a5 	bcs.w	80081ec <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	893a      	ldrh	r2, [r7, #8]
 80080a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080b4:	d02a      	beq.n	800810c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0210 	bic.w	r2, r2, #16
 8008100:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	4618      	mov	r0, r3
 8008108:	f7fb ffa1 	bl	800404e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008118:	b29b      	uxth	r3, r3
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	b29b      	uxth	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f87f 	bl	8008224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008126:	e061      	b.n	80081ec <HAL_UART_IRQHandler+0x3c8>
 8008128:	04000120 	.word	0x04000120
 800812c:	08008b13 	.word	0x08008b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800813c:	b29b      	uxth	r3, r3
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d050      	beq.n	80081f0 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800814e:	897b      	ldrh	r3, [r7, #10]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d04d      	beq.n	80081f0 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008162:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f022 0201 	bic.w	r2, r2, #1
 8008172:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2220      	movs	r2, #32
 8008178:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 0210 	bic.w	r2, r2, #16
 8008194:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008196:	897b      	ldrh	r3, [r7, #10]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f842 	bl	8008224 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081a0:	e026      	b.n	80081f0 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d01a      	beq.n	80081f4 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
    }
    return;
 80081c6:	e015      	b.n	80081f4 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d011      	beq.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00c      	beq.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd25 	bl	8008c2c <UART_EndTransmit_IT>
    return;
 80081e2:	e008      	b.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
      return;
 80081e4:	bf00      	nop
 80081e6:	e006      	b.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
    return;
 80081e8:	bf00      	nop
 80081ea:	e004      	b.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
      return;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
      return;
 80081f0:	bf00      	nop
 80081f2:	e000      	b.n	80081f6 <HAL_UART_IRQHandler+0x3d2>
    return;
 80081f4:	bf00      	nop
  }

}
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	431a      	orrs	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4ba7      	ldr	r3, [pc, #668]	; (8008504 <UART_SetConfig+0x2c8>)
 8008268:	4013      	ands	r3, r2
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	6979      	ldr	r1, [r7, #20]
 8008270:	430b      	orrs	r3, r1
 8008272:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a95      	ldr	r2, [pc, #596]	; (8008508 <UART_SetConfig+0x2cc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d120      	bne.n	80082fa <UART_SetConfig+0xbe>
 80082b8:	4b94      	ldr	r3, [pc, #592]	; (800850c <UART_SetConfig+0x2d0>)
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d816      	bhi.n	80082f4 <UART_SetConfig+0xb8>
 80082c6:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <UART_SetConfig+0x90>)
 80082c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082e3 	.word	0x080082e3
 80082d8:	080082ef 	.word	0x080082ef
 80082dc:	2301      	movs	r3, #1
 80082de:	77fb      	strb	r3, [r7, #31]
 80082e0:	e14f      	b.n	8008582 <UART_SetConfig+0x346>
 80082e2:	2302      	movs	r3, #2
 80082e4:	77fb      	strb	r3, [r7, #31]
 80082e6:	e14c      	b.n	8008582 <UART_SetConfig+0x346>
 80082e8:	2304      	movs	r3, #4
 80082ea:	77fb      	strb	r3, [r7, #31]
 80082ec:	e149      	b.n	8008582 <UART_SetConfig+0x346>
 80082ee:	2308      	movs	r3, #8
 80082f0:	77fb      	strb	r3, [r7, #31]
 80082f2:	e146      	b.n	8008582 <UART_SetConfig+0x346>
 80082f4:	2310      	movs	r3, #16
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e143      	b.n	8008582 <UART_SetConfig+0x346>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a84      	ldr	r2, [pc, #528]	; (8008510 <UART_SetConfig+0x2d4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d132      	bne.n	800836a <UART_SetConfig+0x12e>
 8008304:	4b81      	ldr	r3, [pc, #516]	; (800850c <UART_SetConfig+0x2d0>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f003 030c 	and.w	r3, r3, #12
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d828      	bhi.n	8008364 <UART_SetConfig+0x128>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <UART_SetConfig+0xdc>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	0800834d 	.word	0x0800834d
 800831c:	08008365 	.word	0x08008365
 8008320:	08008365 	.word	0x08008365
 8008324:	08008365 	.word	0x08008365
 8008328:	08008359 	.word	0x08008359
 800832c:	08008365 	.word	0x08008365
 8008330:	08008365 	.word	0x08008365
 8008334:	08008365 	.word	0x08008365
 8008338:	08008353 	.word	0x08008353
 800833c:	08008365 	.word	0x08008365
 8008340:	08008365 	.word	0x08008365
 8008344:	08008365 	.word	0x08008365
 8008348:	0800835f 	.word	0x0800835f
 800834c:	2300      	movs	r3, #0
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e117      	b.n	8008582 <UART_SetConfig+0x346>
 8008352:	2302      	movs	r3, #2
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e114      	b.n	8008582 <UART_SetConfig+0x346>
 8008358:	2304      	movs	r3, #4
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	e111      	b.n	8008582 <UART_SetConfig+0x346>
 800835e:	2308      	movs	r3, #8
 8008360:	77fb      	strb	r3, [r7, #31]
 8008362:	e10e      	b.n	8008582 <UART_SetConfig+0x346>
 8008364:	2310      	movs	r3, #16
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e10b      	b.n	8008582 <UART_SetConfig+0x346>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a69      	ldr	r2, [pc, #420]	; (8008514 <UART_SetConfig+0x2d8>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d120      	bne.n	80083b6 <UART_SetConfig+0x17a>
 8008374:	4b65      	ldr	r3, [pc, #404]	; (800850c <UART_SetConfig+0x2d0>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	d013      	beq.n	80083aa <UART_SetConfig+0x16e>
 8008382:	2b30      	cmp	r3, #48	; 0x30
 8008384:	d814      	bhi.n	80083b0 <UART_SetConfig+0x174>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d009      	beq.n	800839e <UART_SetConfig+0x162>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d810      	bhi.n	80083b0 <UART_SetConfig+0x174>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <UART_SetConfig+0x15c>
 8008392:	2b10      	cmp	r3, #16
 8008394:	d006      	beq.n	80083a4 <UART_SetConfig+0x168>
 8008396:	e00b      	b.n	80083b0 <UART_SetConfig+0x174>
 8008398:	2300      	movs	r3, #0
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e0f1      	b.n	8008582 <UART_SetConfig+0x346>
 800839e:	2302      	movs	r3, #2
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e0ee      	b.n	8008582 <UART_SetConfig+0x346>
 80083a4:	2304      	movs	r3, #4
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e0eb      	b.n	8008582 <UART_SetConfig+0x346>
 80083aa:	2308      	movs	r3, #8
 80083ac:	77fb      	strb	r3, [r7, #31]
 80083ae:	e0e8      	b.n	8008582 <UART_SetConfig+0x346>
 80083b0:	2310      	movs	r3, #16
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e0e5      	b.n	8008582 <UART_SetConfig+0x346>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a57      	ldr	r2, [pc, #348]	; (8008518 <UART_SetConfig+0x2dc>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d120      	bne.n	8008402 <UART_SetConfig+0x1c6>
 80083c0:	4b52      	ldr	r3, [pc, #328]	; (800850c <UART_SetConfig+0x2d0>)
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083ca:	2bc0      	cmp	r3, #192	; 0xc0
 80083cc:	d013      	beq.n	80083f6 <UART_SetConfig+0x1ba>
 80083ce:	2bc0      	cmp	r3, #192	; 0xc0
 80083d0:	d814      	bhi.n	80083fc <UART_SetConfig+0x1c0>
 80083d2:	2b80      	cmp	r3, #128	; 0x80
 80083d4:	d009      	beq.n	80083ea <UART_SetConfig+0x1ae>
 80083d6:	2b80      	cmp	r3, #128	; 0x80
 80083d8:	d810      	bhi.n	80083fc <UART_SetConfig+0x1c0>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d002      	beq.n	80083e4 <UART_SetConfig+0x1a8>
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d006      	beq.n	80083f0 <UART_SetConfig+0x1b4>
 80083e2:	e00b      	b.n	80083fc <UART_SetConfig+0x1c0>
 80083e4:	2300      	movs	r3, #0
 80083e6:	77fb      	strb	r3, [r7, #31]
 80083e8:	e0cb      	b.n	8008582 <UART_SetConfig+0x346>
 80083ea:	2302      	movs	r3, #2
 80083ec:	77fb      	strb	r3, [r7, #31]
 80083ee:	e0c8      	b.n	8008582 <UART_SetConfig+0x346>
 80083f0:	2304      	movs	r3, #4
 80083f2:	77fb      	strb	r3, [r7, #31]
 80083f4:	e0c5      	b.n	8008582 <UART_SetConfig+0x346>
 80083f6:	2308      	movs	r3, #8
 80083f8:	77fb      	strb	r3, [r7, #31]
 80083fa:	e0c2      	b.n	8008582 <UART_SetConfig+0x346>
 80083fc:	2310      	movs	r3, #16
 80083fe:	77fb      	strb	r3, [r7, #31]
 8008400:	e0bf      	b.n	8008582 <UART_SetConfig+0x346>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a45      	ldr	r2, [pc, #276]	; (800851c <UART_SetConfig+0x2e0>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d125      	bne.n	8008458 <UART_SetConfig+0x21c>
 800840c:	4b3f      	ldr	r3, [pc, #252]	; (800850c <UART_SetConfig+0x2d0>)
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841a:	d017      	beq.n	800844c <UART_SetConfig+0x210>
 800841c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008420:	d817      	bhi.n	8008452 <UART_SetConfig+0x216>
 8008422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008426:	d00b      	beq.n	8008440 <UART_SetConfig+0x204>
 8008428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842c:	d811      	bhi.n	8008452 <UART_SetConfig+0x216>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <UART_SetConfig+0x1fe>
 8008432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008436:	d006      	beq.n	8008446 <UART_SetConfig+0x20a>
 8008438:	e00b      	b.n	8008452 <UART_SetConfig+0x216>
 800843a:	2300      	movs	r3, #0
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e0a0      	b.n	8008582 <UART_SetConfig+0x346>
 8008440:	2302      	movs	r3, #2
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e09d      	b.n	8008582 <UART_SetConfig+0x346>
 8008446:	2304      	movs	r3, #4
 8008448:	77fb      	strb	r3, [r7, #31]
 800844a:	e09a      	b.n	8008582 <UART_SetConfig+0x346>
 800844c:	2308      	movs	r3, #8
 800844e:	77fb      	strb	r3, [r7, #31]
 8008450:	e097      	b.n	8008582 <UART_SetConfig+0x346>
 8008452:	2310      	movs	r3, #16
 8008454:	77fb      	strb	r3, [r7, #31]
 8008456:	e094      	b.n	8008582 <UART_SetConfig+0x346>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a30      	ldr	r2, [pc, #192]	; (8008520 <UART_SetConfig+0x2e4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d125      	bne.n	80084ae <UART_SetConfig+0x272>
 8008462:	4b2a      	ldr	r3, [pc, #168]	; (800850c <UART_SetConfig+0x2d0>)
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008468:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800846c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008470:	d017      	beq.n	80084a2 <UART_SetConfig+0x266>
 8008472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008476:	d817      	bhi.n	80084a8 <UART_SetConfig+0x26c>
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847c:	d00b      	beq.n	8008496 <UART_SetConfig+0x25a>
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008482:	d811      	bhi.n	80084a8 <UART_SetConfig+0x26c>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <UART_SetConfig+0x254>
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848c:	d006      	beq.n	800849c <UART_SetConfig+0x260>
 800848e:	e00b      	b.n	80084a8 <UART_SetConfig+0x26c>
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
 8008494:	e075      	b.n	8008582 <UART_SetConfig+0x346>
 8008496:	2302      	movs	r3, #2
 8008498:	77fb      	strb	r3, [r7, #31]
 800849a:	e072      	b.n	8008582 <UART_SetConfig+0x346>
 800849c:	2304      	movs	r3, #4
 800849e:	77fb      	strb	r3, [r7, #31]
 80084a0:	e06f      	b.n	8008582 <UART_SetConfig+0x346>
 80084a2:	2308      	movs	r3, #8
 80084a4:	77fb      	strb	r3, [r7, #31]
 80084a6:	e06c      	b.n	8008582 <UART_SetConfig+0x346>
 80084a8:	2310      	movs	r3, #16
 80084aa:	77fb      	strb	r3, [r7, #31]
 80084ac:	e069      	b.n	8008582 <UART_SetConfig+0x346>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1c      	ldr	r2, [pc, #112]	; (8008524 <UART_SetConfig+0x2e8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d137      	bne.n	8008528 <UART_SetConfig+0x2ec>
 80084b8:	4b14      	ldr	r3, [pc, #80]	; (800850c <UART_SetConfig+0x2d0>)
 80084ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084be:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80084c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084c6:	d017      	beq.n	80084f8 <UART_SetConfig+0x2bc>
 80084c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80084cc:	d817      	bhi.n	80084fe <UART_SetConfig+0x2c2>
 80084ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d2:	d00b      	beq.n	80084ec <UART_SetConfig+0x2b0>
 80084d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d8:	d811      	bhi.n	80084fe <UART_SetConfig+0x2c2>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <UART_SetConfig+0x2aa>
 80084de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e2:	d006      	beq.n	80084f2 <UART_SetConfig+0x2b6>
 80084e4:	e00b      	b.n	80084fe <UART_SetConfig+0x2c2>
 80084e6:	2300      	movs	r3, #0
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	e04a      	b.n	8008582 <UART_SetConfig+0x346>
 80084ec:	2302      	movs	r3, #2
 80084ee:	77fb      	strb	r3, [r7, #31]
 80084f0:	e047      	b.n	8008582 <UART_SetConfig+0x346>
 80084f2:	2304      	movs	r3, #4
 80084f4:	77fb      	strb	r3, [r7, #31]
 80084f6:	e044      	b.n	8008582 <UART_SetConfig+0x346>
 80084f8:	2308      	movs	r3, #8
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e041      	b.n	8008582 <UART_SetConfig+0x346>
 80084fe:	2310      	movs	r3, #16
 8008500:	77fb      	strb	r3, [r7, #31]
 8008502:	e03e      	b.n	8008582 <UART_SetConfig+0x346>
 8008504:	efff69f3 	.word	0xefff69f3
 8008508:	40011000 	.word	0x40011000
 800850c:	40023800 	.word	0x40023800
 8008510:	40004400 	.word	0x40004400
 8008514:	40004800 	.word	0x40004800
 8008518:	40004c00 	.word	0x40004c00
 800851c:	40005000 	.word	0x40005000
 8008520:	40011400 	.word	0x40011400
 8008524:	40007800 	.word	0x40007800
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a71      	ldr	r2, [pc, #452]	; (80086f4 <UART_SetConfig+0x4b8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d125      	bne.n	800857e <UART_SetConfig+0x342>
 8008532:	4b71      	ldr	r3, [pc, #452]	; (80086f8 <UART_SetConfig+0x4bc>)
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800853c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008540:	d017      	beq.n	8008572 <UART_SetConfig+0x336>
 8008542:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008546:	d817      	bhi.n	8008578 <UART_SetConfig+0x33c>
 8008548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800854c:	d00b      	beq.n	8008566 <UART_SetConfig+0x32a>
 800854e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008552:	d811      	bhi.n	8008578 <UART_SetConfig+0x33c>
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <UART_SetConfig+0x324>
 8008558:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800855c:	d006      	beq.n	800856c <UART_SetConfig+0x330>
 800855e:	e00b      	b.n	8008578 <UART_SetConfig+0x33c>
 8008560:	2300      	movs	r3, #0
 8008562:	77fb      	strb	r3, [r7, #31]
 8008564:	e00d      	b.n	8008582 <UART_SetConfig+0x346>
 8008566:	2302      	movs	r3, #2
 8008568:	77fb      	strb	r3, [r7, #31]
 800856a:	e00a      	b.n	8008582 <UART_SetConfig+0x346>
 800856c:	2304      	movs	r3, #4
 800856e:	77fb      	strb	r3, [r7, #31]
 8008570:	e007      	b.n	8008582 <UART_SetConfig+0x346>
 8008572:	2308      	movs	r3, #8
 8008574:	77fb      	strb	r3, [r7, #31]
 8008576:	e004      	b.n	8008582 <UART_SetConfig+0x346>
 8008578:	2310      	movs	r3, #16
 800857a:	77fb      	strb	r3, [r7, #31]
 800857c:	e001      	b.n	8008582 <UART_SetConfig+0x346>
 800857e:	2310      	movs	r3, #16
 8008580:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800858a:	d15b      	bne.n	8008644 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800858c:	7ffb      	ldrb	r3, [r7, #31]
 800858e:	2b08      	cmp	r3, #8
 8008590:	d827      	bhi.n	80085e2 <UART_SetConfig+0x3a6>
 8008592:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <UART_SetConfig+0x35c>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085bd 	.word	0x080085bd
 800859c:	080085c5 	.word	0x080085c5
 80085a0:	080085cd 	.word	0x080085cd
 80085a4:	080085e3 	.word	0x080085e3
 80085a8:	080085d3 	.word	0x080085d3
 80085ac:	080085e3 	.word	0x080085e3
 80085b0:	080085e3 	.word	0x080085e3
 80085b4:	080085e3 	.word	0x080085e3
 80085b8:	080085db 	.word	0x080085db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085bc:	f7fe f9d0 	bl	8006960 <HAL_RCC_GetPCLK1Freq>
 80085c0:	61b8      	str	r0, [r7, #24]
        break;
 80085c2:	e013      	b.n	80085ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085c4:	f7fe f9e0 	bl	8006988 <HAL_RCC_GetPCLK2Freq>
 80085c8:	61b8      	str	r0, [r7, #24]
        break;
 80085ca:	e00f      	b.n	80085ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085cc:	4b4b      	ldr	r3, [pc, #300]	; (80086fc <UART_SetConfig+0x4c0>)
 80085ce:	61bb      	str	r3, [r7, #24]
        break;
 80085d0:	e00c      	b.n	80085ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085d2:	f7fe f8d7 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 80085d6:	61b8      	str	r0, [r7, #24]
        break;
 80085d8:	e008      	b.n	80085ec <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085de:	61bb      	str	r3, [r7, #24]
        break;
 80085e0:	e004      	b.n	80085ec <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	77bb      	strb	r3, [r7, #30]
        break;
 80085ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d074      	beq.n	80086dc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	005a      	lsls	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	441a      	add	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	fbb2 f3f3 	udiv	r3, r2, r3
 8008606:	b29b      	uxth	r3, r3
 8008608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	2b0f      	cmp	r3, #15
 800860e:	d916      	bls.n	800863e <UART_SetConfig+0x402>
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008616:	d212      	bcs.n	800863e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	b29b      	uxth	r3, r3
 800861c:	f023 030f 	bic.w	r3, r3, #15
 8008620:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	085b      	lsrs	r3, r3, #1
 8008626:	b29b      	uxth	r3, r3
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	b29a      	uxth	r2, r3
 800862e:	89fb      	ldrh	r3, [r7, #14]
 8008630:	4313      	orrs	r3, r2
 8008632:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	89fa      	ldrh	r2, [r7, #14]
 800863a:	60da      	str	r2, [r3, #12]
 800863c:	e04e      	b.n	80086dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	77bb      	strb	r3, [r7, #30]
 8008642:	e04b      	b.n	80086dc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008644:	7ffb      	ldrb	r3, [r7, #31]
 8008646:	2b08      	cmp	r3, #8
 8008648:	d827      	bhi.n	800869a <UART_SetConfig+0x45e>
 800864a:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <UART_SetConfig+0x414>)
 800864c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008650:	08008675 	.word	0x08008675
 8008654:	0800867d 	.word	0x0800867d
 8008658:	08008685 	.word	0x08008685
 800865c:	0800869b 	.word	0x0800869b
 8008660:	0800868b 	.word	0x0800868b
 8008664:	0800869b 	.word	0x0800869b
 8008668:	0800869b 	.word	0x0800869b
 800866c:	0800869b 	.word	0x0800869b
 8008670:	08008693 	.word	0x08008693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008674:	f7fe f974 	bl	8006960 <HAL_RCC_GetPCLK1Freq>
 8008678:	61b8      	str	r0, [r7, #24]
        break;
 800867a:	e013      	b.n	80086a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800867c:	f7fe f984 	bl	8006988 <HAL_RCC_GetPCLK2Freq>
 8008680:	61b8      	str	r0, [r7, #24]
        break;
 8008682:	e00f      	b.n	80086a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008684:	4b1d      	ldr	r3, [pc, #116]	; (80086fc <UART_SetConfig+0x4c0>)
 8008686:	61bb      	str	r3, [r7, #24]
        break;
 8008688:	e00c      	b.n	80086a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800868a:	f7fe f87b 	bl	8006784 <HAL_RCC_GetSysClockFreq>
 800868e:	61b8      	str	r0, [r7, #24]
        break;
 8008690:	e008      	b.n	80086a4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008696:	61bb      	str	r3, [r7, #24]
        break;
 8008698:	e004      	b.n	80086a4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	77bb      	strb	r3, [r7, #30]
        break;
 80086a2:	bf00      	nop
    }

    if (pclk != 0U)
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d018      	beq.n	80086dc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	085a      	lsrs	r2, r3, #1
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	441a      	add	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086bc:	b29b      	uxth	r3, r3
 80086be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b0f      	cmp	r3, #15
 80086c4:	d908      	bls.n	80086d8 <UART_SetConfig+0x49c>
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086cc:	d204      	bcs.n	80086d8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	e001      	b.n	80086dc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80086e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40007c00 	.word	0x40007c00
 80086f8:	40023800 	.word	0x40023800
 80086fc:	00f42400 	.word	0x00f42400

08008700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00a      	beq.n	800872a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00a      	beq.n	800874c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	f003 0304 	and.w	r3, r3, #4
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00a      	beq.n	800876e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	f003 0308 	and.w	r3, r3, #8
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	f003 0310 	and.w	r3, r3, #16
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	f003 0320 	and.w	r3, r3, #32
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	430a      	orrs	r2, r1
 80087d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01a      	beq.n	8008816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087fe:	d10a      	bne.n	8008816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	605a      	str	r2, [r3, #4]
  }
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008854:	f7fb faba 	bl	8003dcc <HAL_GetTick>
 8008858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b08      	cmp	r3, #8
 8008866:	d10e      	bne.n	8008886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f817 	bl	80088aa <UART_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e00d      	b.n	80088a2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2220      	movs	r2, #32
 800888a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2220      	movs	r2, #32
 8008890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	60b9      	str	r1, [r7, #8]
 80088b4:	603b      	str	r3, [r7, #0]
 80088b6:	4613      	mov	r3, r2
 80088b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ba:	e05e      	b.n	800897a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c2:	d05a      	beq.n	800897a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088c4:	f7fb fa82 	bl	8003dcc <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d302      	bcc.n	80088da <UART_WaitOnFlagUntilTimeout+0x30>
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d11b      	bne.n	8008912 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2220      	movs	r2, #32
 8008904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e043      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d02c      	beq.n	800897a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800892a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892e:	d124      	bne.n	800897a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008948:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2220      	movs	r2, #32
 800895e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2220      	movs	r2, #32
 8008964:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e00f      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	4013      	ands	r3, r2
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	429a      	cmp	r2, r3
 8008988:	bf0c      	ite	eq
 800898a:	2301      	moveq	r3, #1
 800898c:	2300      	movne	r3, #0
 800898e:	b2db      	uxtb	r3, r3
 8008990:	461a      	mov	r2, r3
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	429a      	cmp	r2, r3
 8008996:	d091      	beq.n	80088bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	4613      	mov	r3, r2
 80089b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	88fa      	ldrh	r2, [r7, #6]
 80089bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d6:	d10e      	bne.n	80089f6 <UART_Start_Receive_IT+0x52>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <UART_Start_Receive_IT+0x48>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ea:	e02d      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	22ff      	movs	r2, #255	; 0xff
 80089f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089f4:	e028      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10d      	bne.n	8008a1a <UART_Start_Receive_IT+0x76>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <UART_Start_Receive_IT+0x6c>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a0e:	e01b      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	227f      	movs	r2, #127	; 0x7f
 8008a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a18:	e016      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a22:	d10d      	bne.n	8008a40 <UART_Start_Receive_IT+0x9c>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <UART_Start_Receive_IT+0x92>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	227f      	movs	r2, #127	; 0x7f
 8008a30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a34:	e008      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	223f      	movs	r2, #63	; 0x3f
 8008a3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a3e:	e003      	b.n	8008a48 <UART_Start_Receive_IT+0xa4>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2222      	movs	r2, #34	; 0x22
 8008a54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6e:	d107      	bne.n	8008a80 <UART_Start_Receive_IT+0xdc>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a0c      	ldr	r2, [pc, #48]	; (8008aac <UART_Start_Receive_IT+0x108>)
 8008a7c:	665a      	str	r2, [r3, #100]	; 0x64
 8008a7e:	e002      	b.n	8008a86 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	4a0b      	ldr	r2, [pc, #44]	; (8008ab0 <UART_Start_Receive_IT+0x10c>)
 8008a84:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008a9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	08008d33 	.word	0x08008d33
 8008ab0:	08008c5f 	.word	0x08008c5f

08008ab4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008aca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d107      	bne.n	8008af4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0210 	bic.w	r2, r2, #16
 8008af2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2220      	movs	r2, #32
 8008af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fb6d 	bl	8008210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b4a:	2b21      	cmp	r3, #33	; 0x21
 8008b4c:	d12a      	bne.n	8008ba4 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d110      	bne.n	8008b7c <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b68:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b78:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008b7a:	e013      	b.n	8008ba4 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008bbc:	2b21      	cmp	r3, #33	; 0x21
 8008bbe:	d12f      	bne.n	8008c20 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d110      	bne.n	8008bee <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bda:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bea:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008bec:	e018      	b.n	8008c20 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c08:	1c9a      	adds	r2, r3, #2
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c42:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7ff fad3 	bl	80081fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c6c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c72:	2b22      	cmp	r3, #34	; 0x22
 8008c74:	d151      	bne.n	8008d1a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c7e:	89bb      	ldrh	r3, [r7, #12]
 8008c80:	b2d9      	uxtb	r1, r3
 8008c82:	89fb      	ldrh	r3, [r7, #14]
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	400a      	ands	r2, r1
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d138      	bne.n	8008d2a <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cc6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d10f      	bne.n	8008d0c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0210 	bic.w	r2, r2, #16
 8008cfa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fa8d 	bl	8008224 <HAL_UARTEx_RxEventCallback>
 8008d0a:	e002      	b.n	8008d12 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7fa fcc3 	bl	8003698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d18:	e007      	b.n	8008d2a <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	699a      	ldr	r2, [r3, #24]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0208 	orr.w	r2, r2, #8
 8008d28:	619a      	str	r2, [r3, #24]
}
 8008d2a:	bf00      	nop
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d40:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d46:	2b22      	cmp	r3, #34	; 0x22
 8008d48:	d151      	bne.n	8008dee <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d56:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d58:	89ba      	ldrh	r2, [r7, #12]
 8008d5a:	89fb      	ldrh	r3, [r7, #14]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d68:	1c9a      	adds	r2, r3, #2
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d138      	bne.n	8008dfe <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008d9a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0201 	bic.w	r2, r2, #1
 8008daa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2220      	movs	r2, #32
 8008db0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d10f      	bne.n	8008de0 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0210 	bic.w	r2, r2, #16
 8008dce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fa23 	bl	8008224 <HAL_UARTEx_RxEventCallback>
 8008dde:	e002      	b.n	8008de6 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fa fc59 	bl	8003698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dec:	e007      	b.n	8008dfe <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	699a      	ldr	r2, [r3, #24]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0208 	orr.w	r2, r2, #8
 8008dfc:	619a      	str	r2, [r3, #24]
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <__errno>:
 8008e08:	4b01      	ldr	r3, [pc, #4]	; (8008e10 <__errno+0x8>)
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000010 	.word	0x20000010

08008e14 <__libc_init_array>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4d0d      	ldr	r5, [pc, #52]	; (8008e4c <__libc_init_array+0x38>)
 8008e18:	4c0d      	ldr	r4, [pc, #52]	; (8008e50 <__libc_init_array+0x3c>)
 8008e1a:	1b64      	subs	r4, r4, r5
 8008e1c:	10a4      	asrs	r4, r4, #2
 8008e1e:	2600      	movs	r6, #0
 8008e20:	42a6      	cmp	r6, r4
 8008e22:	d109      	bne.n	8008e38 <__libc_init_array+0x24>
 8008e24:	4d0b      	ldr	r5, [pc, #44]	; (8008e54 <__libc_init_array+0x40>)
 8008e26:	4c0c      	ldr	r4, [pc, #48]	; (8008e58 <__libc_init_array+0x44>)
 8008e28:	f000 ffec 	bl	8009e04 <_init>
 8008e2c:	1b64      	subs	r4, r4, r5
 8008e2e:	10a4      	asrs	r4, r4, #2
 8008e30:	2600      	movs	r6, #0
 8008e32:	42a6      	cmp	r6, r4
 8008e34:	d105      	bne.n	8008e42 <__libc_init_array+0x2e>
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3c:	4798      	blx	r3
 8008e3e:	3601      	adds	r6, #1
 8008e40:	e7ee      	b.n	8008e20 <__libc_init_array+0xc>
 8008e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e46:	4798      	blx	r3
 8008e48:	3601      	adds	r6, #1
 8008e4a:	e7f2      	b.n	8008e32 <__libc_init_array+0x1e>
 8008e4c:	08009fec 	.word	0x08009fec
 8008e50:	08009fec 	.word	0x08009fec
 8008e54:	08009fec 	.word	0x08009fec
 8008e58:	08009ff0 	.word	0x08009ff0

08008e5c <memset>:
 8008e5c:	4402      	add	r2, r0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d100      	bne.n	8008e66 <memset+0xa>
 8008e64:	4770      	bx	lr
 8008e66:	f803 1b01 	strb.w	r1, [r3], #1
 8008e6a:	e7f9      	b.n	8008e60 <memset+0x4>

08008e6c <iprintf>:
 8008e6c:	b40f      	push	{r0, r1, r2, r3}
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	; (8008e98 <iprintf+0x2c>)
 8008e70:	b513      	push	{r0, r1, r4, lr}
 8008e72:	681c      	ldr	r4, [r3, #0]
 8008e74:	b124      	cbz	r4, 8008e80 <iprintf+0x14>
 8008e76:	69a3      	ldr	r3, [r4, #24]
 8008e78:	b913      	cbnz	r3, 8008e80 <iprintf+0x14>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fa5e 	bl	800933c <__sinit>
 8008e80:	ab05      	add	r3, sp, #20
 8008e82:	9a04      	ldr	r2, [sp, #16]
 8008e84:	68a1      	ldr	r1, [r4, #8]
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fc2f 	bl	80096ec <_vfiprintf_r>
 8008e8e:	b002      	add	sp, #8
 8008e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e94:	b004      	add	sp, #16
 8008e96:	4770      	bx	lr
 8008e98:	20000010 	.word	0x20000010

08008e9c <_puts_r>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	460e      	mov	r6, r1
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	b118      	cbz	r0, 8008eac <_puts_r+0x10>
 8008ea4:	6983      	ldr	r3, [r0, #24]
 8008ea6:	b90b      	cbnz	r3, 8008eac <_puts_r+0x10>
 8008ea8:	f000 fa48 	bl	800933c <__sinit>
 8008eac:	69ab      	ldr	r3, [r5, #24]
 8008eae:	68ac      	ldr	r4, [r5, #8]
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_puts_r+0x1c>
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f000 fa42 	bl	800933c <__sinit>
 8008eb8:	4b2c      	ldr	r3, [pc, #176]	; (8008f6c <_puts_r+0xd0>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d120      	bne.n	8008f00 <_puts_r+0x64>
 8008ebe:	686c      	ldr	r4, [r5, #4]
 8008ec0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec2:	07db      	lsls	r3, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_puts_r+0x36>
 8008ec6:	89a3      	ldrh	r3, [r4, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_puts_r+0x36>
 8008ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ece:	f000 fad3 	bl	8009478 <__retarget_lock_acquire_recursive>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	0719      	lsls	r1, r3, #28
 8008ed6:	d51d      	bpl.n	8008f14 <_puts_r+0x78>
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b1db      	cbz	r3, 8008f14 <_puts_r+0x78>
 8008edc:	3e01      	subs	r6, #1
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	60a3      	str	r3, [r4, #8]
 8008ee8:	bb39      	cbnz	r1, 8008f3a <_puts_r+0x9e>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	da38      	bge.n	8008f60 <_puts_r+0xc4>
 8008eee:	4622      	mov	r2, r4
 8008ef0:	210a      	movs	r1, #10
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f848 	bl	8008f88 <__swbuf_r>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d011      	beq.n	8008f20 <_puts_r+0x84>
 8008efc:	250a      	movs	r5, #10
 8008efe:	e011      	b.n	8008f24 <_puts_r+0x88>
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <_puts_r+0xd4>)
 8008f02:	429c      	cmp	r4, r3
 8008f04:	d101      	bne.n	8008f0a <_puts_r+0x6e>
 8008f06:	68ac      	ldr	r4, [r5, #8]
 8008f08:	e7da      	b.n	8008ec0 <_puts_r+0x24>
 8008f0a:	4b1a      	ldr	r3, [pc, #104]	; (8008f74 <_puts_r+0xd8>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	bf08      	it	eq
 8008f10:	68ec      	ldreq	r4, [r5, #12]
 8008f12:	e7d5      	b.n	8008ec0 <_puts_r+0x24>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 f888 	bl	800902c <__swsetup_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0dd      	beq.n	8008edc <_puts_r+0x40>
 8008f20:	f04f 35ff 	mov.w	r5, #4294967295
 8008f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f26:	07da      	lsls	r2, r3, #31
 8008f28:	d405      	bmi.n	8008f36 <_puts_r+0x9a>
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	059b      	lsls	r3, r3, #22
 8008f2e:	d402      	bmi.n	8008f36 <_puts_r+0x9a>
 8008f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f32:	f000 faa2 	bl	800947a <__retarget_lock_release_recursive>
 8008f36:	4628      	mov	r0, r5
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da04      	bge.n	8008f48 <_puts_r+0xac>
 8008f3e:	69a2      	ldr	r2, [r4, #24]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	dc06      	bgt.n	8008f52 <_puts_r+0xb6>
 8008f44:	290a      	cmp	r1, #10
 8008f46:	d004      	beq.n	8008f52 <_puts_r+0xb6>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	6022      	str	r2, [r4, #0]
 8008f4e:	7019      	strb	r1, [r3, #0]
 8008f50:	e7c5      	b.n	8008ede <_puts_r+0x42>
 8008f52:	4622      	mov	r2, r4
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f817 	bl	8008f88 <__swbuf_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d1bf      	bne.n	8008ede <_puts_r+0x42>
 8008f5e:	e7df      	b.n	8008f20 <_puts_r+0x84>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	250a      	movs	r5, #10
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	701d      	strb	r5, [r3, #0]
 8008f6a:	e7db      	b.n	8008f24 <_puts_r+0x88>
 8008f6c:	08009f70 	.word	0x08009f70
 8008f70:	08009f90 	.word	0x08009f90
 8008f74:	08009f50 	.word	0x08009f50

08008f78 <puts>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <puts+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f7ff bf8d 	b.w	8008e9c <_puts_r>
 8008f82:	bf00      	nop
 8008f84:	20000010 	.word	0x20000010

08008f88 <__swbuf_r>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	460e      	mov	r6, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b118      	cbz	r0, 8008f9a <__swbuf_r+0x12>
 8008f92:	6983      	ldr	r3, [r0, #24]
 8008f94:	b90b      	cbnz	r3, 8008f9a <__swbuf_r+0x12>
 8008f96:	f000 f9d1 	bl	800933c <__sinit>
 8008f9a:	4b21      	ldr	r3, [pc, #132]	; (8009020 <__swbuf_r+0x98>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	d12b      	bne.n	8008ff8 <__swbuf_r+0x70>
 8008fa0:	686c      	ldr	r4, [r5, #4]
 8008fa2:	69a3      	ldr	r3, [r4, #24]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d52f      	bpl.n	800900c <__swbuf_r+0x84>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b36b      	cbz	r3, 800900c <__swbuf_r+0x84>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	b2f6      	uxtb	r6, r6
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	4637      	mov	r7, r6
 8008fbe:	dc04      	bgt.n	8008fca <__swbuf_r+0x42>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f926 	bl	8009214 <_fflush_r>
 8008fc8:	bb30      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	60a3      	str	r3, [r4, #8]
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	701e      	strb	r6, [r3, #0]
 8008fd8:	6963      	ldr	r3, [r4, #20]
 8008fda:	3001      	adds	r0, #1
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	d004      	beq.n	8008fea <__swbuf_r+0x62>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	07db      	lsls	r3, r3, #31
 8008fe4:	d506      	bpl.n	8008ff4 <__swbuf_r+0x6c>
 8008fe6:	2e0a      	cmp	r6, #10
 8008fe8:	d104      	bne.n	8008ff4 <__swbuf_r+0x6c>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f911 	bl	8009214 <_fflush_r>
 8008ff2:	b988      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <__swbuf_r+0x9c>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	d101      	bne.n	8009002 <__swbuf_r+0x7a>
 8008ffe:	68ac      	ldr	r4, [r5, #8]
 8009000:	e7cf      	b.n	8008fa2 <__swbuf_r+0x1a>
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <__swbuf_r+0xa0>)
 8009004:	429c      	cmp	r4, r3
 8009006:	bf08      	it	eq
 8009008:	68ec      	ldreq	r4, [r5, #12]
 800900a:	e7ca      	b.n	8008fa2 <__swbuf_r+0x1a>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f80c 	bl	800902c <__swsetup_r>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0cb      	beq.n	8008fb0 <__swbuf_r+0x28>
 8009018:	f04f 37ff 	mov.w	r7, #4294967295
 800901c:	e7ea      	b.n	8008ff4 <__swbuf_r+0x6c>
 800901e:	bf00      	nop
 8009020:	08009f70 	.word	0x08009f70
 8009024:	08009f90 	.word	0x08009f90
 8009028:	08009f50 	.word	0x08009f50

0800902c <__swsetup_r>:
 800902c:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <__swsetup_r+0xcc>)
 800902e:	b570      	push	{r4, r5, r6, lr}
 8009030:	681d      	ldr	r5, [r3, #0]
 8009032:	4606      	mov	r6, r0
 8009034:	460c      	mov	r4, r1
 8009036:	b125      	cbz	r5, 8009042 <__swsetup_r+0x16>
 8009038:	69ab      	ldr	r3, [r5, #24]
 800903a:	b913      	cbnz	r3, 8009042 <__swsetup_r+0x16>
 800903c:	4628      	mov	r0, r5
 800903e:	f000 f97d 	bl	800933c <__sinit>
 8009042:	4b2e      	ldr	r3, [pc, #184]	; (80090fc <__swsetup_r+0xd0>)
 8009044:	429c      	cmp	r4, r3
 8009046:	d10f      	bne.n	8009068 <__swsetup_r+0x3c>
 8009048:	686c      	ldr	r4, [r5, #4]
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009050:	0719      	lsls	r1, r3, #28
 8009052:	d42c      	bmi.n	80090ae <__swsetup_r+0x82>
 8009054:	06dd      	lsls	r5, r3, #27
 8009056:	d411      	bmi.n	800907c <__swsetup_r+0x50>
 8009058:	2309      	movs	r3, #9
 800905a:	6033      	str	r3, [r6, #0]
 800905c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	e03e      	b.n	80090e6 <__swsetup_r+0xba>
 8009068:	4b25      	ldr	r3, [pc, #148]	; (8009100 <__swsetup_r+0xd4>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <__swsetup_r+0x46>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7eb      	b.n	800904a <__swsetup_r+0x1e>
 8009072:	4b24      	ldr	r3, [pc, #144]	; (8009104 <__swsetup_r+0xd8>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7e6      	b.n	800904a <__swsetup_r+0x1e>
 800907c:	0758      	lsls	r0, r3, #29
 800907e:	d512      	bpl.n	80090a6 <__swsetup_r+0x7a>
 8009080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009082:	b141      	cbz	r1, 8009096 <__swsetup_r+0x6a>
 8009084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009088:	4299      	cmp	r1, r3
 800908a:	d002      	beq.n	8009092 <__swsetup_r+0x66>
 800908c:	4630      	mov	r0, r6
 800908e:	f000 fa59 	bl	8009544 <_free_r>
 8009092:	2300      	movs	r3, #0
 8009094:	6363      	str	r3, [r4, #52]	; 0x34
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800909c:	81a3      	strh	r3, [r4, #12]
 800909e:	2300      	movs	r3, #0
 80090a0:	6063      	str	r3, [r4, #4]
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	89a3      	ldrh	r3, [r4, #12]
 80090a8:	f043 0308 	orr.w	r3, r3, #8
 80090ac:	81a3      	strh	r3, [r4, #12]
 80090ae:	6923      	ldr	r3, [r4, #16]
 80090b0:	b94b      	cbnz	r3, 80090c6 <__swsetup_r+0x9a>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090bc:	d003      	beq.n	80090c6 <__swsetup_r+0x9a>
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	f000 f9ff 	bl	80094c4 <__smakebuf_r>
 80090c6:	89a0      	ldrh	r0, [r4, #12]
 80090c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090cc:	f010 0301 	ands.w	r3, r0, #1
 80090d0:	d00a      	beq.n	80090e8 <__swsetup_r+0xbc>
 80090d2:	2300      	movs	r3, #0
 80090d4:	60a3      	str	r3, [r4, #8]
 80090d6:	6963      	ldr	r3, [r4, #20]
 80090d8:	425b      	negs	r3, r3
 80090da:	61a3      	str	r3, [r4, #24]
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	b943      	cbnz	r3, 80090f2 <__swsetup_r+0xc6>
 80090e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090e4:	d1ba      	bne.n	800905c <__swsetup_r+0x30>
 80090e6:	bd70      	pop	{r4, r5, r6, pc}
 80090e8:	0781      	lsls	r1, r0, #30
 80090ea:	bf58      	it	pl
 80090ec:	6963      	ldrpl	r3, [r4, #20]
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	e7f4      	b.n	80090dc <__swsetup_r+0xb0>
 80090f2:	2000      	movs	r0, #0
 80090f4:	e7f7      	b.n	80090e6 <__swsetup_r+0xba>
 80090f6:	bf00      	nop
 80090f8:	20000010 	.word	0x20000010
 80090fc:	08009f70 	.word	0x08009f70
 8009100:	08009f90 	.word	0x08009f90
 8009104:	08009f50 	.word	0x08009f50

08009108 <__sflush_r>:
 8009108:	898a      	ldrh	r2, [r1, #12]
 800910a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	4605      	mov	r5, r0
 8009110:	0710      	lsls	r0, r2, #28
 8009112:	460c      	mov	r4, r1
 8009114:	d458      	bmi.n	80091c8 <__sflush_r+0xc0>
 8009116:	684b      	ldr	r3, [r1, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc05      	bgt.n	8009128 <__sflush_r+0x20>
 800911c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	dc02      	bgt.n	8009128 <__sflush_r+0x20>
 8009122:	2000      	movs	r0, #0
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912a:	2e00      	cmp	r6, #0
 800912c:	d0f9      	beq.n	8009122 <__sflush_r+0x1a>
 800912e:	2300      	movs	r3, #0
 8009130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009134:	682f      	ldr	r7, [r5, #0]
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	d032      	beq.n	80091a0 <__sflush_r+0x98>
 800913a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	075a      	lsls	r2, r3, #29
 8009140:	d505      	bpl.n	800914e <__sflush_r+0x46>
 8009142:	6863      	ldr	r3, [r4, #4]
 8009144:	1ac0      	subs	r0, r0, r3
 8009146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009148:	b10b      	cbz	r3, 800914e <__sflush_r+0x46>
 800914a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800914c:	1ac0      	subs	r0, r0, r3
 800914e:	2300      	movs	r3, #0
 8009150:	4602      	mov	r2, r0
 8009152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009154:	6a21      	ldr	r1, [r4, #32]
 8009156:	4628      	mov	r0, r5
 8009158:	47b0      	blx	r6
 800915a:	1c43      	adds	r3, r0, #1
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	d106      	bne.n	800916e <__sflush_r+0x66>
 8009160:	6829      	ldr	r1, [r5, #0]
 8009162:	291d      	cmp	r1, #29
 8009164:	d82c      	bhi.n	80091c0 <__sflush_r+0xb8>
 8009166:	4a2a      	ldr	r2, [pc, #168]	; (8009210 <__sflush_r+0x108>)
 8009168:	40ca      	lsrs	r2, r1
 800916a:	07d6      	lsls	r6, r2, #31
 800916c:	d528      	bpl.n	80091c0 <__sflush_r+0xb8>
 800916e:	2200      	movs	r2, #0
 8009170:	6062      	str	r2, [r4, #4]
 8009172:	04d9      	lsls	r1, r3, #19
 8009174:	6922      	ldr	r2, [r4, #16]
 8009176:	6022      	str	r2, [r4, #0]
 8009178:	d504      	bpl.n	8009184 <__sflush_r+0x7c>
 800917a:	1c42      	adds	r2, r0, #1
 800917c:	d101      	bne.n	8009182 <__sflush_r+0x7a>
 800917e:	682b      	ldr	r3, [r5, #0]
 8009180:	b903      	cbnz	r3, 8009184 <__sflush_r+0x7c>
 8009182:	6560      	str	r0, [r4, #84]	; 0x54
 8009184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009186:	602f      	str	r7, [r5, #0]
 8009188:	2900      	cmp	r1, #0
 800918a:	d0ca      	beq.n	8009122 <__sflush_r+0x1a>
 800918c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009190:	4299      	cmp	r1, r3
 8009192:	d002      	beq.n	800919a <__sflush_r+0x92>
 8009194:	4628      	mov	r0, r5
 8009196:	f000 f9d5 	bl	8009544 <_free_r>
 800919a:	2000      	movs	r0, #0
 800919c:	6360      	str	r0, [r4, #52]	; 0x34
 800919e:	e7c1      	b.n	8009124 <__sflush_r+0x1c>
 80091a0:	6a21      	ldr	r1, [r4, #32]
 80091a2:	2301      	movs	r3, #1
 80091a4:	4628      	mov	r0, r5
 80091a6:	47b0      	blx	r6
 80091a8:	1c41      	adds	r1, r0, #1
 80091aa:	d1c7      	bne.n	800913c <__sflush_r+0x34>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0c4      	beq.n	800913c <__sflush_r+0x34>
 80091b2:	2b1d      	cmp	r3, #29
 80091b4:	d001      	beq.n	80091ba <__sflush_r+0xb2>
 80091b6:	2b16      	cmp	r3, #22
 80091b8:	d101      	bne.n	80091be <__sflush_r+0xb6>
 80091ba:	602f      	str	r7, [r5, #0]
 80091bc:	e7b1      	b.n	8009122 <__sflush_r+0x1a>
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	e7ad      	b.n	8009124 <__sflush_r+0x1c>
 80091c8:	690f      	ldr	r7, [r1, #16]
 80091ca:	2f00      	cmp	r7, #0
 80091cc:	d0a9      	beq.n	8009122 <__sflush_r+0x1a>
 80091ce:	0793      	lsls	r3, r2, #30
 80091d0:	680e      	ldr	r6, [r1, #0]
 80091d2:	bf08      	it	eq
 80091d4:	694b      	ldreq	r3, [r1, #20]
 80091d6:	600f      	str	r7, [r1, #0]
 80091d8:	bf18      	it	ne
 80091da:	2300      	movne	r3, #0
 80091dc:	eba6 0807 	sub.w	r8, r6, r7
 80091e0:	608b      	str	r3, [r1, #8]
 80091e2:	f1b8 0f00 	cmp.w	r8, #0
 80091e6:	dd9c      	ble.n	8009122 <__sflush_r+0x1a>
 80091e8:	6a21      	ldr	r1, [r4, #32]
 80091ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091ec:	4643      	mov	r3, r8
 80091ee:	463a      	mov	r2, r7
 80091f0:	4628      	mov	r0, r5
 80091f2:	47b0      	blx	r6
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dc06      	bgt.n	8009206 <__sflush_r+0xfe>
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fe:	81a3      	strh	r3, [r4, #12]
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	e78e      	b.n	8009124 <__sflush_r+0x1c>
 8009206:	4407      	add	r7, r0
 8009208:	eba8 0800 	sub.w	r8, r8, r0
 800920c:	e7e9      	b.n	80091e2 <__sflush_r+0xda>
 800920e:	bf00      	nop
 8009210:	20400001 	.word	0x20400001

08009214 <_fflush_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	690b      	ldr	r3, [r1, #16]
 8009218:	4605      	mov	r5, r0
 800921a:	460c      	mov	r4, r1
 800921c:	b913      	cbnz	r3, 8009224 <_fflush_r+0x10>
 800921e:	2500      	movs	r5, #0
 8009220:	4628      	mov	r0, r5
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	b118      	cbz	r0, 800922e <_fflush_r+0x1a>
 8009226:	6983      	ldr	r3, [r0, #24]
 8009228:	b90b      	cbnz	r3, 800922e <_fflush_r+0x1a>
 800922a:	f000 f887 	bl	800933c <__sinit>
 800922e:	4b14      	ldr	r3, [pc, #80]	; (8009280 <_fflush_r+0x6c>)
 8009230:	429c      	cmp	r4, r3
 8009232:	d11b      	bne.n	800926c <_fflush_r+0x58>
 8009234:	686c      	ldr	r4, [r5, #4]
 8009236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0ef      	beq.n	800921e <_fflush_r+0xa>
 800923e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009240:	07d0      	lsls	r0, r2, #31
 8009242:	d404      	bmi.n	800924e <_fflush_r+0x3a>
 8009244:	0599      	lsls	r1, r3, #22
 8009246:	d402      	bmi.n	800924e <_fflush_r+0x3a>
 8009248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800924a:	f000 f915 	bl	8009478 <__retarget_lock_acquire_recursive>
 800924e:	4628      	mov	r0, r5
 8009250:	4621      	mov	r1, r4
 8009252:	f7ff ff59 	bl	8009108 <__sflush_r>
 8009256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009258:	07da      	lsls	r2, r3, #31
 800925a:	4605      	mov	r5, r0
 800925c:	d4e0      	bmi.n	8009220 <_fflush_r+0xc>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	059b      	lsls	r3, r3, #22
 8009262:	d4dd      	bmi.n	8009220 <_fflush_r+0xc>
 8009264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009266:	f000 f908 	bl	800947a <__retarget_lock_release_recursive>
 800926a:	e7d9      	b.n	8009220 <_fflush_r+0xc>
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <_fflush_r+0x70>)
 800926e:	429c      	cmp	r4, r3
 8009270:	d101      	bne.n	8009276 <_fflush_r+0x62>
 8009272:	68ac      	ldr	r4, [r5, #8]
 8009274:	e7df      	b.n	8009236 <_fflush_r+0x22>
 8009276:	4b04      	ldr	r3, [pc, #16]	; (8009288 <_fflush_r+0x74>)
 8009278:	429c      	cmp	r4, r3
 800927a:	bf08      	it	eq
 800927c:	68ec      	ldreq	r4, [r5, #12]
 800927e:	e7da      	b.n	8009236 <_fflush_r+0x22>
 8009280:	08009f70 	.word	0x08009f70
 8009284:	08009f90 	.word	0x08009f90
 8009288:	08009f50 	.word	0x08009f50

0800928c <std>:
 800928c:	2300      	movs	r3, #0
 800928e:	b510      	push	{r4, lr}
 8009290:	4604      	mov	r4, r0
 8009292:	e9c0 3300 	strd	r3, r3, [r0]
 8009296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800929a:	6083      	str	r3, [r0, #8]
 800929c:	8181      	strh	r1, [r0, #12]
 800929e:	6643      	str	r3, [r0, #100]	; 0x64
 80092a0:	81c2      	strh	r2, [r0, #14]
 80092a2:	6183      	str	r3, [r0, #24]
 80092a4:	4619      	mov	r1, r3
 80092a6:	2208      	movs	r2, #8
 80092a8:	305c      	adds	r0, #92	; 0x5c
 80092aa:	f7ff fdd7 	bl	8008e5c <memset>
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <std+0x38>)
 80092b0:	6263      	str	r3, [r4, #36]	; 0x24
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <std+0x3c>)
 80092b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <std+0x40>)
 80092b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ba:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <std+0x44>)
 80092bc:	6224      	str	r4, [r4, #32]
 80092be:	6323      	str	r3, [r4, #48]	; 0x30
 80092c0:	bd10      	pop	{r4, pc}
 80092c2:	bf00      	nop
 80092c4:	08009c95 	.word	0x08009c95
 80092c8:	08009cb7 	.word	0x08009cb7
 80092cc:	08009cef 	.word	0x08009cef
 80092d0:	08009d13 	.word	0x08009d13

080092d4 <_cleanup_r>:
 80092d4:	4901      	ldr	r1, [pc, #4]	; (80092dc <_cleanup_r+0x8>)
 80092d6:	f000 b8af 	b.w	8009438 <_fwalk_reent>
 80092da:	bf00      	nop
 80092dc:	08009215 	.word	0x08009215

080092e0 <__sfmoreglue>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	1e4a      	subs	r2, r1, #1
 80092e4:	2568      	movs	r5, #104	; 0x68
 80092e6:	4355      	muls	r5, r2
 80092e8:	460e      	mov	r6, r1
 80092ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092ee:	f000 f979 	bl	80095e4 <_malloc_r>
 80092f2:	4604      	mov	r4, r0
 80092f4:	b140      	cbz	r0, 8009308 <__sfmoreglue+0x28>
 80092f6:	2100      	movs	r1, #0
 80092f8:	e9c0 1600 	strd	r1, r6, [r0]
 80092fc:	300c      	adds	r0, #12
 80092fe:	60a0      	str	r0, [r4, #8]
 8009300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009304:	f7ff fdaa 	bl	8008e5c <memset>
 8009308:	4620      	mov	r0, r4
 800930a:	bd70      	pop	{r4, r5, r6, pc}

0800930c <__sfp_lock_acquire>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__sfp_lock_acquire+0x8>)
 800930e:	f000 b8b3 	b.w	8009478 <__retarget_lock_acquire_recursive>
 8009312:	bf00      	nop
 8009314:	200003a4 	.word	0x200003a4

08009318 <__sfp_lock_release>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__sfp_lock_release+0x8>)
 800931a:	f000 b8ae 	b.w	800947a <__retarget_lock_release_recursive>
 800931e:	bf00      	nop
 8009320:	200003a4 	.word	0x200003a4

08009324 <__sinit_lock_acquire>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sinit_lock_acquire+0x8>)
 8009326:	f000 b8a7 	b.w	8009478 <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	2000039f 	.word	0x2000039f

08009330 <__sinit_lock_release>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__sinit_lock_release+0x8>)
 8009332:	f000 b8a2 	b.w	800947a <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	2000039f 	.word	0x2000039f

0800933c <__sinit>:
 800933c:	b510      	push	{r4, lr}
 800933e:	4604      	mov	r4, r0
 8009340:	f7ff fff0 	bl	8009324 <__sinit_lock_acquire>
 8009344:	69a3      	ldr	r3, [r4, #24]
 8009346:	b11b      	cbz	r3, 8009350 <__sinit+0x14>
 8009348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934c:	f7ff bff0 	b.w	8009330 <__sinit_lock_release>
 8009350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009354:	6523      	str	r3, [r4, #80]	; 0x50
 8009356:	4b13      	ldr	r3, [pc, #76]	; (80093a4 <__sinit+0x68>)
 8009358:	4a13      	ldr	r2, [pc, #76]	; (80093a8 <__sinit+0x6c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	62a2      	str	r2, [r4, #40]	; 0x28
 800935e:	42a3      	cmp	r3, r4
 8009360:	bf04      	itt	eq
 8009362:	2301      	moveq	r3, #1
 8009364:	61a3      	streq	r3, [r4, #24]
 8009366:	4620      	mov	r0, r4
 8009368:	f000 f820 	bl	80093ac <__sfp>
 800936c:	6060      	str	r0, [r4, #4]
 800936e:	4620      	mov	r0, r4
 8009370:	f000 f81c 	bl	80093ac <__sfp>
 8009374:	60a0      	str	r0, [r4, #8]
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f818 	bl	80093ac <__sfp>
 800937c:	2200      	movs	r2, #0
 800937e:	60e0      	str	r0, [r4, #12]
 8009380:	2104      	movs	r1, #4
 8009382:	6860      	ldr	r0, [r4, #4]
 8009384:	f7ff ff82 	bl	800928c <std>
 8009388:	68a0      	ldr	r0, [r4, #8]
 800938a:	2201      	movs	r2, #1
 800938c:	2109      	movs	r1, #9
 800938e:	f7ff ff7d 	bl	800928c <std>
 8009392:	68e0      	ldr	r0, [r4, #12]
 8009394:	2202      	movs	r2, #2
 8009396:	2112      	movs	r1, #18
 8009398:	f7ff ff78 	bl	800928c <std>
 800939c:	2301      	movs	r3, #1
 800939e:	61a3      	str	r3, [r4, #24]
 80093a0:	e7d2      	b.n	8009348 <__sinit+0xc>
 80093a2:	bf00      	nop
 80093a4:	08009f4c 	.word	0x08009f4c
 80093a8:	080092d5 	.word	0x080092d5

080093ac <__sfp>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	4607      	mov	r7, r0
 80093b0:	f7ff ffac 	bl	800930c <__sfp_lock_acquire>
 80093b4:	4b1e      	ldr	r3, [pc, #120]	; (8009430 <__sfp+0x84>)
 80093b6:	681e      	ldr	r6, [r3, #0]
 80093b8:	69b3      	ldr	r3, [r6, #24]
 80093ba:	b913      	cbnz	r3, 80093c2 <__sfp+0x16>
 80093bc:	4630      	mov	r0, r6
 80093be:	f7ff ffbd 	bl	800933c <__sinit>
 80093c2:	3648      	adds	r6, #72	; 0x48
 80093c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	d503      	bpl.n	80093d4 <__sfp+0x28>
 80093cc:	6833      	ldr	r3, [r6, #0]
 80093ce:	b30b      	cbz	r3, 8009414 <__sfp+0x68>
 80093d0:	6836      	ldr	r6, [r6, #0]
 80093d2:	e7f7      	b.n	80093c4 <__sfp+0x18>
 80093d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093d8:	b9d5      	cbnz	r5, 8009410 <__sfp+0x64>
 80093da:	4b16      	ldr	r3, [pc, #88]	; (8009434 <__sfp+0x88>)
 80093dc:	60e3      	str	r3, [r4, #12]
 80093de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093e2:	6665      	str	r5, [r4, #100]	; 0x64
 80093e4:	f000 f847 	bl	8009476 <__retarget_lock_init_recursive>
 80093e8:	f7ff ff96 	bl	8009318 <__sfp_lock_release>
 80093ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093f4:	6025      	str	r5, [r4, #0]
 80093f6:	61a5      	str	r5, [r4, #24]
 80093f8:	2208      	movs	r2, #8
 80093fa:	4629      	mov	r1, r5
 80093fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009400:	f7ff fd2c 	bl	8008e5c <memset>
 8009404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800940c:	4620      	mov	r0, r4
 800940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009410:	3468      	adds	r4, #104	; 0x68
 8009412:	e7d9      	b.n	80093c8 <__sfp+0x1c>
 8009414:	2104      	movs	r1, #4
 8009416:	4638      	mov	r0, r7
 8009418:	f7ff ff62 	bl	80092e0 <__sfmoreglue>
 800941c:	4604      	mov	r4, r0
 800941e:	6030      	str	r0, [r6, #0]
 8009420:	2800      	cmp	r0, #0
 8009422:	d1d5      	bne.n	80093d0 <__sfp+0x24>
 8009424:	f7ff ff78 	bl	8009318 <__sfp_lock_release>
 8009428:	230c      	movs	r3, #12
 800942a:	603b      	str	r3, [r7, #0]
 800942c:	e7ee      	b.n	800940c <__sfp+0x60>
 800942e:	bf00      	nop
 8009430:	08009f4c 	.word	0x08009f4c
 8009434:	ffff0001 	.word	0xffff0001

08009438 <_fwalk_reent>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	4606      	mov	r6, r0
 800943e:	4688      	mov	r8, r1
 8009440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009444:	2700      	movs	r7, #0
 8009446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800944a:	f1b9 0901 	subs.w	r9, r9, #1
 800944e:	d505      	bpl.n	800945c <_fwalk_reent+0x24>
 8009450:	6824      	ldr	r4, [r4, #0]
 8009452:	2c00      	cmp	r4, #0
 8009454:	d1f7      	bne.n	8009446 <_fwalk_reent+0xe>
 8009456:	4638      	mov	r0, r7
 8009458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800945c:	89ab      	ldrh	r3, [r5, #12]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d907      	bls.n	8009472 <_fwalk_reent+0x3a>
 8009462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009466:	3301      	adds	r3, #1
 8009468:	d003      	beq.n	8009472 <_fwalk_reent+0x3a>
 800946a:	4629      	mov	r1, r5
 800946c:	4630      	mov	r0, r6
 800946e:	47c0      	blx	r8
 8009470:	4307      	orrs	r7, r0
 8009472:	3568      	adds	r5, #104	; 0x68
 8009474:	e7e9      	b.n	800944a <_fwalk_reent+0x12>

08009476 <__retarget_lock_init_recursive>:
 8009476:	4770      	bx	lr

08009478 <__retarget_lock_acquire_recursive>:
 8009478:	4770      	bx	lr

0800947a <__retarget_lock_release_recursive>:
 800947a:	4770      	bx	lr

0800947c <__swhatbuf_r>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	460e      	mov	r6, r1
 8009480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009484:	2900      	cmp	r1, #0
 8009486:	b096      	sub	sp, #88	; 0x58
 8009488:	4614      	mov	r4, r2
 800948a:	461d      	mov	r5, r3
 800948c:	da07      	bge.n	800949e <__swhatbuf_r+0x22>
 800948e:	2300      	movs	r3, #0
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	89b3      	ldrh	r3, [r6, #12]
 8009494:	061a      	lsls	r2, r3, #24
 8009496:	d410      	bmi.n	80094ba <__swhatbuf_r+0x3e>
 8009498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800949c:	e00e      	b.n	80094bc <__swhatbuf_r+0x40>
 800949e:	466a      	mov	r2, sp
 80094a0:	f000 fc5e 	bl	8009d60 <_fstat_r>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	dbf2      	blt.n	800948e <__swhatbuf_r+0x12>
 80094a8:	9a01      	ldr	r2, [sp, #4]
 80094aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094b2:	425a      	negs	r2, r3
 80094b4:	415a      	adcs	r2, r3
 80094b6:	602a      	str	r2, [r5, #0]
 80094b8:	e7ee      	b.n	8009498 <__swhatbuf_r+0x1c>
 80094ba:	2340      	movs	r3, #64	; 0x40
 80094bc:	2000      	movs	r0, #0
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	b016      	add	sp, #88	; 0x58
 80094c2:	bd70      	pop	{r4, r5, r6, pc}

080094c4 <__smakebuf_r>:
 80094c4:	898b      	ldrh	r3, [r1, #12]
 80094c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094c8:	079d      	lsls	r5, r3, #30
 80094ca:	4606      	mov	r6, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	d507      	bpl.n	80094e0 <__smakebuf_r+0x1c>
 80094d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	6123      	str	r3, [r4, #16]
 80094d8:	2301      	movs	r3, #1
 80094da:	6163      	str	r3, [r4, #20]
 80094dc:	b002      	add	sp, #8
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	ab01      	add	r3, sp, #4
 80094e2:	466a      	mov	r2, sp
 80094e4:	f7ff ffca 	bl	800947c <__swhatbuf_r>
 80094e8:	9900      	ldr	r1, [sp, #0]
 80094ea:	4605      	mov	r5, r0
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f879 	bl	80095e4 <_malloc_r>
 80094f2:	b948      	cbnz	r0, 8009508 <__smakebuf_r+0x44>
 80094f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094f8:	059a      	lsls	r2, r3, #22
 80094fa:	d4ef      	bmi.n	80094dc <__smakebuf_r+0x18>
 80094fc:	f023 0303 	bic.w	r3, r3, #3
 8009500:	f043 0302 	orr.w	r3, r3, #2
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	e7e3      	b.n	80094d0 <__smakebuf_r+0xc>
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <__smakebuf_r+0x7c>)
 800950a:	62b3      	str	r3, [r6, #40]	; 0x28
 800950c:	89a3      	ldrh	r3, [r4, #12]
 800950e:	6020      	str	r0, [r4, #0]
 8009510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009514:	81a3      	strh	r3, [r4, #12]
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	6163      	str	r3, [r4, #20]
 800951a:	9b01      	ldr	r3, [sp, #4]
 800951c:	6120      	str	r0, [r4, #16]
 800951e:	b15b      	cbz	r3, 8009538 <__smakebuf_r+0x74>
 8009520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009524:	4630      	mov	r0, r6
 8009526:	f000 fc2d 	bl	8009d84 <_isatty_r>
 800952a:	b128      	cbz	r0, 8009538 <__smakebuf_r+0x74>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f023 0303 	bic.w	r3, r3, #3
 8009532:	f043 0301 	orr.w	r3, r3, #1
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	89a0      	ldrh	r0, [r4, #12]
 800953a:	4305      	orrs	r5, r0
 800953c:	81a5      	strh	r5, [r4, #12]
 800953e:	e7cd      	b.n	80094dc <__smakebuf_r+0x18>
 8009540:	080092d5 	.word	0x080092d5

08009544 <_free_r>:
 8009544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009546:	2900      	cmp	r1, #0
 8009548:	d048      	beq.n	80095dc <_free_r+0x98>
 800954a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954e:	9001      	str	r0, [sp, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f1a1 0404 	sub.w	r4, r1, #4
 8009556:	bfb8      	it	lt
 8009558:	18e4      	addlt	r4, r4, r3
 800955a:	f000 fc35 	bl	8009dc8 <__malloc_lock>
 800955e:	4a20      	ldr	r2, [pc, #128]	; (80095e0 <_free_r+0x9c>)
 8009560:	9801      	ldr	r0, [sp, #4]
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	4615      	mov	r5, r2
 8009566:	b933      	cbnz	r3, 8009576 <_free_r+0x32>
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	6014      	str	r4, [r2, #0]
 800956c:	b003      	add	sp, #12
 800956e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009572:	f000 bc2f 	b.w	8009dd4 <__malloc_unlock>
 8009576:	42a3      	cmp	r3, r4
 8009578:	d90b      	bls.n	8009592 <_free_r+0x4e>
 800957a:	6821      	ldr	r1, [r4, #0]
 800957c:	1862      	adds	r2, r4, r1
 800957e:	4293      	cmp	r3, r2
 8009580:	bf04      	itt	eq
 8009582:	681a      	ldreq	r2, [r3, #0]
 8009584:	685b      	ldreq	r3, [r3, #4]
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	bf04      	itt	eq
 800958a:	1852      	addeq	r2, r2, r1
 800958c:	6022      	streq	r2, [r4, #0]
 800958e:	602c      	str	r4, [r5, #0]
 8009590:	e7ec      	b.n	800956c <_free_r+0x28>
 8009592:	461a      	mov	r2, r3
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	b10b      	cbz	r3, 800959c <_free_r+0x58>
 8009598:	42a3      	cmp	r3, r4
 800959a:	d9fa      	bls.n	8009592 <_free_r+0x4e>
 800959c:	6811      	ldr	r1, [r2, #0]
 800959e:	1855      	adds	r5, r2, r1
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d10b      	bne.n	80095bc <_free_r+0x78>
 80095a4:	6824      	ldr	r4, [r4, #0]
 80095a6:	4421      	add	r1, r4
 80095a8:	1854      	adds	r4, r2, r1
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	d1dd      	bne.n	800956c <_free_r+0x28>
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	6053      	str	r3, [r2, #4]
 80095b6:	4421      	add	r1, r4
 80095b8:	6011      	str	r1, [r2, #0]
 80095ba:	e7d7      	b.n	800956c <_free_r+0x28>
 80095bc:	d902      	bls.n	80095c4 <_free_r+0x80>
 80095be:	230c      	movs	r3, #12
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	e7d3      	b.n	800956c <_free_r+0x28>
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	1961      	adds	r1, r4, r5
 80095c8:	428b      	cmp	r3, r1
 80095ca:	bf04      	itt	eq
 80095cc:	6819      	ldreq	r1, [r3, #0]
 80095ce:	685b      	ldreq	r3, [r3, #4]
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	bf04      	itt	eq
 80095d4:	1949      	addeq	r1, r1, r5
 80095d6:	6021      	streq	r1, [r4, #0]
 80095d8:	6054      	str	r4, [r2, #4]
 80095da:	e7c7      	b.n	800956c <_free_r+0x28>
 80095dc:	b003      	add	sp, #12
 80095de:	bd30      	pop	{r4, r5, pc}
 80095e0:	200000fc 	.word	0x200000fc

080095e4 <_malloc_r>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	1ccd      	adds	r5, r1, #3
 80095e8:	f025 0503 	bic.w	r5, r5, #3
 80095ec:	3508      	adds	r5, #8
 80095ee:	2d0c      	cmp	r5, #12
 80095f0:	bf38      	it	cc
 80095f2:	250c      	movcc	r5, #12
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	4606      	mov	r6, r0
 80095f8:	db01      	blt.n	80095fe <_malloc_r+0x1a>
 80095fa:	42a9      	cmp	r1, r5
 80095fc:	d903      	bls.n	8009606 <_malloc_r+0x22>
 80095fe:	230c      	movs	r3, #12
 8009600:	6033      	str	r3, [r6, #0]
 8009602:	2000      	movs	r0, #0
 8009604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009606:	f000 fbdf 	bl	8009dc8 <__malloc_lock>
 800960a:	4921      	ldr	r1, [pc, #132]	; (8009690 <_malloc_r+0xac>)
 800960c:	680a      	ldr	r2, [r1, #0]
 800960e:	4614      	mov	r4, r2
 8009610:	b99c      	cbnz	r4, 800963a <_malloc_r+0x56>
 8009612:	4f20      	ldr	r7, [pc, #128]	; (8009694 <_malloc_r+0xb0>)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	b923      	cbnz	r3, 8009622 <_malloc_r+0x3e>
 8009618:	4621      	mov	r1, r4
 800961a:	4630      	mov	r0, r6
 800961c:	f000 fb2a 	bl	8009c74 <_sbrk_r>
 8009620:	6038      	str	r0, [r7, #0]
 8009622:	4629      	mov	r1, r5
 8009624:	4630      	mov	r0, r6
 8009626:	f000 fb25 	bl	8009c74 <_sbrk_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d123      	bne.n	8009676 <_malloc_r+0x92>
 800962e:	230c      	movs	r3, #12
 8009630:	6033      	str	r3, [r6, #0]
 8009632:	4630      	mov	r0, r6
 8009634:	f000 fbce 	bl	8009dd4 <__malloc_unlock>
 8009638:	e7e3      	b.n	8009602 <_malloc_r+0x1e>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	1b5b      	subs	r3, r3, r5
 800963e:	d417      	bmi.n	8009670 <_malloc_r+0x8c>
 8009640:	2b0b      	cmp	r3, #11
 8009642:	d903      	bls.n	800964c <_malloc_r+0x68>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	441c      	add	r4, r3
 8009648:	6025      	str	r5, [r4, #0]
 800964a:	e004      	b.n	8009656 <_malloc_r+0x72>
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	42a2      	cmp	r2, r4
 8009650:	bf0c      	ite	eq
 8009652:	600b      	streq	r3, [r1, #0]
 8009654:	6053      	strne	r3, [r2, #4]
 8009656:	4630      	mov	r0, r6
 8009658:	f000 fbbc 	bl	8009dd4 <__malloc_unlock>
 800965c:	f104 000b 	add.w	r0, r4, #11
 8009660:	1d23      	adds	r3, r4, #4
 8009662:	f020 0007 	bic.w	r0, r0, #7
 8009666:	1ac2      	subs	r2, r0, r3
 8009668:	d0cc      	beq.n	8009604 <_malloc_r+0x20>
 800966a:	1a1b      	subs	r3, r3, r0
 800966c:	50a3      	str	r3, [r4, r2]
 800966e:	e7c9      	b.n	8009604 <_malloc_r+0x20>
 8009670:	4622      	mov	r2, r4
 8009672:	6864      	ldr	r4, [r4, #4]
 8009674:	e7cc      	b.n	8009610 <_malloc_r+0x2c>
 8009676:	1cc4      	adds	r4, r0, #3
 8009678:	f024 0403 	bic.w	r4, r4, #3
 800967c:	42a0      	cmp	r0, r4
 800967e:	d0e3      	beq.n	8009648 <_malloc_r+0x64>
 8009680:	1a21      	subs	r1, r4, r0
 8009682:	4630      	mov	r0, r6
 8009684:	f000 faf6 	bl	8009c74 <_sbrk_r>
 8009688:	3001      	adds	r0, #1
 800968a:	d1dd      	bne.n	8009648 <_malloc_r+0x64>
 800968c:	e7cf      	b.n	800962e <_malloc_r+0x4a>
 800968e:	bf00      	nop
 8009690:	200000fc 	.word	0x200000fc
 8009694:	20000100 	.word	0x20000100

08009698 <__sfputc_r>:
 8009698:	6893      	ldr	r3, [r2, #8]
 800969a:	3b01      	subs	r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	b410      	push	{r4}
 80096a0:	6093      	str	r3, [r2, #8]
 80096a2:	da08      	bge.n	80096b6 <__sfputc_r+0x1e>
 80096a4:	6994      	ldr	r4, [r2, #24]
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	db01      	blt.n	80096ae <__sfputc_r+0x16>
 80096aa:	290a      	cmp	r1, #10
 80096ac:	d103      	bne.n	80096b6 <__sfputc_r+0x1e>
 80096ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b2:	f7ff bc69 	b.w	8008f88 <__swbuf_r>
 80096b6:	6813      	ldr	r3, [r2, #0]
 80096b8:	1c58      	adds	r0, r3, #1
 80096ba:	6010      	str	r0, [r2, #0]
 80096bc:	7019      	strb	r1, [r3, #0]
 80096be:	4608      	mov	r0, r1
 80096c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <__sfputs_r>:
 80096c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c8:	4606      	mov	r6, r0
 80096ca:	460f      	mov	r7, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	18d5      	adds	r5, r2, r3
 80096d0:	42ac      	cmp	r4, r5
 80096d2:	d101      	bne.n	80096d8 <__sfputs_r+0x12>
 80096d4:	2000      	movs	r0, #0
 80096d6:	e007      	b.n	80096e8 <__sfputs_r+0x22>
 80096d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096dc:	463a      	mov	r2, r7
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ffda 	bl	8009698 <__sfputc_r>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d1f3      	bne.n	80096d0 <__sfputs_r+0xa>
 80096e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ec <_vfiprintf_r>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	460d      	mov	r5, r1
 80096f2:	b09d      	sub	sp, #116	; 0x74
 80096f4:	4614      	mov	r4, r2
 80096f6:	4698      	mov	r8, r3
 80096f8:	4606      	mov	r6, r0
 80096fa:	b118      	cbz	r0, 8009704 <_vfiprintf_r+0x18>
 80096fc:	6983      	ldr	r3, [r0, #24]
 80096fe:	b90b      	cbnz	r3, 8009704 <_vfiprintf_r+0x18>
 8009700:	f7ff fe1c 	bl	800933c <__sinit>
 8009704:	4b89      	ldr	r3, [pc, #548]	; (800992c <_vfiprintf_r+0x240>)
 8009706:	429d      	cmp	r5, r3
 8009708:	d11b      	bne.n	8009742 <_vfiprintf_r+0x56>
 800970a:	6875      	ldr	r5, [r6, #4]
 800970c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	d405      	bmi.n	800971e <_vfiprintf_r+0x32>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d402      	bmi.n	800971e <_vfiprintf_r+0x32>
 8009718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971a:	f7ff fead 	bl	8009478 <__retarget_lock_acquire_recursive>
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	071b      	lsls	r3, r3, #28
 8009722:	d501      	bpl.n	8009728 <_vfiprintf_r+0x3c>
 8009724:	692b      	ldr	r3, [r5, #16]
 8009726:	b9eb      	cbnz	r3, 8009764 <_vfiprintf_r+0x78>
 8009728:	4629      	mov	r1, r5
 800972a:	4630      	mov	r0, r6
 800972c:	f7ff fc7e 	bl	800902c <__swsetup_r>
 8009730:	b1c0      	cbz	r0, 8009764 <_vfiprintf_r+0x78>
 8009732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009734:	07dc      	lsls	r4, r3, #31
 8009736:	d50e      	bpl.n	8009756 <_vfiprintf_r+0x6a>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	b01d      	add	sp, #116	; 0x74
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	4b7b      	ldr	r3, [pc, #492]	; (8009930 <_vfiprintf_r+0x244>)
 8009744:	429d      	cmp	r5, r3
 8009746:	d101      	bne.n	800974c <_vfiprintf_r+0x60>
 8009748:	68b5      	ldr	r5, [r6, #8]
 800974a:	e7df      	b.n	800970c <_vfiprintf_r+0x20>
 800974c:	4b79      	ldr	r3, [pc, #484]	; (8009934 <_vfiprintf_r+0x248>)
 800974e:	429d      	cmp	r5, r3
 8009750:	bf08      	it	eq
 8009752:	68f5      	ldreq	r5, [r6, #12]
 8009754:	e7da      	b.n	800970c <_vfiprintf_r+0x20>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	0598      	lsls	r0, r3, #22
 800975a:	d4ed      	bmi.n	8009738 <_vfiprintf_r+0x4c>
 800975c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800975e:	f7ff fe8c 	bl	800947a <__retarget_lock_release_recursive>
 8009762:	e7e9      	b.n	8009738 <_vfiprintf_r+0x4c>
 8009764:	2300      	movs	r3, #0
 8009766:	9309      	str	r3, [sp, #36]	; 0x24
 8009768:	2320      	movs	r3, #32
 800976a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800976e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009772:	2330      	movs	r3, #48	; 0x30
 8009774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009938 <_vfiprintf_r+0x24c>
 8009778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800977c:	f04f 0901 	mov.w	r9, #1
 8009780:	4623      	mov	r3, r4
 8009782:	469a      	mov	sl, r3
 8009784:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009788:	b10a      	cbz	r2, 800978e <_vfiprintf_r+0xa2>
 800978a:	2a25      	cmp	r2, #37	; 0x25
 800978c:	d1f9      	bne.n	8009782 <_vfiprintf_r+0x96>
 800978e:	ebba 0b04 	subs.w	fp, sl, r4
 8009792:	d00b      	beq.n	80097ac <_vfiprintf_r+0xc0>
 8009794:	465b      	mov	r3, fp
 8009796:	4622      	mov	r2, r4
 8009798:	4629      	mov	r1, r5
 800979a:	4630      	mov	r0, r6
 800979c:	f7ff ff93 	bl	80096c6 <__sfputs_r>
 80097a0:	3001      	adds	r0, #1
 80097a2:	f000 80aa 	beq.w	80098fa <_vfiprintf_r+0x20e>
 80097a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a8:	445a      	add	r2, fp
 80097aa:	9209      	str	r2, [sp, #36]	; 0x24
 80097ac:	f89a 3000 	ldrb.w	r3, [sl]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 80a2 	beq.w	80098fa <_vfiprintf_r+0x20e>
 80097b6:	2300      	movs	r3, #0
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295
 80097bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097c0:	f10a 0a01 	add.w	sl, sl, #1
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	9307      	str	r3, [sp, #28]
 80097c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097cc:	931a      	str	r3, [sp, #104]	; 0x68
 80097ce:	4654      	mov	r4, sl
 80097d0:	2205      	movs	r2, #5
 80097d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097d6:	4858      	ldr	r0, [pc, #352]	; (8009938 <_vfiprintf_r+0x24c>)
 80097d8:	f7f6 fd1a 	bl	8000210 <memchr>
 80097dc:	9a04      	ldr	r2, [sp, #16]
 80097de:	b9d8      	cbnz	r0, 8009818 <_vfiprintf_r+0x12c>
 80097e0:	06d1      	lsls	r1, r2, #27
 80097e2:	bf44      	itt	mi
 80097e4:	2320      	movmi	r3, #32
 80097e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ea:	0713      	lsls	r3, r2, #28
 80097ec:	bf44      	itt	mi
 80097ee:	232b      	movmi	r3, #43	; 0x2b
 80097f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097f4:	f89a 3000 	ldrb.w	r3, [sl]
 80097f8:	2b2a      	cmp	r3, #42	; 0x2a
 80097fa:	d015      	beq.n	8009828 <_vfiprintf_r+0x13c>
 80097fc:	9a07      	ldr	r2, [sp, #28]
 80097fe:	4654      	mov	r4, sl
 8009800:	2000      	movs	r0, #0
 8009802:	f04f 0c0a 	mov.w	ip, #10
 8009806:	4621      	mov	r1, r4
 8009808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800980c:	3b30      	subs	r3, #48	; 0x30
 800980e:	2b09      	cmp	r3, #9
 8009810:	d94e      	bls.n	80098b0 <_vfiprintf_r+0x1c4>
 8009812:	b1b0      	cbz	r0, 8009842 <_vfiprintf_r+0x156>
 8009814:	9207      	str	r2, [sp, #28]
 8009816:	e014      	b.n	8009842 <_vfiprintf_r+0x156>
 8009818:	eba0 0308 	sub.w	r3, r0, r8
 800981c:	fa09 f303 	lsl.w	r3, r9, r3
 8009820:	4313      	orrs	r3, r2
 8009822:	9304      	str	r3, [sp, #16]
 8009824:	46a2      	mov	sl, r4
 8009826:	e7d2      	b.n	80097ce <_vfiprintf_r+0xe2>
 8009828:	9b03      	ldr	r3, [sp, #12]
 800982a:	1d19      	adds	r1, r3, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	9103      	str	r1, [sp, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfbb      	ittet	lt
 8009834:	425b      	neglt	r3, r3
 8009836:	f042 0202 	orrlt.w	r2, r2, #2
 800983a:	9307      	strge	r3, [sp, #28]
 800983c:	9307      	strlt	r3, [sp, #28]
 800983e:	bfb8      	it	lt
 8009840:	9204      	strlt	r2, [sp, #16]
 8009842:	7823      	ldrb	r3, [r4, #0]
 8009844:	2b2e      	cmp	r3, #46	; 0x2e
 8009846:	d10c      	bne.n	8009862 <_vfiprintf_r+0x176>
 8009848:	7863      	ldrb	r3, [r4, #1]
 800984a:	2b2a      	cmp	r3, #42	; 0x2a
 800984c:	d135      	bne.n	80098ba <_vfiprintf_r+0x1ce>
 800984e:	9b03      	ldr	r3, [sp, #12]
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	9203      	str	r2, [sp, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	bfb8      	it	lt
 800985a:	f04f 33ff 	movlt.w	r3, #4294967295
 800985e:	3402      	adds	r4, #2
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009948 <_vfiprintf_r+0x25c>
 8009866:	7821      	ldrb	r1, [r4, #0]
 8009868:	2203      	movs	r2, #3
 800986a:	4650      	mov	r0, sl
 800986c:	f7f6 fcd0 	bl	8000210 <memchr>
 8009870:	b140      	cbz	r0, 8009884 <_vfiprintf_r+0x198>
 8009872:	2340      	movs	r3, #64	; 0x40
 8009874:	eba0 000a 	sub.w	r0, r0, sl
 8009878:	fa03 f000 	lsl.w	r0, r3, r0
 800987c:	9b04      	ldr	r3, [sp, #16]
 800987e:	4303      	orrs	r3, r0
 8009880:	3401      	adds	r4, #1
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009888:	482c      	ldr	r0, [pc, #176]	; (800993c <_vfiprintf_r+0x250>)
 800988a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800988e:	2206      	movs	r2, #6
 8009890:	f7f6 fcbe 	bl	8000210 <memchr>
 8009894:	2800      	cmp	r0, #0
 8009896:	d03f      	beq.n	8009918 <_vfiprintf_r+0x22c>
 8009898:	4b29      	ldr	r3, [pc, #164]	; (8009940 <_vfiprintf_r+0x254>)
 800989a:	bb1b      	cbnz	r3, 80098e4 <_vfiprintf_r+0x1f8>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	3307      	adds	r3, #7
 80098a0:	f023 0307 	bic.w	r3, r3, #7
 80098a4:	3308      	adds	r3, #8
 80098a6:	9303      	str	r3, [sp, #12]
 80098a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098aa:	443b      	add	r3, r7
 80098ac:	9309      	str	r3, [sp, #36]	; 0x24
 80098ae:	e767      	b.n	8009780 <_vfiprintf_r+0x94>
 80098b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098b4:	460c      	mov	r4, r1
 80098b6:	2001      	movs	r0, #1
 80098b8:	e7a5      	b.n	8009806 <_vfiprintf_r+0x11a>
 80098ba:	2300      	movs	r3, #0
 80098bc:	3401      	adds	r4, #1
 80098be:	9305      	str	r3, [sp, #20]
 80098c0:	4619      	mov	r1, r3
 80098c2:	f04f 0c0a 	mov.w	ip, #10
 80098c6:	4620      	mov	r0, r4
 80098c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098cc:	3a30      	subs	r2, #48	; 0x30
 80098ce:	2a09      	cmp	r2, #9
 80098d0:	d903      	bls.n	80098da <_vfiprintf_r+0x1ee>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d0c5      	beq.n	8009862 <_vfiprintf_r+0x176>
 80098d6:	9105      	str	r1, [sp, #20]
 80098d8:	e7c3      	b.n	8009862 <_vfiprintf_r+0x176>
 80098da:	fb0c 2101 	mla	r1, ip, r1, r2
 80098de:	4604      	mov	r4, r0
 80098e0:	2301      	movs	r3, #1
 80098e2:	e7f0      	b.n	80098c6 <_vfiprintf_r+0x1da>
 80098e4:	ab03      	add	r3, sp, #12
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	462a      	mov	r2, r5
 80098ea:	4b16      	ldr	r3, [pc, #88]	; (8009944 <_vfiprintf_r+0x258>)
 80098ec:	a904      	add	r1, sp, #16
 80098ee:	4630      	mov	r0, r6
 80098f0:	f3af 8000 	nop.w
 80098f4:	4607      	mov	r7, r0
 80098f6:	1c78      	adds	r0, r7, #1
 80098f8:	d1d6      	bne.n	80098a8 <_vfiprintf_r+0x1bc>
 80098fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098fc:	07d9      	lsls	r1, r3, #31
 80098fe:	d405      	bmi.n	800990c <_vfiprintf_r+0x220>
 8009900:	89ab      	ldrh	r3, [r5, #12]
 8009902:	059a      	lsls	r2, r3, #22
 8009904:	d402      	bmi.n	800990c <_vfiprintf_r+0x220>
 8009906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009908:	f7ff fdb7 	bl	800947a <__retarget_lock_release_recursive>
 800990c:	89ab      	ldrh	r3, [r5, #12]
 800990e:	065b      	lsls	r3, r3, #25
 8009910:	f53f af12 	bmi.w	8009738 <_vfiprintf_r+0x4c>
 8009914:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009916:	e711      	b.n	800973c <_vfiprintf_r+0x50>
 8009918:	ab03      	add	r3, sp, #12
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	462a      	mov	r2, r5
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <_vfiprintf_r+0x258>)
 8009920:	a904      	add	r1, sp, #16
 8009922:	4630      	mov	r0, r6
 8009924:	f000 f880 	bl	8009a28 <_printf_i>
 8009928:	e7e4      	b.n	80098f4 <_vfiprintf_r+0x208>
 800992a:	bf00      	nop
 800992c:	08009f70 	.word	0x08009f70
 8009930:	08009f90 	.word	0x08009f90
 8009934:	08009f50 	.word	0x08009f50
 8009938:	08009fb0 	.word	0x08009fb0
 800993c:	08009fba 	.word	0x08009fba
 8009940:	00000000 	.word	0x00000000
 8009944:	080096c7 	.word	0x080096c7
 8009948:	08009fb6 	.word	0x08009fb6

0800994c <_printf_common>:
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	4616      	mov	r6, r2
 8009952:	4699      	mov	r9, r3
 8009954:	688a      	ldr	r2, [r1, #8]
 8009956:	690b      	ldr	r3, [r1, #16]
 8009958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800995c:	4293      	cmp	r3, r2
 800995e:	bfb8      	it	lt
 8009960:	4613      	movlt	r3, r2
 8009962:	6033      	str	r3, [r6, #0]
 8009964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009968:	4607      	mov	r7, r0
 800996a:	460c      	mov	r4, r1
 800996c:	b10a      	cbz	r2, 8009972 <_printf_common+0x26>
 800996e:	3301      	adds	r3, #1
 8009970:	6033      	str	r3, [r6, #0]
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	0699      	lsls	r1, r3, #26
 8009976:	bf42      	ittt	mi
 8009978:	6833      	ldrmi	r3, [r6, #0]
 800997a:	3302      	addmi	r3, #2
 800997c:	6033      	strmi	r3, [r6, #0]
 800997e:	6825      	ldr	r5, [r4, #0]
 8009980:	f015 0506 	ands.w	r5, r5, #6
 8009984:	d106      	bne.n	8009994 <_printf_common+0x48>
 8009986:	f104 0a19 	add.w	sl, r4, #25
 800998a:	68e3      	ldr	r3, [r4, #12]
 800998c:	6832      	ldr	r2, [r6, #0]
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	42ab      	cmp	r3, r5
 8009992:	dc26      	bgt.n	80099e2 <_printf_common+0x96>
 8009994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009998:	1e13      	subs	r3, r2, #0
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	bf18      	it	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	0692      	lsls	r2, r2, #26
 80099a2:	d42b      	bmi.n	80099fc <_printf_common+0xb0>
 80099a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099a8:	4649      	mov	r1, r9
 80099aa:	4638      	mov	r0, r7
 80099ac:	47c0      	blx	r8
 80099ae:	3001      	adds	r0, #1
 80099b0:	d01e      	beq.n	80099f0 <_printf_common+0xa4>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	68e5      	ldr	r5, [r4, #12]
 80099b6:	6832      	ldr	r2, [r6, #0]
 80099b8:	f003 0306 	and.w	r3, r3, #6
 80099bc:	2b04      	cmp	r3, #4
 80099be:	bf08      	it	eq
 80099c0:	1aad      	subeq	r5, r5, r2
 80099c2:	68a3      	ldr	r3, [r4, #8]
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	bf0c      	ite	eq
 80099c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099cc:	2500      	movne	r5, #0
 80099ce:	4293      	cmp	r3, r2
 80099d0:	bfc4      	itt	gt
 80099d2:	1a9b      	subgt	r3, r3, r2
 80099d4:	18ed      	addgt	r5, r5, r3
 80099d6:	2600      	movs	r6, #0
 80099d8:	341a      	adds	r4, #26
 80099da:	42b5      	cmp	r5, r6
 80099dc:	d11a      	bne.n	8009a14 <_printf_common+0xc8>
 80099de:	2000      	movs	r0, #0
 80099e0:	e008      	b.n	80099f4 <_printf_common+0xa8>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4652      	mov	r2, sl
 80099e6:	4649      	mov	r1, r9
 80099e8:	4638      	mov	r0, r7
 80099ea:	47c0      	blx	r8
 80099ec:	3001      	adds	r0, #1
 80099ee:	d103      	bne.n	80099f8 <_printf_common+0xac>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	3501      	adds	r5, #1
 80099fa:	e7c6      	b.n	800998a <_printf_common+0x3e>
 80099fc:	18e1      	adds	r1, r4, r3
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	2030      	movs	r0, #48	; 0x30
 8009a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a06:	4422      	add	r2, r4
 8009a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a10:	3302      	adds	r3, #2
 8009a12:	e7c7      	b.n	80099a4 <_printf_common+0x58>
 8009a14:	2301      	movs	r3, #1
 8009a16:	4622      	mov	r2, r4
 8009a18:	4649      	mov	r1, r9
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	47c0      	blx	r8
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d0e6      	beq.n	80099f0 <_printf_common+0xa4>
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7d9      	b.n	80099da <_printf_common+0x8e>
	...

08009a28 <_printf_i>:
 8009a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	4691      	mov	r9, r2
 8009a30:	7e27      	ldrb	r7, [r4, #24]
 8009a32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a34:	2f78      	cmp	r7, #120	; 0x78
 8009a36:	4680      	mov	r8, r0
 8009a38:	469a      	mov	sl, r3
 8009a3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a3e:	d807      	bhi.n	8009a50 <_printf_i+0x28>
 8009a40:	2f62      	cmp	r7, #98	; 0x62
 8009a42:	d80a      	bhi.n	8009a5a <_printf_i+0x32>
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	f000 80d8 	beq.w	8009bfa <_printf_i+0x1d2>
 8009a4a:	2f58      	cmp	r7, #88	; 0x58
 8009a4c:	f000 80a3 	beq.w	8009b96 <_printf_i+0x16e>
 8009a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a58:	e03a      	b.n	8009ad0 <_printf_i+0xa8>
 8009a5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a5e:	2b15      	cmp	r3, #21
 8009a60:	d8f6      	bhi.n	8009a50 <_printf_i+0x28>
 8009a62:	a001      	add	r0, pc, #4	; (adr r0, 8009a68 <_printf_i+0x40>)
 8009a64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a68:	08009ac1 	.word	0x08009ac1
 8009a6c:	08009ad5 	.word	0x08009ad5
 8009a70:	08009a51 	.word	0x08009a51
 8009a74:	08009a51 	.word	0x08009a51
 8009a78:	08009a51 	.word	0x08009a51
 8009a7c:	08009a51 	.word	0x08009a51
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009a51 	.word	0x08009a51
 8009a88:	08009a51 	.word	0x08009a51
 8009a8c:	08009a51 	.word	0x08009a51
 8009a90:	08009a51 	.word	0x08009a51
 8009a94:	08009be1 	.word	0x08009be1
 8009a98:	08009b05 	.word	0x08009b05
 8009a9c:	08009bc3 	.word	0x08009bc3
 8009aa0:	08009a51 	.word	0x08009a51
 8009aa4:	08009a51 	.word	0x08009a51
 8009aa8:	08009c03 	.word	0x08009c03
 8009aac:	08009a51 	.word	0x08009a51
 8009ab0:	08009b05 	.word	0x08009b05
 8009ab4:	08009a51 	.word	0x08009a51
 8009ab8:	08009a51 	.word	0x08009a51
 8009abc:	08009bcb 	.word	0x08009bcb
 8009ac0:	680b      	ldr	r3, [r1, #0]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	600a      	str	r2, [r1, #0]
 8009ac8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009acc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0a3      	b.n	8009c1c <_printf_i+0x1f4>
 8009ad4:	6825      	ldr	r5, [r4, #0]
 8009ad6:	6808      	ldr	r0, [r1, #0]
 8009ad8:	062e      	lsls	r6, r5, #24
 8009ada:	f100 0304 	add.w	r3, r0, #4
 8009ade:	d50a      	bpl.n	8009af6 <_printf_i+0xce>
 8009ae0:	6805      	ldr	r5, [r0, #0]
 8009ae2:	600b      	str	r3, [r1, #0]
 8009ae4:	2d00      	cmp	r5, #0
 8009ae6:	da03      	bge.n	8009af0 <_printf_i+0xc8>
 8009ae8:	232d      	movs	r3, #45	; 0x2d
 8009aea:	426d      	negs	r5, r5
 8009aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af0:	485e      	ldr	r0, [pc, #376]	; (8009c6c <_printf_i+0x244>)
 8009af2:	230a      	movs	r3, #10
 8009af4:	e019      	b.n	8009b2a <_printf_i+0x102>
 8009af6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009afa:	6805      	ldr	r5, [r0, #0]
 8009afc:	600b      	str	r3, [r1, #0]
 8009afe:	bf18      	it	ne
 8009b00:	b22d      	sxthne	r5, r5
 8009b02:	e7ef      	b.n	8009ae4 <_printf_i+0xbc>
 8009b04:	680b      	ldr	r3, [r1, #0]
 8009b06:	6825      	ldr	r5, [r4, #0]
 8009b08:	1d18      	adds	r0, r3, #4
 8009b0a:	6008      	str	r0, [r1, #0]
 8009b0c:	0628      	lsls	r0, r5, #24
 8009b0e:	d501      	bpl.n	8009b14 <_printf_i+0xec>
 8009b10:	681d      	ldr	r5, [r3, #0]
 8009b12:	e002      	b.n	8009b1a <_printf_i+0xf2>
 8009b14:	0669      	lsls	r1, r5, #25
 8009b16:	d5fb      	bpl.n	8009b10 <_printf_i+0xe8>
 8009b18:	881d      	ldrh	r5, [r3, #0]
 8009b1a:	4854      	ldr	r0, [pc, #336]	; (8009c6c <_printf_i+0x244>)
 8009b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8009b1e:	bf0c      	ite	eq
 8009b20:	2308      	moveq	r3, #8
 8009b22:	230a      	movne	r3, #10
 8009b24:	2100      	movs	r1, #0
 8009b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b2a:	6866      	ldr	r6, [r4, #4]
 8009b2c:	60a6      	str	r6, [r4, #8]
 8009b2e:	2e00      	cmp	r6, #0
 8009b30:	bfa2      	ittt	ge
 8009b32:	6821      	ldrge	r1, [r4, #0]
 8009b34:	f021 0104 	bicge.w	r1, r1, #4
 8009b38:	6021      	strge	r1, [r4, #0]
 8009b3a:	b90d      	cbnz	r5, 8009b40 <_printf_i+0x118>
 8009b3c:	2e00      	cmp	r6, #0
 8009b3e:	d04d      	beq.n	8009bdc <_printf_i+0x1b4>
 8009b40:	4616      	mov	r6, r2
 8009b42:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b46:	fb03 5711 	mls	r7, r3, r1, r5
 8009b4a:	5dc7      	ldrb	r7, [r0, r7]
 8009b4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b50:	462f      	mov	r7, r5
 8009b52:	42bb      	cmp	r3, r7
 8009b54:	460d      	mov	r5, r1
 8009b56:	d9f4      	bls.n	8009b42 <_printf_i+0x11a>
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d10b      	bne.n	8009b74 <_printf_i+0x14c>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	07df      	lsls	r7, r3, #31
 8009b60:	d508      	bpl.n	8009b74 <_printf_i+0x14c>
 8009b62:	6923      	ldr	r3, [r4, #16]
 8009b64:	6861      	ldr	r1, [r4, #4]
 8009b66:	4299      	cmp	r1, r3
 8009b68:	bfde      	ittt	le
 8009b6a:	2330      	movle	r3, #48	; 0x30
 8009b6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b74:	1b92      	subs	r2, r2, r6
 8009b76:	6122      	str	r2, [r4, #16]
 8009b78:	f8cd a000 	str.w	sl, [sp]
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	aa03      	add	r2, sp, #12
 8009b80:	4621      	mov	r1, r4
 8009b82:	4640      	mov	r0, r8
 8009b84:	f7ff fee2 	bl	800994c <_printf_common>
 8009b88:	3001      	adds	r0, #1
 8009b8a:	d14c      	bne.n	8009c26 <_printf_i+0x1fe>
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	b004      	add	sp, #16
 8009b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b96:	4835      	ldr	r0, [pc, #212]	; (8009c6c <_printf_i+0x244>)
 8009b98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	680e      	ldr	r6, [r1, #0]
 8009ba0:	061f      	lsls	r7, r3, #24
 8009ba2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ba6:	600e      	str	r6, [r1, #0]
 8009ba8:	d514      	bpl.n	8009bd4 <_printf_i+0x1ac>
 8009baa:	07d9      	lsls	r1, r3, #31
 8009bac:	bf44      	itt	mi
 8009bae:	f043 0320 	orrmi.w	r3, r3, #32
 8009bb2:	6023      	strmi	r3, [r4, #0]
 8009bb4:	b91d      	cbnz	r5, 8009bbe <_printf_i+0x196>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	f023 0320 	bic.w	r3, r3, #32
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	2310      	movs	r3, #16
 8009bc0:	e7b0      	b.n	8009b24 <_printf_i+0xfc>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	f043 0320 	orr.w	r3, r3, #32
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	2378      	movs	r3, #120	; 0x78
 8009bcc:	4828      	ldr	r0, [pc, #160]	; (8009c70 <_printf_i+0x248>)
 8009bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bd2:	e7e3      	b.n	8009b9c <_printf_i+0x174>
 8009bd4:	065e      	lsls	r6, r3, #25
 8009bd6:	bf48      	it	mi
 8009bd8:	b2ad      	uxthmi	r5, r5
 8009bda:	e7e6      	b.n	8009baa <_printf_i+0x182>
 8009bdc:	4616      	mov	r6, r2
 8009bde:	e7bb      	b.n	8009b58 <_printf_i+0x130>
 8009be0:	680b      	ldr	r3, [r1, #0]
 8009be2:	6826      	ldr	r6, [r4, #0]
 8009be4:	6960      	ldr	r0, [r4, #20]
 8009be6:	1d1d      	adds	r5, r3, #4
 8009be8:	600d      	str	r5, [r1, #0]
 8009bea:	0635      	lsls	r5, r6, #24
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	d501      	bpl.n	8009bf4 <_printf_i+0x1cc>
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	e002      	b.n	8009bfa <_printf_i+0x1d2>
 8009bf4:	0671      	lsls	r1, r6, #25
 8009bf6:	d5fb      	bpl.n	8009bf0 <_printf_i+0x1c8>
 8009bf8:	8018      	strh	r0, [r3, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6123      	str	r3, [r4, #16]
 8009bfe:	4616      	mov	r6, r2
 8009c00:	e7ba      	b.n	8009b78 <_printf_i+0x150>
 8009c02:	680b      	ldr	r3, [r1, #0]
 8009c04:	1d1a      	adds	r2, r3, #4
 8009c06:	600a      	str	r2, [r1, #0]
 8009c08:	681e      	ldr	r6, [r3, #0]
 8009c0a:	6862      	ldr	r2, [r4, #4]
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4630      	mov	r0, r6
 8009c10:	f7f6 fafe 	bl	8000210 <memchr>
 8009c14:	b108      	cbz	r0, 8009c1a <_printf_i+0x1f2>
 8009c16:	1b80      	subs	r0, r0, r6
 8009c18:	6060      	str	r0, [r4, #4]
 8009c1a:	6863      	ldr	r3, [r4, #4]
 8009c1c:	6123      	str	r3, [r4, #16]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c24:	e7a8      	b.n	8009b78 <_printf_i+0x150>
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	4632      	mov	r2, r6
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	47d0      	blx	sl
 8009c30:	3001      	adds	r0, #1
 8009c32:	d0ab      	beq.n	8009b8c <_printf_i+0x164>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	079b      	lsls	r3, r3, #30
 8009c38:	d413      	bmi.n	8009c62 <_printf_i+0x23a>
 8009c3a:	68e0      	ldr	r0, [r4, #12]
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	4298      	cmp	r0, r3
 8009c40:	bfb8      	it	lt
 8009c42:	4618      	movlt	r0, r3
 8009c44:	e7a4      	b.n	8009b90 <_printf_i+0x168>
 8009c46:	2301      	movs	r3, #1
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	47d0      	blx	sl
 8009c50:	3001      	adds	r0, #1
 8009c52:	d09b      	beq.n	8009b8c <_printf_i+0x164>
 8009c54:	3501      	adds	r5, #1
 8009c56:	68e3      	ldr	r3, [r4, #12]
 8009c58:	9903      	ldr	r1, [sp, #12]
 8009c5a:	1a5b      	subs	r3, r3, r1
 8009c5c:	42ab      	cmp	r3, r5
 8009c5e:	dcf2      	bgt.n	8009c46 <_printf_i+0x21e>
 8009c60:	e7eb      	b.n	8009c3a <_printf_i+0x212>
 8009c62:	2500      	movs	r5, #0
 8009c64:	f104 0619 	add.w	r6, r4, #25
 8009c68:	e7f5      	b.n	8009c56 <_printf_i+0x22e>
 8009c6a:	bf00      	nop
 8009c6c:	08009fc1 	.word	0x08009fc1
 8009c70:	08009fd2 	.word	0x08009fd2

08009c74 <_sbrk_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d06      	ldr	r5, [pc, #24]	; (8009c90 <_sbrk_r+0x1c>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	f7f9 ffb2 	bl	8003be8 <_sbrk>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_sbrk_r+0x1a>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_sbrk_r+0x1a>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	200003a8 	.word	0x200003a8

08009c94 <__sread>:
 8009c94:	b510      	push	{r4, lr}
 8009c96:	460c      	mov	r4, r1
 8009c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c9c:	f000 f8a0 	bl	8009de0 <_read_r>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	bfab      	itete	ge
 8009ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ca8:	181b      	addge	r3, r3, r0
 8009caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cae:	bfac      	ite	ge
 8009cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cb2:	81a3      	strhlt	r3, [r4, #12]
 8009cb4:	bd10      	pop	{r4, pc}

08009cb6 <__swrite>:
 8009cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cba:	461f      	mov	r7, r3
 8009cbc:	898b      	ldrh	r3, [r1, #12]
 8009cbe:	05db      	lsls	r3, r3, #23
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	d505      	bpl.n	8009cd4 <__swrite+0x1e>
 8009cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ccc:	2302      	movs	r3, #2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f000 f868 	bl	8009da4 <_lseek_r>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cde:	81a3      	strh	r3, [r4, #12]
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	463b      	mov	r3, r7
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cea:	f000 b817 	b.w	8009d1c <_write_r>

08009cee <__sseek>:
 8009cee:	b510      	push	{r4, lr}
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf6:	f000 f855 	bl	8009da4 <_lseek_r>
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	bf15      	itete	ne
 8009d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strheq	r3, [r4, #12]
 8009d0c:	bf18      	it	ne
 8009d0e:	81a3      	strhne	r3, [r4, #12]
 8009d10:	bd10      	pop	{r4, pc}

08009d12 <__sclose>:
 8009d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d16:	f000 b813 	b.w	8009d40 <_close_r>
	...

08009d1c <_write_r>:
 8009d1c:	b538      	push	{r3, r4, r5, lr}
 8009d1e:	4d07      	ldr	r5, [pc, #28]	; (8009d3c <_write_r+0x20>)
 8009d20:	4604      	mov	r4, r0
 8009d22:	4608      	mov	r0, r1
 8009d24:	4611      	mov	r1, r2
 8009d26:	2200      	movs	r2, #0
 8009d28:	602a      	str	r2, [r5, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f7f9 f8e9 	bl	8002f02 <_write>
 8009d30:	1c43      	adds	r3, r0, #1
 8009d32:	d102      	bne.n	8009d3a <_write_r+0x1e>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	b103      	cbz	r3, 8009d3a <_write_r+0x1e>
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	200003a8 	.word	0x200003a8

08009d40 <_close_r>:
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4d06      	ldr	r5, [pc, #24]	; (8009d5c <_close_r+0x1c>)
 8009d44:	2300      	movs	r3, #0
 8009d46:	4604      	mov	r4, r0
 8009d48:	4608      	mov	r0, r1
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	f7f9 ff17 	bl	8003b7e <_close>
 8009d50:	1c43      	adds	r3, r0, #1
 8009d52:	d102      	bne.n	8009d5a <_close_r+0x1a>
 8009d54:	682b      	ldr	r3, [r5, #0]
 8009d56:	b103      	cbz	r3, 8009d5a <_close_r+0x1a>
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	200003a8 	.word	0x200003a8

08009d60 <_fstat_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d07      	ldr	r5, [pc, #28]	; (8009d80 <_fstat_r+0x20>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7f9 ff12 	bl	8003b96 <_fstat>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d102      	bne.n	8009d7c <_fstat_r+0x1c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b103      	cbz	r3, 8009d7c <_fstat_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	200003a8 	.word	0x200003a8

08009d84 <_isatty_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4d06      	ldr	r5, [pc, #24]	; (8009da0 <_isatty_r+0x1c>)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7f9 ff11 	bl	8003bb6 <_isatty>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_isatty_r+0x1a>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_isatty_r+0x1a>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	200003a8 	.word	0x200003a8

08009da4 <_lseek_r>:
 8009da4:	b538      	push	{r3, r4, r5, lr}
 8009da6:	4d07      	ldr	r5, [pc, #28]	; (8009dc4 <_lseek_r+0x20>)
 8009da8:	4604      	mov	r4, r0
 8009daa:	4608      	mov	r0, r1
 8009dac:	4611      	mov	r1, r2
 8009dae:	2200      	movs	r2, #0
 8009db0:	602a      	str	r2, [r5, #0]
 8009db2:	461a      	mov	r2, r3
 8009db4:	f7f9 ff0a 	bl	8003bcc <_lseek>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_lseek_r+0x1e>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_lseek_r+0x1e>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200003a8 	.word	0x200003a8

08009dc8 <__malloc_lock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__malloc_lock+0x8>)
 8009dca:	f7ff bb55 	b.w	8009478 <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	200003a0 	.word	0x200003a0

08009dd4 <__malloc_unlock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__malloc_unlock+0x8>)
 8009dd6:	f7ff bb50 	b.w	800947a <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	200003a0 	.word	0x200003a0

08009de0 <_read_r>:
 8009de0:	b538      	push	{r3, r4, r5, lr}
 8009de2:	4d07      	ldr	r5, [pc, #28]	; (8009e00 <_read_r+0x20>)
 8009de4:	4604      	mov	r4, r0
 8009de6:	4608      	mov	r0, r1
 8009de8:	4611      	mov	r1, r2
 8009dea:	2200      	movs	r2, #0
 8009dec:	602a      	str	r2, [r5, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	f7f9 fea8 	bl	8003b44 <_read>
 8009df4:	1c43      	adds	r3, r0, #1
 8009df6:	d102      	bne.n	8009dfe <_read_r+0x1e>
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	b103      	cbz	r3, 8009dfe <_read_r+0x1e>
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	bd38      	pop	{r3, r4, r5, pc}
 8009e00:	200003a8 	.word	0x200003a8

08009e04 <_init>:
 8009e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e06:	bf00      	nop
 8009e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0a:	bc08      	pop	{r3}
 8009e0c:	469e      	mov	lr, r3
 8009e0e:	4770      	bx	lr

08009e10 <_fini>:
 8009e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e12:	bf00      	nop
 8009e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e16:	bc08      	pop	{r3}
 8009e18:	469e      	mov	lr, r3
 8009e1a:	4770      	bx	lr
