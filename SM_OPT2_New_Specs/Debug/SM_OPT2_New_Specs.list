
SM_OPT2_New_Specs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006998  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006b60  08006b60  00016b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b80  08006b80  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b88  08006b88  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000024  08006bb4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08006bb4  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119e5  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000226b  00000000  00000000  00031a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00033ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021e6  00000000  00000000  00035bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013031  00000000  00000000  00037da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eca41  00000000  00000000  0004add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137818  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  0013786c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000024 	.word	0x20000024
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006b48 	.word	0x08006b48

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000028 	.word	0x20000028
 8000204:	08006b48 	.word	0x08006b48

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <Timer_15min>:
extern uint16_t _bat3_counter_var;	//   Variable as a counter
extern bool _bat3_15min_wait_over;


void Timer_15min()
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	if(_bat1timerfunc==true)
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <Timer_15min+0x34>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00e      	beq.n	8000d66 <Timer_15min+0x2a>
	{
		_bat1_counter_var++;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <Timer_15min+0x38>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <Timer_15min+0x38>)
 8000d52:	801a      	strh	r2, [r3, #0]
		if(_bat1_counter_var==6000)
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <Timer_15min+0x38>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d102      	bne.n	8000d66 <Timer_15min+0x2a>
		{
			_bat1_15min_wait_over = true;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <Timer_15min+0x3c>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]





}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20000040 	.word	0x20000040
 8000d74:	20000042 	.word	0x20000042
 8000d78:	20000041 	.word	0x20000041
 8000d7c:	00000000 	.word	0x00000000

08000d80 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d86:	f000 fe96 	bl	8001ab6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d8a:	f000 f9e5 	bl	8001158 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d8e:	f000 fbc9 	bl	8001524 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000d92:	f000 fa6d 	bl	8001270 <MX_I2C1_Init>
	MX_TIM3_Init();
 8000d96:	f000 faf9 	bl	800138c <MX_TIM3_Init>
	MX_TIM4_Init();
 8000d9a:	f000 fb45 	bl	8001428 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8000d9e:	f000 fb91 	bl	80014c4 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000da2:	f000 faa5 	bl	80012f0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);        // Timer 4 for providing delay
 8000da6:	48bc      	ldr	r0, [pc, #752]	; (8001098 <main+0x318>)
 8000da8:	f004 f8ec 	bl	8004f84 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);	   // Timer 3 for waiting purpose in the maintenance case
 8000dac:	48bb      	ldr	r0, [pc, #748]	; (800109c <main+0x31c>)
 8000dae:	f004 f959 	bl	8005064 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	   // Timer 2 to update the maintenance use case parameters periodically
 8000db2:	48bb      	ldr	r0, [pc, #748]	; (80010a0 <main+0x320>)
 8000db4:	f004 f956 	bl	8005064 <HAL_TIM_Base_Start_IT>


	if(HAL_I2C_IsDeviceReady(&hi2c1,0x16, 5, 10)==HAL_OK)
 8000db8:	230a      	movs	r3, #10
 8000dba:	2205      	movs	r2, #5
 8000dbc:	2116      	movs	r1, #22
 8000dbe:	48b9      	ldr	r0, [pc, #740]	; (80010a4 <main+0x324>)
 8000dc0:	f001 fbbe 	bl	8002540 <HAL_I2C_IsDeviceReady>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <main+0x54>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	48b6      	ldr	r0, [pc, #728]	; (80010a8 <main+0x328>)
 8000dd0:	f001 fa2c 	bl	800222c <HAL_GPIO_WritePin>


	}


	__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000dd4:	4bb5      	ldr	r3, [pc, #724]	; (80010ac <main+0x32c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4bb4      	ldr	r3, [pc, #720]	; (80010ac <main+0x32c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0220 	orr.w	r2, r2, #32
 8000de2:	601a      	str	r2, [r3, #0]

	/* USER CODE END 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dea:	48af      	ldr	r0, [pc, #700]	; (80010a8 <main+0x328>)
 8000dec:	f001 fa1e 	bl	800222c <HAL_GPIO_WritePin>




		// Update ASOC  -  General Info Bat 1 Maintenance Use Case
		if(bat1_geninfo_asoc_flag==true)
 8000df0:	4baf      	ldr	r3, [pc, #700]	; (80010b0 <main+0x330>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d02f      	beq.n	8000e58 <main+0xd8>
		{
			bat1_geninfo_asoc_flag=false;
 8000df8:	4bad      	ldr	r3, [pc, #692]	; (80010b0 <main+0x330>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]

			uint8_t rx_geninfo_asoc[1]={0x00};
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc, 1);
 8000e04:	2301      	movs	r3, #1
 8000e06:	4aab      	ldr	r2, [pc, #684]	; (80010b4 <main+0x334>)
 8000e08:	2116      	movs	r1, #22
 8000e0a:	48a6      	ldr	r0, [pc, #664]	; (80010a4 <main+0x324>)
 8000e0c:	f001 fab8 	bl	8002380 <HAL_I2C_Master_Transmit_IT>
			msdelay(5);
 8000e10:	2005      	movs	r0, #5
 8000e12:	f000 fe0f 	bl	8001a34 <msdelay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_asoc, 1);
 8000e16:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	2116      	movs	r1, #22
 8000e1e:	48a1      	ldr	r0, [pc, #644]	; (80010a4 <main+0x324>)
 8000e20:	f001 fb1e 	bl	8002460 <HAL_I2C_Master_Receive_IT>
			msdelay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fe05 	bl	8001a34 <msdelay>
			Bat1_Asoc_Maint_GI= rx_geninfo_asoc[0];
 8000e2a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000e2e:	4ba2      	ldr	r3, [pc, #648]	; (80010b8 <main+0x338>)
 8000e30:	701a      	strb	r2, [r3, #0]

			uint8_t transmit_asoc[2]={0x00};
 8000e32:	2300      	movs	r3, #0
 8000e34:	843b      	strh	r3, [r7, #32]
			transmit_asoc[0]='A';
 8000e36:	2341      	movs	r3, #65	; 0x41
 8000e38:	f887 3020 	strb.w	r3, [r7, #32]
			transmit_asoc[1]=rx_geninfo_asoc[0];
 8000e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			HAL_UART_Transmit_IT(&huart2, transmit_asoc, 2);
 8000e44:	f107 0320 	add.w	r3, r7, #32
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4897      	ldr	r0, [pc, #604]	; (80010ac <main+0x32c>)
 8000e4e:	f004 fdc3 	bl	80059d8 <HAL_UART_Transmit_IT>
			rx_geninfo_asoc[0]=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24


		}

		// Update Voltage  -  General Info Bat 1 Maintenance Use Case
		if(bat1_geninfo_voltage_flag==true)
 8000e58:	4b98      	ldr	r3, [pc, #608]	; (80010bc <main+0x33c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d03f      	beq.n	8000ee0 <main+0x160>
		{
			bat1_geninfo_voltage_flag=false;
 8000e60:	4b96      	ldr	r3, [pc, #600]	; (80010bc <main+0x33c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]

			uint8_t rx_geninfo_voltage[2]={0x00};
 8000e66:	2300      	movs	r3, #0
 8000e68:	83bb      	strh	r3, [r7, #28]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage, 1);
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	4a94      	ldr	r2, [pc, #592]	; (80010c0 <main+0x340>)
 8000e6e:	2116      	movs	r1, #22
 8000e70:	488c      	ldr	r0, [pc, #560]	; (80010a4 <main+0x324>)
 8000e72:	f001 fa85 	bl	8002380 <HAL_I2C_Master_Transmit_IT>
			msdelay(5);
 8000e76:	2005      	movs	r0, #5
 8000e78:	f000 fddc 	bl	8001a34 <msdelay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_voltage, 2);
 8000e7c:	f107 021c 	add.w	r2, r7, #28
 8000e80:	2302      	movs	r3, #2
 8000e82:	2116      	movs	r1, #22
 8000e84:	4887      	ldr	r0, [pc, #540]	; (80010a4 <main+0x324>)
 8000e86:	f001 faeb 	bl	8002460 <HAL_I2C_Master_Receive_IT>
			msdelay(1);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f000 fdd2 	bl	8001a34 <msdelay>
			Bat1_Volt_Maint_GI = rx_geninfo_voltage[1];
 8000e90:	7f7b      	ldrb	r3, [r7, #29]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	4b8b      	ldr	r3, [pc, #556]	; (80010c4 <main+0x344>)
 8000e96:	801a      	strh	r2, [r3, #0]
			Bat1_Volt_Maint_GI = Bat1_Volt_Maint_GI << 8;
 8000e98:	4b8a      	ldr	r3, [pc, #552]	; (80010c4 <main+0x344>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <main+0x344>)
 8000ea2:	801a      	strh	r2, [r3, #0]
			Bat1_Volt_Maint_GI = Bat1_Volt_Maint_GI + rx_geninfo_voltage[0];
 8000ea4:	7f3b      	ldrb	r3, [r7, #28]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b86      	ldr	r3, [pc, #536]	; (80010c4 <main+0x344>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b84      	ldr	r3, [pc, #528]	; (80010c4 <main+0x344>)
 8000eb2:	801a      	strh	r2, [r3, #0]

			uint8_t transmit_volt[3]={0x00};
 8000eb4:	4b84      	ldr	r3, [pc, #528]	; (80010c8 <main+0x348>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	833b      	strh	r3, [r7, #24]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	76bb      	strb	r3, [r7, #26]
			transmit_volt[0]='V';
 8000ebe:	2356      	movs	r3, #86	; 0x56
 8000ec0:	763b      	strb	r3, [r7, #24]
			transmit_volt[1]=rx_geninfo_voltage[1];
 8000ec2:	7f7b      	ldrb	r3, [r7, #29]
 8000ec4:	767b      	strb	r3, [r7, #25]
			transmit_volt[2]=rx_geninfo_voltage[0];
 8000ec6:	7f3b      	ldrb	r3, [r7, #28]
 8000ec8:	76bb      	strb	r3, [r7, #26]
			HAL_UART_Transmit_IT(&huart2, transmit_volt, 3);
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4876      	ldr	r0, [pc, #472]	; (80010ac <main+0x32c>)
 8000ed4:	f004 fd80 	bl	80059d8 <HAL_UART_Transmit_IT>
			rx_geninfo_voltage[0]=0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	773b      	strb	r3, [r7, #28]
			rx_geninfo_voltage[1]=0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	777b      	strb	r3, [r7, #29]

		}

		// Update Remaining Capacity - General Info Bat 1 Maintenance Use Case

		if(bat1_geninfo_remainingcapacity_flag==true)
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <main+0x34c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d043      	beq.n	8000f70 <main+0x1f0>
		{
			bat1_geninfo_remainingcapacity_flag=false;
 8000ee8:	4b78      	ldr	r3, [pc, #480]	; (80010cc <main+0x34c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]

			uint8_t rx_geninfo_remcapacity[2]={0x00,0x00};
 8000eee:	2300      	movs	r3, #0
 8000ef0:	82bb      	strh	r3, [r7, #20]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remaining_capacity, 1);
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	4a76      	ldr	r2, [pc, #472]	; (80010d0 <main+0x350>)
 8000ef6:	2116      	movs	r1, #22
 8000ef8:	486a      	ldr	r0, [pc, #424]	; (80010a4 <main+0x324>)
 8000efa:	f001 fa41 	bl	8002380 <HAL_I2C_Master_Transmit_IT>
			msdelay(5);
 8000efe:	2005      	movs	r0, #5
 8000f00:	f000 fd98 	bl	8001a34 <msdelay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_remcapacity, 2);
 8000f04:	f107 0214 	add.w	r2, r7, #20
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2116      	movs	r1, #22
 8000f0c:	4865      	ldr	r0, [pc, #404]	; (80010a4 <main+0x324>)
 8000f0e:	f001 faa7 	bl	8002460 <HAL_I2C_Master_Receive_IT>
			msdelay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fd8e 	bl	8001a34 <msdelay>
			Bat1_RemCapacity_Maint_GI = rx_geninfo_remcapacity[1];
 8000f18:	7d7b      	ldrb	r3, [r7, #21]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b6d      	ldr	r3, [pc, #436]	; (80010d4 <main+0x354>)
 8000f1e:	801a      	strh	r2, [r3, #0]
			Bat1_RemCapacity_Maint_GI = Bat1_RemCapacity_Maint_GI << 8;
 8000f20:	4b6c      	ldr	r3, [pc, #432]	; (80010d4 <main+0x354>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <main+0x354>)
 8000f2a:	801a      	strh	r2, [r3, #0]
			Bat1_RemCapacity_Maint_GI = Bat1_RemCapacity_Maint_GI + rx_geninfo_remcapacity[0];
 8000f2c:	7d3b      	ldrb	r3, [r7, #20]
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <main+0x354>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b66      	ldr	r3, [pc, #408]	; (80010d4 <main+0x354>)
 8000f3a:	801a      	strh	r2, [r3, #0]

			uint8_t transmit_remcapacity[3]={0x00,0x00};
 8000f3c:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <main+0x358>)
 8000f3e:	f107 0310 	add.w	r3, r7, #16
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	4611      	mov	r1, r2
 8000f46:	8019      	strh	r1, [r3, #0]
 8000f48:	3302      	adds	r3, #2
 8000f4a:	0c12      	lsrs	r2, r2, #16
 8000f4c:	701a      	strb	r2, [r3, #0]
			transmit_remcapacity[0]='R';
 8000f4e:	2352      	movs	r3, #82	; 0x52
 8000f50:	743b      	strb	r3, [r7, #16]
			transmit_remcapacity[1]=rx_geninfo_remcapacity[1];
 8000f52:	7d7b      	ldrb	r3, [r7, #21]
 8000f54:	747b      	strb	r3, [r7, #17]
			transmit_remcapacity[2]=rx_geninfo_remcapacity[0];
 8000f56:	7d3b      	ldrb	r3, [r7, #20]
 8000f58:	74bb      	strb	r3, [r7, #18]
			HAL_UART_Transmit_IT(&huart2, transmit_remcapacity, 3);
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	2203      	movs	r2, #3
 8000f60:	4619      	mov	r1, r3
 8000f62:	4852      	ldr	r0, [pc, #328]	; (80010ac <main+0x32c>)
 8000f64:	f004 fd38 	bl	80059d8 <HAL_UART_Transmit_IT>
			rx_geninfo_remcapacity[0]=0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	753b      	strb	r3, [r7, #20]
			rx_geninfo_remcapacity[1]=0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	757b      	strb	r3, [r7, #21]

		}

		// Update Temperature - General Info Bat 1 Maintenance Use Case

		if(bat1_geninfo_temperature_flag==true)
 8000f70:	4b5a      	ldr	r3, [pc, #360]	; (80010dc <main+0x35c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d06a      	beq.n	800104e <main+0x2ce>
		{
			bat1_geninfo_temperature_flag=0;
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <main+0x35c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]

			uint8_t	rx_geninfo_temperature[2]={0x00,0x00};
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81bb      	strh	r3, [r7, #12]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temperature, 1);
 8000f82:	2301      	movs	r3, #1
 8000f84:	4a56      	ldr	r2, [pc, #344]	; (80010e0 <main+0x360>)
 8000f86:	2116      	movs	r1, #22
 8000f88:	4846      	ldr	r0, [pc, #280]	; (80010a4 <main+0x324>)
 8000f8a:	f001 f9f9 	bl	8002380 <HAL_I2C_Master_Transmit_IT>
			msdelay(5);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f000 fd50 	bl	8001a34 <msdelay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_temperature, 2);
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	2302      	movs	r3, #2
 8000f9a:	2116      	movs	r1, #22
 8000f9c:	4841      	ldr	r0, [pc, #260]	; (80010a4 <main+0x324>)
 8000f9e:	f001 fa5f 	bl	8002460 <HAL_I2C_Master_Receive_IT>
			msdelay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fd46 	bl	8001a34 <msdelay>
			Bat1_Temperature_Maint_GI = rx_geninfo_temperature[1];
 8000fa8:	7b7b      	ldrb	r3, [r7, #13]
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <main+0x364>)
 8000fae:	801a      	strh	r2, [r3, #0]
			Bat1_Temperature_Maint_GI = Bat1_Temperature_Maint_GI << 8;
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <main+0x364>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b4a      	ldr	r3, [pc, #296]	; (80010e4 <main+0x364>)
 8000fbc:	801a      	strh	r2, [r3, #0]
			Bat1_Temperature_Maint_GI = Bat1_Temperature_Maint_GI + rx_geninfo_temperature[0];
 8000fbe:	7b3b      	ldrb	r3, [r7, #12]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <main+0x364>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <main+0x364>)
 8000fd2:	801a      	strh	r2, [r3, #0]
			temp = (float)(Bat1_Temperature_Maint_GI/10.0)-273.15;
 8000fd4:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <main+0x364>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa66 	bl	80004ac <__aeabi_i2d>
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <main+0x368>)
 8000fe6:	f7ff fbf5 	bl	80007d4 <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f7ff fcd7 	bl	80009a4 <__aeabi_d2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa69 	bl	80004d0 <__aeabi_f2d>
 8000ffe:	a324      	add	r3, pc, #144	; (adr r3, 8001090 <main+0x310>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	f7ff f904 	bl	8000210 <__aeabi_dsub>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fcc8 	bl	80009a4 <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	4a35      	ldr	r2, [pc, #212]	; (80010ec <main+0x36c>)
 8001018:	6013      	str	r3, [r2, #0]

			uint8_t transmit_temperature[3]={0x00,0x00};
 800101a:	4a2f      	ldr	r2, [pc, #188]	; (80010d8 <main+0x358>)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	4611      	mov	r1, r2
 8001024:	8019      	strh	r1, [r3, #0]
 8001026:	3302      	adds	r3, #2
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	701a      	strb	r2, [r3, #0]
			transmit_temperature[0]='T';
 800102c:	2354      	movs	r3, #84	; 0x54
 800102e:	723b      	strb	r3, [r7, #8]
			transmit_temperature[1]=rx_geninfo_temperature[1];
 8001030:	7b7b      	ldrb	r3, [r7, #13]
 8001032:	727b      	strb	r3, [r7, #9]
			transmit_temperature[2]= rx_geninfo_temperature[0];
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	72bb      	strb	r3, [r7, #10]
			HAL_UART_Transmit_IT(&huart2, transmit_temperature, 3);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2203      	movs	r2, #3
 800103e:	4619      	mov	r1, r3
 8001040:	481a      	ldr	r0, [pc, #104]	; (80010ac <main+0x32c>)
 8001042:	f004 fcc9 	bl	80059d8 <HAL_UART_Transmit_IT>
			rx_geninfo_temperature[1]=0;
 8001046:	2300      	movs	r3, #0
 8001048:	737b      	strb	r3, [r7, #13]
			rx_geninfo_temperature[0]=0;
 800104a:	2300      	movs	r3, #0
 800104c:	733b      	strb	r3, [r7, #12]

		}

		// Update Cycle Count - General Info Bat 1 Maintenance Use Case

		if(bat1_geninfo_cycle_flag==true)
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <main+0x370>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	f43f aecc 	beq.w	8000df0 <main+0x70>
		{
			bat1_geninfo_cycle_flag= false;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <main+0x370>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]

			uint8_t rx_getinfo_cyclecount[2]={0x00,0x00};
 800105e:	2300      	movs	r3, #0
 8001060:	80bb      	strh	r3, [r7, #4]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount, 1);
 8001062:	2301      	movs	r3, #1
 8001064:	4a23      	ldr	r2, [pc, #140]	; (80010f4 <main+0x374>)
 8001066:	2116      	movs	r1, #22
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <main+0x324>)
 800106a:	f001 f989 	bl	8002380 <HAL_I2C_Master_Transmit_IT>
			msdelay(5);
 800106e:	2005      	movs	r0, #5
 8001070:	f000 fce0 	bl	8001a34 <msdelay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_getinfo_cyclecount, 2);
 8001074:	1d3a      	adds	r2, r7, #4
 8001076:	2302      	movs	r3, #2
 8001078:	2116      	movs	r1, #22
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <main+0x324>)
 800107c:	f001 f9f0 	bl	8002460 <HAL_I2C_Master_Receive_IT>
			msdelay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f000 fcd7 	bl	8001a34 <msdelay>
			Bat1_Cyclecount_Maint_GI = rx_getinfo_cyclecount[1];
 8001086:	797b      	ldrb	r3, [r7, #5]
 8001088:	b29a      	uxth	r2, r3
 800108a:	e035      	b.n	80010f8 <main+0x378>
 800108c:	f3af 8000 	nop.w
 8001090:	66666666 	.word	0x66666666
 8001094:	40711266 	.word	0x40711266
 8001098:	20000054 	.word	0x20000054
 800109c:	200000f8 	.word	0x200000f8
 80010a0:	20000150 	.word	0x20000150
 80010a4:	200000a0 	.word	0x200000a0
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000019c 	.word	0x2000019c
 80010b0:	2000004f 	.word	0x2000004f
 80010b4:	20000004 	.word	0x20000004
 80010b8:	200000f6 	.word	0x200000f6
 80010bc:	20000051 	.word	0x20000051
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200000ec 	.word	0x200000ec
 80010c8:	08006b60 	.word	0x08006b60
 80010cc:	20000050 	.word	0x20000050
 80010d0:	20000010 	.word	0x20000010
 80010d4:	2000014c 	.word	0x2000014c
 80010d8:	08006b64 	.word	0x08006b64
 80010dc:	20000052 	.word	0x20000052
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000148 	.word	0x20000148
 80010e8:	40240000 	.word	0x40240000
 80010ec:	200000f0 	.word	0x200000f0
 80010f0:	2000004e 	.word	0x2000004e
 80010f4:	20000014 	.word	0x20000014
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <main+0x3cc>)
 80010fa:	801a      	strh	r2, [r3, #0]
			Bat1_Cyclecount_Maint_GI = Bat1_Cyclecount_Maint_GI << 8;
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <main+0x3cc>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <main+0x3cc>)
 8001106:	801a      	strh	r2, [r3, #0]
			Bat1_Cyclecount_Maint_GI = Bat1_Cyclecount_Maint_GI + rx_getinfo_cyclecount[0];
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <main+0x3cc>)
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	4413      	add	r3, r2
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <main+0x3cc>)
 8001116:	801a      	strh	r2, [r3, #0]

			uint8_t transmit_cyclecount[3]={0x00,0x00};
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <main+0x3d0>)
 800111a:	463b      	mov	r3, r7
 800111c:	6812      	ldr	r2, [r2, #0]
 800111e:	4611      	mov	r1, r2
 8001120:	8019      	strh	r1, [r3, #0]
 8001122:	3302      	adds	r3, #2
 8001124:	0c12      	lsrs	r2, r2, #16
 8001126:	701a      	strb	r2, [r3, #0]
			transmit_cyclecount[0]='C';
 8001128:	2343      	movs	r3, #67	; 0x43
 800112a:	703b      	strb	r3, [r7, #0]
			transmit_cyclecount[1]=rx_getinfo_cyclecount[1];
 800112c:	797b      	ldrb	r3, [r7, #5]
 800112e:	707b      	strb	r3, [r7, #1]
			transmit_cyclecount[2]=rx_getinfo_cyclecount[0];
 8001130:	793b      	ldrb	r3, [r7, #4]
 8001132:	70bb      	strb	r3, [r7, #2]
			HAL_UART_Transmit_IT(&huart2, transmit_cyclecount, 3);
 8001134:	463b      	mov	r3, r7
 8001136:	2203      	movs	r2, #3
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <main+0x3d4>)
 800113c:	f004 fc4c 	bl	80059d8 <HAL_UART_Transmit_IT>
			rx_getinfo_cyclecount[1]=0;
 8001140:	2300      	movs	r3, #0
 8001142:	717b      	strb	r3, [r7, #5]
			rx_getinfo_cyclecount[0]=0;
 8001144:	2300      	movs	r3, #0
 8001146:	713b      	strb	r3, [r7, #4]
		if(bat1_geninfo_asoc_flag==true)
 8001148:	e652      	b.n	8000df0 <main+0x70>
 800114a:	bf00      	nop
 800114c:	200000f4 	.word	0x200000f4
 8001150:	08006b64 	.word	0x08006b64
 8001154:	2000019c 	.word	0x2000019c

08001158 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0b4      	sub	sp, #208	; 0xd0
 800115c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001162:	2230      	movs	r2, #48	; 0x30
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f005 fce6 	bl	8006b38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800116c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2284      	movs	r2, #132	; 0x84
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fcd7 	bl	8006b38 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <SystemClock_Config+0x110>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a36      	ldr	r2, [pc, #216]	; (8001268 <SystemClock_Config+0x110>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <SystemClock_Config+0x110>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <SystemClock_Config+0x114>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011aa:	4a30      	ldr	r2, [pc, #192]	; (800126c <SystemClock_Config+0x114>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <SystemClock_Config+0x114>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ca:	2310      	movs	r3, #16
 80011cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011dc:	2308      	movs	r3, #8
 80011de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 72;
 80011e2:	2348      	movs	r3, #72	; 0x48
 80011e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ee:	2303      	movs	r3, #3
 80011f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fdd5 	bl	8003da8 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8001204:	f000 fa6c 	bl	80016e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001228:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f85e 	bl	80042f0 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xe6>
	{
		Error_Handler();
 800123a:	f000 fa51 	bl	80016e0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800123e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001242:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001244:	2300      	movs	r3, #0
 8001246:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fa4f 	bl	80046f4 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0x108>
	{
		Error_Handler();
 800125c:	f000 fa40 	bl	80016e0 <Error_Handler>
	}
}
 8001260:	bf00      	nop
 8001262:	37d0      	adds	r7, #208	; 0xd0
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00808CD2;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	f000 ffd8 	bl	8002260 <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80012b6:	f000 fa13 	bl	80016e0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012be:	f002 fcdb 	bl	8003c78 <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80012c8:	f000 fa0a 	bl	80016e0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012d0:	f002 fd1d 	bl	8003d0e <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80012da:	f000 fa01 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000a0 	.word	0x200000a0
 80012e8:	40005400 	.word	0x40005400
 80012ec:	00808cd2 	.word	0x00808cd2

080012f0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_TIM2_Init+0x98>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001314:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200-1;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_TIM2_Init+0x98>)
 8001318:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800131c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_TIM2_Init+0x98>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000-1;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_TIM2_Init+0x98>)
 8001326:	f240 32e7 	movw	r2, #999	; 0x3e7
 800132a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_TIM2_Init+0x98>)
 800132e:	2200      	movs	r2, #0
 8001330:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <MX_TIM2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001338:	4813      	ldr	r0, [pc, #76]	; (8001388 <MX_TIM2_Init+0x98>)
 800133a:	f003 fdcb 	bl	8004ed4 <HAL_TIM_Base_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x58>
	{
		Error_Handler();
 8001344:	f000 f9cc 	bl	80016e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_TIM2_Init+0x98>)
 8001356:	f004 f81d 	bl	8005394 <HAL_TIM_ConfigClockSource>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0x74>
	{
		Error_Handler();
 8001360:	f000 f9be 	bl	80016e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_TIM2_Init+0x98>)
 8001372:	f004 fa37 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x90>
	{
		Error_Handler();
 800137c:	f000 f9b0 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	3720      	adds	r7, #32
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000150 	.word	0x20000150

0800138c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <MX_TIM3_Init+0x98>)
 80013ae:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7200-1;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <MX_TIM3_Init+0x94>)
 80013b2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80013b6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 100-1;
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <MX_TIM3_Init+0x94>)
 80013c0:	2263      	movs	r2, #99	; 0x63
 80013c2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_TIM3_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_TIM3_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_TIM3_Init+0x94>)
 80013d2:	f003 fd7f 	bl	8004ed4 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80013dc:	f000 f980 	bl	80016e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_TIM3_Init+0x94>)
 80013ee:	f003 ffd1 	bl	8005394 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 80013f8:	f000 f972 	bl	80016e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_TIM3_Init+0x94>)
 800140a:	f004 f9eb 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8001414:	f000 f964 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200000f8 	.word	0x200000f8
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM4_Init+0x94>)
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <MX_TIM4_Init+0x98>)
 800144a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72-1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_TIM4_Init+0x94>)
 800144e:	2247      	movs	r2, #71	; 0x47
 8001450:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM4_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM4_Init+0x94>)
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM4_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM4_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_TIM4_Init+0x94>)
 800146e:	f003 fd31 	bl	8004ed4 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x54>
	{
		Error_Handler();
 8001478:	f000 f932 	bl	80016e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM4_Init+0x94>)
 800148a:	f003 ff83 	bl	8005394 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0x70>
	{
		Error_Handler();
 8001494:	f000 f924 	bl	80016e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM4_Init+0x94>)
 80014a6:	f004 f99d 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 80014b0:	f000 f916 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000054 	.word	0x20000054
 80014c0:	40000800 	.word	0x40000800

080014c4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_USART2_UART_Init+0x5c>)
 80014cc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x58>)
 8001508:	f004 fa18 	bl	800593c <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001512:	f000 f8e5 	bl	80016e0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000019c 	.word	0x2000019c
 8001520:	40004400 	.word	0x40004400

08001524 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_GPIO_Init+0x78>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <MX_GPIO_Init+0x78>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_GPIO_Init+0x78>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_GPIO_Init+0x78>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a11      	ldr	r2, [pc, #68]	; (800159c <MX_GPIO_Init+0x78>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_GPIO_Init+0x78>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800156a:	2200      	movs	r2, #0
 800156c:	f247 0181 	movw	r1, #28801	; 0x7081
 8001570:	480b      	ldr	r0, [pc, #44]	; (80015a0 <MX_GPIO_Init+0x7c>)
 8001572:	f000 fe5b 	bl	800222c <HAL_GPIO_WritePin>
			|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001576:	f247 0381 	movw	r3, #28801	; 0x7081
 800157a:	60fb      	str	r3, [r7, #12]
			|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_GPIO_Init+0x7c>)
 8001590:	f000 fca0 	bl	8001ed4 <HAL_GPIO_Init>

}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400

080015a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 16-bit TIM3 is used as an interrupt - every 10 ms
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d101      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Timer_15min();
 80015b4:	f7ff fbc2 	bl	8000d3c <Timer_15min>

	}

	if(htim==&htim2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d150      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{

		bat1_geninfo_asoc_counter++;
 80015c0:	4b2c      	ldr	r3, [pc, #176]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	3301      	adds	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ca:	801a      	strh	r2, [r3, #0]
		bat1_geninfo_voltage_counter++;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015d6:	801a      	strh	r2, [r3, #0]
		bat1_geninfo_remainingcapacity_counter++;
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015e2:	801a      	strh	r2, [r3, #0]
		bat1_geninfo_temperature_counter++;
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015ee:	801a      	strh	r2, [r3, #0]
		bat1_geninfo_cycle_counter++;
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015fa:	801a      	strh	r2, [r3, #0]


		if(bat1_geninfo_asoc_counter==100)
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d105      	bne.n	8001610 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			bat1_geninfo_asoc_counter=0;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001606:	2200      	movs	r2, #0
 8001608:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_asoc_flag=true;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800160c:	2201      	movs	r2, #1
 800160e:	701a      	strb	r2, [r3, #0]
		}

		if(bat1_geninfo_voltage_counter==50)  // update time - 2 minutes
 8001610:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	2b32      	cmp	r3, #50	; 0x32
 8001616:	d105      	bne.n	8001624 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			bat1_geninfo_voltage_counter=0;
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800161a:	2200      	movs	r2, #0
 800161c:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_voltage_flag=true;
 800161e:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
		}

		if(bat1_geninfo_remainingcapacity_counter==70)
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2b46      	cmp	r3, #70	; 0x46
 800162a:	d105      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x94>
		{
			bat1_geninfo_remainingcapacity_counter=0;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800162e:	2200      	movs	r2, #0
 8001630:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_remainingcapacity_flag=true;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
		}
		if(bat1_geninfo_temperature_counter==10)
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2b0a      	cmp	r3, #10
 800163e:	d105      	bne.n	800164c <HAL_TIM_PeriodElapsedCallback+0xa8>
		{
			bat1_geninfo_temperature_counter=0;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_temperature_flag=true;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		}
		if(bat1_geninfo_cycle_counter==400)
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001654:	d105      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			bat1_geninfo_cycle_counter=0;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001658:	2200      	movs	r2, #0
 800165a:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_cycle_flag=true;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		}



	}
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200000f8 	.word	0x200000f8
 8001670:	20000150 	.word	0x20000150
 8001674:	20000046 	.word	0x20000046
 8001678:	2000004a 	.word	0x2000004a
 800167c:	20000048 	.word	0x20000048
 8001680:	2000004c 	.word	0x2000004c
 8001684:	20000044 	.word	0x20000044
 8001688:	2000004f 	.word	0x2000004f
 800168c:	20000051 	.word	0x20000051
 8001690:	20000050 	.word	0x20000050
 8001694:	20000052 	.word	0x20000052
 8001698:	2000004e 	.word	0x2000004e

0800169c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	// UNUSED(huart);
	if(rx_buffer[0]=='B' && rx_buffer[1]=='1' && rx_buffer[2]=='M')
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_UART_RxCpltCallback+0x3c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b42      	cmp	r3, #66	; 0x42
 80016aa:	d10b      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x28>
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_UART_RxCpltCallback+0x3c>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	2b31      	cmp	r3, #49	; 0x31
 80016b2:	d107      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x28>
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_UART_RxCpltCallback+0x3c>)
 80016b6:	789b      	ldrb	r3, [r3, #2]
 80016b8:	2b4d      	cmp	r3, #77	; 0x4d
 80016ba:	d103      	bne.n	80016c4 <HAL_UART_RxCpltCallback+0x28>
	{
		Autotestflag=true;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <HAL_UART_RxCpltCallback+0x40>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e003      	b.n	80016cc <HAL_UART_RxCpltCallback+0x30>
	}
	else
	{
		Autotestflag=false;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_UART_RxCpltCallback+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
	}

}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	20000144 	.word	0x20000144
 80016dc:	20000000 	.word	0x20000000

080016e0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x8>
	...

080016ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_MspInit+0x44>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <HAL_MspInit+0x44>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_MspInit+0x44>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MspInit+0x44>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MspInit+0x44>)
 8001710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_MspInit+0x44>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_I2C_MspInit+0x9c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d138      	bne.n	80017c8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800176e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001774:	2312      	movs	r3, #18
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001780:	2304      	movs	r3, #4
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <HAL_I2C_MspInit+0xa4>)
 800178c:	f000 fba2 	bl	8001ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 8001796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800179a:	6413      	str	r3, [r2, #64]	; 0x40
 800179c:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_I2C_MspInit+0xa0>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	201f      	movs	r0, #31
 80017ae:	f000 faba 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017b2:	201f      	movs	r0, #31
 80017b4:	f000 fad3 	bl	8001d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	2020      	movs	r0, #32
 80017be:	f000 fab2 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017c2:	2020      	movs	r0, #32
 80017c4:	f000 facb 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ec:	d114      	bne.n	8001818 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ee:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6413      	str	r3, [r2, #64]	; 0x40
 80017fa:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2101      	movs	r1, #1
 800180a:	201c      	movs	r0, #28
 800180c:	f000 fa8b 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001810:	201c      	movs	r0, #28
 8001812:	f000 faa4 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001816:	e02a      	b.n	800186e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a17      	ldr	r2, [pc, #92]	; (800187c <HAL_TIM_Base_MspInit+0xa0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d114      	bne.n	800184c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a14      	ldr	r2, [pc, #80]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	201d      	movs	r0, #29
 8001840:	f000 fa71 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001844:	201d      	movs	r0, #29
 8001846:	f000 fa8a 	bl	8001d5e <HAL_NVIC_EnableIRQ>
}
 800184a:	e010      	b.n	800186e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_TIM_Base_MspInit+0xa4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10b      	bne.n	800186e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_TIM_Base_MspInit+0x9c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40000400 	.word	0x40000400
 8001880:	40000800 	.word	0x40000800

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_UART_MspInit+0x8c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12f      	bne.n	8001906 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_UART_MspInit+0x90>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e6:	2307      	movs	r3, #7
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_UART_MspInit+0x94>)
 80018f2:	f000 faef 	bl	8001ed4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2026      	movs	r0, #38	; 0x26
 80018fc:	f000 fa13 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001900:	2026      	movs	r0, #38	; 0x26
 8001902:	f000 fa2c 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40004400 	.word	0x40004400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f8e2 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM2_IRQHandler+0x10>)
 8001976:	f003 fbed 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000150 	.word	0x20000150

08001984 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM3_IRQHandler+0x10>)
 800198a:	f003 fbe3 	bl	8005154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000f8 	.word	0x200000f8

08001998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <I2C1_EV_IRQHandler+0x10>)
 800199e:	f000 fed7 	bl	8002750 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000a0 	.word	0x200000a0

080019ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <I2C1_ER_IRQHandler+0x10>)
 80019b2:	f000 fee7 	bl	8002784 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200000a0 	.word	0x200000a0

080019c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c4:	4804      	ldr	r0, [pc, #16]	; (80019d8 <USART2_IRQHandler+0x18>)
 80019c6:	f004 f8a1 	bl	8005b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 3);
 80019ca:	2203      	movs	r2, #3
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <USART2_IRQHandler+0x1c>)
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <USART2_IRQHandler+0x18>)
 80019d0:	f004 f85e 	bl	8005a90 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000019c 	.word	0x2000019c
 80019dc:	20000144 	.word	0x20000144

080019e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <usdelay>:

extern TIM_HandleTypeDef htim4;


void usdelay (uint32_t us)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <usdelay+0x2c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8001a14:	bf00      	nop
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <usdelay+0x2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d8f9      	bhi.n	8001a16 <usdelay+0x12>
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000054 	.word	0x20000054

08001a34 <msdelay>:

void msdelay(uint32_t ms)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<ms;i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e006      	b.n	8001a50 <msdelay+0x1c>
	{
		usdelay(1000);                  // 1ms delay
 8001a42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a46:	f7ff ffdd 	bl	8001a04 <usdelay>
	for(uint32_t i=0;i<ms;i++)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3f4      	bcc.n	8001a42 <msdelay+0xe>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a80:	4c0b      	ldr	r4, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8e:	f7ff ffa7 	bl	80019e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f005 f82d 	bl	8006af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7ff f973 	bl	8000d80 <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001aa8:	08006b90 	.word	0x08006b90
  ldr r2, =_sbss
 8001aac:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001ab0:	20000224 	.word	0x20000224

08001ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC_IRQHandler>

08001ab6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 f928 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 f805 	bl	8001ad0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ac6:	f7ff fe11 	bl	80016ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x54>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_InitTick+0x58>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f943 	bl	8001d7a <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f000 f90b 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_InitTick+0x5c>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000018 	.word	0x20000018
 8001b28:	20000020 	.word	0x20000020
 8001b2c:	2000001c 	.word	0x2000001c

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000020 	.word	0x20000020
 8001b54:	20000220 	.word	0x20000220

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000220 	.word	0x20000220

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	05fa0000 	.word	0x05fa0000

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff3e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff31 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff feda 	bl	8001b58 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e052      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0216 	bic.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_DMA_Abort+0x62>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	e013      	b.n	8001e3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e16:	f7ff fe9f 	bl	8001b58 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d90c      	bls.n	8001e3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e015      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e4      	bne.n	8001e16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	223f      	movs	r2, #63	; 0x3f
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e00c      	b.n	8001eaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ec4:	b2db      	uxtb	r3, r3
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e175      	b.n	80021e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8164 	bne.w	80021da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d00b      	beq.n	8001f32 <HAL_GPIO_Init+0x5e>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f26:	2b11      	cmp	r3, #17
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x100>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80be 	beq.w	80021da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_GPIO_Init+0x324>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_GPIO_Init+0x324>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002076:	4a61      	ldr	r2, [pc, #388]	; (80021fc <HAL_GPIO_Init+0x328>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_GPIO_Init+0x32c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d037      	beq.n	8002112 <HAL_GPIO_Init+0x23e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d031      	beq.n	800210e <HAL_GPIO_Init+0x23a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a56      	ldr	r2, [pc, #344]	; (8002208 <HAL_GPIO_Init+0x334>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x236>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <HAL_GPIO_Init+0x338>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x232>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a54      	ldr	r2, [pc, #336]	; (8002210 <HAL_GPIO_Init+0x33c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x22e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a53      	ldr	r2, [pc, #332]	; (8002214 <HAL_GPIO_Init+0x340>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x22a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_GPIO_Init+0x344>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_GPIO_Init+0x348>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_GPIO_Init+0x34c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <HAL_GPIO_Init+0x350>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ea:	2309      	movs	r3, #9
 80020ec:	e012      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020ee:	230a      	movs	r3, #10
 80020f0:	e010      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f2:	2308      	movs	r3, #8
 80020f4:	e00e      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00c      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00a      	b.n	8002114 <HAL_GPIO_Init+0x240>
 80020fe:	2305      	movs	r3, #5
 8002100:	e008      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002102:	2304      	movs	r3, #4
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002106:	2303      	movs	r3, #3
 8002108:	e004      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210a:	2302      	movs	r3, #2
 800210c:	e002      	b.n	8002114 <HAL_GPIO_Init+0x240>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_GPIO_Init+0x240>
 8002112:	2300      	movs	r3, #0
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	4093      	lsls	r3, r2
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002124:	4935      	ldr	r1, [pc, #212]	; (80021fc <HAL_GPIO_Init+0x328>)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	089b      	lsrs	r3, r3, #2
 800212a:	3302      	adds	r3, #2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002132:	4b3d      	ldr	r3, [pc, #244]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002156:	4a34      	ldr	r2, [pc, #208]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_GPIO_Init+0x354>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002186:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_GPIO_Init+0x354>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b0:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d003      	beq.n	80021d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d4:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_GPIO_Init+0x354>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b0f      	cmp	r3, #15
 80021e4:	f67f ae86 	bls.w	8001ef4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3724      	adds	r7, #36	; 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40013800 	.word	0x40013800
 8002200:	40020000 	.word	0x40020000
 8002204:	40020400 	.word	0x40020400
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00
 8002210:	40021000 	.word	0x40021000
 8002214:	40021400 	.word	0x40021400
 8002218:	40021800 	.word	0x40021800
 800221c:	40021c00 	.word	0x40021c00
 8002220:	40022000 	.word	0x40022000
 8002224:	40022400 	.word	0x40022400
 8002228:	40013c00 	.word	0x40013c00

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002248:	e003      	b.n	8002252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e07f      	b.n	8002372 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fa54 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	; 0x24
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d107      	bne.n	80022da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	e006      	b.n	80022e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d104      	bne.n	80022fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_I2C_Init+0x11c>)
 8002306:	430b      	orrs	r3, r1
 8002308:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002318:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	ea42 0103 	orr.w	r1, r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69d9      	ldr	r1, [r3, #28]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	02008000 	.word	0x02008000

08002380 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	d153      	bne.n	8002448 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	e04a      	b.n	800244a <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Master_Transmit_IT+0x42>
 80023be:	2302      	movs	r3, #2
 80023c0:	e043      	b.n	800244a <HAL_I2C_Master_Transmit_IT+0xca>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	; 0x21
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2210      	movs	r2, #16
 80023d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_I2C_Master_Transmit_IT+0xd4>)
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2bff      	cmp	r3, #255	; 0xff
 8002400:	d906      	bls.n	8002410 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	22ff      	movs	r2, #255	; 0xff
 8002406:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800240c:	617b      	str	r3, [r7, #20]
 800240e:	e007      	b.n	8002420 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_I2C_Master_Transmit_IT+0xdc>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f001 fb32 	bl	8003a98 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800243c:	2101      	movs	r1, #1
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 fb58 	bl	8003af4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	08002917 	.word	0x08002917
 800245c:	80002000 	.word	0x80002000

08002460 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	461a      	mov	r2, r3
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	4613      	mov	r3, r2
 8002472:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	d153      	bne.n	8002528 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	e04a      	b.n	800252a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Master_Receive_IT+0x42>
 800249e:	2302      	movs	r3, #2
 80024a0:	e043      	b.n	800252a <HAL_I2C_Master_Receive_IT+0xca>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2222      	movs	r2, #34	; 0x22
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2210      	movs	r2, #16
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_I2C_Master_Receive_IT+0xd4>)
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_I2C_Master_Receive_IT+0xd8>)
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2bff      	cmp	r3, #255	; 0xff
 80024e0:	d906      	bls.n	80024f0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	22ff      	movs	r2, #255	; 0xff
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80024e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e007      	b.n	8002500 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fe:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_I2C_Master_Receive_IT+0xdc>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f001 fac2 	bl	8003a98 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800251c:	2102      	movs	r1, #2
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f001 fae8 	bl	8003af4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	ffff0000 	.word	0xffff0000
 8002538:	08002917 	.word	0x08002917
 800253c:	80002400 	.word	0x80002400

08002540 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af02      	add	r7, sp, #8
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	460b      	mov	r3, r1
 800254e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	f040 80ef 	bne.w	8002740 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002570:	d101      	bne.n	8002576 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
 8002574:	e0e5      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_I2C_IsDeviceReady+0x44>
 8002580:	2302      	movs	r3, #2
 8002582:	e0de      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2224      	movs	r2, #36	; 0x24
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_I2C_IsDeviceReady+0x6e>
 80025a2:	897b      	ldrh	r3, [r7, #10]
 80025a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025a8:	4b68      	ldr	r3, [pc, #416]	; (800274c <HAL_I2C_IsDeviceReady+0x20c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	e004      	b.n	80025b8 <HAL_I2C_IsDeviceReady+0x78>
 80025ae:	897b      	ldrh	r3, [r7, #10]
 80025b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025be:	f7ff facb 	bl	8001b58 <HAL_GetTick>
 80025c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0310 	and.w	r3, r3, #16
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80025f0:	e034      	b.n	800265c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d01a      	beq.n	8002630 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7ff faad 	bl	8001b58 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <HAL_I2C_IsDeviceReady+0xd0>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10f      	bne.n	8002630 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e088      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b20      	cmp	r3, #32
 800263c:	bf0c      	ite	eq
 800263e:	2301      	moveq	r3, #1
 8002640:	2300      	movne	r3, #0
 8002642:	b2db      	uxtb	r3, r3
 8002644:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800265c:	7ffb      	ldrb	r3, [r7, #31]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_I2C_IsDeviceReady+0x128>
 8002662:	7fbb      	ldrb	r3, [r7, #30]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0c4      	beq.n	80025f2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d01a      	beq.n	80026ac <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	2120      	movs	r1, #32
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f001 f9c8 	bl	8003a16 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e058      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2220      	movs	r2, #32
 8002696:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e04a      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2200      	movs	r2, #0
 80026b4:	2120      	movs	r1, #32
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f001 f9ad 	bl	8003a16 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e03d      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2210      	movs	r2, #16
 80026cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2220      	movs	r2, #32
 80026d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d118      	bne.n	8002710 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2120      	movs	r1, #32
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f001 f98c 	bl	8003a16 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01c      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2220      	movs	r2, #32
 800270e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	f63f af3d 	bhi.w	800259a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	02002000 	.word	0x02002000

08002750 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
  }
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	0a1b      	lsrs	r3, r3, #8
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_I2C_ER_IRQHandler+0x46>
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	09db      	lsrs	r3, r3, #7
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	0a9b      	lsrs	r3, r3, #10
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_I2C_ER_IRQHandler+0x74>
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	09db      	lsrs	r3, r3, #7
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	f043 0208 	orr.w	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	0a5b      	lsrs	r3, r3, #9
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_I2C_ER_IRQHandler+0xa2>
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	09db      	lsrs	r3, r3, #7
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f043 0202 	orr.w	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002824:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f003 030b 	and.w	r3, r3, #11
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 ffb3 	bl	80037a4 <I2C_ITError>
  }
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	70fb      	strb	r3, [r7, #3]
 80028a2:	4613      	mov	r3, r2
 80028a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b088      	sub	sp, #32
 800291a:	af02      	add	r7, sp, #8
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <I2C_Master_ISR_IT+0x1e>
 8002930:	2302      	movs	r3, #2
 8002932:	e114      	b.n	8002b5e <I2C_Master_ISR_IT+0x248>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <I2C_Master_ISR_IT+0x5a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00d      	beq.n	8002970 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2210      	movs	r2, #16
 800295a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f001 f812 	bl	8003992 <I2C_Flush_TXDR>
 800296e:	e0e1      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <I2C_Master_ISR_IT+0xae>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01d      	beq.n	80029c4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c2:	e0b7      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01e      	beq.n	8002a0e <I2C_Master_ISR_IT+0xf8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d018      	beq.n	8002a0e <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a0c:	e092      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	09db      	lsrs	r3, r3, #7
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d05d      	beq.n	8002ad6 <I2C_Master_ISR_IT+0x1c0>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	099b      	lsrs	r3, r3, #6
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d057      	beq.n	8002ad6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d040      	beq.n	8002ab2 <I2C_Master_ISR_IT+0x19c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d13c      	bne.n	8002ab2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a44:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2bff      	cmp	r3, #255	; 0xff
 8002a4e:	d90e      	bls.n	8002a6e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	22ff      	movs	r2, #255	; 0xff
 8002a54:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	8a79      	ldrh	r1, [r7, #18]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f001 f816 	bl	8003a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6c:	e032      	b.n	8002ad4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a80:	d00b      	beq.n	8002a9a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	8a79      	ldrh	r1, [r7, #18]
 8002a8e:	2000      	movs	r0, #0
 8002a90:	9000      	str	r0, [sp, #0]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f001 f800 	bl	8003a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a98:	e01c      	b.n	8002ad4 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	8a79      	ldrh	r1, [r7, #18]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 fff4 	bl	8003a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab0:	e010      	b.n	8002ad4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ac0:	d003      	beq.n	8002aca <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fba9 	bl	800321a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac8:	e034      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002aca:	2140      	movs	r1, #64	; 0x40
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fe69 	bl	80037a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad2:	e02f      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
 8002ad4:	e02e      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <I2C_Master_ISR_IT+0x21e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d022      	beq.n	8002b34 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d119      	bne.n	8002b2c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b06:	d015      	beq.n	8002b34 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b10:	d108      	bne.n	8002b24 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e007      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fb78 	bl	800321a <I2C_ITMasterSeqCplt>
 8002b2a:	e003      	b.n	8002b34 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fe38 	bl	80037a4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <I2C_Master_ISR_IT+0x23e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002b4c:	6979      	ldr	r1, [r7, #20]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fbfe 	bl	8003350 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <I2C_Slave_ISR_IT+0x24>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0ec      	b.n	8002d64 <I2C_Slave_ISR_IT+0x1fe>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <I2C_Slave_ISR_IT+0x4c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002baa:	6939      	ldr	r1, [r7, #16]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 fc99 	bl	80034e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04d      	beq.n	8002c5a <I2C_Slave_ISR_IT+0xf4>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d047      	beq.n	8002c5a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d128      	bne.n	8002c26 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b28      	cmp	r3, #40	; 0x28
 8002bde:	d108      	bne.n	8002bf2 <I2C_Slave_ISR_IT+0x8c>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002be6:	d104      	bne.n	8002bf2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 fd84 	bl	80036f8 <I2C_ITListenCplt>
 8002bf0:	e032      	b.n	8002c58 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b29      	cmp	r3, #41	; 0x29
 8002bfc:	d10e      	bne.n	8002c1c <I2C_Slave_ISR_IT+0xb6>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c04:	d00a      	beq.n	8002c1c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 febf 	bl	8003992 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fb3d 	bl	8003294 <I2C_ITSlaveSeqCplt>
 8002c1a:	e01d      	b.n	8002c58 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2210      	movs	r2, #16
 8002c22:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c24:	e096      	b.n	8002d54 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <I2C_Slave_ISR_IT+0xe4>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c46:	f040 8085 	bne.w	8002d54 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4619      	mov	r1, r3
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 fda7 	bl	80037a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c56:	e07d      	b.n	8002d54 <I2C_Slave_ISR_IT+0x1ee>
 8002c58:	e07c      	b.n	8002d54 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d030      	beq.n	8002cc8 <I2C_Slave_ISR_IT+0x162>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d02a      	beq.n	8002cc8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d018      	beq.n	8002cae <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d14f      	bne.n	8002d58 <I2C_Slave_ISR_IT+0x1f2>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cbe:	d04b      	beq.n	8002d58 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fae7 	bl	8003294 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002cc6:	e047      	b.n	8002d58 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	08db      	lsrs	r3, r3, #3
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	08db      	lsrs	r3, r3, #3
 8002cd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa15 	bl	8003112 <I2C_ITAddrCplt>
 8002ce8:	e037      	b.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d031      	beq.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d02b      	beq.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d018      	beq.n	8002d3e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d3c:	e00d      	b.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d44:	d002      	beq.n	8002d4c <I2C_Slave_ISR_IT+0x1e6>
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 faa1 	bl	8003294 <I2C_ITSlaveSeqCplt>
 8002d52:	e002      	b.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002d58:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <I2C_Master_ISR_DMA+0x1a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0e1      	b.n	8002f4a <I2C_Master_ISR_DMA+0x1de>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d017      	beq.n	8002dca <I2C_Master_ISR_DMA+0x5e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d011      	beq.n	8002dca <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2210      	movs	r2, #16
 8002dac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f043 0204 	orr.w	r2, r3, #4
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002dba:	2120      	movs	r1, #32
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fe99 	bl	8003af4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fde5 	bl	8003992 <I2C_Flush_TXDR>
 8002dc8:	e0ba      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	09db      	lsrs	r3, r3, #7
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d072      	beq.n	8002ebc <I2C_Master_ISR_DMA+0x150>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06c      	beq.n	8002ebc <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d04e      	beq.n	8002e9a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e08:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2bff      	cmp	r3, #255	; 0xff
 8002e12:	d906      	bls.n	8002e22 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	22ff      	movs	r2, #255	; 0xff
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e010      	b.n	8002e44 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e34:	d003      	beq.n	8002e3e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e002      	b.n	8002e44 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e42:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	8a79      	ldrh	r1, [r7, #18]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fe20 	bl	8003a98 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b22      	cmp	r3, #34	; 0x22
 8002e74:	d108      	bne.n	8002e88 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e84:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e86:	e05b      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e96:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e98:	e052      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea8:	d003      	beq.n	8002eb2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f9b5 	bl	800321a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002eb0:	e046      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fc75 	bl	80037a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002eba:	e041      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d029      	beq.n	8002f1c <I2C_Master_ISR_DMA+0x1b0>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eec:	d027      	beq.n	8002f3e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef6:	d108      	bne.n	8002f0a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f06:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002f08:	e019      	b.n	8002f3e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f985 	bl	800321a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002f10:	e015      	b.n	8002f3e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fc45 	bl	80037a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f1a:	e010      	b.n	8002f3e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	095b      	lsrs	r3, r3, #5
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fa0a 	bl	8003350 <I2C_ITMasterCplt>
 8002f3c:	e000      	b.n	8002f40 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002f3e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <I2C_Slave_ISR_DMA+0x24>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0c9      	b.n	800310a <I2C_Slave_ISR_DMA+0x1b8>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <I2C_Slave_ISR_DMA+0x4c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 faa3 	bl	80034e4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 809a 	beq.w	80030e0 <I2C_Slave_ISR_DMA+0x18e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8093 	beq.w	80030e0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0b9b      	lsrs	r3, r3, #14
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0bdb      	lsrs	r3, r3, #15
 8002fca:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d07f      	beq.n	80030d2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00d      	beq.n	8002ff6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0bdb      	lsrs	r3, r3, #15
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d007      	beq.n	8002ff6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	0b9b      	lsrs	r3, r3, #14
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003016:	2301      	movs	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d128      	bne.n	8003072 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b28      	cmp	r3, #40	; 0x28
 800302a:	d108      	bne.n	800303e <I2C_Slave_ISR_DMA+0xec>
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003032:	d104      	bne.n	800303e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fb5e 	bl	80036f8 <I2C_ITListenCplt>
 800303c:	e048      	b.n	80030d0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b29      	cmp	r3, #41	; 0x29
 8003048:	d10e      	bne.n	8003068 <I2C_Slave_ISR_DMA+0x116>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003050:	d00a      	beq.n	8003068 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2210      	movs	r2, #16
 8003058:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fc99 	bl	8003992 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f917 	bl	8003294 <I2C_ITSlaveSeqCplt>
 8003066:	e033      	b.n	80030d0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2210      	movs	r2, #16
 800306e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003070:	e034      	b.n	80030dc <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2210      	movs	r2, #16
 8003078:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <I2C_Slave_ISR_DMA+0x14a>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309a:	d11f      	bne.n	80030dc <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	2b21      	cmp	r3, #33	; 0x21
 80030a0:	d002      	beq.n	80030a8 <I2C_Slave_ISR_DMA+0x156>
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2b29      	cmp	r3, #41	; 0x29
 80030a6:	d103      	bne.n	80030b0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2221      	movs	r2, #33	; 0x21
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
 80030ae:	e008      	b.n	80030c2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b22      	cmp	r3, #34	; 0x22
 80030b4:	d002      	beq.n	80030bc <I2C_Slave_ISR_DMA+0x16a>
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b2a      	cmp	r3, #42	; 0x2a
 80030ba:	d102      	bne.n	80030c2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	; 0x22
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	4619      	mov	r1, r3
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fb6b 	bl	80037a4 <I2C_ITError>
      if (treatdmanack == 1U)
 80030ce:	e005      	b.n	80030dc <I2C_Slave_ISR_DMA+0x18a>
 80030d0:	e004      	b.n	80030dc <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2210      	movs	r2, #16
 80030d8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030da:	e011      	b.n	8003100 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80030dc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80030de:	e00f      	b.n	8003100 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	08db      	lsrs	r3, r3, #3
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <I2C_Slave_ISR_DMA+0x1ae>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f809 	bl	8003112 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003128:	2b28      	cmp	r3, #40	; 0x28
 800312a:	d16a      	bne.n	8003202 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	0c1b      	lsrs	r3, r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800314a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003158:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003166:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d138      	bne.n	80031e2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003170:	897b      	ldrh	r3, [r7, #10]
 8003172:	09db      	lsrs	r3, r3, #7
 8003174:	b29a      	uxth	r2, r3
 8003176:	89bb      	ldrh	r3, [r7, #12]
 8003178:	4053      	eors	r3, r2
 800317a:	b29b      	uxth	r3, r3
 800317c:	f003 0306 	and.w	r3, r3, #6
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11c      	bne.n	80031be <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003184:	897b      	ldrh	r3, [r7, #10]
 8003186:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	2b02      	cmp	r3, #2
 8003198:	d13b      	bne.n	8003212 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2208      	movs	r2, #8
 80031a6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031b0:	89ba      	ldrh	r2, [r7, #12]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fb6d 	bl	8002896 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80031bc:	e029      	b.n	8003212 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fcf8 	bl	8003bbc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031d4:	89ba      	ldrh	r2, [r7, #12]
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7ff fb5b 	bl	8002896 <HAL_I2C_AddrCallback>
}
 80031e0:	e017      	b.n	8003212 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80031e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fce8 	bl	8003bbc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031f4:	89ba      	ldrh	r2, [r7, #12]
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	4619      	mov	r1, r3
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fb4b 	bl	8002896 <HAL_I2C_AddrCallback>
}
 8003200:	e007      	b.n	8003212 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2208      	movs	r2, #8
 8003208:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b21      	cmp	r3, #33	; 0x21
 8003234:	d115      	bne.n	8003262 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2211      	movs	r2, #17
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800324a:	2101      	movs	r1, #1
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fcb5 	bl	8003bbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff faf3 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003260:	e014      	b.n	800328c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2212      	movs	r2, #18
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003276:	2102      	movs	r1, #2
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fc9f 	bl	8003bbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fae7 	bl	800285a <HAL_I2C_MasterRxCpltCallback>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	0b9b      	lsrs	r3, r3, #14
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e00d      	b.n	80032e6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0bdb      	lsrs	r3, r3, #15
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b29      	cmp	r3, #41	; 0x29
 80032f0:	d112      	bne.n	8003318 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2228      	movs	r2, #40	; 0x28
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2221      	movs	r2, #33	; 0x21
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003300:	2101      	movs	r1, #1
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fc5a 	bl	8003bbc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff faac 	bl	800286e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003316:	e017      	b.n	8003348 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b2a      	cmp	r3, #42	; 0x2a
 8003322:	d111      	bne.n	8003348 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2228      	movs	r2, #40	; 0x28
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2222      	movs	r2, #34	; 0x22
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003332:	2102      	movs	r1, #2
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fc41 	bl	8003bbc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fa9d 	bl	8002882 <HAL_I2C_SlaveRxCpltCallback>
}
 8003348:	bf00      	nop
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b21      	cmp	r3, #33	; 0x21
 8003370:	d107      	bne.n	8003382 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003372:	2101      	movs	r1, #1
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fc21 	bl	8003bbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2211      	movs	r2, #17
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
 8003380:	e00c      	b.n	800339c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b22      	cmp	r3, #34	; 0x22
 800338c:	d106      	bne.n	800339c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800338e:	2102      	movs	r1, #2
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fc13 	bl	8003bbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2212      	movs	r2, #18
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <I2C_ITMasterCplt+0x18c>)
 80033a8:	400b      	ands	r3, r1
 80033aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a4a      	ldr	r2, [pc, #296]	; (80034e0 <I2C_ITMasterCplt+0x190>)
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2210      	movs	r2, #16
 80033ca:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b60      	cmp	r3, #96	; 0x60
 80033e2:	d10b      	bne.n	80033fc <I2C_ITMasterCplt+0xac>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80033fa:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fac8 	bl	8003992 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b60      	cmp	r3, #96	; 0x60
 8003412:	d002      	beq.n	800341a <I2C_ITMasterCplt+0xca>
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	4619      	mov	r1, r3
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f9bf 	bl	80037a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003426:	e054      	b.n	80034d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b21      	cmp	r3, #33	; 0x21
 8003432:	d124      	bne.n	800347e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d10b      	bne.n	8003466 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fa31 	bl	80028c6 <HAL_I2C_MemTxCpltCallback>
}
 8003464:	e035      	b.n	80034d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff f9e5 	bl	8002846 <HAL_I2C_MasterTxCpltCallback>
}
 800347c:	e029      	b.n	80034d2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b22      	cmp	r3, #34	; 0x22
 8003488:	d123      	bne.n	80034d2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d10b      	bne.n	80034bc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fa10 	bl	80028da <HAL_I2C_MemRxCpltCallback>
}
 80034ba:	e00a      	b.n	80034d2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff f9c4 	bl	800285a <HAL_I2C_MasterRxCpltCallback>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	fe00e800 	.word	0xfe00e800
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003500:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2220      	movs	r2, #32
 8003508:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b21      	cmp	r3, #33	; 0x21
 800350e:	d002      	beq.n	8003516 <I2C_ITSlaveCplt+0x32>
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b29      	cmp	r3, #41	; 0x29
 8003514:	d108      	bne.n	8003528 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003516:	f248 0101 	movw	r1, #32769	; 0x8001
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fb4e 	bl	8003bbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2221      	movs	r2, #33	; 0x21
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
 8003526:	e00d      	b.n	8003544 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	2b22      	cmp	r3, #34	; 0x22
 800352c:	d002      	beq.n	8003534 <I2C_ITSlaveCplt+0x50>
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b2a      	cmp	r3, #42	; 0x2a
 8003532:	d107      	bne.n	8003544 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003534:	f248 0102 	movw	r1, #32770	; 0x8002
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fb3f 	bl	8003bbc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2222      	movs	r2, #34	; 0x22
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003552:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <I2C_ITSlaveCplt+0x20c>)
 8003560:	400b      	ands	r3, r1
 8003562:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa14 	bl	8003992 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	0b9b      	lsrs	r3, r3, #14
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003584:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800359c:	e018      	b.n	80035d0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	0bdb      	lsrs	r3, r3, #15
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d012      	beq.n	80035d0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	f043 0204 	orr.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8a7 	bl	80037a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b28      	cmp	r3, #40	; 0x28
 8003660:	d141      	bne.n	80036e6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f847 	bl	80036f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800366a:	e03c      	b.n	80036e6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003674:	d014      	beq.n	80036a0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff fe0c 	bl	8003294 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1d      	ldr	r2, [pc, #116]	; (80036f4 <I2C_ITSlaveCplt+0x210>)
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff f90a 	bl	80028b2 <HAL_I2C_ListenCpltCallback>
}
 800369e:	e022      	b.n	80036e6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b22      	cmp	r3, #34	; 0x22
 80036aa:	d10e      	bne.n	80036ca <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff f8dd 	bl	8002882 <HAL_I2C_SlaveRxCpltCallback>
}
 80036c8:	e00d      	b.n	80036e6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff f8c4 	bl	800286e <HAL_I2C_SlaveTxCpltCallback>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	fe00e800 	.word	0xfe00e800
 80036f4:	ffff0000 	.word	0xffff0000

080036f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	; (80037a0 <I2C_ITListenCplt+0xa8>)
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003776:	f248 0103 	movw	r1, #32771	; 0x8003
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa1e 	bl	8003bbc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2210      	movs	r2, #16
 8003786:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff f88e 	bl	80028b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	ffff0000 	.word	0xffff0000

080037a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <I2C_ITError+0x194>)
 80037c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b28      	cmp	r3, #40	; 0x28
 80037da:	d005      	beq.n	80037e8 <I2C_ITError+0x44>
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	2b29      	cmp	r3, #41	; 0x29
 80037e0:	d002      	beq.n	80037e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	d10b      	bne.n	8003800 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037e8:	2103      	movs	r1, #3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f9e6 	bl	8003bbc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2228      	movs	r2, #40	; 0x28
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a50      	ldr	r2, [pc, #320]	; (800393c <I2C_ITError+0x198>)
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34
 80037fe:	e011      	b.n	8003824 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003800:	f248 0103 	movw	r1, #32771	; 0x8003
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f9d9 	bl	8003bbc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b60      	cmp	r3, #96	; 0x60
 8003814:	d003      	beq.n	800381e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d039      	beq.n	80038a6 <I2C_ITError+0x102>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b11      	cmp	r3, #17
 8003836:	d002      	beq.n	800383e <I2C_ITError+0x9a>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b21      	cmp	r3, #33	; 0x21
 800383c:	d133      	bne.n	80038a6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800384c:	d107      	bne.n	800385e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800385c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fb27 	bl	8001eb6 <HAL_DMA_GetState>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d017      	beq.n	800389e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4a33      	ldr	r2, [pc, #204]	; (8003940 <I2C_ITError+0x19c>)
 8003874:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe faf5 	bl	8001e72 <HAL_DMA_Abort_IT>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d04d      	beq.n	800392a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800389c:	e045      	b.n	800392a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f850 	bl	8003944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038a4:	e041      	b.n	800392a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d039      	beq.n	8003922 <I2C_ITError+0x17e>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b12      	cmp	r3, #18
 80038b2:	d002      	beq.n	80038ba <I2C_ITError+0x116>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b22      	cmp	r3, #34	; 0x22
 80038b8:	d133      	bne.n	8003922 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c8:	d107      	bne.n	80038da <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fae9 	bl	8001eb6 <HAL_DMA_GetState>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d017      	beq.n	800391a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	4a14      	ldr	r2, [pc, #80]	; (8003940 <I2C_ITError+0x19c>)
 80038f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fab7 	bl	8001e72 <HAL_DMA_Abort_IT>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d011      	beq.n	800392e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003918:	e009      	b.n	800392e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f812 	bl	8003944 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003920:	e005      	b.n	800392e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f80e 	bl	8003944 <I2C_TreatErrorCallback>
  }
}
 8003928:	e002      	b.n	8003930 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800392e:	bf00      	nop
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	ffff0000 	.word	0xffff0000
 800393c:	08002b67 	.word	0x08002b67
 8003940:	080039db 	.word	0x080039db

08003944 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b60      	cmp	r3, #96	; 0x60
 8003956:	d10e      	bne.n	8003976 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fe ffc7 	bl	8002902 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003974:	e009      	b.n	800398a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7fe ffb2 	bl	80028ee <HAL_I2C_ErrorCallback>
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d103      	bne.n	80039b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d007      	beq.n	80039ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699a      	ldr	r2, [r3, #24]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	619a      	str	r2, [r3, #24]
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2200      	movs	r2, #0
 80039f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	2200      	movs	r2, #0
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff ff9b 	bl	8003944 <I2C_TreatErrorCallback>
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a26:	e022      	b.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2e:	d01e      	beq.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7fe f892 	bl	8001b58 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d302      	bcc.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d113      	bne.n	8003a6e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f043 0220 	orr.w	r2, r3, #32
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0cd      	beq.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	817b      	strh	r3, [r7, #10]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	0d5b      	lsrs	r3, r3, #21
 8003ab4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ab8:	4b0d      	ldr	r3, [pc, #52]	; (8003af0 <I2C_TransferConfig+0x58>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	43db      	mvns	r3, r3
 8003abe:	ea02 0103 	and.w	r1, r2, r3
 8003ac2:	897b      	ldrh	r3, [r7, #10]
 8003ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ac8:	7a7b      	ldrb	r3, [r7, #9]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	03ff63ff 	.word	0x03ff63ff

08003af4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b08:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <I2C_Enable_IRQ+0xc0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003b12:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <I2C_Enable_IRQ+0xc4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d11d      	bne.n	8003b54 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	da03      	bge.n	8003b28 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b28:	887b      	ldrh	r3, [r7, #2]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d103      	bne.n	8003b36 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d103      	bne.n	8003b44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d125      	bne.n	8003b96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b50:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b52:	e020      	b.n	8003b96 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da03      	bge.n	8003b64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b64:	887b      	ldrh	r3, [r7, #2]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003b74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003b86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d103      	bne.n	8003b96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f043 0320 	orr.w	r3, r3, #32
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6819      	ldr	r1, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	08002d6d 	.word	0x08002d6d
 8003bb8:	08002f53 	.word	0x08002f53

08003bbc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00f      	beq.n	8003bf6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003bdc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bea:	2b28      	cmp	r3, #40	; 0x28
 8003bec:	d003      	beq.n	8003bf6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003bf4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00f      	beq.n	8003c20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003c06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c14:	2b28      	cmp	r3, #40	; 0x28
 8003c16:	d003      	beq.n	8003c20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003c1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	da03      	bge.n	8003c30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c30:	887b      	ldrh	r3, [r7, #2]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d103      	bne.n	8003c3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d103      	bne.n	8003c4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 0320 	orr.w	r3, r3, #32
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c4c:	887b      	ldrh	r3, [r7, #2]
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d103      	bne.n	8003c5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	400a      	ands	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d138      	bne.n	8003d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e032      	b.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d139      	bne.n	8003d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e033      	b.n	8003d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2224      	movs	r2, #36	; 0x24
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e291      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8087 	beq.w	8003eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d00c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd8:	4b93      	ldr	r3, [pc, #588]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d112      	bne.n	8003e0a <HAL_RCC_OscConfig+0x62>
 8003de4:	4b90      	ldr	r3, [pc, #576]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df0:	d10b      	bne.n	8003e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df2:	4b8d      	ldr	r3, [pc, #564]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d06c      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x130>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d168      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e26b      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x7a>
 8003e14:	4b84      	ldr	r3, [pc, #528]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a83      	ldr	r2, [pc, #524]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e02e      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x9c>
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a7e      	ldr	r2, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	4b7c      	ldr	r3, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7b      	ldr	r2, [pc, #492]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0xc0>
 8003e4e:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a75      	ldr	r2, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b73      	ldr	r3, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a72      	ldr	r2, [pc, #456]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xd8>
 8003e68:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd fe66 	bl	8001b58 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fe62 	bl	8001b58 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e21f      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b61      	ldr	r3, [pc, #388]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe8>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fe52 	bl	8001b58 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fe4e 	bl	8001b58 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e20b      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b57      	ldr	r3, [pc, #348]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x110>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d069      	beq.n	8003fba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee6:	4b50      	ldr	r3, [pc, #320]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b4d      	ldr	r3, [pc, #308]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x190>
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x17a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1df      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b41      	ldr	r3, [pc, #260]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	493d      	ldr	r1, [pc, #244]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e040      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a38      	ldr	r2, [pc, #224]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fe04 	bl	8001b58 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fd fe00 	bl	8001b58 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1bd      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f66:	4b30      	ldr	r3, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f72:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4929      	ldr	r1, [pc, #164]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
 8003f86:	e018      	b.n	8003fba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f88:	4b27      	ldr	r3, [pc, #156]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fd fde0 	bl	8001b58 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fd fddc 	bl	8001b58 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e199      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d038      	beq.n	8004038 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d019      	beq.n	8004002 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	4a15      	ldr	r2, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd fdbd 	bl	8001b58 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7fd fdb9 	bl	8001b58 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e176      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x23a>
 8004000:	e01a      	b.n	8004038 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	4a08      	ldr	r2, [pc, #32]	; (8004028 <HAL_RCC_OscConfig+0x280>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400e:	f7fd fda3 	bl	8001b58 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	e00a      	b.n	800402c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004016:	f7fd fd9f 	bl	8001b58 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d903      	bls.n	800402c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e15c      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
 8004028:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	4b91      	ldr	r3, [pc, #580]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ee      	bne.n	8004016 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80a4 	beq.w	800418e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a87      	ldr	r2, [pc, #540]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCC_OscConfig+0x4d0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d118      	bne.n	80040ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800407a:	4b7f      	ldr	r3, [pc, #508]	; (8004278 <HAL_RCC_OscConfig+0x4d0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a7e      	ldr	r2, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x4d0>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7fd fd67 	bl	8001b58 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408c:	e008      	b.n	80040a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408e:	f7fd fd63 	bl	8001b58 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	2b64      	cmp	r3, #100	; 0x64
 800409a:	d901      	bls.n	80040a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e120      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a0:	4b75      	ldr	r3, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x4d0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0f0      	beq.n	800408e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x31a>
 80040b4:	4b6f      	ldr	r3, [pc, #444]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	4a6e      	ldr	r2, [pc, #440]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6713      	str	r3, [r2, #112]	; 0x70
 80040c0:	e02d      	b.n	800411e <HAL_RCC_OscConfig+0x376>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10c      	bne.n	80040e4 <HAL_RCC_OscConfig+0x33c>
 80040ca:	4b6a      	ldr	r3, [pc, #424]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	4a69      	ldr	r2, [pc, #420]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6713      	str	r3, [r2, #112]	; 0x70
 80040d6:	4b67      	ldr	r3, [pc, #412]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040da:	4a66      	ldr	r2, [pc, #408]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040dc:	f023 0304 	bic.w	r3, r3, #4
 80040e0:	6713      	str	r3, [r2, #112]	; 0x70
 80040e2:	e01c      	b.n	800411e <HAL_RCC_OscConfig+0x376>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0x35e>
 80040ec:	4b61      	ldr	r3, [pc, #388]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	4a60      	ldr	r2, [pc, #384]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	f043 0304 	orr.w	r3, r3, #4
 80040f6:	6713      	str	r3, [r2, #112]	; 0x70
 80040f8:	4b5e      	ldr	r3, [pc, #376]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	4a5d      	ldr	r2, [pc, #372]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	; 0x70
 8004104:	e00b      	b.n	800411e <HAL_RCC_OscConfig+0x376>
 8004106:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a5a      	ldr	r2, [pc, #360]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
 8004112:	4b58      	ldr	r3, [pc, #352]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a57      	ldr	r2, [pc, #348]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d015      	beq.n	8004152 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd fd17 	bl	8001b58 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fd fd13 	bl	8001b58 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0ce      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	4b4b      	ldr	r3, [pc, #300]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0ee      	beq.n	800412e <HAL_RCC_OscConfig+0x386>
 8004150:	e014      	b.n	800417c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004152:	f7fd fd01 	bl	8001b58 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fd fcfd 	bl	8001b58 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004170:	4b40      	ldr	r3, [pc, #256]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ee      	bne.n	800415a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b3c      	ldr	r3, [pc, #240]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a3b      	ldr	r2, [pc, #236]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80a4 	beq.w	80042e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004198:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d06b      	beq.n	800427c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d149      	bne.n	8004240 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a30      	ldr	r2, [pc, #192]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd fcce 	bl	8001b58 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd fcca 	bl	8001b58 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e087      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69da      	ldr	r2, [r3, #28]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	019b      	lsls	r3, r3, #6
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	3b01      	subs	r3, #1
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	061b      	lsls	r3, r3, #24
 8004202:	4313      	orrs	r3, r2
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800420a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fc9e 	bl	8001b58 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fd fc9a 	bl	8001b58 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e057      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x478>
 800423e:	e04f      	b.n	80042e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fc84 	bl	8001b58 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004254:	f7fd fc80 	bl	8001b58 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e03d      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004266:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_RCC_OscConfig+0x4cc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x4ac>
 8004272:	e035      	b.n	80042e0 <HAL_RCC_OscConfig+0x538>
 8004274:	40023800 	.word	0x40023800
 8004278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800427c:	4b1b      	ldr	r3, [pc, #108]	; (80042ec <HAL_RCC_OscConfig+0x544>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d028      	beq.n	80042dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d121      	bne.n	80042dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11a      	bne.n	80042dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ac:	4013      	ands	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d111      	bne.n	80042dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	085b      	lsrs	r3, r3, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0d0      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b67      	ldr	r3, [pc, #412]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	4965      	ldr	r1, [pc, #404]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d040      	beq.n	8004414 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d115      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e073      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e06b      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4936      	ldr	r1, [pc, #216]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e4:	f7fd fbb8 	bl	8001b58 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fd fbb4 	bl	8001b58 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e053      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d210      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b24      	ldr	r3, [pc, #144]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 020f 	bic.w	r2, r3, #15
 800442a:	4922      	ldr	r1, [pc, #136]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	; (80044bc <HAL_RCC_ClockConfig+0x1cc>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <HAL_RCC_ClockConfig+0x1d0>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fb14 	bl	8001ad0 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08006b68 	.word	0x08006b68
 80044c0:	20000018 	.word	0x20000018
 80044c4:	2000001c 	.word	0x2000001c

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	2300      	movs	r3, #0
 80044da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e0:	4b67      	ldr	r3, [pc, #412]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d00d      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x40>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	f200 80bd 	bhi.w	800466c <HAL_RCC_GetSysClockFreq+0x1a4>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x34>
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x3a>
 80044fa:	e0b7      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b61      	ldr	r3, [pc, #388]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044fe:	60bb      	str	r3, [r7, #8]
      break;
 8004500:	e0b7      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004502:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004504:	60bb      	str	r3, [r7, #8]
      break;
 8004506:	e0b4      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004512:	4b5b      	ldr	r3, [pc, #364]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04d      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b58      	ldr	r3, [pc, #352]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	461a      	mov	r2, r3
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	ea02 0800 	and.w	r8, r2, r0
 8004536:	ea03 0901 	and.w	r9, r3, r1
 800453a:	4640      	mov	r0, r8
 800453c:	4649      	mov	r1, r9
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	014b      	lsls	r3, r1, #5
 8004548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800454c:	0142      	lsls	r2, r0, #5
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	ebb0 0008 	subs.w	r0, r0, r8
 8004556:	eb61 0109 	sbc.w	r1, r1, r9
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004568:	0182      	lsls	r2, r0, #6
 800456a:	1a12      	subs	r2, r2, r0
 800456c:	eb63 0301 	sbc.w	r3, r3, r1
 8004570:	f04f 0000 	mov.w	r0, #0
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	00d9      	lsls	r1, r3, #3
 800457a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800457e:	00d0      	lsls	r0, r2, #3
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	eb12 0208 	adds.w	r2, r2, r8
 8004588:	eb43 0309 	adc.w	r3, r3, r9
 800458c:	f04f 0000 	mov.w	r0, #0
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	0259      	lsls	r1, r3, #9
 8004596:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800459a:	0250      	lsls	r0, r2, #9
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4610      	mov	r0, r2
 80045a2:	4619      	mov	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f7fc fa4a 	bl	8000a44 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4613      	mov	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e04a      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ba:	4b31      	ldr	r3, [pc, #196]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	099b      	lsrs	r3, r3, #6
 80045c0:	461a      	mov	r2, r3
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	ea02 0400 	and.w	r4, r2, r0
 80045d2:	ea03 0501 	and.w	r5, r3, r1
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	014b      	lsls	r3, r1, #5
 80045e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045e8:	0142      	lsls	r2, r0, #5
 80045ea:	4610      	mov	r0, r2
 80045ec:	4619      	mov	r1, r3
 80045ee:	1b00      	subs	r0, r0, r4
 80045f0:	eb61 0105 	sbc.w	r1, r1, r5
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	018b      	lsls	r3, r1, #6
 80045fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004602:	0182      	lsls	r2, r0, #6
 8004604:	1a12      	subs	r2, r2, r0
 8004606:	eb63 0301 	sbc.w	r3, r3, r1
 800460a:	f04f 0000 	mov.w	r0, #0
 800460e:	f04f 0100 	mov.w	r1, #0
 8004612:	00d9      	lsls	r1, r3, #3
 8004614:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004618:	00d0      	lsls	r0, r2, #3
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	1912      	adds	r2, r2, r4
 8004620:	eb45 0303 	adc.w	r3, r5, r3
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f04f 0100 	mov.w	r1, #0
 800462c:	0299      	lsls	r1, r3, #10
 800462e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004632:	0290      	lsls	r0, r2, #10
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f7fc f9fe 	bl	8000a44 <__aeabi_uldivmod>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4613      	mov	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	3301      	adds	r3, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	60bb      	str	r3, [r7, #8]
      break;
 800466a:	e002      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4b05      	ldr	r3, [pc, #20]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800466e:	60bb      	str	r3, [r7, #8]
      break;
 8004670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004672:	68bb      	ldr	r3, [r7, #8]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	00f42400 	.word	0x00f42400
 8004688:	007a1200 	.word	0x007a1200

0800468c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000018 	.word	0x20000018

080046a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a8:	f7ff fff0 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0a9b      	lsrs	r3, r3, #10
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	08006b78 	.word	0x08006b78

080046cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046d0:	f7ff ffdc 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0b5b      	lsrs	r3, r3, #13
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08006b78 	.word	0x08006b78

080046f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d012      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800471c:	4b69      	ldr	r3, [pc, #420]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004726:	6093      	str	r3, [r2, #8]
 8004728:	4b66      	ldr	r3, [pc, #408]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	4964      	ldr	r1, [pc, #400]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800473e:	2301      	movs	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d017      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474e:	4b5d      	ldr	r3, [pc, #372]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004754:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	4959      	ldr	r1, [pc, #356]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476c:	d101      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800477a:	2301      	movs	r3, #1
 800477c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d017      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004790:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	494a      	ldr	r1, [pc, #296]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047b6:	2301      	movs	r3, #1
 80047b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 808b 	beq.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047d8:	4b3a      	ldr	r3, [pc, #232]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	4a39      	ldr	r2, [pc, #228]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6413      	str	r3, [r2, #64]	; 0x40
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f0:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a34      	ldr	r2, [pc, #208]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fd f9ac 	bl	8001b58 <HAL_GetTick>
 8004800:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004804:	f7fd f9a8 	bl	8001b58 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	; 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e357      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004822:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d035      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	429a      	cmp	r2, r3
 800483e:	d02e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004848:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004856:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a1a      	ldr	r2, [pc, #104]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004868:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d114      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fd f970 	bl	8001b58 <HAL_GetTick>
 8004878:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487a:	e00a      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800487c:	f7fd f96c 	bl	8001b58 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	f241 3288 	movw	r2, #5000	; 0x1388
 800488a:	4293      	cmp	r3, r2
 800488c:	d901      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e319      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ee      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048aa:	d111      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	4901      	ldr	r1, [pc, #4]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
 80048c2:	e00b      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000
 80048cc:	0ffffcff 	.word	0x0ffffcff
 80048d0:	4bb1      	ldr	r3, [pc, #708]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4ab0      	ldr	r2, [pc, #704]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048da:	6093      	str	r3, [r2, #8]
 80048dc:	4bae      	ldr	r3, [pc, #696]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e8:	49ab      	ldr	r1, [pc, #684]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d010      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048fa:	4ba7      	ldr	r3, [pc, #668]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80048fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004900:	4aa5      	ldr	r2, [pc, #660]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800490a:	4ba3      	ldr	r3, [pc, #652]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800490c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	49a0      	ldr	r1, [pc, #640]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004928:	4b9b      	ldr	r3, [pc, #620]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004936:	4998      	ldr	r1, [pc, #608]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800494a:	4b93      	ldr	r3, [pc, #588]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004958:	498f      	ldr	r1, [pc, #572]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800496c:	4b8a      	ldr	r3, [pc, #552]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497a:	4987      	ldr	r1, [pc, #540]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800498e:	4b82      	ldr	r3, [pc, #520]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	497e      	ldr	r1, [pc, #504]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b0:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f023 0203 	bic.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	4976      	ldr	r1, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d2:	4b71      	ldr	r3, [pc, #452]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f023 020c 	bic.w	r2, r3, #12
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	496d      	ldr	r1, [pc, #436]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049f4:	4b68      	ldr	r3, [pc, #416]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	4965      	ldr	r1, [pc, #404]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a16:	4b60      	ldr	r3, [pc, #384]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	495c      	ldr	r1, [pc, #368]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a38:	4b57      	ldr	r3, [pc, #348]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	4954      	ldr	r1, [pc, #336]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a68:	494b      	ldr	r1, [pc, #300]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a7c:	4b46      	ldr	r3, [pc, #280]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	4943      	ldr	r1, [pc, #268]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a9e:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aac:	493a      	ldr	r1, [pc, #232]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ac0:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ace:	4932      	ldr	r1, [pc, #200]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d011      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af0:	4929      	ldr	r1, [pc, #164]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b00:	d101      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b22:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b30:	4919      	ldr	r1, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00b      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b54:	4910      	ldr	r1, [pc, #64]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d006      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80d9 	beq.w	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004b76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fc ffec 	bl	8001b58 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b82:	e00b      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b84:	f7fc ffe8 	bl	8001b58 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d904      	bls.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e197      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b9c:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ed      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d021      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d11d      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bbc:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc2:	0c1b      	lsrs	r3, r3, #16
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bca:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd0:	0e1b      	lsrs	r3, r3, #24
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	019a      	lsls	r2, r3, #6
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	061b      	lsls	r3, r3, #24
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	071b      	lsls	r3, r3, #28
 8004bf0:	4957      	ldr	r1, [pc, #348]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02e      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c22:	d129      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c24:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c38:	0f1b      	lsrs	r3, r3, #28
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	019a      	lsls	r2, r3, #6
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	041b      	lsls	r3, r3, #16
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	061b      	lsls	r3, r3, #24
 8004c52:	431a      	orrs	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	071b      	lsls	r3, r3, #28
 8004c58:	493d      	ldr	r1, [pc, #244]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c60:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c66:	f023 021f 	bic.w	r2, r3, #31
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	4937      	ldr	r1, [pc, #220]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	0e1b      	lsrs	r3, r3, #24
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c92:	4b2f      	ldr	r3, [pc, #188]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	0f1b      	lsrs	r3, r3, #28
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	019a      	lsls	r2, r3, #6
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	071b      	lsls	r3, r3, #28
 8004cb8:	4925      	ldr	r1, [pc, #148]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d011      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	019a      	lsls	r2, r3, #6
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	071b      	lsls	r3, r3, #28
 8004ce8:	4919      	ldr	r1, [pc, #100]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf0:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cfc:	f7fc ff2c 	bl	8001b58 <HAL_GetTick>
 8004d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d04:	f7fc ff28 	bl	8001b58 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0d7      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d16:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 80cd 	bne.w	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fc ff0f 	bl	8001b58 <HAL_GetTick>
 8004d3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d3e:	f7fc ff0b 	bl	8001b58 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b64      	cmp	r3, #100	; 0x64
 8004d4a:	d903      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0ba      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d50:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d54:	4b5e      	ldr	r3, [pc, #376]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d60:	d0ed      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02e      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d12a      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d98:	4b4d      	ldr	r3, [pc, #308]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9e:	0f1b      	lsrs	r3, r3, #28
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	019a      	lsls	r2, r3, #6
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	061b      	lsls	r3, r3, #24
 8004db8:	431a      	orrs	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	4944      	ldr	r1, [pc, #272]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dc6:	4b42      	ldr	r3, [pc, #264]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	493d      	ldr	r1, [pc, #244]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004df4:	d11d      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004df6:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfc:	0e1b      	lsrs	r3, r3, #24
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e04:	4b32      	ldr	r3, [pc, #200]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	0f1b      	lsrs	r3, r3, #28
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	019a      	lsls	r2, r3, #6
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	431a      	orrs	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	4929      	ldr	r1, [pc, #164]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	0e1b      	lsrs	r3, r3, #24
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e52:	0c1b      	lsrs	r3, r3, #16
 8004e54:	f003 0303 	and.w	r3, r3, #3
 8004e58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	019a      	lsls	r2, r3, #6
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	431a      	orrs	r2, r3
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	4917      	ldr	r1, [pc, #92]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	4911      	ldr	r1, [pc, #68]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e90:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0e      	ldr	r2, [pc, #56]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fc fe5c 	bl	8001b58 <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ea4:	f7fc fe58 	bl	8001b58 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e007      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec2:	d1ef      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e049      	b.n	8004f7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fc fc6e 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 fb2c 	bl	8005570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d001      	beq.n	8004f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e04c      	b.n	8005036 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	; (8005044 <HAL_TIM_Base_Start+0xc0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d022      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a22      	ldr	r2, [pc, #136]	; (8005048 <HAL_TIM_Base_Start+0xc4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a21      	ldr	r2, [pc, #132]	; (800504c <HAL_TIM_Base_Start+0xc8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_TIM_Base_Start+0xcc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <HAL_TIM_Base_Start+0xd0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <HAL_TIM_Base_Start+0xd4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start+0x70>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <HAL_TIM_Base_Start+0xd8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d115      	bne.n	8005020 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_TIM_Base_Start+0xdc>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d015      	beq.n	8005032 <HAL_TIM_Base_Start+0xae>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d011      	beq.n	8005032 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501e:	e008      	b.n	8005032 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e000      	b.n	8005034 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40010400 	.word	0x40010400
 8005058:	40014000 	.word	0x40014000
 800505c:	40001800 	.word	0x40001800
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e054      	b.n	8005126 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a26      	ldr	r2, [pc, #152]	; (8005134 <HAL_TIM_Base_Start_IT+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a6:	d01d      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a22      	ldr	r2, [pc, #136]	; (8005138 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	; (800513c <HAL_TIM_Base_Start_IT+0xd8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <HAL_TIM_Base_Start_IT+0xdc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a1e      	ldr	r2, [pc, #120]	; (8005144 <HAL_TIM_Base_Start_IT+0xe0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <HAL_TIM_Base_Start_IT+0xe4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x80>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1b      	ldr	r2, [pc, #108]	; (800514c <HAL_TIM_Base_Start_IT+0xe8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d115      	bne.n	8005110 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_TIM_Base_Start_IT+0xec>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d015      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d011      	beq.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	e008      	b.n	8005122 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e000      	b.n	8005124 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40001800 	.word	0x40001800
 8005150:	00010007 	.word	0x00010007

08005154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d122      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d11b      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0202 	mvn.w	r2, #2
 8005180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9cc 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f9be 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9cf 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0204 	mvn.w	r2, #4
 80051d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9a2 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f994 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9a5 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b08      	cmp	r3, #8
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0208 	mvn.w	r2, #8
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2204      	movs	r2, #4
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f978 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f96a 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f97b 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b10      	cmp	r3, #16
 8005264:	d122      	bne.n	80052ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d11b      	bne.n	80052ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0210 	mvn.w	r2, #16
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2208      	movs	r2, #8
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f94e 	bl	8005534 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f940 	bl	8005520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f951 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0201 	mvn.w	r2, #1
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc f966 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b80      	cmp	r3, #128	; 0x80
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fb08 	bl	8005914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005312:	d10e      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d107      	bne.n	8005332 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800532a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fafb 	bl	8005928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d10e      	bne.n	800535e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d107      	bne.n	800535e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8ff 	bl	800555c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b20      	cmp	r3, #32
 800536a:	d10e      	bne.n	800538a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b20      	cmp	r3, #32
 8005378:	d107      	bne.n	800538a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f06f 0220 	mvn.w	r2, #32
 8005382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fabb 	bl	8005900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0b3      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x180>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4b55      	ldr	r3, [pc, #340]	; (800551c <HAL_TIM_ConfigClockSource+0x188>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d03e      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xd0>
 80053e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ea:	f200 8087 	bhi.w	80054fc <HAL_TIM_ConfigClockSource+0x168>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	f000 8085 	beq.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d87f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 80053fc:	2b70      	cmp	r3, #112	; 0x70
 80053fe:	d01a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0xa2>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d87b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d050      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x116>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d877      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800540c:	2b50      	cmp	r3, #80	; 0x50
 800540e:	d03c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xf6>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d873      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d058      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0x136>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d86f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800541c:	2b30      	cmp	r3, #48	; 0x30
 800541e:	d064      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d86b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d060      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d867      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d05a      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005434:	e062      	b.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f000 f9ad 	bl	80057a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	609a      	str	r2, [r3, #8]
      break;
 8005462:	e04e      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f000 f996 	bl	80057a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005486:	609a      	str	r2, [r3, #8]
      break;
 8005488:	e03b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 f90a 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2150      	movs	r1, #80	; 0x50
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f963 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 80054a8:	e02b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f000 f929 	bl	800570e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2160      	movs	r1, #96	; 0x60
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f953 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 80054c8:	e01b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f000 f8ea 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2140      	movs	r1, #64	; 0x40
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f943 	bl	800576e <TIM_ITRx_SetConfig>
      break;
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 f93a 	bl	800576e <TIM_ITRx_SetConfig>
        break;
 80054fa:	e002      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	fffeff88 	.word	0xfffeff88

08005520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a40      	ldr	r2, [pc, #256]	; (8005684 <TIM_Base_SetConfig+0x114>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558e:	d00f      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a3d      	ldr	r2, [pc, #244]	; (8005688 <TIM_Base_SetConfig+0x118>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a3c      	ldr	r2, [pc, #240]	; (800568c <TIM_Base_SetConfig+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3b      	ldr	r2, [pc, #236]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_Base_SetConfig+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a3a      	ldr	r2, [pc, #232]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2f      	ldr	r2, [pc, #188]	; (8005684 <TIM_Base_SetConfig+0x114>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d02b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d0:	d027      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2c      	ldr	r2, [pc, #176]	; (8005688 <TIM_Base_SetConfig+0x118>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d023      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2b      	ldr	r2, [pc, #172]	; (800568c <TIM_Base_SetConfig+0x11c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01f      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <TIM_Base_SetConfig+0x120>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a29      	ldr	r2, [pc, #164]	; (8005694 <TIM_Base_SetConfig+0x124>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d017      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a28      	ldr	r2, [pc, #160]	; (8005698 <TIM_Base_SetConfig+0x128>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a27      	ldr	r2, [pc, #156]	; (800569c <TIM_Base_SetConfig+0x12c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00f      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <TIM_Base_SetConfig+0x130>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <TIM_Base_SetConfig+0x134>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a24      	ldr	r2, [pc, #144]	; (80056a8 <TIM_Base_SetConfig+0x138>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a23      	ldr	r2, [pc, #140]	; (80056ac <TIM_Base_SetConfig+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d108      	bne.n	8005634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a0a      	ldr	r2, [pc, #40]	; (8005684 <TIM_Base_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_Base_SetConfig+0xf8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a0c      	ldr	r2, [pc, #48]	; (8005694 <TIM_Base_SetConfig+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d103      	bne.n	8005670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691a      	ldr	r2, [r3, #16]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	615a      	str	r2, [r3, #20]
}
 8005676:	bf00      	nop
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800
 80056a4:	40001800 	.word	0x40001800
 80056a8:	40001c00 	.word	0x40001c00
 80056ac:	40002000 	.word	0x40002000

080056b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 030a 	bic.w	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570e:	b480      	push	{r7}
 8005710:	b087      	sub	sp, #28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f023 0210 	bic.w	r2, r3, #16
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	031b      	lsls	r3, r3, #12
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800574a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	f043 0307 	orr.w	r3, r3, #7
 8005790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	021a      	lsls	r2, r3, #8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e06d      	b.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a30      	ldr	r2, [pc, #192]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005848:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a20      	ldr	r2, [pc, #128]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d022      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d01d      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d018      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d013      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1a      	ldr	r2, [pc, #104]	; (80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a15      	ldr	r2, [pc, #84]	; (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d009      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10c      	bne.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40000400 	.word	0x40000400
 80058f0:	40000800 	.word	0x40000800
 80058f4:	40000c00 	.word	0x40000c00
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40001800 	.word	0x40001800

08005900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e040      	b.n	80059d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fb ff90 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2224      	movs	r2, #36	; 0x24
 8005968:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fad2 	bl	8005f24 <UART_SetConfig>
 8005980:	4603      	mov	r3, r0
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e022      	b.n	80059d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fd28 	bl	80063e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fdaf 	bl	800652c <UART_CheckIdleState>
 80059ce:	4603      	mov	r3, r0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d145      	bne.n	8005a7a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit_IT+0x22>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e03e      	b.n	8005a7c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit_IT+0x34>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e037      	b.n	8005a7c <HAL_UART_Transmit_IT+0xa4>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	88fa      	ldrh	r2, [r7, #6]
 8005a1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	88fa      	ldrh	r2, [r7, #6]
 8005a26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2221      	movs	r2, #33	; 0x21
 8005a3c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d107      	bne.n	8005a58 <HAL_UART_Transmit_IT+0x80>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <HAL_UART_Transmit_IT+0xb0>)
 8005a54:	669a      	str	r2, [r3, #104]	; 0x68
 8005a56:	e002      	b.n	8005a5e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <HAL_UART_Transmit_IT+0xb4>)
 8005a5c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a74:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e000      	b.n	8005a7c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8005a7a:	2302      	movs	r3, #2
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	08006899 	.word	0x08006899
 8005a8c:	08006827 	.word	0x08006827

08005a90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa2:	2b20      	cmp	r3, #32
 8005aa4:	d12c      	bne.n	8005b00 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_UART_Receive_IT+0x22>
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e025      	b.n	8005b02 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_UART_Receive_IT+0x34>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e01e      	b.n	8005b02 <HAL_UART_Receive_IT+0x72>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d007      	beq.n	8005af0 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005aee:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	461a      	mov	r2, r3
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fdc8 	bl	800668c <UART_Start_Receive_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	e000      	b.n	8005b02 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d113      	bne.n	8005b64 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 81b9 	beq.w	8005ecc <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
      }
      return;
 8005b62:	e1b3      	b.n	8005ecc <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 80e3 	beq.w	8005d32 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	4ba5      	ldr	r3, [pc, #660]	; (8005e10 <HAL_UART_IRQHandler+0x304>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80d8 	beq.w	8005d32 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d010      	beq.n	8005bae <HAL_UART_IRQHandler+0xa2>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00b      	beq.n	8005bae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_UART_IRQHandler+0xce>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_UART_IRQHandler+0xfa>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bfc:	f043 0202 	orr.w	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d015      	beq.n	8005c3c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c32:	f043 0208 	orr.w	r2, r3, #8
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d011      	beq.n	8005c6a <HAL_UART_IRQHandler+0x15e>
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 812d 	beq.w	8005ed0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	d004      	beq.n	8005cba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d031      	beq.n	8005d1e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fd6e 	bl	800679c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d123      	bne.n	8005d16 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d013      	beq.n	8005d0e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	4a4a      	ldr	r2, [pc, #296]	; (8005e14 <HAL_UART_IRQHandler+0x308>)
 8005cec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fc f8bd 	bl	8001e72 <HAL_DMA_Abort_IT>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d017      	beq.n	8005d2e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	e00f      	b.n	8005d2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8f2 	bl	8005ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	e00b      	b.n	8005d2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f8ee 	bl	8005ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	e007      	b.n	8005d2e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8ea 	bl	8005ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d2c:	e0d0      	b.n	8005ed0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2e:	bf00      	nop
    return;
 8005d30:	e0ce      	b.n	8005ed0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f040 80a7 	bne.w	8005e8a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a1 	beq.w	8005e8a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 809b 	beq.w	8005e8a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2210      	movs	r2, #16
 8005d5a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d156      	bne.n	8005e18 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005d74:	893b      	ldrh	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 80ac 	beq.w	8005ed4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d82:	893a      	ldrh	r2, [r7, #8]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	f080 80a5 	bcs.w	8005ed4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	893a      	ldrh	r2, [r7, #8]
 8005d8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9c:	d02a      	beq.n	8005df4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689a      	ldr	r2, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dcc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0210 	bic.w	r2, r2, #16
 8005de8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fb ffcf 	bl	8001d92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f87f 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e0e:	e061      	b.n	8005ed4 <HAL_UART_IRQHandler+0x3c8>
 8005e10:	04000120 	.word	0x04000120
 8005e14:	080067fb 	.word	0x080067fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d050      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d04d      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0210 	bic.w	r2, r2, #16
 8005e7c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e7e:	897b      	ldrh	r3, [r7, #10]
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f842 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e88:	e026      	b.n	8005ed8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01a      	beq.n	8005edc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
    }
    return;
 8005eae:	e015      	b.n	8005edc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d011      	beq.n	8005ede <HAL_UART_IRQHandler+0x3d2>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fd25 	bl	8006914 <UART_EndTransmit_IT>
    return;
 8005eca:	e008      	b.n	8005ede <HAL_UART_IRQHandler+0x3d2>
      return;
 8005ecc:	bf00      	nop
 8005ece:	e006      	b.n	8005ede <HAL_UART_IRQHandler+0x3d2>
    return;
 8005ed0:	bf00      	nop
 8005ed2:	e004      	b.n	8005ede <HAL_UART_IRQHandler+0x3d2>
      return;
 8005ed4:	bf00      	nop
 8005ed6:	e002      	b.n	8005ede <HAL_UART_IRQHandler+0x3d2>
      return;
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <HAL_UART_IRQHandler+0x3d2>
    return;
 8005edc:	bf00      	nop
  }

}
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4ba7      	ldr	r3, [pc, #668]	; (80061ec <UART_SetConfig+0x2c8>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a95      	ldr	r2, [pc, #596]	; (80061f0 <UART_SetConfig+0x2cc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d120      	bne.n	8005fe2 <UART_SetConfig+0xbe>
 8005fa0:	4b94      	ldr	r3, [pc, #592]	; (80061f4 <UART_SetConfig+0x2d0>)
 8005fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d816      	bhi.n	8005fdc <UART_SetConfig+0xb8>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <UART_SetConfig+0x90>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fcb 	.word	0x08005fcb
 8005fc0:	08005fd7 	.word	0x08005fd7
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e14f      	b.n	800626a <UART_SetConfig+0x346>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e14c      	b.n	800626a <UART_SetConfig+0x346>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e149      	b.n	800626a <UART_SetConfig+0x346>
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	77fb      	strb	r3, [r7, #31]
 8005fda:	e146      	b.n	800626a <UART_SetConfig+0x346>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e143      	b.n	800626a <UART_SetConfig+0x346>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a84      	ldr	r2, [pc, #528]	; (80061f8 <UART_SetConfig+0x2d4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d132      	bne.n	8006052 <UART_SetConfig+0x12e>
 8005fec:	4b81      	ldr	r3, [pc, #516]	; (80061f4 <UART_SetConfig+0x2d0>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff2:	f003 030c 	and.w	r3, r3, #12
 8005ff6:	2b0c      	cmp	r3, #12
 8005ff8:	d828      	bhi.n	800604c <UART_SetConfig+0x128>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0xdc>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006035 	.word	0x08006035
 8006004:	0800604d 	.word	0x0800604d
 8006008:	0800604d 	.word	0x0800604d
 800600c:	0800604d 	.word	0x0800604d
 8006010:	08006041 	.word	0x08006041
 8006014:	0800604d 	.word	0x0800604d
 8006018:	0800604d 	.word	0x0800604d
 800601c:	0800604d 	.word	0x0800604d
 8006020:	0800603b 	.word	0x0800603b
 8006024:	0800604d 	.word	0x0800604d
 8006028:	0800604d 	.word	0x0800604d
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006047 	.word	0x08006047
 8006034:	2300      	movs	r3, #0
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e117      	b.n	800626a <UART_SetConfig+0x346>
 800603a:	2302      	movs	r3, #2
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e114      	b.n	800626a <UART_SetConfig+0x346>
 8006040:	2304      	movs	r3, #4
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e111      	b.n	800626a <UART_SetConfig+0x346>
 8006046:	2308      	movs	r3, #8
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e10e      	b.n	800626a <UART_SetConfig+0x346>
 800604c:	2310      	movs	r3, #16
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e10b      	b.n	800626a <UART_SetConfig+0x346>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a69      	ldr	r2, [pc, #420]	; (80061fc <UART_SetConfig+0x2d8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d120      	bne.n	800609e <UART_SetConfig+0x17a>
 800605c:	4b65      	ldr	r3, [pc, #404]	; (80061f4 <UART_SetConfig+0x2d0>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006062:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006066:	2b30      	cmp	r3, #48	; 0x30
 8006068:	d013      	beq.n	8006092 <UART_SetConfig+0x16e>
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	d814      	bhi.n	8006098 <UART_SetConfig+0x174>
 800606e:	2b20      	cmp	r3, #32
 8006070:	d009      	beq.n	8006086 <UART_SetConfig+0x162>
 8006072:	2b20      	cmp	r3, #32
 8006074:	d810      	bhi.n	8006098 <UART_SetConfig+0x174>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <UART_SetConfig+0x15c>
 800607a:	2b10      	cmp	r3, #16
 800607c:	d006      	beq.n	800608c <UART_SetConfig+0x168>
 800607e:	e00b      	b.n	8006098 <UART_SetConfig+0x174>
 8006080:	2300      	movs	r3, #0
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e0f1      	b.n	800626a <UART_SetConfig+0x346>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e0ee      	b.n	800626a <UART_SetConfig+0x346>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e0eb      	b.n	800626a <UART_SetConfig+0x346>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e0e8      	b.n	800626a <UART_SetConfig+0x346>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e0e5      	b.n	800626a <UART_SetConfig+0x346>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a57      	ldr	r2, [pc, #348]	; (8006200 <UART_SetConfig+0x2dc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d120      	bne.n	80060ea <UART_SetConfig+0x1c6>
 80060a8:	4b52      	ldr	r3, [pc, #328]	; (80061f4 <UART_SetConfig+0x2d0>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060b2:	2bc0      	cmp	r3, #192	; 0xc0
 80060b4:	d013      	beq.n	80060de <UART_SetConfig+0x1ba>
 80060b6:	2bc0      	cmp	r3, #192	; 0xc0
 80060b8:	d814      	bhi.n	80060e4 <UART_SetConfig+0x1c0>
 80060ba:	2b80      	cmp	r3, #128	; 0x80
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x1ae>
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d810      	bhi.n	80060e4 <UART_SetConfig+0x1c0>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <UART_SetConfig+0x1a8>
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d006      	beq.n	80060d8 <UART_SetConfig+0x1b4>
 80060ca:	e00b      	b.n	80060e4 <UART_SetConfig+0x1c0>
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e0cb      	b.n	800626a <UART_SetConfig+0x346>
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e0c8      	b.n	800626a <UART_SetConfig+0x346>
 80060d8:	2304      	movs	r3, #4
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e0c5      	b.n	800626a <UART_SetConfig+0x346>
 80060de:	2308      	movs	r3, #8
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e0c2      	b.n	800626a <UART_SetConfig+0x346>
 80060e4:	2310      	movs	r3, #16
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e0bf      	b.n	800626a <UART_SetConfig+0x346>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a45      	ldr	r2, [pc, #276]	; (8006204 <UART_SetConfig+0x2e0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d125      	bne.n	8006140 <UART_SetConfig+0x21c>
 80060f4:	4b3f      	ldr	r3, [pc, #252]	; (80061f4 <UART_SetConfig+0x2d0>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006102:	d017      	beq.n	8006134 <UART_SetConfig+0x210>
 8006104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006108:	d817      	bhi.n	800613a <UART_SetConfig+0x216>
 800610a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800610e:	d00b      	beq.n	8006128 <UART_SetConfig+0x204>
 8006110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006114:	d811      	bhi.n	800613a <UART_SetConfig+0x216>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <UART_SetConfig+0x1fe>
 800611a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611e:	d006      	beq.n	800612e <UART_SetConfig+0x20a>
 8006120:	e00b      	b.n	800613a <UART_SetConfig+0x216>
 8006122:	2300      	movs	r3, #0
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e0a0      	b.n	800626a <UART_SetConfig+0x346>
 8006128:	2302      	movs	r3, #2
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e09d      	b.n	800626a <UART_SetConfig+0x346>
 800612e:	2304      	movs	r3, #4
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e09a      	b.n	800626a <UART_SetConfig+0x346>
 8006134:	2308      	movs	r3, #8
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e097      	b.n	800626a <UART_SetConfig+0x346>
 800613a:	2310      	movs	r3, #16
 800613c:	77fb      	strb	r3, [r7, #31]
 800613e:	e094      	b.n	800626a <UART_SetConfig+0x346>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	; (8006208 <UART_SetConfig+0x2e4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d125      	bne.n	8006196 <UART_SetConfig+0x272>
 800614a:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <UART_SetConfig+0x2d0>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006154:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006158:	d017      	beq.n	800618a <UART_SetConfig+0x266>
 800615a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800615e:	d817      	bhi.n	8006190 <UART_SetConfig+0x26c>
 8006160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006164:	d00b      	beq.n	800617e <UART_SetConfig+0x25a>
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d811      	bhi.n	8006190 <UART_SetConfig+0x26c>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <UART_SetConfig+0x254>
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d006      	beq.n	8006184 <UART_SetConfig+0x260>
 8006176:	e00b      	b.n	8006190 <UART_SetConfig+0x26c>
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
 800617c:	e075      	b.n	800626a <UART_SetConfig+0x346>
 800617e:	2302      	movs	r3, #2
 8006180:	77fb      	strb	r3, [r7, #31]
 8006182:	e072      	b.n	800626a <UART_SetConfig+0x346>
 8006184:	2304      	movs	r3, #4
 8006186:	77fb      	strb	r3, [r7, #31]
 8006188:	e06f      	b.n	800626a <UART_SetConfig+0x346>
 800618a:	2308      	movs	r3, #8
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	e06c      	b.n	800626a <UART_SetConfig+0x346>
 8006190:	2310      	movs	r3, #16
 8006192:	77fb      	strb	r3, [r7, #31]
 8006194:	e069      	b.n	800626a <UART_SetConfig+0x346>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <UART_SetConfig+0x2e8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d137      	bne.n	8006210 <UART_SetConfig+0x2ec>
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <UART_SetConfig+0x2d0>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80061aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061ae:	d017      	beq.n	80061e0 <UART_SetConfig+0x2bc>
 80061b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061b4:	d817      	bhi.n	80061e6 <UART_SetConfig+0x2c2>
 80061b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ba:	d00b      	beq.n	80061d4 <UART_SetConfig+0x2b0>
 80061bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c0:	d811      	bhi.n	80061e6 <UART_SetConfig+0x2c2>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <UART_SetConfig+0x2aa>
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ca:	d006      	beq.n	80061da <UART_SetConfig+0x2b6>
 80061cc:	e00b      	b.n	80061e6 <UART_SetConfig+0x2c2>
 80061ce:	2300      	movs	r3, #0
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e04a      	b.n	800626a <UART_SetConfig+0x346>
 80061d4:	2302      	movs	r3, #2
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e047      	b.n	800626a <UART_SetConfig+0x346>
 80061da:	2304      	movs	r3, #4
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e044      	b.n	800626a <UART_SetConfig+0x346>
 80061e0:	2308      	movs	r3, #8
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e041      	b.n	800626a <UART_SetConfig+0x346>
 80061e6:	2310      	movs	r3, #16
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e03e      	b.n	800626a <UART_SetConfig+0x346>
 80061ec:	efff69f3 	.word	0xefff69f3
 80061f0:	40011000 	.word	0x40011000
 80061f4:	40023800 	.word	0x40023800
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40004800 	.word	0x40004800
 8006200:	40004c00 	.word	0x40004c00
 8006204:	40005000 	.word	0x40005000
 8006208:	40011400 	.word	0x40011400
 800620c:	40007800 	.word	0x40007800
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a71      	ldr	r2, [pc, #452]	; (80063dc <UART_SetConfig+0x4b8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d125      	bne.n	8006266 <UART_SetConfig+0x342>
 800621a:	4b71      	ldr	r3, [pc, #452]	; (80063e0 <UART_SetConfig+0x4bc>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006224:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006228:	d017      	beq.n	800625a <UART_SetConfig+0x336>
 800622a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800622e:	d817      	bhi.n	8006260 <UART_SetConfig+0x33c>
 8006230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006234:	d00b      	beq.n	800624e <UART_SetConfig+0x32a>
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623a:	d811      	bhi.n	8006260 <UART_SetConfig+0x33c>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <UART_SetConfig+0x324>
 8006240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006244:	d006      	beq.n	8006254 <UART_SetConfig+0x330>
 8006246:	e00b      	b.n	8006260 <UART_SetConfig+0x33c>
 8006248:	2300      	movs	r3, #0
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e00d      	b.n	800626a <UART_SetConfig+0x346>
 800624e:	2302      	movs	r3, #2
 8006250:	77fb      	strb	r3, [r7, #31]
 8006252:	e00a      	b.n	800626a <UART_SetConfig+0x346>
 8006254:	2304      	movs	r3, #4
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e007      	b.n	800626a <UART_SetConfig+0x346>
 800625a:	2308      	movs	r3, #8
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e004      	b.n	800626a <UART_SetConfig+0x346>
 8006260:	2310      	movs	r3, #16
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e001      	b.n	800626a <UART_SetConfig+0x346>
 8006266:	2310      	movs	r3, #16
 8006268:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006272:	d15b      	bne.n	800632c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006274:	7ffb      	ldrb	r3, [r7, #31]
 8006276:	2b08      	cmp	r3, #8
 8006278:	d827      	bhi.n	80062ca <UART_SetConfig+0x3a6>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <UART_SetConfig+0x35c>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062a5 	.word	0x080062a5
 8006284:	080062ad 	.word	0x080062ad
 8006288:	080062b5 	.word	0x080062b5
 800628c:	080062cb 	.word	0x080062cb
 8006290:	080062bb 	.word	0x080062bb
 8006294:	080062cb 	.word	0x080062cb
 8006298:	080062cb 	.word	0x080062cb
 800629c:	080062cb 	.word	0x080062cb
 80062a0:	080062c3 	.word	0x080062c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7fe f9fe 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 80062a8:	61b8      	str	r0, [r7, #24]
        break;
 80062aa:	e013      	b.n	80062d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062ac:	f7fe fa0e 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 80062b0:	61b8      	str	r0, [r7, #24]
        break;
 80062b2:	e00f      	b.n	80062d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b4:	4b4b      	ldr	r3, [pc, #300]	; (80063e4 <UART_SetConfig+0x4c0>)
 80062b6:	61bb      	str	r3, [r7, #24]
        break;
 80062b8:	e00c      	b.n	80062d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ba:	f7fe f905 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 80062be:	61b8      	str	r0, [r7, #24]
        break;
 80062c0:	e008      	b.n	80062d4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c6:	61bb      	str	r3, [r7, #24]
        break;
 80062c8:	e004      	b.n	80062d4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	77bb      	strb	r3, [r7, #30]
        break;
 80062d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d074      	beq.n	80063c4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	005a      	lsls	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d916      	bls.n	8006326 <UART_SetConfig+0x402>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d212      	bcs.n	8006326 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f023 030f 	bic.w	r3, r3, #15
 8006308:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	085b      	lsrs	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	b29a      	uxth	r2, r3
 8006316:	89fb      	ldrh	r3, [r7, #14]
 8006318:	4313      	orrs	r3, r2
 800631a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	89fa      	ldrh	r2, [r7, #14]
 8006322:	60da      	str	r2, [r3, #12]
 8006324:	e04e      	b.n	80063c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	77bb      	strb	r3, [r7, #30]
 800632a:	e04b      	b.n	80063c4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800632c:	7ffb      	ldrb	r3, [r7, #31]
 800632e:	2b08      	cmp	r3, #8
 8006330:	d827      	bhi.n	8006382 <UART_SetConfig+0x45e>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <UART_SetConfig+0x414>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006365 	.word	0x08006365
 8006340:	0800636d 	.word	0x0800636d
 8006344:	08006383 	.word	0x08006383
 8006348:	08006373 	.word	0x08006373
 800634c:	08006383 	.word	0x08006383
 8006350:	08006383 	.word	0x08006383
 8006354:	08006383 	.word	0x08006383
 8006358:	0800637b 	.word	0x0800637b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635c:	f7fe f9a2 	bl	80046a4 <HAL_RCC_GetPCLK1Freq>
 8006360:	61b8      	str	r0, [r7, #24]
        break;
 8006362:	e013      	b.n	800638c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006364:	f7fe f9b2 	bl	80046cc <HAL_RCC_GetPCLK2Freq>
 8006368:	61b8      	str	r0, [r7, #24]
        break;
 800636a:	e00f      	b.n	800638c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800636c:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <UART_SetConfig+0x4c0>)
 800636e:	61bb      	str	r3, [r7, #24]
        break;
 8006370:	e00c      	b.n	800638c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006372:	f7fe f8a9 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8006376:	61b8      	str	r0, [r7, #24]
        break;
 8006378:	e008      	b.n	800638c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800637e:	61bb      	str	r3, [r7, #24]
        break;
 8006380:	e004      	b.n	800638c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	77bb      	strb	r3, [r7, #30]
        break;
 800638a:	bf00      	nop
    }

    if (pclk != 0U)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d018      	beq.n	80063c4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	085a      	lsrs	r2, r3, #1
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	441a      	add	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b0f      	cmp	r3, #15
 80063ac:	d908      	bls.n	80063c0 <UART_SetConfig+0x49c>
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063b4:	d204      	bcs.n	80063c0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	60da      	str	r2, [r3, #12]
 80063be:	e001      	b.n	80063c4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80063d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3720      	adds	r7, #32
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40007c00 	.word	0x40007c00
 80063e0:	40023800 	.word	0x40023800
 80063e4:	00f42400 	.word	0x00f42400

080063e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01a      	beq.n	80064fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064e6:	d10a      	bne.n	80064fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800653c:	f7fb fb0c 	bl	8001b58 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b08      	cmp	r3, #8
 800654e:	d10e      	bne.n	800656e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f817 	bl	8006592 <UART_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e00d      	b.n	800658a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a2:	e05e      	b.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d05a      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ac:	f7fb fad4 	bl	8001b58 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d302      	bcc.n	80065c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11b      	bne.n	80065fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80065d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 0201 	bic.w	r2, r2, #1
 80065e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e043      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02c      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006616:	d124      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006620:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006630:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e00f      	b.n	8006682 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4013      	ands	r3, r2
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	bf0c      	ite	eq
 8006672:	2301      	moveq	r3, #1
 8006674:	2300      	movne	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	461a      	mov	r2, r3
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	429a      	cmp	r2, r3
 800667e:	d091      	beq.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	88fa      	ldrh	r2, [r7, #6]
 80066a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d10e      	bne.n	80066de <UART_Start_Receive_IT+0x52>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d105      	bne.n	80066d4 <UART_Start_Receive_IT+0x48>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066d2:	e02d      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066dc:	e028      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <UART_Start_Receive_IT+0x76>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <UART_Start_Receive_IT+0x6c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f6:	e01b      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	227f      	movs	r2, #127	; 0x7f
 80066fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006700:	e016      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670a:	d10d      	bne.n	8006728 <UART_Start_Receive_IT+0x9c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <UART_Start_Receive_IT+0x92>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	227f      	movs	r2, #127	; 0x7f
 8006718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800671c:	e008      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	223f      	movs	r2, #63	; 0x3f
 8006722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006726:	e003      	b.n	8006730 <UART_Start_Receive_IT+0xa4>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2222      	movs	r2, #34	; 0x22
 800673c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689a      	ldr	r2, [r3, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	d107      	bne.n	8006768 <UART_Start_Receive_IT+0xdc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <UART_Start_Receive_IT+0x108>)
 8006764:	665a      	str	r2, [r3, #100]	; 0x64
 8006766:	e002      	b.n	800676e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <UART_Start_Receive_IT+0x10c>)
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006784:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	08006a1b 	.word	0x08006a1b
 8006798:	08006947 	.word	0x08006947

0800679c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067b2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f022 0201 	bic.w	r2, r2, #1
 80067c2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d107      	bne.n	80067dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0210 	bic.w	r2, r2, #16
 80067da:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f7ff fb6d 	bl	8005ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800681e:	bf00      	nop
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006832:	2b21      	cmp	r3, #33	; 0x21
 8006834:	d12a      	bne.n	800688c <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d110      	bne.n	8006864 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006850:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006860:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006862:	e013      	b.n	800688c <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a4:	2b21      	cmp	r3, #33	; 0x21
 80068a6:	d12f      	bne.n	8006908 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d110      	bne.n	80068d6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80068d4:	e018      	b.n	8006908 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	1c9a      	adds	r2, r3, #2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2220      	movs	r2, #32
 8006930:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fad3 	bl	8005ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006954:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800695a:	2b22      	cmp	r3, #34	; 0x22
 800695c:	d151      	bne.n	8006a02 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006966:	89bb      	ldrh	r3, [r7, #12]
 8006968:	b2d9      	uxtb	r1, r3
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	400a      	ands	r2, r1
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d138      	bne.n	8006a12 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10f      	bne.n	80069f4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0210 	bic.w	r2, r2, #16
 80069e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80069ea:	4619      	mov	r1, r3
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff fa8d 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
 80069f2:	e002      	b.n	80069fa <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7fa fe51 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a00:	e007      	b.n	8006a12 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0208 	orr.w	r2, r2, #8
 8006a10:	619a      	str	r2, [r3, #24]
}
 8006a12:	bf00      	nop
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a28:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a2e:	2b22      	cmp	r3, #34	; 0x22
 8006a30:	d151      	bne.n	8006ad6 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006a40:	89ba      	ldrh	r2, [r7, #12]
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	4013      	ands	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a50:	1c9a      	adds	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d138      	bne.n	8006ae6 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a82:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0201 	bic.w	r2, r2, #1
 8006a92:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10f      	bne.n	8006ac8 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0210 	bic.w	r2, r2, #16
 8006ab6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff fa23 	bl	8005f0c <HAL_UARTEx_RxEventCallback>
 8006ac6:	e002      	b.n	8006ace <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fa fde7 	bl	800169c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ad4:	e007      	b.n	8006ae6 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0208 	orr.w	r2, r2, #8
 8006ae4:	619a      	str	r2, [r3, #24]
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <__libc_init_array>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	4d0d      	ldr	r5, [pc, #52]	; (8006b28 <__libc_init_array+0x38>)
 8006af4:	4c0d      	ldr	r4, [pc, #52]	; (8006b2c <__libc_init_array+0x3c>)
 8006af6:	1b64      	subs	r4, r4, r5
 8006af8:	10a4      	asrs	r4, r4, #2
 8006afa:	2600      	movs	r6, #0
 8006afc:	42a6      	cmp	r6, r4
 8006afe:	d109      	bne.n	8006b14 <__libc_init_array+0x24>
 8006b00:	4d0b      	ldr	r5, [pc, #44]	; (8006b30 <__libc_init_array+0x40>)
 8006b02:	4c0c      	ldr	r4, [pc, #48]	; (8006b34 <__libc_init_array+0x44>)
 8006b04:	f000 f820 	bl	8006b48 <_init>
 8006b08:	1b64      	subs	r4, r4, r5
 8006b0a:	10a4      	asrs	r4, r4, #2
 8006b0c:	2600      	movs	r6, #0
 8006b0e:	42a6      	cmp	r6, r4
 8006b10:	d105      	bne.n	8006b1e <__libc_init_array+0x2e>
 8006b12:	bd70      	pop	{r4, r5, r6, pc}
 8006b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b18:	4798      	blx	r3
 8006b1a:	3601      	adds	r6, #1
 8006b1c:	e7ee      	b.n	8006afc <__libc_init_array+0xc>
 8006b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b22:	4798      	blx	r3
 8006b24:	3601      	adds	r6, #1
 8006b26:	e7f2      	b.n	8006b0e <__libc_init_array+0x1e>
 8006b28:	08006b88 	.word	0x08006b88
 8006b2c:	08006b88 	.word	0x08006b88
 8006b30:	08006b88 	.word	0x08006b88
 8006b34:	08006b8c 	.word	0x08006b8c

08006b38 <memset>:
 8006b38:	4402      	add	r2, r0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d100      	bne.n	8006b42 <memset+0xa>
 8006b40:	4770      	bx	lr
 8006b42:	f803 1b01 	strb.w	r1, [r3], #1
 8006b46:	e7f9      	b.n	8006b3c <memset+0x4>

08006b48 <_init>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	bf00      	nop
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr

08006b54 <_fini>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr
