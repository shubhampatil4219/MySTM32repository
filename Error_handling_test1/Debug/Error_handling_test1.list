
Error_handling_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000980c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a64  08009a64  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a6c  08009a6c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000074  08009ae8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08009ae8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dedc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003928  00000000  00000000  0003df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000418a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  00042bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b5a  00000000  00000000  00043d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adb3  00000000  00000000  0004989a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3941  00000000  00000000  0006464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157f8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c8  00000000  00000000  00157fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000074 	.word	0x20000074
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080099bc 	.word	0x080099bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000078 	.word	0x20000078
 8000204:	080099bc 	.word	0x080099bc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <update_voltage_during_maintenance_bat1>:

uint8_t transmit_asoc[14];


void update_voltage_during_maintenance_bat1()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0


	if(bat1_geninfo_voltage_flag==true)
 8000506:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <update_voltage_during_maintenance_bat1+0xc8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d057      	beq.n	80005be <update_voltage_during_maintenance_bat1+0xbe>
	{
		bat1_geninfo_voltage_flag = false;
 800050e:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <update_voltage_during_maintenance_bat1+0xc8>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]

		uint8_t rx_geninfo_voltage[2]={0x00};
 8000514:	2300      	movs	r3, #0
 8000516:	80bb      	strh	r3, [r7, #4]
		uint8_t tx_voltage[1]={0x09};                       // Voltage
 8000518:	2309      	movs	r3, #9
 800051a:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage, 1);
 800051c:	463a      	mov	r2, r7
 800051e:	2301      	movs	r3, #1
 8000520:	2116      	movs	r1, #22
 8000522:	482a      	ldr	r0, [pc, #168]	; (80005cc <update_voltage_during_maintenance_bat1+0xcc>)
 8000524:	f004 f96c 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000528:	2005      	movs	r0, #5
 800052a:	f003 fd3d 	bl	8003fa8 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_voltage, 2);
 800052e:	1d3a      	adds	r2, r7, #4
 8000530:	2302      	movs	r3, #2
 8000532:	2116      	movs	r1, #22
 8000534:	4825      	ldr	r0, [pc, #148]	; (80005cc <update_voltage_during_maintenance_bat1+0xcc>)
 8000536:	f004 f9d3 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f003 fd34 	bl	8003fa8 <HAL_Delay>
		uint16_t Bat1_Volt_Maint_GI = rx_geninfo_voltage[1];
 8000540:	797b      	ldrb	r3, [r7, #5]
 8000542:	80fb      	strh	r3, [r7, #6]
		Bat1_Volt_Maint_GI = Bat1_Volt_Maint_GI << 8;
 8000544:	88fb      	ldrh	r3, [r7, #6]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	80fb      	strh	r3, [r7, #6]
		Bat1_Volt_Maint_GI = Bat1_Volt_Maint_GI + rx_geninfo_voltage[0];
 800054a:	793b      	ldrb	r3, [r7, #4]
 800054c:	b29a      	uxth	r2, r3
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	4413      	add	r3, r2
 8000552:	80fb      	strh	r3, [r7, #6]

////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
//

	//	uint8_t transmit_voltage[14];
		transmit_info_to_be_updated[0]='s';
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000556:	2273      	movs	r2, #115	; 0x73
 8000558:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated[1]='1';
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 800055c:	2231      	movs	r2, #49	; 0x31
 800055e:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated[2]='M';
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000562:	224d      	movs	r2, #77	; 0x4d
 8000564:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated[3]='U';
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000568:	2255      	movs	r2, #85	; 0x55
 800056a:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated[4]='P';
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 800056e:	2250      	movs	r2, #80	; 0x50
 8000570:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated[5]='V';
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000574:	2256      	movs	r2, #86	; 0x56
 8000576:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated[6]='T';
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 800057a:	2254      	movs	r2, #84	; 0x54
 800057c:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated[7]='S';
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000580:	2253      	movs	r2, #83	; 0x53
 8000582:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated[8]=rx_geninfo_voltage[1];
 8000584:	797a      	ldrb	r2, [r7, #5]
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000588:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated[9]=rx_geninfo_voltage[0];
 800058a:	793a      	ldrb	r2, [r7, #4]
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 800058e:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated[10]='V';
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000592:	2256      	movs	r2, #86	; 0x56
 8000594:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated[11]='T';
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 8000598:	2254      	movs	r2, #84	; 0x54
 800059a:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated[12]='U';
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 800059e:	2255      	movs	r2, #85	; 0x55
 80005a0:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated[13]='P';
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 80005a4:	2250      	movs	r2, #80	; 0x50
 80005a6:	735a      	strb	r2, [r3, #13]
		transmit_info_to_be_updated[14]='E';
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 80005aa:	2245      	movs	r2, #69	; 0x45
 80005ac:	739a      	strb	r2, [r3, #14]
		transmit_info_to_be_updated[15]='e';
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 80005b0:	2265      	movs	r2, #101	; 0x65
 80005b2:	73da      	strb	r2, [r3, #15]




HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 80005b4:	2210      	movs	r2, #16
 80005b6:	4906      	ldr	r1, [pc, #24]	; (80005d0 <update_voltage_during_maintenance_bat1+0xd0>)
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <update_voltage_during_maintenance_bat1+0xd4>)
 80005ba:	f007 fc7b 	bl	8007eb4 <HAL_UART_Transmit_IT>

	}



}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000b5 	.word	0x200000b5
 80005cc:	200001e4 	.word	0x200001e4
 80005d0:	20000104 	.word	0x20000104
 80005d4:	20000330 	.word	0x20000330

080005d8 <update_asoc_during_maintenance_bat1>:

void update_asoc_during_maintenance_bat1()
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

if(bat1_geninfo_asoc_flag==true)
 80005de:	4b2b      	ldr	r3, [pc, #172]	; (800068c <update_asoc_during_maintenance_bat1+0xb4>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d04d      	beq.n	8000682 <update_asoc_during_maintenance_bat1+0xaa>
{

	bat1_geninfo_asoc_flag = false;
 80005e6:	4b29      	ldr	r3, [pc, #164]	; (800068c <update_asoc_during_maintenance_bat1+0xb4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]

	uint8_t rx_geninfo_asoc[1]={0x00};
 80005ec:	2300      	movs	r3, #0
 80005ee:	713b      	strb	r3, [r7, #4]
	uint8_t tx_geninfo_asoc[1]={0x0E};          // asoc
 80005f0:	230e      	movs	r3, #14
 80005f2:	703b      	strb	r3, [r7, #0]

	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_geninfo_asoc, 1);
 80005f4:	463a      	mov	r2, r7
 80005f6:	2301      	movs	r3, #1
 80005f8:	2116      	movs	r1, #22
 80005fa:	4825      	ldr	r0, [pc, #148]	; (8000690 <update_asoc_during_maintenance_bat1+0xb8>)
 80005fc:	f004 f900 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 8000600:	2005      	movs	r0, #5
 8000602:	f003 fcd1 	bl	8003fa8 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_asoc, 1);
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	2301      	movs	r3, #1
 800060a:	2116      	movs	r1, #22
 800060c:	4820      	ldr	r0, [pc, #128]	; (8000690 <update_asoc_during_maintenance_bat1+0xb8>)
 800060e:	f004 f967 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 8000612:	2005      	movs	r0, #5
 8000614:	f003 fcc8 	bl	8003fa8 <HAL_Delay>

//	uint8_t transmit_asoc[14]={'1','M','U','P','A','S','S',rx_geninfo_asoc[0] ,'A','S','E','U','P','E'};

	transmit_info_to_be_updated[0]='s';
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800061a:	2273      	movs	r2, #115	; 0x73
 800061c:	701a      	strb	r2, [r3, #0]
	transmit_info_to_be_updated[1]='1';
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000620:	2231      	movs	r2, #49	; 0x31
 8000622:	705a      	strb	r2, [r3, #1]
	transmit_info_to_be_updated[2]='M';
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000626:	224d      	movs	r2, #77	; 0x4d
 8000628:	709a      	strb	r2, [r3, #2]
	transmit_info_to_be_updated[3]='U';
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800062c:	2255      	movs	r2, #85	; 0x55
 800062e:	70da      	strb	r2, [r3, #3]
	transmit_info_to_be_updated[4]='P';
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000632:	2250      	movs	r2, #80	; 0x50
 8000634:	711a      	strb	r2, [r3, #4]
	transmit_info_to_be_updated[5]='A';
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000638:	2241      	movs	r2, #65	; 0x41
 800063a:	715a      	strb	r2, [r3, #5]
	transmit_info_to_be_updated[6]='S';
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800063e:	2253      	movs	r2, #83	; 0x53
 8000640:	719a      	strb	r2, [r3, #6]
	transmit_info_to_be_updated[7]='S';
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000644:	2253      	movs	r2, #83	; 0x53
 8000646:	71da      	strb	r2, [r3, #7]
	transmit_info_to_be_updated[8]=rx_geninfo_asoc[0];
 8000648:	793a      	ldrb	r2, [r7, #4]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800064c:	721a      	strb	r2, [r3, #8]
	transmit_info_to_be_updated[9]='A';
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000650:	2241      	movs	r2, #65	; 0x41
 8000652:	725a      	strb	r2, [r3, #9]
	transmit_info_to_be_updated[10]='S';
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000656:	2253      	movs	r2, #83	; 0x53
 8000658:	729a      	strb	r2, [r3, #10]
	transmit_info_to_be_updated[11]='E';
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800065c:	2245      	movs	r2, #69	; 0x45
 800065e:	72da      	strb	r2, [r3, #11]
	transmit_info_to_be_updated[12]='U';
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000662:	2255      	movs	r2, #85	; 0x55
 8000664:	731a      	strb	r2, [r3, #12]
	transmit_info_to_be_updated[13]='P';
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000668:	2250      	movs	r2, #80	; 0x50
 800066a:	735a      	strb	r2, [r3, #13]
	transmit_info_to_be_updated[14]='E';
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800066e:	2245      	movs	r2, #69	; 0x45
 8000670:	739a      	strb	r2, [r3, #14]
	transmit_info_to_be_updated[15]='e';
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 8000674:	2265      	movs	r2, #101	; 0x65
 8000676:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 8000678:	2210      	movs	r2, #16
 800067a:	4906      	ldr	r1, [pc, #24]	; (8000694 <update_asoc_during_maintenance_bat1+0xbc>)
 800067c:	4806      	ldr	r0, [pc, #24]	; (8000698 <update_asoc_during_maintenance_bat1+0xc0>)
 800067e:	f007 fc19 	bl	8007eb4 <HAL_UART_Transmit_IT>


}


}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000b3 	.word	0x200000b3
 8000690:	200001e4 	.word	0x200001e4
 8000694:	20000104 	.word	0x20000104
 8000698:	20000330 	.word	0x20000330

0800069c <update_RemCap_during_maintenance_bat1>:

void update_RemCap_during_maintenance_bat1()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

	if(bat1_geninfo_remainingcapacity_flag==true)
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <update_RemCap_during_maintenance_bat1+0xb4>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d04d      	beq.n	8000746 <update_RemCap_during_maintenance_bat1+0xaa>
	{
		bat1_geninfo_remainingcapacity_flag = false;
 80006aa:	4b29      	ldr	r3, [pc, #164]	; (8000750 <update_RemCap_during_maintenance_bat1+0xb4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

		uint8_t rx_geninfo_remcap[2]={0x00};
 80006b0:	2300      	movs	r3, #0
 80006b2:	80bb      	strh	r3, [r7, #4]
		uint8_t tx_remcap[1]={0x0F};               // Rem Cap
 80006b4:	230f      	movs	r3, #15
 80006b6:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remcap, 1);
 80006b8:	463a      	mov	r2, r7
 80006ba:	2301      	movs	r3, #1
 80006bc:	2116      	movs	r1, #22
 80006be:	4825      	ldr	r0, [pc, #148]	; (8000754 <update_RemCap_during_maintenance_bat1+0xb8>)
 80006c0:	f004 f89e 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 80006c4:	2005      	movs	r0, #5
 80006c6:	f003 fc6f 	bl	8003fa8 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_geninfo_remcap, 2);
 80006ca:	1d3a      	adds	r2, r7, #4
 80006cc:	2302      	movs	r3, #2
 80006ce:	2116      	movs	r1, #22
 80006d0:	4820      	ldr	r0, [pc, #128]	; (8000754 <update_RemCap_during_maintenance_bat1+0xb8>)
 80006d2:	f004 f905 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 80006d6:	2005      	movs	r0, #5
 80006d8:	f003 fc66 	bl	8003fa8 <HAL_Delay>


////		uint8_t send_update_voltage[14]={'1','M','U','P','V','T','S',rx_geninfo_voltage[1] , rx_geninfo_voltage[0],'V','T','U','P','E'};
//

		transmit_info_to_be_updated[0]='s';
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006de:	2273      	movs	r2, #115	; 0x73
 80006e0:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated[1]='1';
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006e4:	2231      	movs	r2, #49	; 0x31
 80006e6:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated[2]='M';
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006ea:	224d      	movs	r2, #77	; 0x4d
 80006ec:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated[3]='U';
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006f0:	2255      	movs	r2, #85	; 0x55
 80006f2:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated[4]='P';
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated[5]='R';
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 80006fc:	2252      	movs	r2, #82	; 0x52
 80006fe:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated[6]='C';
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000702:	2243      	movs	r2, #67	; 0x43
 8000704:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated[7]='S';
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000708:	2253      	movs	r2, #83	; 0x53
 800070a:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated[8]=rx_geninfo_remcap[1];
 800070c:	797a      	ldrb	r2, [r7, #5]
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000710:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated[9]=rx_geninfo_remcap[0];
 8000712:	793a      	ldrb	r2, [r7, #4]
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000716:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated[10]='R';
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 800071a:	2252      	movs	r2, #82	; 0x52
 800071c:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated[11]='C';
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000720:	2243      	movs	r2, #67	; 0x43
 8000722:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated[12]='U';
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000726:	2255      	movs	r2, #85	; 0x55
 8000728:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated[13]='P';
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 800072c:	2250      	movs	r2, #80	; 0x50
 800072e:	735a      	strb	r2, [r3, #13]
		transmit_info_to_be_updated[14]='E';
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000732:	2245      	movs	r2, #69	; 0x45
 8000734:	739a      	strb	r2, [r3, #14]
		transmit_info_to_be_updated[15]='e';
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000738:	2265      	movs	r2, #101	; 0x65
 800073a:	73da      	strb	r2, [r3, #15]




HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 800073c:	2210      	movs	r2, #16
 800073e:	4906      	ldr	r1, [pc, #24]	; (8000758 <update_RemCap_during_maintenance_bat1+0xbc>)
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <update_RemCap_during_maintenance_bat1+0xc0>)
 8000742:	f007 fbb7 	bl	8007eb4 <HAL_UART_Transmit_IT>

	}



}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000b4 	.word	0x200000b4
 8000754:	200001e4 	.word	0x200001e4
 8000758:	20000104 	.word	0x20000104
 800075c:	20000330 	.word	0x20000330

08000760 <update_cyclecount_during_maintenance_bat1>:

 void update_cyclecount_during_maintenance_bat1()
 {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	 if(bat1_geninfo_cycle_flag==true)
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <update_cyclecount_during_maintenance_bat1+0xb4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d04d      	beq.n	800080a <update_cyclecount_during_maintenance_bat1+0xaa>
	 {
		 bat1_geninfo_cycle_flag=false;
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <update_cyclecount_during_maintenance_bat1+0xb4>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
		uint8_t tx_cyclecount[1]={0x17}; // CycleCount
 8000774:	2317      	movs	r3, #23
 8000776:	713b      	strb	r3, [r7, #4]
		uint8_t rx_cyclecount[2]={0x00,0x00};
 8000778:	2300      	movs	r3, #0
 800077a:	803b      	strh	r3, [r7, #0]
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount, 1);
 800077c:	1d3a      	adds	r2, r7, #4
 800077e:	2301      	movs	r3, #1
 8000780:	2116      	movs	r1, #22
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <update_cyclecount_during_maintenance_bat1+0xb8>)
 8000784:	f004 f83c 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(5);
 8000788:	2005      	movs	r0, #5
 800078a:	f003 fc0d 	bl	8003fa8 <HAL_Delay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_cyclecount, 2);
 800078e:	463a      	mov	r2, r7
 8000790:	2302      	movs	r3, #2
 8000792:	2116      	movs	r1, #22
 8000794:	4820      	ldr	r0, [pc, #128]	; (8000818 <update_cyclecount_during_maintenance_bat1+0xb8>)
 8000796:	f004 f8a3 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f003 fc04 	bl	8003fa8 <HAL_Delay>


		transmit_info_to_be_updated[0]='s';
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007a2:	2273      	movs	r2, #115	; 0x73
 80007a4:	701a      	strb	r2, [r3, #0]
		transmit_info_to_be_updated[1]='1';
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007a8:	2231      	movs	r2, #49	; 0x31
 80007aa:	705a      	strb	r2, [r3, #1]
		transmit_info_to_be_updated[2]='M';
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007ae:	224d      	movs	r2, #77	; 0x4d
 80007b0:	709a      	strb	r2, [r3, #2]
		transmit_info_to_be_updated[3]='U';
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007b4:	2255      	movs	r2, #85	; 0x55
 80007b6:	70da      	strb	r2, [r3, #3]
		transmit_info_to_be_updated[4]='P';
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007ba:	2250      	movs	r2, #80	; 0x50
 80007bc:	711a      	strb	r2, [r3, #4]
		transmit_info_to_be_updated[5]='C';
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007c0:	2243      	movs	r2, #67	; 0x43
 80007c2:	715a      	strb	r2, [r3, #5]
		transmit_info_to_be_updated[6]='C';
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007c6:	2243      	movs	r2, #67	; 0x43
 80007c8:	719a      	strb	r2, [r3, #6]
		transmit_info_to_be_updated[7]='S';
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007cc:	2253      	movs	r2, #83	; 0x53
 80007ce:	71da      	strb	r2, [r3, #7]
		transmit_info_to_be_updated[8]=rx_cyclecount[1];
 80007d0:	787a      	ldrb	r2, [r7, #1]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007d4:	721a      	strb	r2, [r3, #8]
		transmit_info_to_be_updated[9]=rx_cyclecount[0];
 80007d6:	783a      	ldrb	r2, [r7, #0]
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007da:	725a      	strb	r2, [r3, #9]
		transmit_info_to_be_updated[10]='C';
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007de:	2243      	movs	r2, #67	; 0x43
 80007e0:	729a      	strb	r2, [r3, #10]
		transmit_info_to_be_updated[11]='C';
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007e4:	2243      	movs	r2, #67	; 0x43
 80007e6:	72da      	strb	r2, [r3, #11]
		transmit_info_to_be_updated[12]='U';
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007ea:	2255      	movs	r2, #85	; 0x55
 80007ec:	731a      	strb	r2, [r3, #12]
		transmit_info_to_be_updated[13]='P';
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007f0:	2250      	movs	r2, #80	; 0x50
 80007f2:	735a      	strb	r2, [r3, #13]
		transmit_info_to_be_updated[14]='E';
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007f6:	2245      	movs	r2, #69	; 0x45
 80007f8:	739a      	strb	r2, [r3, #14]
		transmit_info_to_be_updated[15]='e';
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 80007fc:	2265      	movs	r2, #101	; 0x65
 80007fe:	73da      	strb	r2, [r3, #15]




HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 8000800:	2210      	movs	r2, #16
 8000802:	4906      	ldr	r1, [pc, #24]	; (800081c <update_cyclecount_during_maintenance_bat1+0xbc>)
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <update_cyclecount_during_maintenance_bat1+0xc0>)
 8000806:	f007 fb55 	bl	8007eb4 <HAL_UART_Transmit_IT>
	 }




 }
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000b2 	.word	0x200000b2
 8000818:	200001e4 	.word	0x200001e4
 800081c:	20000104 	.word	0x20000104
 8000820:	20000330 	.word	0x20000330

08000824 <update_batstatus_during_maintenance_bat1>:

 void update_batstatus_during_maintenance_bat1()
 {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

	 if(bat1_geninfo_batterystatus_flag==true)
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <update_batstatus_during_maintenance_bat1+0xb4>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d04d      	beq.n	80008ce <update_batstatus_during_maintenance_bat1+0xaa>
		 {
		 bat1_geninfo_batterystatus_flag=false;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <update_batstatus_during_maintenance_bat1+0xb4>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]

			uint8_t tx_batstatus[1]={0x16}; // Bat status
 8000838:	2316      	movs	r3, #22
 800083a:	713b      	strb	r3, [r7, #4]
			uint8_t rx_batstatus[2]={0x00,0x00};
 800083c:	2300      	movs	r3, #0
 800083e:	803b      	strh	r3, [r7, #0]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_batstatus, 1);
 8000840:	1d3a      	adds	r2, r7, #4
 8000842:	2301      	movs	r3, #1
 8000844:	2116      	movs	r1, #22
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <update_batstatus_during_maintenance_bat1+0xb8>)
 8000848:	f003 ffda 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800084c:	2005      	movs	r0, #5
 800084e:	f003 fbab 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 8000852:	463a      	mov	r2, r7
 8000854:	2302      	movs	r3, #2
 8000856:	2116      	movs	r1, #22
 8000858:	4820      	ldr	r0, [pc, #128]	; (80008dc <update_batstatus_during_maintenance_bat1+0xb8>)
 800085a:	f004 f841 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f003 fba2 	bl	8003fa8 <HAL_Delay>


			transmit_info_to_be_updated[0]='s';
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000866:	2273      	movs	r2, #115	; 0x73
 8000868:	701a      	strb	r2, [r3, #0]
			transmit_info_to_be_updated[1]='1';
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 800086c:	2231      	movs	r2, #49	; 0x31
 800086e:	705a      	strb	r2, [r3, #1]
			transmit_info_to_be_updated[2]='M';
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000872:	224d      	movs	r2, #77	; 0x4d
 8000874:	709a      	strb	r2, [r3, #2]
			transmit_info_to_be_updated[3]='U';
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000878:	2255      	movs	r2, #85	; 0x55
 800087a:	70da      	strb	r2, [r3, #3]
			transmit_info_to_be_updated[4]='P';
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 800087e:	2250      	movs	r2, #80	; 0x50
 8000880:	711a      	strb	r2, [r3, #4]
			transmit_info_to_be_updated[5]='B';
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000884:	2242      	movs	r2, #66	; 0x42
 8000886:	715a      	strb	r2, [r3, #5]
			transmit_info_to_be_updated[6]='S';
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 800088a:	2253      	movs	r2, #83	; 0x53
 800088c:	719a      	strb	r2, [r3, #6]
			transmit_info_to_be_updated[7]='S';
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000890:	2253      	movs	r2, #83	; 0x53
 8000892:	71da      	strb	r2, [r3, #7]
			transmit_info_to_be_updated[8]=rx_batstatus[1];
 8000894:	787a      	ldrb	r2, [r7, #1]
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 8000898:	721a      	strb	r2, [r3, #8]
			transmit_info_to_be_updated[9]=rx_batstatus[0];
 800089a:	783a      	ldrb	r2, [r7, #0]
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 800089e:	725a      	strb	r2, [r3, #9]
			transmit_info_to_be_updated[10]='B';
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008a2:	2242      	movs	r2, #66	; 0x42
 80008a4:	729a      	strb	r2, [r3, #10]
			transmit_info_to_be_updated[11]='S';
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008a8:	2253      	movs	r2, #83	; 0x53
 80008aa:	72da      	strb	r2, [r3, #11]
			transmit_info_to_be_updated[12]='U';
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008ae:	2255      	movs	r2, #85	; 0x55
 80008b0:	731a      	strb	r2, [r3, #12]
			transmit_info_to_be_updated[13]='P';
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008b4:	2250      	movs	r2, #80	; 0x50
 80008b6:	735a      	strb	r2, [r3, #13]
			transmit_info_to_be_updated[14]='E';
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008ba:	2245      	movs	r2, #69	; 0x45
 80008bc:	739a      	strb	r2, [r3, #14]
			transmit_info_to_be_updated[15]='e';
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008c0:	2265      	movs	r2, #101	; 0x65
 80008c2:	73da      	strb	r2, [r3, #15]




	HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 80008c4:	2210      	movs	r2, #16
 80008c6:	4906      	ldr	r1, [pc, #24]	; (80008e0 <update_batstatus_during_maintenance_bat1+0xbc>)
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <update_batstatus_during_maintenance_bat1+0xc0>)
 80008ca:	f007 faf3 	bl	8007eb4 <HAL_UART_Transmit_IT>
		 }




 }
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000b7 	.word	0x200000b7
 80008dc:	200001e4 	.word	0x200001e4
 80008e0:	20000104 	.word	0x20000104
 80008e4:	20000330 	.word	0x20000330

080008e8 <update_temperature_during_maintenance_bat1>:

 void update_temperature_during_maintenance_bat1()
 {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
if(bat1_geninfo_temperature_flag==true)
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <update_temperature_during_maintenance_bat1+0xb4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d04d      	beq.n	8000992 <update_temperature_during_maintenance_bat1+0xaa>
{

	bat1_geninfo_temperature_flag=false;
 80008f6:	4b29      	ldr	r3, [pc, #164]	; (800099c <update_temperature_during_maintenance_bat1+0xb4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]

		uint8_t tx_temp[1]={0x08}; // Temperature
 80008fc:	2308      	movs	r3, #8
 80008fe:	713b      	strb	r3, [r7, #4]
				uint8_t rx_temp[2]={0x00,0x00};
 8000900:	2300      	movs	r3, #0
 8000902:	803b      	strh	r3, [r7, #0]
				HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temp, 1);
 8000904:	1d3a      	adds	r2, r7, #4
 8000906:	2301      	movs	r3, #1
 8000908:	2116      	movs	r1, #22
 800090a:	4825      	ldr	r0, [pc, #148]	; (80009a0 <update_temperature_during_maintenance_bat1+0xb8>)
 800090c:	f003 ff78 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
				HAL_Delay(5);
 8000910:	2005      	movs	r0, #5
 8000912:	f003 fb49 	bl	8003fa8 <HAL_Delay>
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_temp, 2);
 8000916:	463a      	mov	r2, r7
 8000918:	2302      	movs	r3, #2
 800091a:	2116      	movs	r1, #22
 800091c:	4820      	ldr	r0, [pc, #128]	; (80009a0 <update_temperature_during_maintenance_bat1+0xb8>)
 800091e:	f003 ffdf 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
				HAL_Delay(5);
 8000922:	2005      	movs	r0, #5
 8000924:	f003 fb40 	bl	8003fa8 <HAL_Delay>


				transmit_info_to_be_updated[0]='s';
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800092a:	2273      	movs	r2, #115	; 0x73
 800092c:	701a      	strb	r2, [r3, #0]
				transmit_info_to_be_updated[1]='1';
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000930:	2231      	movs	r2, #49	; 0x31
 8000932:	705a      	strb	r2, [r3, #1]
				transmit_info_to_be_updated[2]='M';
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000936:	224d      	movs	r2, #77	; 0x4d
 8000938:	709a      	strb	r2, [r3, #2]
				transmit_info_to_be_updated[3]='U';
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800093c:	2255      	movs	r2, #85	; 0x55
 800093e:	70da      	strb	r2, [r3, #3]
				transmit_info_to_be_updated[4]='P';
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000942:	2250      	movs	r2, #80	; 0x50
 8000944:	711a      	strb	r2, [r3, #4]
				transmit_info_to_be_updated[5]='T';
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000948:	2254      	movs	r2, #84	; 0x54
 800094a:	715a      	strb	r2, [r3, #5]
				transmit_info_to_be_updated[6]='P';
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800094e:	2250      	movs	r2, #80	; 0x50
 8000950:	719a      	strb	r2, [r3, #6]
				transmit_info_to_be_updated[7]='S';
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000954:	2253      	movs	r2, #83	; 0x53
 8000956:	71da      	strb	r2, [r3, #7]
				transmit_info_to_be_updated[8]=rx_temp[1];
 8000958:	787a      	ldrb	r2, [r7, #1]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800095c:	721a      	strb	r2, [r3, #8]
				transmit_info_to_be_updated[9]=rx_temp[0];
 800095e:	783a      	ldrb	r2, [r7, #0]
 8000960:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000962:	725a      	strb	r2, [r3, #9]
				transmit_info_to_be_updated[10]='T';
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000966:	2254      	movs	r2, #84	; 0x54
 8000968:	729a      	strb	r2, [r3, #10]
				transmit_info_to_be_updated[11]='P';
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800096c:	2250      	movs	r2, #80	; 0x50
 800096e:	72da      	strb	r2, [r3, #11]
				transmit_info_to_be_updated[12]='U';
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000972:	2255      	movs	r2, #85	; 0x55
 8000974:	731a      	strb	r2, [r3, #12]
				transmit_info_to_be_updated[13]='P';
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000978:	2250      	movs	r2, #80	; 0x50
 800097a:	735a      	strb	r2, [r3, #13]
				transmit_info_to_be_updated[14]='E';
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800097e:	2245      	movs	r2, #69	; 0x45
 8000980:	739a      	strb	r2, [r3, #14]
				transmit_info_to_be_updated[15]='e';
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 8000984:	2265      	movs	r2, #101	; 0x65
 8000986:	73da      	strb	r2, [r3, #15]




		HAL_UART_Transmit_IT(&huart2, transmit_info_to_be_updated, 16);
 8000988:	2210      	movs	r2, #16
 800098a:	4906      	ldr	r1, [pc, #24]	; (80009a4 <update_temperature_during_maintenance_bat1+0xbc>)
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <update_temperature_during_maintenance_bat1+0xc0>)
 800098e:	f007 fa91 	bl	8007eb4 <HAL_UART_Transmit_IT>

}



}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000b6 	.word	0x200000b6
 80009a0:	200001e4 	.word	0x200001e4
 80009a4:	20000104 	.word	0x20000104
 80009a8:	20000330 	.word	0x20000330

080009ac <update_periodic_flags_during_maintenance_bat1>:

 void update_periodic_flags_during_maintenance_bat1()
 {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

		bat1_geninfo_asoc_counter++;
 80009b0:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	3301      	adds	r3, #1
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <update_periodic_flags_during_maintenance_bat1+0xf0>)
 80009ba:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_voltage_counter++;
 80009bc:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	3301      	adds	r3, #1
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <update_periodic_flags_during_maintenance_bat1+0xf4>)
 80009c6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_remainingcapacity_counter++;
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 80009d2:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_temperature_counter++;
 80009d4:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 80009de:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_cycle_counter++;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <update_periodic_flags_during_maintenance_bat1+0x100>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b30      	ldr	r3, [pc, #192]	; (8000aac <update_periodic_flags_during_maintenance_bat1+0x100>)
 80009ea:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_current_counter++;
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <update_periodic_flags_during_maintenance_bat1+0x104>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <update_periodic_flags_during_maintenance_bat1+0x104>)
 80009f6:	801a      	strh	r2, [r3, #0]
			bat1_geninfo_batterystatus_counter++;
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <update_periodic_flags_during_maintenance_bat1+0x108>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <update_periodic_flags_during_maintenance_bat1+0x108>)
 8000a02:	801a      	strh	r2, [r3, #0]

			if(bat1_geninfo_asoc_counter==100)
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <update_periodic_flags_during_maintenance_bat1+0xf0>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	2b64      	cmp	r3, #100	; 0x64
 8000a0a:	d105      	bne.n	8000a18 <update_periodic_flags_during_maintenance_bat1+0x6c>
			{
				bat1_geninfo_asoc_counter=0;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <update_periodic_flags_during_maintenance_bat1+0xf0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_asoc_flag=true;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <update_periodic_flags_during_maintenance_bat1+0x10c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <update_periodic_flags_during_maintenance_bat1+0xf4>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	2b32      	cmp	r3, #50	; 0x32
 8000a1e:	d105      	bne.n	8000a2c <update_periodic_flags_during_maintenance_bat1+0x80>
			{
				bat1_geninfo_voltage_counter=0;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <update_periodic_flags_during_maintenance_bat1+0xf4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_voltage_flag=true;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <update_periodic_flags_during_maintenance_bat1+0x110>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
			}

			if(bat1_geninfo_remainingcapacity_counter==70)
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	2b46      	cmp	r3, #70	; 0x46
 8000a32:	d105      	bne.n	8000a40 <update_periodic_flags_during_maintenance_bat1+0x94>
			{
				bat1_geninfo_remainingcapacity_counter=0;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <update_periodic_flags_during_maintenance_bat1+0xf8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_remainingcapacity_flag=true;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <update_periodic_flags_during_maintenance_bat1+0x114>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_temperature_counter==10)
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b0a      	cmp	r3, #10
 8000a46:	d105      	bne.n	8000a54 <update_periodic_flags_during_maintenance_bat1+0xa8>
			{
				bat1_geninfo_temperature_counter=0;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <update_periodic_flags_during_maintenance_bat1+0xfc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_temperature_flag=true;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <update_periodic_flags_during_maintenance_bat1+0x118>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_cycle_counter==400)
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <update_periodic_flags_during_maintenance_bat1+0x100>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a5c:	d105      	bne.n	8000a6a <update_periodic_flags_during_maintenance_bat1+0xbe>
			{
				bat1_geninfo_cycle_counter=0;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <update_periodic_flags_during_maintenance_bat1+0x100>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_cycle_flag=true;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <update_periodic_flags_during_maintenance_bat1+0x11c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_current_counter==200)
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8000a70:	d105      	bne.n	8000a7e <update_periodic_flags_during_maintenance_bat1+0xd2>
			{
				bat1_geninfo_current_counter=0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <update_periodic_flags_during_maintenance_bat1+0x104>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_current_flag=true;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <update_periodic_flags_during_maintenance_bat1+0x120>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
			}
			if(bat1_geninfo_batterystatus_counter==25)
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <update_periodic_flags_during_maintenance_bat1+0x108>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b19      	cmp	r3, #25
 8000a84:	d105      	bne.n	8000a92 <update_periodic_flags_during_maintenance_bat1+0xe6>
			{
				bat1_geninfo_batterystatus_counter=0;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <update_periodic_flags_during_maintenance_bat1+0x108>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	801a      	strh	r2, [r3, #0]
				bat1_geninfo_batterystatus_flag =true;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <update_periodic_flags_during_maintenance_bat1+0x124>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
			}




		}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	200000a6 	.word	0x200000a6
 8000aa0:	200000aa 	.word	0x200000aa
 8000aa4:	200000a8 	.word	0x200000a8
 8000aa8:	200000ac 	.word	0x200000ac
 8000aac:	200000a4 	.word	0x200000a4
 8000ab0:	200000b0 	.word	0x200000b0
 8000ab4:	200000ae 	.word	0x200000ae
 8000ab8:	200000b3 	.word	0x200000b3
 8000abc:	200000b5 	.word	0x200000b5
 8000ac0:	200000b4 	.word	0x200000b4
 8000ac4:	200000b6 	.word	0x200000b6
 8000ac8:	200000b2 	.word	0x200000b2
 8000acc:	200000b8 	.word	0x200000b8
 8000ad0:	200000b7 	.word	0x200000b7

08000ad4 <update_periodic_flags_during_maintenance_bat2>:
}



void update_periodic_flags_during_maintenance_bat2()
 {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

		    bat2_geninfo_asoc_counter++;
 8000ad8:	4b3a      	ldr	r3, [pc, #232]	; (8000bc4 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000ae2:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_voltage_counter++;
 8000ae4:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000aee:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_remainingcapacity_counter++;
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000afa:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_temperature_counter++;
 8000afc:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000b06:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_cycle_counter++;
 8000b08:	4b32      	ldr	r3, [pc, #200]	; (8000bd4 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b30      	ldr	r3, [pc, #192]	; (8000bd4 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b12:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_current_counter++;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b1e:	801a      	strh	r2, [r3, #0]
			bat2_geninfo_batterystatus_counter++;
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000b2a:	801a      	strh	r2, [r3, #0]

			if(bat2_geninfo_asoc_counter==100)
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	2b64      	cmp	r3, #100	; 0x64
 8000b32:	d105      	bne.n	8000b40 <update_periodic_flags_during_maintenance_bat2+0x6c>
			{
				bat2_geninfo_asoc_counter=0;
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <update_periodic_flags_during_maintenance_bat2+0xf0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_asoc_flag=true;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <update_periodic_flags_during_maintenance_bat2+0x10c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	2b32      	cmp	r3, #50	; 0x32
 8000b46:	d105      	bne.n	8000b54 <update_periodic_flags_during_maintenance_bat2+0x80>
			{
				bat2_geninfo_voltage_counter=0;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <update_periodic_flags_during_maintenance_bat2+0xf4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_voltage_flag=true;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <update_periodic_flags_during_maintenance_bat2+0x110>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	701a      	strb	r2, [r3, #0]
			}

			if(bat2_geninfo_remainingcapacity_counter==70)
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	2b46      	cmp	r3, #70	; 0x46
 8000b5a:	d105      	bne.n	8000b68 <update_periodic_flags_during_maintenance_bat2+0x94>
			{
				bat2_geninfo_remainingcapacity_counter=0;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <update_periodic_flags_during_maintenance_bat2+0xf8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_remainingcapacity_flag=true;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <update_periodic_flags_during_maintenance_bat2+0x114>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_temperature_counter==10)
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	2b0a      	cmp	r3, #10
 8000b6e:	d105      	bne.n	8000b7c <update_periodic_flags_during_maintenance_bat2+0xa8>
			{
				bat2_geninfo_temperature_counter=0;
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <update_periodic_flags_during_maintenance_bat2+0xfc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_temperature_flag=true;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <update_periodic_flags_during_maintenance_bat2+0x118>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_cycle_counter==400)
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b84:	d105      	bne.n	8000b92 <update_periodic_flags_during_maintenance_bat2+0xbe>
			{
				bat2_geninfo_cycle_counter=0;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <update_periodic_flags_during_maintenance_bat2+0x100>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_cycle_flag=true;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <update_periodic_flags_during_maintenance_bat2+0x11c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_current_counter==200)
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	2bc8      	cmp	r3, #200	; 0xc8
 8000b98:	d105      	bne.n	8000ba6 <update_periodic_flags_during_maintenance_bat2+0xd2>
			{
				bat2_geninfo_current_counter=0;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <update_periodic_flags_during_maintenance_bat2+0x104>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_current_flag=true;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <update_periodic_flags_during_maintenance_bat2+0x120>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
			}
			if(bat2_geninfo_batterystatus_counter==25)
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	2b19      	cmp	r3, #25
 8000bac:	d105      	bne.n	8000bba <update_periodic_flags_during_maintenance_bat2+0xe6>
			{
				bat2_geninfo_batterystatus_counter=0;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <update_periodic_flags_during_maintenance_bat2+0x108>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	801a      	strh	r2, [r3, #0]
				bat2_geninfo_batterystatus_flag =true;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <update_periodic_flags_during_maintenance_bat2+0x124>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
			}




		}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	200000c4 	.word	0x200000c4
 8000bc8:	200000c8 	.word	0x200000c8
 8000bcc:	200000c6 	.word	0x200000c6
 8000bd0:	200000ca 	.word	0x200000ca
 8000bd4:	200000c2 	.word	0x200000c2
 8000bd8:	200000ce 	.word	0x200000ce
 8000bdc:	200000cc 	.word	0x200000cc
 8000be0:	200000d1 	.word	0x200000d1
 8000be4:	200000d3 	.word	0x200000d3
 8000be8:	200000d2 	.word	0x200000d2
 8000bec:	200000d4 	.word	0x200000d4
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	200000d6 	.word	0x200000d6
 8000bf8:	200000d5 	.word	0x200000d5

08000bfc <update_periodic_flags_during_maintenance_bat3>:
}



void update_periodic_flags_during_maintenance_bat3()
 {
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

		    bat3_geninfo_asoc_counter++;
 8000c00:	4b3a      	ldr	r3, [pc, #232]	; (8000cec <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b38      	ldr	r3, [pc, #224]	; (8000cec <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c0a:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_voltage_counter++;
 8000c0c:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c16:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_remainingcapacity_counter++;
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c22:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_temperature_counter++;
 8000c24:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c2e:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_cycle_counter++;
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000c3a:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_current_counter++;
 8000c3c:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000c46:	801a      	strh	r2, [r3, #0]
			bat3_geninfo_batterystatus_counter++;
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000c52:	801a      	strh	r2, [r3, #0]

			if(bat3_geninfo_asoc_counter==100)
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	2b64      	cmp	r3, #100	; 0x64
 8000c5a:	d105      	bne.n	8000c68 <update_periodic_flags_during_maintenance_bat3+0x6c>
			{
				bat3_geninfo_asoc_counter=0;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	; (8000cec <update_periodic_flags_during_maintenance_bat3+0xf0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_asoc_flag=true;
 8000c62:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <update_periodic_flags_during_maintenance_bat3+0x10c>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_voltage_counter==50)  // update time - 2 minutes - 50
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	2b32      	cmp	r3, #50	; 0x32
 8000c6e:	d105      	bne.n	8000c7c <update_periodic_flags_during_maintenance_bat3+0x80>
			{
				bat3_geninfo_voltage_counter=0;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <update_periodic_flags_during_maintenance_bat3+0xf4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_voltage_flag=true;
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <update_periodic_flags_during_maintenance_bat3+0x110>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	701a      	strb	r2, [r3, #0]
			}

			if(bat3_geninfo_remainingcapacity_counter==70)
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	2b46      	cmp	r3, #70	; 0x46
 8000c82:	d105      	bne.n	8000c90 <update_periodic_flags_during_maintenance_bat3+0x94>
			{
				bat3_geninfo_remainingcapacity_counter=0;
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <update_periodic_flags_during_maintenance_bat3+0xf8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_remainingcapacity_flag=true;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <update_periodic_flags_during_maintenance_bat3+0x114>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_temperature_counter==10)
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	2b0a      	cmp	r3, #10
 8000c96:	d105      	bne.n	8000ca4 <update_periodic_flags_during_maintenance_bat3+0xa8>
			{
				bat3_geninfo_temperature_counter=0;
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <update_periodic_flags_during_maintenance_bat3+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_temperature_flag=true;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <update_periodic_flags_during_maintenance_bat3+0x118>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_cycle_counter==400)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000cac:	d105      	bne.n	8000cba <update_periodic_flags_during_maintenance_bat3+0xbe>
			{
				bat3_geninfo_cycle_counter=0;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <update_periodic_flags_during_maintenance_bat3+0x100>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_cycle_flag=true;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <update_periodic_flags_during_maintenance_bat3+0x11c>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_current_counter==200)
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	2bc8      	cmp	r3, #200	; 0xc8
 8000cc0:	d105      	bne.n	8000cce <update_periodic_flags_during_maintenance_bat3+0xd2>
			{
				bat3_geninfo_current_counter=0;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <update_periodic_flags_during_maintenance_bat3+0x104>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_current_flag=true;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <update_periodic_flags_during_maintenance_bat3+0x120>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
			}
			if(bat3_geninfo_batterystatus_counter==25)
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	2b19      	cmp	r3, #25
 8000cd4:	d105      	bne.n	8000ce2 <update_periodic_flags_during_maintenance_bat3+0xe6>
			{
				bat3_geninfo_batterystatus_counter=0;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <update_periodic_flags_during_maintenance_bat3+0x108>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
				bat3_geninfo_batterystatus_flag =true;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <update_periodic_flags_during_maintenance_bat3+0x124>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
			}




		}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	200000e2 	.word	0x200000e2
 8000cf0:	200000e6 	.word	0x200000e6
 8000cf4:	200000e4 	.word	0x200000e4
 8000cf8:	200000e8 	.word	0x200000e8
 8000cfc:	200000e0 	.word	0x200000e0
 8000d00:	200000ec 	.word	0x200000ec
 8000d04:	200000ea 	.word	0x200000ea
 8000d08:	200000ef 	.word	0x200000ef
 8000d0c:	200000f1 	.word	0x200000f1
 8000d10:	200000f0 	.word	0x200000f0
 8000d14:	200000f2 	.word	0x200000f2
 8000d18:	200000ee 	.word	0x200000ee
 8000d1c:	200000f4 	.word	0x200000f4
 8000d20:	200000f3 	.word	0x200000f3

08000d24 <Transmit_Bat1_Maintenance_General_Info_to_Raspi>:
extern UART_HandleTypeDef huart2;
extern I2C_HandleTypeDef hi2c1;

// This function works
void Transmit_Bat1_Maintenance_General_Info_to_Raspi()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b0ba      	sub	sp, #232	; 0xe8
 8000d28:	af00      	add	r7, sp, #0

	// GI function starts From here

		uint8_t tx_serial_number_gen[1]={0x1C};  // Serial No
 8000d2a:	231c      	movs	r3, #28
 8000d2c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
		uint8_t rx_serial_no[2]={0x00};
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_serial_number_gen, 1);
 8000d36:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2116      	movs	r1, #22
 8000d3e:	48f4      	ldr	r0, [pc, #976]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000d40:	f003 fd5e 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8000d44:	2005      	movs	r0, #5
 8000d46:	f003 f891 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_serial_no, 2);
 8000d4a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000d4e:	2302      	movs	r3, #2
 8000d50:	2116      	movs	r1, #22
 8000d52:	48ef      	ldr	r0, [pc, #956]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000d54:	f003 fdc4 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f003 f887 	bl	8003e6c <msdelay>
		uint16_t sn = rx_serial_no[1];
 8000d5e:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8000d62:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		sn = sn << 8;
 8000d66:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		sn = sn + rx_serial_no[0];
 8000d70:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
		uint8_t send_serial_no[16]={'s','1','M','G','I','S','N','S',rx_serial_no[1],rx_serial_no[0],'S','N','G','I','E','e'};
 8000d80:	2373      	movs	r3, #115	; 0x73
 8000d82:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 8000d86:	2331      	movs	r3, #49	; 0x31
 8000d88:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8000d8c:	234d      	movs	r3, #77	; 0x4d
 8000d8e:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8000d92:	2347      	movs	r3, #71	; 0x47
 8000d94:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8000d98:	2349      	movs	r3, #73	; 0x49
 8000d9a:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8000d9e:	2353      	movs	r3, #83	; 0x53
 8000da0:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8000da4:	234e      	movs	r3, #78	; 0x4e
 8000da6:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8000daa:	2353      	movs	r3, #83	; 0x53
 8000dac:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8000db0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8000db4:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 8000db8:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8000dbc:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 8000dc0:	2353      	movs	r3, #83	; 0x53
 8000dc2:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8000dc6:	234e      	movs	r3, #78	; 0x4e
 8000dc8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8000dcc:	2347      	movs	r3, #71	; 0x47
 8000dce:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8000dd2:	2349      	movs	r3, #73	; 0x49
 8000dd4:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8000dd8:	2345      	movs	r3, #69	; 0x45
 8000dda:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 8000dde:	2365      	movs	r3, #101	; 0x65
 8000de0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		HAL_UART_Transmit_IT(&huart2, send_serial_no, 16);
 8000de4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000de8:	2210      	movs	r2, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	48c9      	ldr	r0, [pc, #804]	; (8001114 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f0>)
 8000dee:	f007 f861 	bl	8007eb4 <HAL_UART_Transmit_IT>

		uint8_t tx_manufacturer_date_gen[1]={0x1B}; // Maunfact date
 8000df2:	231b      	movs	r3, #27
 8000df4:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
		uint8_t rx_manuf_date[2]={0x00,0x00};
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_manufacturer_date_gen, 1);
 8000dfe:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8000e02:	2301      	movs	r3, #1
 8000e04:	2116      	movs	r1, #22
 8000e06:	48c2      	ldr	r0, [pc, #776]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000e08:	f003 fcfa 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f003 f82d 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_manuf_date, 2);
 8000e12:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000e16:	2302      	movs	r3, #2
 8000e18:	2116      	movs	r1, #22
 8000e1a:	48bd      	ldr	r0, [pc, #756]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000e1c:	f003 fd60 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f003 f823 	bl	8003e6c <msdelay>
		uint16_t val=rx_manuf_date[1];
 8000e26:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8000e2a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		val = val << 8;
 8000e2e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		val = val + rx_manuf_date[0];
 8000e38:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000e42:	4413      	add	r3, r2
 8000e44:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
		//	uint16_t m = 0x01E0 & val;
		//	m=m>>5;
		//	uint16_t y=0xFE00 & val;
		//	y=y>>9;
		//	y=y+1980;
		uint8_t send_manuf_date[16]={'s','1','M','G','I','M','D','S',rx_manuf_date[1],rx_manuf_date[0],'M','D','G','I','E','e'};
 8000e48:	2373      	movs	r3, #115	; 0x73
 8000e4a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8000e4e:	2331      	movs	r3, #49	; 0x31
 8000e50:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8000e54:	234d      	movs	r3, #77	; 0x4d
 8000e56:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8000e5a:	2347      	movs	r3, #71	; 0x47
 8000e5c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8000e60:	2349      	movs	r3, #73	; 0x49
 8000e62:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8000e66:	234d      	movs	r3, #77	; 0x4d
 8000e68:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8000e6c:	2344      	movs	r3, #68	; 0x44
 8000e6e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8000e72:	2353      	movs	r3, #83	; 0x53
 8000e74:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8000e78:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8000e7c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 8000e80:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000e84:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8000e88:	234d      	movs	r3, #77	; 0x4d
 8000e8a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8000e8e:	2344      	movs	r3, #68	; 0x44
 8000e90:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 8000e94:	2347      	movs	r3, #71	; 0x47
 8000e96:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8000e9a:	2349      	movs	r3, #73	; 0x49
 8000e9c:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8000ea0:	2345      	movs	r3, #69	; 0x45
 8000ea2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8000ea6:	2365      	movs	r3, #101	; 0x65
 8000ea8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		HAL_UART_Transmit_IT(&huart2, send_manuf_date, 16);
 8000eac:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4897      	ldr	r0, [pc, #604]	; (8001114 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f0>)
 8000eb6:	f006 fffd 	bl	8007eb4 <HAL_UART_Transmit_IT>



		uint8_t tx_cyclecount_gen[1]={0x17}; // CycleCount
 8000eba:	2317      	movs	r3, #23
 8000ebc:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
		uint8_t rx_cyclecount[2]={0x00,0x00};
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount_gen, 1);
 8000ec6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2116      	movs	r1, #22
 8000ece:	4890      	ldr	r0, [pc, #576]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000ed0:	f003 fc96 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f002 ffc9 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_cyclecount, 2);
 8000eda:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000ede:	2302      	movs	r3, #2
 8000ee0:	2116      	movs	r1, #22
 8000ee2:	488b      	ldr	r0, [pc, #556]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000ee4:	f003 fcfc 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f002 ffbf 	bl	8003e6c <msdelay>
		uint16_t cc = rx_cyclecount[1];
 8000eee:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000ef2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		cc = cc << 8;
 8000ef6:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		cc = cc + rx_cyclecount[0];
 8000f00:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
		uint8_t send_cyclecount[16]={'s','1','M','G','I','C','C','S',rx_cyclecount[1],rx_cyclecount[0],'C','C','G','I','E','e'};
 8000f10:	2373      	movs	r3, #115	; 0x73
 8000f12:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 8000f16:	2331      	movs	r3, #49	; 0x31
 8000f18:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000f1c:	234d      	movs	r3, #77	; 0x4d
 8000f1e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8000f22:	2347      	movs	r3, #71	; 0x47
 8000f24:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8000f28:	2349      	movs	r3, #73	; 0x49
 8000f2a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8000f2e:	2343      	movs	r3, #67	; 0x43
 8000f30:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000f34:	2343      	movs	r3, #67	; 0x43
 8000f36:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000f3a:	2353      	movs	r3, #83	; 0x53
 8000f3c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000f40:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000f44:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8000f48:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000f4c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8000f50:	2343      	movs	r3, #67	; 0x43
 8000f52:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000f56:	2343      	movs	r3, #67	; 0x43
 8000f58:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8000f5c:	2347      	movs	r3, #71	; 0x47
 8000f5e:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8000f62:	2349      	movs	r3, #73	; 0x49
 8000f64:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8000f68:	2345      	movs	r3, #69	; 0x45
 8000f6a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8000f6e:	2365      	movs	r3, #101	; 0x65
 8000f70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		HAL_UART_Transmit_IT(&huart2, send_cyclecount, 16);
 8000f74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f78:	2210      	movs	r2, #16
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4865      	ldr	r0, [pc, #404]	; (8001114 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f0>)
 8000f7e:	f006 ff99 	bl	8007eb4 <HAL_UART_Transmit_IT>



		uint8_t tx_remaining_capacity_gen[1]={0x0F};  // Remaining Capacity
 8000f82:	230f      	movs	r3, #15
 8000f84:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
		uint8_t rx_remcapacity[2]={0x00,0x00};
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remaining_capacity_gen, 1);
 8000f8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000f92:	2301      	movs	r3, #1
 8000f94:	2116      	movs	r1, #22
 8000f96:	485e      	ldr	r0, [pc, #376]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000f98:	f003 fc32 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f002 ff65 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_remcapacity, 2);
 8000fa2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	2116      	movs	r1, #22
 8000faa:	4859      	ldr	r0, [pc, #356]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 8000fac:	f003 fc98 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f002 ff5b 	bl	8003e6c <msdelay>
		uint16_t rc = rx_remcapacity[1];
 8000fb6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8000fba:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		rc = rc << 8;
 8000fbe:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		rc = rc + rx_remcapacity[0];
 8000fc8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
		uint8_t send_remain_capcacity[16]={'s','1','M','G','I','R','C','S',rx_remcapacity[1],rx_remcapacity[0],'R','C','G','I','E','e'};
 8000fd8:	2373      	movs	r3, #115	; 0x73
 8000fda:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 8000fde:	2331      	movs	r3, #49	; 0x31
 8000fe0:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8000fe4:	234d      	movs	r3, #77	; 0x4d
 8000fe6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8000fea:	2347      	movs	r3, #71	; 0x47
 8000fec:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000ff0:	2349      	movs	r3, #73	; 0x49
 8000ff2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8000ff6:	2352      	movs	r3, #82	; 0x52
 8000ff8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000ffc:	2343      	movs	r3, #67	; 0x43
 8000ffe:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001002:	2353      	movs	r3, #83	; 0x53
 8001004:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001008:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800100c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
 8001010:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001014:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8001018:	2352      	movs	r3, #82	; 0x52
 800101a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800101e:	2343      	movs	r3, #67	; 0x43
 8001020:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001024:	2347      	movs	r3, #71	; 0x47
 8001026:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800102a:	2349      	movs	r3, #73	; 0x49
 800102c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8001030:	2345      	movs	r3, #69	; 0x45
 8001032:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8001036:	2365      	movs	r3, #101	; 0x65
 8001038:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		HAL_UART_Transmit_IT(&huart2, send_remain_capcacity, 16);
 800103c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001040:	2210      	movs	r2, #16
 8001042:	4619      	mov	r1, r3
 8001044:	4833      	ldr	r0, [pc, #204]	; (8001114 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f0>)
 8001046:	f006 ff35 	bl	8007eb4 <HAL_UART_Transmit_IT>



		uint8_t tx_voltage_gen[1]={0x09};    // Voltage
 800104a:	2309      	movs	r3, #9
 800104c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		uint8_t rx_voltage[2];
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_gen, 1);
 8001050:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001054:	2301      	movs	r3, #1
 8001056:	2116      	movs	r1, #22
 8001058:	482d      	ldr	r0, [pc, #180]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 800105a:	f003 fbd1 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 800105e:	2005      	movs	r0, #5
 8001060:	f002 ff04 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8001064:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8001068:	2302      	movs	r3, #2
 800106a:	2116      	movs	r1, #22
 800106c:	4828      	ldr	r0, [pc, #160]	; (8001110 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3ec>)
 800106e:	f003 fc37 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f002 fefa 	bl	8003e6c <msdelay>
		uint16_t vt = rx_voltage[1];
 8001078:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 800107c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		vt = vt << 8;
 8001080:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		vt = vt + rx_voltage[0];
 800108a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800108e:	b29a      	uxth	r2, r3
 8001090:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001094:	4413      	add	r3, r2
 8001096:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
	//	printf("\nVolatge in main function = %d",vt);

		uint8_t send[16]={'s','1','M','G','I','V','T','S',rx_voltage[1],rx_voltage[0],'V','T','G','I','E','e'};
 800109a:	2373      	movs	r3, #115	; 0x73
 800109c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80010a0:	2331      	movs	r3, #49	; 0x31
 80010a2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80010a6:	234d      	movs	r3, #77	; 0x4d
 80010a8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 80010ac:	2347      	movs	r3, #71	; 0x47
 80010ae:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80010b2:	2349      	movs	r3, #73	; 0x49
 80010b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80010b8:	2356      	movs	r3, #86	; 0x56
 80010ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80010be:	2354      	movs	r3, #84	; 0x54
 80010c0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80010c4:	2353      	movs	r3, #83	; 0x53
 80010c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80010ca:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80010ce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80010d2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80010d6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80010da:	2356      	movs	r3, #86	; 0x56
 80010dc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 80010e0:	2354      	movs	r3, #84	; 0x54
 80010e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80010e6:	2347      	movs	r3, #71	; 0x47
 80010e8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80010ec:	2349      	movs	r3, #73	; 0x49
 80010ee:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80010f2:	2345      	movs	r3, #69	; 0x45
 80010f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80010f8:	2365      	movs	r3, #101	; 0x65
 80010fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		HAL_UART_Transmit_IT(&huart2, send, 16);
 80010fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001102:	2210      	movs	r2, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f0>)
 8001108:	f006 fed4 	bl	8007eb4 <HAL_UART_Transmit_IT>


		uint8_t rx_asoc[1]={0x00};        // ASOC
 800110c:	2300      	movs	r3, #0
 800110e:	e003      	b.n	8001118 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x3f4>
 8001110:	200001e4 	.word	0x200001e4
 8001114:	20000330 	.word	0x20000330
 8001118:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		uint8_t tx_asoc_gen[1]={0x0E};
 800111c:	230e      	movs	r3, #14
 800111e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc_gen, 1);
 8001122:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001126:	2301      	movs	r3, #1
 8001128:	2116      	movs	r1, #22
 800112a:	48ae      	ldr	r0, [pc, #696]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 800112c:	f003 fb68 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8001130:	2005      	movs	r0, #5
 8001132:	f002 fe9b 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_asoc, 1);
 8001136:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800113a:	2301      	movs	r3, #1
 800113c:	2116      	movs	r1, #22
 800113e:	48a9      	ldr	r0, [pc, #676]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 8001140:	f003 fbce 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f002 fe91 	bl	8003e6c <msdelay>
		uint8_t as=rx_asoc[0];
 800114a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800114e:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
		uint8_t send_asoc[16]={'s','1','M','G','I','A','S','S',rx_asoc[0],'A','S','E','G','I','E','e'};
 8001152:	2373      	movs	r3, #115	; 0x73
 8001154:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001158:	2331      	movs	r3, #49	; 0x31
 800115a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800115e:	234d      	movs	r3, #77	; 0x4d
 8001160:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001164:	2347      	movs	r3, #71	; 0x47
 8001166:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800116a:	2349      	movs	r3, #73	; 0x49
 800116c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001170:	2341      	movs	r3, #65	; 0x41
 8001172:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001176:	2353      	movs	r3, #83	; 0x53
 8001178:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800117c:	2353      	movs	r3, #83	; 0x53
 800117e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001182:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001186:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800118a:	2341      	movs	r3, #65	; 0x41
 800118c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001190:	2353      	movs	r3, #83	; 0x53
 8001192:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001196:	2345      	movs	r3, #69	; 0x45
 8001198:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800119c:	2347      	movs	r3, #71	; 0x47
 800119e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80011a2:	2349      	movs	r3, #73	; 0x49
 80011a4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80011a8:	2345      	movs	r3, #69	; 0x45
 80011aa:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80011ae:	2365      	movs	r3, #101	; 0x65
 80011b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		HAL_UART_Transmit_IT(&huart2, send_asoc, 16);
 80011b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b8:	2210      	movs	r2, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	488a      	ldr	r0, [pc, #552]	; (80013e8 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c4>)
 80011be:	f006 fe79 	bl	8007eb4 <HAL_UART_Transmit_IT>


		uint8_t tx_temperature_gen[1]={0x08};  // Temperature
 80011c2:	2308      	movs	r3, #8
 80011c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint8_t	rx_temperature[2]={0x00,0x00};
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temperature_gen, 1);
 80011ce:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80011d2:	2301      	movs	r3, #1
 80011d4:	2116      	movs	r1, #22
 80011d6:	4883      	ldr	r0, [pc, #524]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 80011d8:	f003 fb12 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 80011dc:	2005      	movs	r0, #5
 80011de:	f002 fe45 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_temperature, 2);
 80011e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80011e6:	2302      	movs	r3, #2
 80011e8:	2116      	movs	r1, #22
 80011ea:	487e      	ldr	r0, [pc, #504]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 80011ec:	f003 fb78 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f002 fe3b 	bl	8003e6c <msdelay>
		uint16_t tp = rx_temperature[1];
 80011f6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80011fa:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
		tp = tp << 8;
 80011fe:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
		tp = tp + rx_temperature[0];
 8001208:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800120c:	b29a      	uxth	r2, r3
 800120e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 8001212:	4413      	add	r3, r2
 8001214:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
		uint8_t send_temp[16]={'s','1','M','G','I','T','P','S',rx_temperature[1],rx_temperature[0],'T','P','G','I','E','e'};
 8001218:	2373      	movs	r3, #115	; 0x73
 800121a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800121e:	2331      	movs	r3, #49	; 0x31
 8001220:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001224:	234d      	movs	r3, #77	; 0x4d
 8001226:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800122a:	2347      	movs	r3, #71	; 0x47
 800122c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001230:	2349      	movs	r3, #73	; 0x49
 8001232:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001236:	2354      	movs	r3, #84	; 0x54
 8001238:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800123c:	2350      	movs	r3, #80	; 0x50
 800123e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001242:	2353      	movs	r3, #83	; 0x53
 8001244:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001248:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800124c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8001250:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001254:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001258:	2354      	movs	r3, #84	; 0x54
 800125a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800125e:	2350      	movs	r3, #80	; 0x50
 8001260:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001264:	2347      	movs	r3, #71	; 0x47
 8001266:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800126a:	2349      	movs	r3, #73	; 0x49
 800126c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001270:	2345      	movs	r3, #69	; 0x45
 8001272:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001276:	2365      	movs	r3, #101	; 0x65
 8001278:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		HAL_UART_Transmit_IT(&huart2, send_temp, 16);
 800127c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001280:	2210      	movs	r2, #16
 8001282:	4619      	mov	r1, r3
 8001284:	4858      	ldr	r0, [pc, #352]	; (80013e8 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c4>)
 8001286:	f006 fe15 	bl	8007eb4 <HAL_UART_Transmit_IT>



		uint8_t tx_battery_status_gen[1]={0x16}; // Battery Status
 800128a:	2316      	movs	r3, #22
 800128c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uint8_t rx_batstatus[2]={0x00,0x00};
 8001290:	2300      	movs	r3, #0
 8001292:	853b      	strh	r3, [r7, #40]	; 0x28
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_battery_status_gen, 1);
 8001294:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001298:	2301      	movs	r3, #1
 800129a:	2116      	movs	r1, #22
 800129c:	4851      	ldr	r0, [pc, #324]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 800129e:	f003 faaf 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 80012a2:	2005      	movs	r0, #5
 80012a4:	f002 fde2 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 80012a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ac:	2302      	movs	r3, #2
 80012ae:	2116      	movs	r1, #22
 80012b0:	484c      	ldr	r0, [pc, #304]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 80012b2:	f003 fb15 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f002 fdd8 	bl	8003e6c <msdelay>
		uint16_t bs = rx_batstatus[1];
 80012bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80012c0:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		bs = bs << 8;
 80012c4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		bs = bs + rx_batstatus[0];
 80012ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80012d8:	4413      	add	r3, r2
 80012da:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
		uint8_t send_bat_status[16]={'s','1','M','G','I','B','S','S',rx_batstatus[1],rx_batstatus[0],'B','S','G','I','E','e'};
 80012de:	2373      	movs	r3, #115	; 0x73
 80012e0:	763b      	strb	r3, [r7, #24]
 80012e2:	2331      	movs	r3, #49	; 0x31
 80012e4:	767b      	strb	r3, [r7, #25]
 80012e6:	234d      	movs	r3, #77	; 0x4d
 80012e8:	76bb      	strb	r3, [r7, #26]
 80012ea:	2347      	movs	r3, #71	; 0x47
 80012ec:	76fb      	strb	r3, [r7, #27]
 80012ee:	2349      	movs	r3, #73	; 0x49
 80012f0:	773b      	strb	r3, [r7, #28]
 80012f2:	2342      	movs	r3, #66	; 0x42
 80012f4:	777b      	strb	r3, [r7, #29]
 80012f6:	2353      	movs	r3, #83	; 0x53
 80012f8:	77bb      	strb	r3, [r7, #30]
 80012fa:	2353      	movs	r3, #83	; 0x53
 80012fc:	77fb      	strb	r3, [r7, #31]
 80012fe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
 8001306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800130e:	2342      	movs	r3, #66	; 0x42
 8001310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001314:	2353      	movs	r3, #83	; 0x53
 8001316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800131a:	2347      	movs	r3, #71	; 0x47
 800131c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001320:	2349      	movs	r3, #73	; 0x49
 8001322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001326:	2345      	movs	r3, #69	; 0x45
 8001328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800132c:	2365      	movs	r3, #101	; 0x65
 800132e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_UART_Transmit_IT(&huart2, send_bat_status, 16);
 8001332:	f107 0318 	add.w	r3, r7, #24
 8001336:	2210      	movs	r2, #16
 8001338:	4619      	mov	r1, r3
 800133a:	482b      	ldr	r0, [pc, #172]	; (80013e8 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c4>)
 800133c:	f006 fdba 	bl	8007eb4 <HAL_UART_Transmit_IT>

		uint8_t tx_battery_status_gen2[1]={0x16}; // Battery Status
 8001340:	2316      	movs	r3, #22
 8001342:	753b      	strb	r3, [r7, #20]
		uint8_t rx_batstatus2[2]={0x00,0x00};
 8001344:	2300      	movs	r3, #0
 8001346:	823b      	strh	r3, [r7, #16]
		HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_battery_status_gen2, 1);
 8001348:	f107 0214 	add.w	r2, r7, #20
 800134c:	2301      	movs	r3, #1
 800134e:	2116      	movs	r1, #22
 8001350:	4824      	ldr	r0, [pc, #144]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 8001352:	f003 fa55 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
		msdelay(5);
 8001356:	2005      	movs	r0, #5
 8001358:	f002 fd88 	bl	8003e6c <msdelay>
		HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus2, 2);
 800135c:	f107 0210 	add.w	r2, r7, #16
 8001360:	2302      	movs	r3, #2
 8001362:	2116      	movs	r1, #22
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c0>)
 8001366:	f003 fabb 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
		msdelay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f002 fd7e 	bl	8003e6c <msdelay>
		uint16_t bs2 = rx_batstatus2[1];
 8001370:	7c7b      	ldrb	r3, [r7, #17]
 8001372:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		bs2 = bs2 << 8;
 8001376:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		bs2 = bs2 + rx_batstatus2[0];
 8001380:	7c3b      	ldrb	r3, [r7, #16]
 8001382:	b29a      	uxth	r2, r3
 8001384:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001388:	4413      	add	r3, r2
 800138a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		uint8_t send_bat_status2[16]={'s','1','M','G','I','B','S','S',rx_batstatus2[1],rx_batstatus2[0],'B','S','G','I','E','e'};
 800138e:	2373      	movs	r3, #115	; 0x73
 8001390:	703b      	strb	r3, [r7, #0]
 8001392:	2331      	movs	r3, #49	; 0x31
 8001394:	707b      	strb	r3, [r7, #1]
 8001396:	234d      	movs	r3, #77	; 0x4d
 8001398:	70bb      	strb	r3, [r7, #2]
 800139a:	2347      	movs	r3, #71	; 0x47
 800139c:	70fb      	strb	r3, [r7, #3]
 800139e:	2349      	movs	r3, #73	; 0x49
 80013a0:	713b      	strb	r3, [r7, #4]
 80013a2:	2342      	movs	r3, #66	; 0x42
 80013a4:	717b      	strb	r3, [r7, #5]
 80013a6:	2353      	movs	r3, #83	; 0x53
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	2353      	movs	r3, #83	; 0x53
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	7c7b      	ldrb	r3, [r7, #17]
 80013b0:	723b      	strb	r3, [r7, #8]
 80013b2:	7c3b      	ldrb	r3, [r7, #16]
 80013b4:	727b      	strb	r3, [r7, #9]
 80013b6:	2342      	movs	r3, #66	; 0x42
 80013b8:	72bb      	strb	r3, [r7, #10]
 80013ba:	2353      	movs	r3, #83	; 0x53
 80013bc:	72fb      	strb	r3, [r7, #11]
 80013be:	2347      	movs	r3, #71	; 0x47
 80013c0:	733b      	strb	r3, [r7, #12]
 80013c2:	2349      	movs	r3, #73	; 0x49
 80013c4:	737b      	strb	r3, [r7, #13]
 80013c6:	2345      	movs	r3, #69	; 0x45
 80013c8:	73bb      	strb	r3, [r7, #14]
 80013ca:	2365      	movs	r3, #101	; 0x65
 80013cc:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart2, send_bat_status2, 16);
 80013ce:	463b      	mov	r3, r7
 80013d0:	2210      	movs	r2, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <Transmit_Bat1_Maintenance_General_Info_to_Raspi+0x6c4>)
 80013d6:	f006 fd6d 	bl	8007eb4 <HAL_UART_Transmit_IT>





}
 80013da:	bf00      	nop
 80013dc:	37e8      	adds	r7, #232	; 0xe8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001e4 	.word	0x200001e4
 80013e8:	20000330 	.word	0x20000330

080013ec <commands_from_pi_to_stm>:
extern bool BAT_3_MAINT_GENERAL_INFO_FLAG;
extern bool BAT_3_MAINTENANCE_FLAG;


void commands_from_pi_to_stm()
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 80013f0:	4b93      	ldr	r3, [pc, #588]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b42      	cmp	r3, #66	; 0x42
 80013f6:	d139      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 80013f8:	4b91      	ldr	r3, [pc, #580]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	2b41      	cmp	r3, #65	; 0x41
 80013fe:	d135      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001400:	4b8f      	ldr	r3, [pc, #572]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001402:	789b      	ldrb	r3, [r3, #2]
 8001404:	2b54      	cmp	r3, #84	; 0x54
 8001406:	d131      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001408:	4b8d      	ldr	r3, [pc, #564]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800140a:	78db      	ldrb	r3, [r3, #3]
 800140c:	2b31      	cmp	r3, #49	; 0x31
 800140e:	d12d      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001410:	4b8b      	ldr	r3, [pc, #556]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001412:	791b      	ldrb	r3, [r3, #4]
 8001414:	2b53      	cmp	r3, #83	; 0x53
 8001416:	d129      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	2b54      	cmp	r3, #84	; 0x54
 800141e:	d125      	bne.n	800146c <commands_from_pi_to_stm+0x80>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8001420:	4b87      	ldr	r3, [pc, #540]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001422:	799b      	ldrb	r3, [r3, #6]
 8001424:	2b52      	cmp	r3, #82	; 0x52
 8001426:	d121      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001428:	4b85      	ldr	r3, [pc, #532]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800142a:	79db      	ldrb	r3, [r3, #7]
 800142c:	2b4d      	cmp	r3, #77	; 0x4d
 800142e:	d11d      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001430:	4b83      	ldr	r3, [pc, #524]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001432:	7a1b      	ldrb	r3, [r3, #8]
 8001434:	2b41      	cmp	r3, #65	; 0x41
 8001436:	d119      	bne.n	800146c <commands_from_pi_to_stm+0x80>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8001438:	4b81      	ldr	r3, [pc, #516]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800143a:	7a5b      	ldrb	r3, [r3, #9]
 800143c:	2b49      	cmp	r3, #73	; 0x49
 800143e:	d115      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001442:	7a9b      	ldrb	r3, [r3, #10]
 8001444:	2b4e      	cmp	r3, #78	; 0x4e
 8001446:	d111      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001448:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800144a:	7adb      	ldrb	r3, [r3, #11]
 800144c:	2b54      	cmp	r3, #84	; 0x54
 800144e:	d10d      	bne.n	800146c <commands_from_pi_to_stm+0x80>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	2b53      	cmp	r3, #83	; 0x53
 8001456:	d109      	bne.n	800146c <commands_from_pi_to_stm+0x80>
 8001458:	4b79      	ldr	r3, [pc, #484]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800145a:	7b5b      	ldrb	r3, [r3, #13]
 800145c:	2b54      	cmp	r3, #84	; 0x54
 800145e:	d105      	bne.n	800146c <commands_from_pi_to_stm+0x80>
	{
		Autotestflag=true;
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <commands_from_pi_to_stm+0x258>)
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
		update_maintenance_info_flag=true;
 8001466:	4b78      	ldr	r3, [pc, #480]	; (8001648 <commands_from_pi_to_stm+0x25c>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]

	}


	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b42      	cmp	r3, #66	; 0x42
 8001472:	d136      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 8001474:	4b72      	ldr	r3, [pc, #456]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	2b41      	cmp	r3, #65	; 0x41
 800147a:	d132      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	2b54      	cmp	r3, #84	; 0x54
 8001482:	d12e      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 8001484:	4b6e      	ldr	r3, [pc, #440]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	2b31      	cmp	r3, #49	; 0x31
 800148a:	d12a      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 800148c:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	2b4d      	cmp	r3, #77	; 0x4d
 8001492:	d126      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 8001494:	4b6a      	ldr	r3, [pc, #424]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001496:	795b      	ldrb	r3, [r3, #5]
 8001498:	2b41      	cmp	r3, #65	; 0x41
 800149a:	d122      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800149e:	799b      	ldrb	r3, [r3, #6]
 80014a0:	2b49      	cmp	r3, #73	; 0x49
 80014a2:	d11e      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014a6:	79db      	ldrb	r3, [r3, #7]
 80014a8:	2b4e      	cmp	r3, #78	; 0x4e
 80014aa:	d11a      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 80014ac:	4b64      	ldr	r3, [pc, #400]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014ae:	7a1b      	ldrb	r3, [r3, #8]
 80014b0:	2b44      	cmp	r3, #68	; 0x44
 80014b2:	d116      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014b6:	7a5b      	ldrb	r3, [r3, #9]
 80014b8:	2b50      	cmp	r3, #80	; 0x50
 80014ba:	d112      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 80014bc:	4b60      	ldr	r3, [pc, #384]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014be:	7a9b      	ldrb	r3, [r3, #10]
 80014c0:	2b47      	cmp	r3, #71	; 0x47
 80014c2:	d10e      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 80014c4:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014c6:	7adb      	ldrb	r3, [r3, #11]
 80014c8:	2b4e      	cmp	r3, #78	; 0x4e
 80014ca:	d10a      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 80014cc:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014ce:	7b1b      	ldrb	r3, [r3, #12]
 80014d0:	2b49      	cmp	r3, #73	; 0x49
 80014d2:	d106      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
 80014d4:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014d6:	7b5b      	ldrb	r3, [r3, #13]
 80014d8:	2b46      	cmp	r3, #70	; 0x46
 80014da:	d102      	bne.n	80014e2 <commands_from_pi_to_stm+0xf6>
	{
		BAT_1_MAINT_GENERAL_INFO_FLAG=true;
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <commands_from_pi_to_stm+0x260>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]

	}


	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='1' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b42      	cmp	r3, #66	; 0x42
 80014e8:	d136      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 80014ea:	4b55      	ldr	r3, [pc, #340]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b41      	cmp	r3, #65	; 0x41
 80014f0:	d132      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 80014f2:	4b53      	ldr	r3, [pc, #332]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	2b54      	cmp	r3, #84	; 0x54
 80014f8:	d12e      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 80014fa:	4b51      	ldr	r3, [pc, #324]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	2b31      	cmp	r3, #49	; 0x31
 8001500:	d12a      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 8001502:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	2b45      	cmp	r3, #69	; 0x45
 8001508:	d126      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800150c:	795b      	ldrb	r3, [r3, #5]
 800150e:	2b4e      	cmp	r3, #78	; 0x4e
 8001510:	d122      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001514:	799b      	ldrb	r3, [r3, #6]
 8001516:	2b54      	cmp	r3, #84	; 0x54
 8001518:	d11e      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800151c:	79db      	ldrb	r3, [r3, #7]
 800151e:	2b45      	cmp	r3, #69	; 0x45
 8001520:	d11a      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001524:	7a1b      	ldrb	r3, [r3, #8]
 8001526:	2b52      	cmp	r3, #82	; 0x52
 8001528:	d116      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 800152a:	4b45      	ldr	r3, [pc, #276]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800152c:	7a5b      	ldrb	r3, [r3, #9]
 800152e:	2b4d      	cmp	r3, #77	; 0x4d
 8001530:	d112      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001534:	7a9b      	ldrb	r3, [r3, #10]
 8001536:	2b41      	cmp	r3, #65	; 0x41
 8001538:	d10e      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800153c:	7adb      	ldrb	r3, [r3, #11]
 800153e:	2b49      	cmp	r3, #73	; 0x49
 8001540:	d10a      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001544:	7b1b      	ldrb	r3, [r3, #12]
 8001546:	2b4e      	cmp	r3, #78	; 0x4e
 8001548:	d106      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800154c:	7b5b      	ldrb	r3, [r3, #13]
 800154e:	2b54      	cmp	r3, #84	; 0x54
 8001550:	d102      	bne.n	8001558 <commands_from_pi_to_stm+0x16c>
	{
		BAT_1_MAINTENANCE_FLAG=true;
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <commands_from_pi_to_stm+0x264>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b42      	cmp	r3, #66	; 0x42
 800155e:	d139      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001562:	785b      	ldrb	r3, [r3, #1]
 8001564:	2b41      	cmp	r3, #65	; 0x41
 8001566:	d135      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800156a:	789b      	ldrb	r3, [r3, #2]
 800156c:	2b54      	cmp	r3, #84	; 0x54
 800156e:	d131      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001570:	4b33      	ldr	r3, [pc, #204]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	2b32      	cmp	r3, #50	; 0x32
 8001576:	d12d      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	2b53      	cmp	r3, #83	; 0x53
 800157e:	d129      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001582:	795b      	ldrb	r3, [r3, #5]
 8001584:	2b54      	cmp	r3, #84	; 0x54
 8001586:	d125      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800158a:	799b      	ldrb	r3, [r3, #6]
 800158c:	2b52      	cmp	r3, #82	; 0x52
 800158e:	d121      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001590:	4b2b      	ldr	r3, [pc, #172]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001592:	79db      	ldrb	r3, [r3, #7]
 8001594:	2b4d      	cmp	r3, #77	; 0x4d
 8001596:	d11d      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800159a:	7a1b      	ldrb	r3, [r3, #8]
 800159c:	2b41      	cmp	r3, #65	; 0x41
 800159e:	d119      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015a2:	7a5b      	ldrb	r3, [r3, #9]
 80015a4:	2b49      	cmp	r3, #73	; 0x49
 80015a6:	d115      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015aa:	7a9b      	ldrb	r3, [r3, #10]
 80015ac:	2b4e      	cmp	r3, #78	; 0x4e
 80015ae:	d111      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 80015b0:	4b23      	ldr	r3, [pc, #140]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015b2:	7adb      	ldrb	r3, [r3, #11]
 80015b4:	2b54      	cmp	r3, #84	; 0x54
 80015b6:	d10d      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
 80015bc:	2b53      	cmp	r3, #83	; 0x53
 80015be:	d109      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015c2:	7b5b      	ldrb	r3, [r3, #13]
 80015c4:	2b54      	cmp	r3, #84	; 0x54
 80015c6:	d105      	bne.n	80015d4 <commands_from_pi_to_stm+0x1e8>
	{
		Bat2_Maint_Autotestflag=true;
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <commands_from_pi_to_stm+0x268>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
		bat2_update_maintenance_info_flag=true;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <commands_from_pi_to_stm+0x26c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b42      	cmp	r3, #66	; 0x42
 80015da:	d146      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	2b41      	cmp	r3, #65	; 0x41
 80015e2:	d142      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015e6:	789b      	ldrb	r3, [r3, #2]
 80015e8:	2b54      	cmp	r3, #84	; 0x54
 80015ea:	d13e      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015ee:	78db      	ldrb	r3, [r3, #3]
 80015f0:	2b32      	cmp	r3, #50	; 0x32
 80015f2:	d13a      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015f6:	791b      	ldrb	r3, [r3, #4]
 80015f8:	2b4d      	cmp	r3, #77	; 0x4d
 80015fa:	d136      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <commands_from_pi_to_stm+0x254>)
 80015fe:	795b      	ldrb	r3, [r3, #5]
 8001600:	2b41      	cmp	r3, #65	; 0x41
 8001602:	d132      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001606:	799b      	ldrb	r3, [r3, #6]
 8001608:	2b49      	cmp	r3, #73	; 0x49
 800160a:	d12e      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800160e:	79db      	ldrb	r3, [r3, #7]
 8001610:	2b4e      	cmp	r3, #78	; 0x4e
 8001612:	d12a      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001616:	7a1b      	ldrb	r3, [r3, #8]
 8001618:	2b44      	cmp	r3, #68	; 0x44
 800161a:	d126      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800161e:	7a5b      	ldrb	r3, [r3, #9]
 8001620:	2b50      	cmp	r3, #80	; 0x50
 8001622:	d122      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001626:	7a9b      	ldrb	r3, [r3, #10]
 8001628:	2b47      	cmp	r3, #71	; 0x47
 800162a:	d11e      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <commands_from_pi_to_stm+0x254>)
 800162e:	7adb      	ldrb	r3, [r3, #11]
 8001630:	2b4e      	cmp	r3, #78	; 0x4e
 8001632:	d11a      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 8001634:	4b02      	ldr	r3, [pc, #8]	; (8001640 <commands_from_pi_to_stm+0x254>)
 8001636:	7b1b      	ldrb	r3, [r3, #12]
 8001638:	2b49      	cmp	r3, #73	; 0x49
 800163a:	d116      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
 800163c:	e00e      	b.n	800165c <commands_from_pi_to_stm+0x270>
 800163e:	bf00      	nop
 8001640:	200002d0 	.word	0x200002d0
 8001644:	2000009e 	.word	0x2000009e
 8001648:	200000b9 	.word	0x200000b9
 800164c:	200000a1 	.word	0x200000a1
 8001650:	2000009f 	.word	0x2000009f
 8001654:	200000bf 	.word	0x200000bf
 8001658:	200000d7 	.word	0x200000d7
 800165c:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800165e:	7b5b      	ldrb	r3, [r3, #13]
 8001660:	2b46      	cmp	r3, #70	; 0x46
 8001662:	d102      	bne.n	800166a <commands_from_pi_to_stm+0x27e>
	{
		BAT_2_MAINT_GENERAL_INFO_FLAG=true;
 8001664:	4b7c      	ldr	r3, [pc, #496]	; (8001858 <commands_from_pi_to_stm+0x46c>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='2' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 800166a:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b42      	cmp	r3, #66	; 0x42
 8001670:	d136      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 8001672:	4b78      	ldr	r3, [pc, #480]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	2b41      	cmp	r3, #65	; 0x41
 8001678:	d132      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 800167a:	4b76      	ldr	r3, [pc, #472]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800167c:	789b      	ldrb	r3, [r3, #2]
 800167e:	2b54      	cmp	r3, #84	; 0x54
 8001680:	d12e      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 8001682:	4b74      	ldr	r3, [pc, #464]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001684:	78db      	ldrb	r3, [r3, #3]
 8001686:	2b32      	cmp	r3, #50	; 0x32
 8001688:	d12a      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 800168a:	4b72      	ldr	r3, [pc, #456]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800168c:	791b      	ldrb	r3, [r3, #4]
 800168e:	2b45      	cmp	r3, #69	; 0x45
 8001690:	d126      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 8001692:	4b70      	ldr	r3, [pc, #448]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	2b4e      	cmp	r3, #78	; 0x4e
 8001698:	d122      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800169c:	799b      	ldrb	r3, [r3, #6]
 800169e:	2b54      	cmp	r3, #84	; 0x54
 80016a0:	d11e      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016a4:	79db      	ldrb	r3, [r3, #7]
 80016a6:	2b45      	cmp	r3, #69	; 0x45
 80016a8:	d11a      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 80016aa:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016ac:	7a1b      	ldrb	r3, [r3, #8]
 80016ae:	2b52      	cmp	r3, #82	; 0x52
 80016b0:	d116      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 80016b2:	4b68      	ldr	r3, [pc, #416]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016b4:	7a5b      	ldrb	r3, [r3, #9]
 80016b6:	2b4d      	cmp	r3, #77	; 0x4d
 80016b8:	d112      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016bc:	7a9b      	ldrb	r3, [r3, #10]
 80016be:	2b41      	cmp	r3, #65	; 0x41
 80016c0:	d10e      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016c4:	7adb      	ldrb	r3, [r3, #11]
 80016c6:	2b49      	cmp	r3, #73	; 0x49
 80016c8:	d10a      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 80016ca:	4b62      	ldr	r3, [pc, #392]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016cc:	7b1b      	ldrb	r3, [r3, #12]
 80016ce:	2b4e      	cmp	r3, #78	; 0x4e
 80016d0:	d106      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016d4:	7b5b      	ldrb	r3, [r3, #13]
 80016d6:	2b54      	cmp	r3, #84	; 0x54
 80016d8:	d102      	bne.n	80016e0 <commands_from_pi_to_stm+0x2f4>
	{
		BAT_2_MAINTENANCE_FLAG=true;
 80016da:	4b60      	ldr	r3, [pc, #384]	; (800185c <commands_from_pi_to_stm+0x470>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='S' && rx_buffer[5]=='T'
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b42      	cmp	r3, #66	; 0x42
 80016e6:	d139      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 80016e8:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016ea:	785b      	ldrb	r3, [r3, #1]
 80016ec:	2b41      	cmp	r3, #65	; 0x41
 80016ee:	d135      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	2b54      	cmp	r3, #84	; 0x54
 80016f6:	d131      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80016fa:	78db      	ldrb	r3, [r3, #3]
 80016fc:	2b33      	cmp	r3, #51	; 0x33
 80016fe:	d12d      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001700:	4b54      	ldr	r3, [pc, #336]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001702:	791b      	ldrb	r3, [r3, #4]
 8001704:	2b53      	cmp	r3, #83	; 0x53
 8001706:	d129      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800170a:	795b      	ldrb	r3, [r3, #5]
 800170c:	2b54      	cmp	r3, #84	; 0x54
 800170e:	d125      	bne.n	800175c <commands_from_pi_to_stm+0x370>
			&& rx_buffer[6]=='R' && rx_buffer[7]=='M' && rx_buffer[8]=='A'
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001712:	799b      	ldrb	r3, [r3, #6]
 8001714:	2b52      	cmp	r3, #82	; 0x52
 8001716:	d121      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001718:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800171a:	79db      	ldrb	r3, [r3, #7]
 800171c:	2b4d      	cmp	r3, #77	; 0x4d
 800171e:	d11d      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001722:	7a1b      	ldrb	r3, [r3, #8]
 8001724:	2b41      	cmp	r3, #65	; 0x41
 8001726:	d119      	bne.n	800175c <commands_from_pi_to_stm+0x370>
					&&rx_buffer[9]=='I' && rx_buffer[10]=='N' && rx_buffer[11]=='T'
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800172a:	7a5b      	ldrb	r3, [r3, #9]
 800172c:	2b49      	cmp	r3, #73	; 0x49
 800172e:	d115      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001730:	4b48      	ldr	r3, [pc, #288]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001732:	7a9b      	ldrb	r3, [r3, #10]
 8001734:	2b4e      	cmp	r3, #78	; 0x4e
 8001736:	d111      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800173a:	7adb      	ldrb	r3, [r3, #11]
 800173c:	2b54      	cmp	r3, #84	; 0x54
 800173e:	d10d      	bne.n	800175c <commands_from_pi_to_stm+0x370>
							&& rx_buffer[12]=='S' && rx_buffer[13]=='T')
 8001740:	4b44      	ldr	r3, [pc, #272]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001742:	7b1b      	ldrb	r3, [r3, #12]
 8001744:	2b53      	cmp	r3, #83	; 0x53
 8001746:	d109      	bne.n	800175c <commands_from_pi_to_stm+0x370>
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800174a:	7b5b      	ldrb	r3, [r3, #13]
 800174c:	2b54      	cmp	r3, #84	; 0x54
 800174e:	d105      	bne.n	800175c <commands_from_pi_to_stm+0x370>
	{
		Bat3_Maint_Autotestflag=true;
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <commands_from_pi_to_stm+0x474>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
		bat3_update_maintenance_info_flag=true;
 8001756:	4b43      	ldr	r3, [pc, #268]	; (8001864 <commands_from_pi_to_stm+0x478>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='M' && rx_buffer[5]=='A'
 800175c:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b42      	cmp	r3, #66	; 0x42
 8001762:	d136      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001766:	785b      	ldrb	r3, [r3, #1]
 8001768:	2b41      	cmp	r3, #65	; 0x41
 800176a:	d132      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 800176c:	4b39      	ldr	r3, [pc, #228]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800176e:	789b      	ldrb	r3, [r3, #2]
 8001770:	2b54      	cmp	r3, #84	; 0x54
 8001772:	d12e      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 8001774:	4b37      	ldr	r3, [pc, #220]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001776:	78db      	ldrb	r3, [r3, #3]
 8001778:	2b33      	cmp	r3, #51	; 0x33
 800177a:	d12a      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	2b4d      	cmp	r3, #77	; 0x4d
 8001782:	d126      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001786:	795b      	ldrb	r3, [r3, #5]
 8001788:	2b41      	cmp	r3, #65	; 0x41
 800178a:	d122      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
			&& rx_buffer[6]=='I' && rx_buffer[7]=='N' && rx_buffer[8]=='D'
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800178e:	799b      	ldrb	r3, [r3, #6]
 8001790:	2b49      	cmp	r3, #73	; 0x49
 8001792:	d11e      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 8001794:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001796:	79db      	ldrb	r3, [r3, #7]
 8001798:	2b4e      	cmp	r3, #78	; 0x4e
 800179a:	d11a      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800179e:	7a1b      	ldrb	r3, [r3, #8]
 80017a0:	2b44      	cmp	r3, #68	; 0x44
 80017a2:	d116      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
					&&rx_buffer[9]=='P' && rx_buffer[10]=='G' && rx_buffer[11]=='N'
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017a6:	7a5b      	ldrb	r3, [r3, #9]
 80017a8:	2b50      	cmp	r3, #80	; 0x50
 80017aa:	d112      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017ae:	7a9b      	ldrb	r3, [r3, #10]
 80017b0:	2b47      	cmp	r3, #71	; 0x47
 80017b2:	d10e      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017b6:	7adb      	ldrb	r3, [r3, #11]
 80017b8:	2b4e      	cmp	r3, #78	; 0x4e
 80017ba:	d10a      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
							&& rx_buffer[12]=='I' && rx_buffer[13]=='F')
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017be:	7b1b      	ldrb	r3, [r3, #12]
 80017c0:	2b49      	cmp	r3, #73	; 0x49
 80017c2:	d106      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017c6:	7b5b      	ldrb	r3, [r3, #13]
 80017c8:	2b46      	cmp	r3, #70	; 0x46
 80017ca:	d102      	bne.n	80017d2 <commands_from_pi_to_stm+0x3e6>
	{
		BAT_3_MAINT_GENERAL_INFO_FLAG=true;
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <commands_from_pi_to_stm+0x47c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]

	}

	if(rx_buffer[0]=='B' && rx_buffer[1]=='A' && rx_buffer[2]=='T'&& rx_buffer[3]=='3' && rx_buffer[4]=='E' && rx_buffer[5]=='N'
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b42      	cmp	r3, #66	; 0x42
 80017d8:	d136      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	2b41      	cmp	r3, #65	; 0x41
 80017e0:	d132      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017e4:	789b      	ldrb	r3, [r3, #2]
 80017e6:	2b54      	cmp	r3, #84	; 0x54
 80017e8:	d12e      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	2b33      	cmp	r3, #51	; 0x33
 80017f0:	d12a      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017f4:	791b      	ldrb	r3, [r3, #4]
 80017f6:	2b45      	cmp	r3, #69	; 0x45
 80017f8:	d126      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <commands_from_pi_to_stm+0x468>)
 80017fc:	795b      	ldrb	r3, [r3, #5]
 80017fe:	2b4e      	cmp	r3, #78	; 0x4e
 8001800:	d122      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
			&& rx_buffer[6]=='T' && rx_buffer[7]=='E' && rx_buffer[8]=='R'
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001804:	799b      	ldrb	r3, [r3, #6]
 8001806:	2b54      	cmp	r3, #84	; 0x54
 8001808:	d11e      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800180c:	79db      	ldrb	r3, [r3, #7]
 800180e:	2b45      	cmp	r3, #69	; 0x45
 8001810:	d11a      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001814:	7a1b      	ldrb	r3, [r3, #8]
 8001816:	2b52      	cmp	r3, #82	; 0x52
 8001818:	d116      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
					&&rx_buffer[9]=='M' && rx_buffer[10]=='A' && rx_buffer[11]=='I'
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800181c:	7a5b      	ldrb	r3, [r3, #9]
 800181e:	2b4d      	cmp	r3, #77	; 0x4d
 8001820:	d112      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001824:	7a9b      	ldrb	r3, [r3, #10]
 8001826:	2b41      	cmp	r3, #65	; 0x41
 8001828:	d10e      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800182c:	7adb      	ldrb	r3, [r3, #11]
 800182e:	2b49      	cmp	r3, #73	; 0x49
 8001830:	d10a      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
							&& rx_buffer[12]=='N' && rx_buffer[13]=='T')
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <commands_from_pi_to_stm+0x468>)
 8001834:	7b1b      	ldrb	r3, [r3, #12]
 8001836:	2b4e      	cmp	r3, #78	; 0x4e
 8001838:	d106      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <commands_from_pi_to_stm+0x468>)
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	2b54      	cmp	r3, #84	; 0x54
 8001840:	d102      	bne.n	8001848 <commands_from_pi_to_stm+0x45c>
	{
		BAT_3_MAINTENANCE_FLAG=true;
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <commands_from_pi_to_stm+0x480>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
	}




}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200002d0 	.word	0x200002d0
 8001858:	200000c1 	.word	0x200000c1
 800185c:	200000c0 	.word	0x200000c0
 8001860:	200000dd 	.word	0x200000dd
 8001864:	200000f5 	.word	0x200000f5
 8001868:	200000df 	.word	0x200000df
 800186c:	200000de 	.word	0x200000de

08001870 <gpio_func>:
extern bool bat3charge ;				// Flag to start and stop charging of the battery
extern bool bat3discharge ;				// Flag to start and stop discharging of the battery

void gpio_func()

{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	if(bat1charge==true)
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <gpio_func+0x64>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <gpio_func+0x18>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); //PB12 charge, PB13 discharge
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001882:	4815      	ldr	r0, [pc, #84]	; (80018d8 <gpio_func+0x68>)
 8001884:	f002 ff12 	bl	80046ac <HAL_GPIO_WritePin>
	}

	if(bat1charge==false)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <gpio_func+0x64>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	f083 0301 	eor.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <gpio_func+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	480e      	ldr	r0, [pc, #56]	; (80018d8 <gpio_func+0x68>)
 800189e:	f002 ff05 	bl	80046ac <HAL_GPIO_WritePin>
	}

	if(bat1discharge==true)
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <gpio_func+0x6c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <gpio_func+0x46>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <gpio_func+0x68>)
 80018b2:	f002 fefb 	bl	80046ac <HAL_GPIO_WritePin>
	}

	if(bat1discharge==false)
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <gpio_func+0x6c>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f083 0301 	eor.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <gpio_func+0x60>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ca:	4803      	ldr	r0, [pc, #12]	; (80018d8 <gpio_func+0x68>)
 80018cc:	f002 feee 	bl	80046ac <HAL_GPIO_WritePin>
	}


}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000095 	.word	0x20000095
 80018d8:	40020400 	.word	0x40020400
 80018dc:	20000096 	.word	0x20000096

080018e0 <Read_Bat1_Maint_autotest_result_first_80_percent>:

//uint8_t send_conn[16]={'s','I','N','I','T','I','A','L','I','S','E','C','O','N','N','e'};
uint8_t send_conn[16];
 extern int _write(int file, char *ptr, int len);
void Read_Bat1_Maint_autotest_result_first_80_percent()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0a4      	sub	sp, #144	; 0x90
 80018e4:	af00      	add	r7, sp, #0


	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 80018e6:	230e      	movs	r3, #14
 80018e8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 80018ec:	2309      	movs	r3, #9
 80018ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 80018f2:	2308      	movs	r3, #8
 80018f4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 80018f8:	2316      	movs	r3, #22
 80018fa:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 80018fe:	230f      	movs	r3, #15
 8001900:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 8001904:	2317      	movs	r3, #23
 8001906:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 800190a:	2300      	movs	r3, #0
 800190c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount_auto, 1);
 8001910:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001914:	2301      	movs	r3, #1
 8001916:	2116      	movs	r1, #22
 8001918:	48e1      	ldr	r0, [pc, #900]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 800191a:	f002 ff71 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800191e:	2005      	movs	r0, #5
 8001920:	f002 fb42 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_cyclecount, 2);
 8001924:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001928:	2302      	movs	r3, #2
 800192a:	2116      	movs	r1, #22
 800192c:	48dc      	ldr	r0, [pc, #880]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 800192e:	f002 ffd7 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001932:	2005      	movs	r0, #5
 8001934:	f002 fb38 	bl	8003fa8 <HAL_Delay>
			uint8_t send_cycount[16]={'s','1','M','R','F','8','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D','e'};
 8001938:	2373      	movs	r3, #115	; 0x73
 800193a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800193e:	2331      	movs	r3, #49	; 0x31
 8001940:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001944:	234d      	movs	r3, #77	; 0x4d
 8001946:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800194a:	2352      	movs	r3, #82	; 0x52
 800194c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001950:	2346      	movs	r3, #70	; 0x46
 8001952:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001956:	2338      	movs	r3, #56	; 0x38
 8001958:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 800195c:	2343      	movs	r3, #67	; 0x43
 800195e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001962:	2343      	movs	r3, #67	; 0x43
 8001964:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001968:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800196c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001970:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001974:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001978:	2343      	movs	r3, #67	; 0x43
 800197a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800197e:	2343      	movs	r3, #67	; 0x43
 8001980:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001984:	2345      	movs	r3, #69	; 0x45
 8001986:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800198a:	234e      	movs	r3, #78	; 0x4e
 800198c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8001990:	2344      	movs	r3, #68	; 0x44
 8001992:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001996:	2365      	movs	r3, #101	; 0x65
 8001998:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			HAL_UART_Transmit_IT(&huart2, send_cycount, 16);
 800199c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a0:	2210      	movs	r2, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	48bf      	ldr	r0, [pc, #764]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 80019a6:	f006 fa85 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remaining_capacity_auto, 1);
 80019b0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80019b4:	2301      	movs	r3, #1
 80019b6:	2116      	movs	r1, #22
 80019b8:	48b9      	ldr	r0, [pc, #740]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 80019ba:	f002 ff21 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80019be:	2005      	movs	r0, #5
 80019c0:	f002 faf2 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_remcapacity, 2);
 80019c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019c8:	2302      	movs	r3, #2
 80019ca:	2116      	movs	r1, #22
 80019cc:	48b4      	ldr	r0, [pc, #720]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 80019ce:	f002 ff87 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80019d2:	2005      	movs	r0, #5
 80019d4:	f002 fae8 	bl	8003fa8 <HAL_Delay>
			uint8_t send_remcap[16]={'s','1','M','R','F','8','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D','e'};
 80019d8:	2373      	movs	r3, #115	; 0x73
 80019da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80019de:	2331      	movs	r3, #49	; 0x31
 80019e0:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80019e4:	234d      	movs	r3, #77	; 0x4d
 80019e6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80019ea:	2352      	movs	r3, #82	; 0x52
 80019ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80019f0:	2346      	movs	r3, #70	; 0x46
 80019f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 80019f6:	2338      	movs	r3, #56	; 0x38
 80019f8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80019fc:	2352      	movs	r3, #82	; 0x52
 80019fe:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001a02:	2343      	movs	r3, #67	; 0x43
 8001a04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001a08:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001a0c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001a10:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001a14:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001a18:	2352      	movs	r3, #82	; 0x52
 8001a1a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001a1e:	2343      	movs	r3, #67	; 0x43
 8001a20:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001a24:	2345      	movs	r3, #69	; 0x45
 8001a26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001a2a:	234e      	movs	r3, #78	; 0x4e
 8001a2c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001a30:	2344      	movs	r3, #68	; 0x44
 8001a32:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001a36:	2365      	movs	r3, #101	; 0x65
 8001a38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			HAL_UART_Transmit_IT(&huart2, send_remcap, 16);
 8001a3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a40:	2210      	movs	r2, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	4897      	ldr	r0, [pc, #604]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001a46:	f006 fa35 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc_auto, 1);
 8001a50:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a54:	2301      	movs	r3, #1
 8001a56:	2116      	movs	r1, #22
 8001a58:	4891      	ldr	r0, [pc, #580]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001a5a:	f002 fed1 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001a5e:	2005      	movs	r0, #5
 8001a60:	f002 faa2 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_asoc, 1);
 8001a64:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2116      	movs	r1, #22
 8001a6c:	488c      	ldr	r0, [pc, #560]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001a6e:	f002 ff37 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001a72:	2005      	movs	r0, #5
 8001a74:	f002 fa98 	bl	8003fa8 <HAL_Delay>
			uint8_t send_asoc[16]={'s','1','M','R','F','8','A','S',rx_asoc[0],'A','S','E','E','N','D','e'};
 8001a78:	2373      	movs	r3, #115	; 0x73
 8001a7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001a7e:	2331      	movs	r3, #49	; 0x31
 8001a80:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001a84:	234d      	movs	r3, #77	; 0x4d
 8001a86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001a8a:	2352      	movs	r3, #82	; 0x52
 8001a8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a90:	2346      	movs	r3, #70	; 0x46
 8001a92:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001a96:	2338      	movs	r3, #56	; 0x38
 8001a98:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001a9c:	2341      	movs	r3, #65	; 0x41
 8001a9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001aa2:	2353      	movs	r3, #83	; 0x53
 8001aa4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001aa8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001aac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001ab0:	2341      	movs	r3, #65	; 0x41
 8001ab2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001ab6:	2353      	movs	r3, #83	; 0x53
 8001ab8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001abc:	2345      	movs	r3, #69	; 0x45
 8001abe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ac2:	2345      	movs	r3, #69	; 0x45
 8001ac4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001ac8:	234e      	movs	r3, #78	; 0x4e
 8001aca:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001ace:	2344      	movs	r3, #68	; 0x44
 8001ad0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001ad4:	2365      	movs	r3, #101	; 0x65
 8001ad6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			HAL_UART_Transmit_IT(&huart2, send_asoc, 16);
 8001ada:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ade:	2210      	movs	r2, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4870      	ldr	r0, [pc, #448]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001ae4:	f006 f9e6 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8001ae8:	2300      	movs	r3, #0
 8001aea:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_auto, 1);
 8001aec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001af0:	2301      	movs	r3, #1
 8001af2:	2116      	movs	r1, #22
 8001af4:	486a      	ldr	r0, [pc, #424]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001af6:	f002 fe83 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001afa:	2005      	movs	r0, #5
 8001afc:	f002 fa54 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8001b00:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b04:	2302      	movs	r3, #2
 8001b06:	2116      	movs	r1, #22
 8001b08:	4865      	ldr	r0, [pc, #404]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001b0a:	f002 fee9 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001b0e:	2005      	movs	r0, #5
 8001b10:	f002 fa4a 	bl	8003fa8 <HAL_Delay>
			uint8_t send_voltage[16]={'s','1','M','R','F','8','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D','e'};
 8001b14:	2373      	movs	r3, #115	; 0x73
 8001b16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001b1a:	2331      	movs	r3, #49	; 0x31
 8001b1c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b20:	234d      	movs	r3, #77	; 0x4d
 8001b22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001b26:	2352      	movs	r3, #82	; 0x52
 8001b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001b2c:	2346      	movs	r3, #70	; 0x46
 8001b2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001b32:	2338      	movs	r3, #56	; 0x38
 8001b34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001b38:	2356      	movs	r3, #86	; 0x56
 8001b3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001b3e:	2354      	movs	r3, #84	; 0x54
 8001b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001b44:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001b48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001b4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001b50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001b54:	2356      	movs	r3, #86	; 0x56
 8001b56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001b5a:	2354      	movs	r3, #84	; 0x54
 8001b5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001b60:	2345      	movs	r3, #69	; 0x45
 8001b62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001b66:	234e      	movs	r3, #78	; 0x4e
 8001b68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001b6c:	2344      	movs	r3, #68	; 0x44
 8001b6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001b72:	2365      	movs	r3, #101	; 0x65
 8001b74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			HAL_UART_Transmit_IT(&huart2, send_voltage, 16);
 8001b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b7c:	2210      	movs	r2, #16
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4848      	ldr	r0, [pc, #288]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001b82:	f006 f997 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8001b86:	2300      	movs	r3, #0
 8001b88:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temperature_auto, 1);
 8001b8a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b8e:	2301      	movs	r3, #1
 8001b90:	2116      	movs	r1, #22
 8001b92:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001b94:	f002 fe34 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001b98:	2005      	movs	r0, #5
 8001b9a:	f002 fa05 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_temperature, 2);
 8001b9e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	2116      	movs	r1, #22
 8001ba6:	483e      	ldr	r0, [pc, #248]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001ba8:	f002 fe9a 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001bac:	2005      	movs	r0, #5
 8001bae:	f002 f9fb 	bl	8003fa8 <HAL_Delay>
			uint8_t send_temp[16]={'s','1','M','R','F','8','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D','e'};
 8001bb2:	2373      	movs	r3, #115	; 0x73
 8001bb4:	753b      	strb	r3, [r7, #20]
 8001bb6:	2331      	movs	r3, #49	; 0x31
 8001bb8:	757b      	strb	r3, [r7, #21]
 8001bba:	234d      	movs	r3, #77	; 0x4d
 8001bbc:	75bb      	strb	r3, [r7, #22]
 8001bbe:	2352      	movs	r3, #82	; 0x52
 8001bc0:	75fb      	strb	r3, [r7, #23]
 8001bc2:	2346      	movs	r3, #70	; 0x46
 8001bc4:	763b      	strb	r3, [r7, #24]
 8001bc6:	2338      	movs	r3, #56	; 0x38
 8001bc8:	767b      	strb	r3, [r7, #25]
 8001bca:	2354      	movs	r3, #84	; 0x54
 8001bcc:	76bb      	strb	r3, [r7, #26]
 8001bce:	2350      	movs	r3, #80	; 0x50
 8001bd0:	76fb      	strb	r3, [r7, #27]
 8001bd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bd6:	773b      	strb	r3, [r7, #28]
 8001bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bdc:	777b      	strb	r3, [r7, #29]
 8001bde:	2354      	movs	r3, #84	; 0x54
 8001be0:	77bb      	strb	r3, [r7, #30]
 8001be2:	2350      	movs	r3, #80	; 0x50
 8001be4:	77fb      	strb	r3, [r7, #31]
 8001be6:	2345      	movs	r3, #69	; 0x45
 8001be8:	f887 3020 	strb.w	r3, [r7, #32]
 8001bec:	234e      	movs	r3, #78	; 0x4e
 8001bee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001bf2:	2344      	movs	r3, #68	; 0x44
 8001bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001bf8:	2365      	movs	r3, #101	; 0x65
 8001bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_UART_Transmit_IT(&huart2, send_temp, 16);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2210      	movs	r2, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001c08:	f006 f954 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_battery_status_auto, 1);
 8001c10:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001c14:	2301      	movs	r3, #1
 8001c16:	2116      	movs	r1, #22
 8001c18:	4821      	ldr	r0, [pc, #132]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001c1a:	f002 fdf1 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001c1e:	2005      	movs	r0, #5
 8001c20:	f002 f9c2 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 8001c24:	f107 0210 	add.w	r2, r7, #16
 8001c28:	2302      	movs	r3, #2
 8001c2a:	2116      	movs	r1, #22
 8001c2c:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c0>)
 8001c2e:	f002 fe57 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f002 f9b8 	bl	8003fa8 <HAL_Delay>
			uint8_t send_battery_status[16]={'s','1','M','R','F','8','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D','e'};
 8001c38:	2373      	movs	r3, #115	; 0x73
 8001c3a:	703b      	strb	r3, [r7, #0]
 8001c3c:	2331      	movs	r3, #49	; 0x31
 8001c3e:	707b      	strb	r3, [r7, #1]
 8001c40:	234d      	movs	r3, #77	; 0x4d
 8001c42:	70bb      	strb	r3, [r7, #2]
 8001c44:	2352      	movs	r3, #82	; 0x52
 8001c46:	70fb      	strb	r3, [r7, #3]
 8001c48:	2346      	movs	r3, #70	; 0x46
 8001c4a:	713b      	strb	r3, [r7, #4]
 8001c4c:	2338      	movs	r3, #56	; 0x38
 8001c4e:	717b      	strb	r3, [r7, #5]
 8001c50:	2342      	movs	r3, #66	; 0x42
 8001c52:	71bb      	strb	r3, [r7, #6]
 8001c54:	2353      	movs	r3, #83	; 0x53
 8001c56:	71fb      	strb	r3, [r7, #7]
 8001c58:	7c7b      	ldrb	r3, [r7, #17]
 8001c5a:	723b      	strb	r3, [r7, #8]
 8001c5c:	7c3b      	ldrb	r3, [r7, #16]
 8001c5e:	727b      	strb	r3, [r7, #9]
 8001c60:	2342      	movs	r3, #66	; 0x42
 8001c62:	72bb      	strb	r3, [r7, #10]
 8001c64:	2353      	movs	r3, #83	; 0x53
 8001c66:	72fb      	strb	r3, [r7, #11]
 8001c68:	2345      	movs	r3, #69	; 0x45
 8001c6a:	733b      	strb	r3, [r7, #12]
 8001c6c:	234e      	movs	r3, #78	; 0x4e
 8001c6e:	737b      	strb	r3, [r7, #13]
 8001c70:	2344      	movs	r3, #68	; 0x44
 8001c72:	73bb      	strb	r3, [r7, #14]
 8001c74:	2365      	movs	r3, #101	; 0x65
 8001c76:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001c80:	f006 f918 	bl	8007eb4 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f002 f98f 	bl	8003fa8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);  // Transmitted 2 times because data was not
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <Read_Bat1_Maint_autotest_result_first_80_percent+0x3c4>)
 8001c92:	f006 f90f 	bl	8007eb4 <HAL_UART_Transmit_IT>





}
 8001c96:	bf00      	nop
 8001c98:	3790      	adds	r7, #144	; 0x90
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200001e4 	.word	0x200001e4
 8001ca4:	20000330 	.word	0x20000330

08001ca8 <Read_Bat1_Maint_autotest_result_middle_10_percent>:




void Read_Bat1_Maint_autotest_result_middle_10_percent()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0a4      	sub	sp, #144	; 0x90
 8001cac:	af00      	add	r7, sp, #0

	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 8001cae:	230e      	movs	r3, #14
 8001cb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 8001cb4:	2309      	movs	r3, #9
 8001cb6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 8001cba:	2308      	movs	r3, #8
 8001cbc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 8001cc0:	2316      	movs	r3, #22
 8001cc2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 8001ccc:	2317      	movs	r3, #23
 8001cce:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount_auto, 1);
 8001cd8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001cdc:	2301      	movs	r3, #1
 8001cde:	2116      	movs	r1, #22
 8001ce0:	48e1      	ldr	r0, [pc, #900]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001ce2:	f002 fd8d 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001ce6:	2005      	movs	r0, #5
 8001ce8:	f002 f95e 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_cyclecount, 2);
 8001cec:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	2116      	movs	r1, #22
 8001cf4:	48dc      	ldr	r0, [pc, #880]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001cf6:	f002 fdf3 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f002 f954 	bl	8003fa8 <HAL_Delay>
			uint8_t send_cycount[16]={'s','1','M','R','M','1','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D','e'};
 8001d00:	2373      	movs	r3, #115	; 0x73
 8001d02:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001d06:	2331      	movs	r3, #49	; 0x31
 8001d08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001d0c:	234d      	movs	r3, #77	; 0x4d
 8001d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001d12:	2352      	movs	r3, #82	; 0x52
 8001d14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d18:	234d      	movs	r3, #77	; 0x4d
 8001d1a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001d1e:	2331      	movs	r3, #49	; 0x31
 8001d20:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001d24:	2343      	movs	r3, #67	; 0x43
 8001d26:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001d2a:	2343      	movs	r3, #67	; 0x43
 8001d2c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001d30:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001d34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001d38:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d3c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001d40:	2343      	movs	r3, #67	; 0x43
 8001d42:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001d46:	2343      	movs	r3, #67	; 0x43
 8001d48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d4c:	2345      	movs	r3, #69	; 0x45
 8001d4e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8001d52:	234e      	movs	r3, #78	; 0x4e
 8001d54:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8001d58:	2344      	movs	r3, #68	; 0x44
 8001d5a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8001d5e:	2365      	movs	r3, #101	; 0x65
 8001d60:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			HAL_UART_Transmit_IT(&huart2, send_cycount, 16);
 8001d64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d68:	2210      	movs	r2, #16
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	48bf      	ldr	r0, [pc, #764]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8001d6e:	f006 f8a1 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remaining_capacity_auto, 1);
 8001d78:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	2116      	movs	r1, #22
 8001d80:	48b9      	ldr	r0, [pc, #740]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001d82:	f002 fd3d 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001d86:	2005      	movs	r0, #5
 8001d88:	f002 f90e 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_remcapacity, 2);
 8001d8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d90:	2302      	movs	r3, #2
 8001d92:	2116      	movs	r1, #22
 8001d94:	48b4      	ldr	r0, [pc, #720]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001d96:	f002 fda3 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f002 f904 	bl	8003fa8 <HAL_Delay>
			uint8_t send_remcap[16]={'s','1','M','R','M','1','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D','e'};
 8001da0:	2373      	movs	r3, #115	; 0x73
 8001da2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001da6:	2331      	movs	r3, #49	; 0x31
 8001da8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001dac:	234d      	movs	r3, #77	; 0x4d
 8001dae:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001db2:	2352      	movs	r3, #82	; 0x52
 8001db4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8001db8:	234d      	movs	r3, #77	; 0x4d
 8001dba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001dbe:	2331      	movs	r3, #49	; 0x31
 8001dc0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001dc4:	2352      	movs	r3, #82	; 0x52
 8001dc6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8001dca:	2343      	movs	r3, #67	; 0x43
 8001dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001dd0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001dd4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001dd8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001ddc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001de0:	2352      	movs	r3, #82	; 0x52
 8001de2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001de6:	2343      	movs	r3, #67	; 0x43
 8001de8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001dec:	2345      	movs	r3, #69	; 0x45
 8001dee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001df2:	234e      	movs	r3, #78	; 0x4e
 8001df4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001df8:	2344      	movs	r3, #68	; 0x44
 8001dfa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001dfe:	2365      	movs	r3, #101	; 0x65
 8001e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			HAL_UART_Transmit_IT(&huart2, send_remcap, 16);
 8001e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e08:	2210      	movs	r2, #16
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4897      	ldr	r0, [pc, #604]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8001e0e:	f006 f851 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc_auto, 1);
 8001e18:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	2116      	movs	r1, #22
 8001e20:	4891      	ldr	r0, [pc, #580]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001e22:	f002 fced 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001e26:	2005      	movs	r0, #5
 8001e28:	f002 f8be 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_asoc, 1);
 8001e2c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001e30:	2301      	movs	r3, #1
 8001e32:	2116      	movs	r1, #22
 8001e34:	488c      	ldr	r0, [pc, #560]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001e36:	f002 fd53 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001e3a:	2005      	movs	r0, #5
 8001e3c:	f002 f8b4 	bl	8003fa8 <HAL_Delay>
			uint8_t send_asoc[16]={'s','1','M','R','M','1','A','S',rx_asoc[0],'A','S','E','E','N','D','e'};
 8001e40:	2373      	movs	r3, #115	; 0x73
 8001e42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001e46:	2331      	movs	r3, #49	; 0x31
 8001e48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001e4c:	234d      	movs	r3, #77	; 0x4d
 8001e4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e52:	2352      	movs	r3, #82	; 0x52
 8001e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001e58:	234d      	movs	r3, #77	; 0x4d
 8001e5a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8001e5e:	2331      	movs	r3, #49	; 0x31
 8001e60:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8001e64:	2341      	movs	r3, #65	; 0x41
 8001e66:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8001e6a:	2353      	movs	r3, #83	; 0x53
 8001e6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001e70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e74:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001e78:	2341      	movs	r3, #65	; 0x41
 8001e7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8001e7e:	2353      	movs	r3, #83	; 0x53
 8001e80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001e84:	2345      	movs	r3, #69	; 0x45
 8001e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e8a:	2345      	movs	r3, #69	; 0x45
 8001e8c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8001e90:	234e      	movs	r3, #78	; 0x4e
 8001e92:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8001e96:	2344      	movs	r3, #68	; 0x44
 8001e98:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8001e9c:	2365      	movs	r3, #101	; 0x65
 8001e9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			HAL_UART_Transmit_IT(&huart2, send_asoc, 16);
 8001ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4870      	ldr	r0, [pc, #448]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8001eac:	f006 f802 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_auto, 1);
 8001eb4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eb8:	2301      	movs	r3, #1
 8001eba:	2116      	movs	r1, #22
 8001ebc:	486a      	ldr	r0, [pc, #424]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001ebe:	f002 fc9f 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001ec2:	2005      	movs	r0, #5
 8001ec4:	f002 f870 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8001ec8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ecc:	2302      	movs	r3, #2
 8001ece:	2116      	movs	r1, #22
 8001ed0:	4865      	ldr	r0, [pc, #404]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001ed2:	f002 fd05 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001ed6:	2005      	movs	r0, #5
 8001ed8:	f002 f866 	bl	8003fa8 <HAL_Delay>
			uint8_t send_voltage[16]={'s','1','M','R','M','1','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D','e'};
 8001edc:	2373      	movs	r3, #115	; 0x73
 8001ede:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001ee2:	2331      	movs	r3, #49	; 0x31
 8001ee4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ee8:	234d      	movs	r3, #77	; 0x4d
 8001eea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001eee:	2352      	movs	r3, #82	; 0x52
 8001ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ef4:	234d      	movs	r3, #77	; 0x4d
 8001ef6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001efa:	2331      	movs	r3, #49	; 0x31
 8001efc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001f00:	2356      	movs	r3, #86	; 0x56
 8001f02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001f06:	2354      	movs	r3, #84	; 0x54
 8001f08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f0c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001f10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001f14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001f18:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001f1c:	2356      	movs	r3, #86	; 0x56
 8001f1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001f22:	2354      	movs	r3, #84	; 0x54
 8001f24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001f28:	2345      	movs	r3, #69	; 0x45
 8001f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001f2e:	234e      	movs	r3, #78	; 0x4e
 8001f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001f34:	2344      	movs	r3, #68	; 0x44
 8001f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f3a:	2365      	movs	r3, #101	; 0x65
 8001f3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			HAL_UART_Transmit_IT(&huart2, send_voltage, 16);
 8001f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f44:	2210      	movs	r2, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	4848      	ldr	r0, [pc, #288]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8001f4a:	f005 ffb3 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8001f4e:	2300      	movs	r3, #0
 8001f50:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temperature_auto, 1);
 8001f52:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001f56:	2301      	movs	r3, #1
 8001f58:	2116      	movs	r1, #22
 8001f5a:	4843      	ldr	r0, [pc, #268]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001f5c:	f002 fc50 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001f60:	2005      	movs	r0, #5
 8001f62:	f002 f821 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_temperature, 2);
 8001f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	2116      	movs	r1, #22
 8001f6e:	483e      	ldr	r0, [pc, #248]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001f70:	f002 fcb6 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001f74:	2005      	movs	r0, #5
 8001f76:	f002 f817 	bl	8003fa8 <HAL_Delay>
			uint8_t send_temp[16]={'s','1','M','R','M','1','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D','e'};
 8001f7a:	2373      	movs	r3, #115	; 0x73
 8001f7c:	753b      	strb	r3, [r7, #20]
 8001f7e:	2331      	movs	r3, #49	; 0x31
 8001f80:	757b      	strb	r3, [r7, #21]
 8001f82:	234d      	movs	r3, #77	; 0x4d
 8001f84:	75bb      	strb	r3, [r7, #22]
 8001f86:	2352      	movs	r3, #82	; 0x52
 8001f88:	75fb      	strb	r3, [r7, #23]
 8001f8a:	234d      	movs	r3, #77	; 0x4d
 8001f8c:	763b      	strb	r3, [r7, #24]
 8001f8e:	2331      	movs	r3, #49	; 0x31
 8001f90:	767b      	strb	r3, [r7, #25]
 8001f92:	2354      	movs	r3, #84	; 0x54
 8001f94:	76bb      	strb	r3, [r7, #26]
 8001f96:	2350      	movs	r3, #80	; 0x50
 8001f98:	76fb      	strb	r3, [r7, #27]
 8001f9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f9e:	773b      	strb	r3, [r7, #28]
 8001fa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fa4:	777b      	strb	r3, [r7, #29]
 8001fa6:	2354      	movs	r3, #84	; 0x54
 8001fa8:	77bb      	strb	r3, [r7, #30]
 8001faa:	2350      	movs	r3, #80	; 0x50
 8001fac:	77fb      	strb	r3, [r7, #31]
 8001fae:	2345      	movs	r3, #69	; 0x45
 8001fb0:	f887 3020 	strb.w	r3, [r7, #32]
 8001fb4:	234e      	movs	r3, #78	; 0x4e
 8001fb6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001fba:	2344      	movs	r3, #68	; 0x44
 8001fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001fc0:	2365      	movs	r3, #101	; 0x65
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_UART_Transmit_IT(&huart2, send_temp, 16);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	2210      	movs	r2, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4827      	ldr	r0, [pc, #156]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8001fd0:	f005 ff70 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_battery_status_auto, 1);
 8001fd8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2116      	movs	r1, #22
 8001fe0:	4821      	ldr	r0, [pc, #132]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001fe2:	f002 fc0d 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8001fe6:	2005      	movs	r0, #5
 8001fe8:	f001 ffde 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 8001fec:	f107 0210 	add.w	r2, r7, #16
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	2116      	movs	r1, #22
 8001ff4:	481c      	ldr	r0, [pc, #112]	; (8002068 <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c0>)
 8001ff6:	f002 fc73 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8001ffa:	2005      	movs	r0, #5
 8001ffc:	f001 ffd4 	bl	8003fa8 <HAL_Delay>
			uint8_t send_battery_status[16]={'s','1','M','R','M','1','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D','e'};
 8002000:	2373      	movs	r3, #115	; 0x73
 8002002:	703b      	strb	r3, [r7, #0]
 8002004:	2331      	movs	r3, #49	; 0x31
 8002006:	707b      	strb	r3, [r7, #1]
 8002008:	234d      	movs	r3, #77	; 0x4d
 800200a:	70bb      	strb	r3, [r7, #2]
 800200c:	2352      	movs	r3, #82	; 0x52
 800200e:	70fb      	strb	r3, [r7, #3]
 8002010:	234d      	movs	r3, #77	; 0x4d
 8002012:	713b      	strb	r3, [r7, #4]
 8002014:	2331      	movs	r3, #49	; 0x31
 8002016:	717b      	strb	r3, [r7, #5]
 8002018:	2342      	movs	r3, #66	; 0x42
 800201a:	71bb      	strb	r3, [r7, #6]
 800201c:	2353      	movs	r3, #83	; 0x53
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	7c7b      	ldrb	r3, [r7, #17]
 8002022:	723b      	strb	r3, [r7, #8]
 8002024:	7c3b      	ldrb	r3, [r7, #16]
 8002026:	727b      	strb	r3, [r7, #9]
 8002028:	2342      	movs	r3, #66	; 0x42
 800202a:	72bb      	strb	r3, [r7, #10]
 800202c:	2353      	movs	r3, #83	; 0x53
 800202e:	72fb      	strb	r3, [r7, #11]
 8002030:	2345      	movs	r3, #69	; 0x45
 8002032:	733b      	strb	r3, [r7, #12]
 8002034:	234e      	movs	r3, #78	; 0x4e
 8002036:	737b      	strb	r3, [r7, #13]
 8002038:	2344      	movs	r3, #68	; 0x44
 800203a:	73bb      	strb	r3, [r7, #14]
 800203c:	2365      	movs	r3, #101	; 0x65
 800203e:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);
 8002040:	463b      	mov	r3, r7
 8002042:	2210      	movs	r2, #16
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 8002048:	f005 ff34 	bl	8007eb4 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 800204c:	2001      	movs	r0, #1
 800204e:	f001 ffab 	bl	8003fa8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);  // Transmitted 2 times because data was not
 8002052:	463b      	mov	r3, r7
 8002054:	2210      	movs	r2, #16
 8002056:	4619      	mov	r1, r3
 8002058:	4804      	ldr	r0, [pc, #16]	; (800206c <Read_Bat1_Maint_autotest_result_middle_10_percent+0x3c4>)
 800205a:	f005 ff2b 	bl	8007eb4 <HAL_UART_Transmit_IT>
																	 // received correctly first time


}
 800205e:	bf00      	nop
 8002060:	3790      	adds	r7, #144	; 0x90
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200001e4 	.word	0x200001e4
 800206c:	20000330 	.word	0x20000330

08002070 <Read_Bat1_Maint_autotest_result_last_80_percent>:




void Read_Bat1_Maint_autotest_result_last_80_percent()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0a4      	sub	sp, #144	; 0x90
 8002074:	af00      	add	r7, sp, #0


	uint8_t tx_asoc_auto[1] ={0x0E}; 					// 0x0E   Command to get ASOC of the battery
 8002076:	230e      	movs	r3, #14
 8002078:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	 uint8_t tx_voltage_auto[1] = {0x09};				// 0x09   Command to get battery voltage
 800207c:	2309      	movs	r3, #9
 800207e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	 uint8_t tx_temperature_auto[1]={0x08};			        // 0x08
 8002082:	2308      	movs	r3, #8
 8002084:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	 uint8_t tx_battery_status_auto[1]={0x16};		            // 0x16
 8002088:	2316      	movs	r3, #22
 800208a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	 uint8_t tx_remaining_capacity_auto[1]={0x0F};	             // 0x0F
 800208e:	230f      	movs	r3, #15
 8002090:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
	 uint8_t tx_cyclecount_auto[1]={0x17};			         // 0x17
 8002094:	2317      	movs	r3, #23
 8002096:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

//
//
//			// Cycle Count
//
			uint8_t rx_cyclecount[2]={0x00,0x00};
 800209a:	2300      	movs	r3, #0
 800209c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_cyclecount_auto, 1);
 80020a0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80020a4:	2301      	movs	r3, #1
 80020a6:	2116      	movs	r1, #22
 80020a8:	48e1      	ldr	r0, [pc, #900]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80020aa:	f002 fba9 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80020ae:	2005      	movs	r0, #5
 80020b0:	f001 ff7a 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_cyclecount, 2);
 80020b4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80020b8:	2302      	movs	r3, #2
 80020ba:	2116      	movs	r1, #22
 80020bc:	48dc      	ldr	r0, [pc, #880]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80020be:	f002 fc0f 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80020c2:	2005      	movs	r0, #5
 80020c4:	f001 ff70 	bl	8003fa8 <HAL_Delay>
			uint8_t send_cycount[16]={'s','1','M','R','L','8','C','C',rx_cyclecount[1],rx_cyclecount[0],'C','C','E','N','D','e'};
 80020c8:	2373      	movs	r3, #115	; 0x73
 80020ca:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80020ce:	2331      	movs	r3, #49	; 0x31
 80020d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80020d4:	234d      	movs	r3, #77	; 0x4d
 80020d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80020da:	2352      	movs	r3, #82	; 0x52
 80020dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020e0:	234c      	movs	r3, #76	; 0x4c
 80020e2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80020e6:	2338      	movs	r3, #56	; 0x38
 80020e8:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80020ec:	2343      	movs	r3, #67	; 0x43
 80020ee:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 80020f2:	2343      	movs	r3, #67	; 0x43
 80020f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80020f8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80020fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8002100:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002104:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8002108:	2343      	movs	r3, #67	; 0x43
 800210a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800210e:	2343      	movs	r3, #67	; 0x43
 8002110:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002114:	2345      	movs	r3, #69	; 0x45
 8002116:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800211a:	234e      	movs	r3, #78	; 0x4e
 800211c:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 8002120:	2344      	movs	r3, #68	; 0x44
 8002122:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8002126:	2365      	movs	r3, #101	; 0x65
 8002128:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			HAL_UART_Transmit_IT(&huart2, send_cycount, 16);
 800212c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002130:	2210      	movs	r2, #16
 8002132:	4619      	mov	r1, r3
 8002134:	48bf      	ldr	r0, [pc, #764]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002136:	f005 febd 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Cycle Count
//
//			// Remaining Capacity
//
			uint8_t rx_remcapacity[2]={0x00,0x00};
 800213a:	2300      	movs	r3, #0
 800213c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_remaining_capacity_auto, 1);
 8002140:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8002144:	2301      	movs	r3, #1
 8002146:	2116      	movs	r1, #22
 8002148:	48b9      	ldr	r0, [pc, #740]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 800214a:	f002 fb59 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800214e:	2005      	movs	r0, #5
 8002150:	f001 ff2a 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_remcapacity, 2);
 8002154:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002158:	2302      	movs	r3, #2
 800215a:	2116      	movs	r1, #22
 800215c:	48b4      	ldr	r0, [pc, #720]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 800215e:	f002 fbbf 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8002162:	2005      	movs	r0, #5
 8002164:	f001 ff20 	bl	8003fa8 <HAL_Delay>
			uint8_t send_remcap[16]={'s','1','M','R','L','8','R','C',rx_remcapacity[1],rx_remcapacity[0],'R','C','E','N','D','e'};
 8002168:	2373      	movs	r3, #115	; 0x73
 800216a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800216e:	2331      	movs	r3, #49	; 0x31
 8002170:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8002174:	234d      	movs	r3, #77	; 0x4d
 8002176:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800217a:	2352      	movs	r3, #82	; 0x52
 800217c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002180:	234c      	movs	r3, #76	; 0x4c
 8002182:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8002186:	2338      	movs	r3, #56	; 0x38
 8002188:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800218c:	2352      	movs	r3, #82	; 0x52
 800218e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002192:	2343      	movs	r3, #67	; 0x43
 8002194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002198:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800219c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80021a0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80021a4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 80021a8:	2352      	movs	r3, #82	; 0x52
 80021aa:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80021ae:	2343      	movs	r3, #67	; 0x43
 80021b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80021b4:	2345      	movs	r3, #69	; 0x45
 80021b6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 80021ba:	234e      	movs	r3, #78	; 0x4e
 80021bc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80021c0:	2344      	movs	r3, #68	; 0x44
 80021c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80021c6:	2365      	movs	r3, #101	; 0x65
 80021c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			HAL_UART_Transmit_IT(&huart2, send_remcap, 16);
 80021cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021d0:	2210      	movs	r2, #16
 80021d2:	4619      	mov	r1, r3
 80021d4:	4897      	ldr	r0, [pc, #604]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 80021d6:	f005 fe6d 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//
//			// Remaining Capacity
//
//			// ASOC
			uint8_t rx_asoc[1]={0x00};
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc_auto, 1);
 80021e0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80021e4:	2301      	movs	r3, #1
 80021e6:	2116      	movs	r1, #22
 80021e8:	4891      	ldr	r0, [pc, #580]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80021ea:	f002 fb09 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80021ee:	2005      	movs	r0, #5
 80021f0:	f001 feda 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_asoc, 1);
 80021f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80021f8:	2301      	movs	r3, #1
 80021fa:	2116      	movs	r1, #22
 80021fc:	488c      	ldr	r0, [pc, #560]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80021fe:	f002 fb6f 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 8002202:	2005      	movs	r0, #5
 8002204:	f001 fed0 	bl	8003fa8 <HAL_Delay>
			uint8_t send_asoc[16]={'s','1','M','R','L','8','A','S',rx_asoc[0],'A','S','E','E','N','D','e'};
 8002208:	2373      	movs	r3, #115	; 0x73
 800220a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800220e:	2331      	movs	r3, #49	; 0x31
 8002210:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002214:	234d      	movs	r3, #77	; 0x4d
 8002216:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800221a:	2352      	movs	r3, #82	; 0x52
 800221c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002220:	234c      	movs	r3, #76	; 0x4c
 8002222:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8002226:	2338      	movs	r3, #56	; 0x38
 8002228:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800222c:	2341      	movs	r3, #65	; 0x41
 800222e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8002232:	2353      	movs	r3, #83	; 0x53
 8002234:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002238:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800223c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002240:	2341      	movs	r3, #65	; 0x41
 8002242:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002246:	2353      	movs	r3, #83	; 0x53
 8002248:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800224c:	2345      	movs	r3, #69	; 0x45
 800224e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002252:	2345      	movs	r3, #69	; 0x45
 8002254:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8002258:	234e      	movs	r3, #78	; 0x4e
 800225a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800225e:	2344      	movs	r3, #68	; 0x44
 8002260:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8002264:	2365      	movs	r3, #101	; 0x65
 8002266:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			HAL_UART_Transmit_IT(&huart2, send_asoc, 16);
 800226a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800226e:	2210      	movs	r2, #16
 8002270:	4619      	mov	r1, r3
 8002272:	4870      	ldr	r0, [pc, #448]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002274:	f005 fe1e 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// ASOC

			// Voltage

			uint8_t rx_voltage[2]={0x00,0x00};
 8002278:	2300      	movs	r3, #0
 800227a:	873b      	strh	r3, [r7, #56]	; 0x38
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_auto, 1);
 800227c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002280:	2301      	movs	r3, #1
 8002282:	2116      	movs	r1, #22
 8002284:	486a      	ldr	r0, [pc, #424]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 8002286:	f002 fabb 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 800228a:	2005      	movs	r0, #5
 800228c:	f001 fe8c 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8002290:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002294:	2302      	movs	r3, #2
 8002296:	2116      	movs	r1, #22
 8002298:	4865      	ldr	r0, [pc, #404]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 800229a:	f002 fb21 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 800229e:	2005      	movs	r0, #5
 80022a0:	f001 fe82 	bl	8003fa8 <HAL_Delay>
			uint8_t send_voltage[16]={'s','1','M','R','L','8','V','T',rx_voltage[1],rx_voltage[0],'V','T','E','N','D','e'};
 80022a4:	2373      	movs	r3, #115	; 0x73
 80022a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80022aa:	2331      	movs	r3, #49	; 0x31
 80022ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80022b0:	234d      	movs	r3, #77	; 0x4d
 80022b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80022b6:	2352      	movs	r3, #82	; 0x52
 80022b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022bc:	234c      	movs	r3, #76	; 0x4c
 80022be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80022c2:	2338      	movs	r3, #56	; 0x38
 80022c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80022c8:	2356      	movs	r3, #86	; 0x56
 80022ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80022ce:	2354      	movs	r3, #84	; 0x54
 80022d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80022d4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80022d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80022dc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80022e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80022e4:	2356      	movs	r3, #86	; 0x56
 80022e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80022ea:	2354      	movs	r3, #84	; 0x54
 80022ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80022f0:	2345      	movs	r3, #69	; 0x45
 80022f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022f6:	234e      	movs	r3, #78	; 0x4e
 80022f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022fc:	2344      	movs	r3, #68	; 0x44
 80022fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002302:	2365      	movs	r3, #101	; 0x65
 8002304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			HAL_UART_Transmit_IT(&huart2, send_voltage, 16);
 8002308:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230c:	2210      	movs	r2, #16
 800230e:	4619      	mov	r1, r3
 8002310:	4848      	ldr	r0, [pc, #288]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002312:	f005 fdcf 	bl	8007eb4 <HAL_UART_Transmit_IT>

			// Voltage

			// Temperature

			uint8_t	rx_temperature[2]={0x00,0x00};
 8002316:	2300      	movs	r3, #0
 8002318:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_temperature_auto, 1);
 800231a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800231e:	2301      	movs	r3, #1
 8002320:	2116      	movs	r1, #22
 8002322:	4843      	ldr	r0, [pc, #268]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 8002324:	f002 fa6c 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 8002328:	2005      	movs	r0, #5
 800232a:	f001 fe3d 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_temperature, 2);
 800232e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002332:	2302      	movs	r3, #2
 8002334:	2116      	movs	r1, #22
 8002336:	483e      	ldr	r0, [pc, #248]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 8002338:	f002 fad2 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 800233c:	2005      	movs	r0, #5
 800233e:	f001 fe33 	bl	8003fa8 <HAL_Delay>
			uint8_t send_temp[16]={'s','1','M','R','L','8','T','P',rx_temperature[1],rx_temperature[0],'T','P','E','N','D','e'};
 8002342:	2373      	movs	r3, #115	; 0x73
 8002344:	753b      	strb	r3, [r7, #20]
 8002346:	2331      	movs	r3, #49	; 0x31
 8002348:	757b      	strb	r3, [r7, #21]
 800234a:	234d      	movs	r3, #77	; 0x4d
 800234c:	75bb      	strb	r3, [r7, #22]
 800234e:	2352      	movs	r3, #82	; 0x52
 8002350:	75fb      	strb	r3, [r7, #23]
 8002352:	234c      	movs	r3, #76	; 0x4c
 8002354:	763b      	strb	r3, [r7, #24]
 8002356:	2338      	movs	r3, #56	; 0x38
 8002358:	767b      	strb	r3, [r7, #25]
 800235a:	2354      	movs	r3, #84	; 0x54
 800235c:	76bb      	strb	r3, [r7, #26]
 800235e:	2350      	movs	r3, #80	; 0x50
 8002360:	76fb      	strb	r3, [r7, #27]
 8002362:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002366:	773b      	strb	r3, [r7, #28]
 8002368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800236c:	777b      	strb	r3, [r7, #29]
 800236e:	2354      	movs	r3, #84	; 0x54
 8002370:	77bb      	strb	r3, [r7, #30]
 8002372:	2350      	movs	r3, #80	; 0x50
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	2345      	movs	r3, #69	; 0x45
 8002378:	f887 3020 	strb.w	r3, [r7, #32]
 800237c:	234e      	movs	r3, #78	; 0x4e
 800237e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002382:	2344      	movs	r3, #68	; 0x44
 8002384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002388:	2365      	movs	r3, #101	; 0x65
 800238a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			HAL_UART_Transmit_IT(&huart2, send_temp, 16);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	2210      	movs	r2, #16
 8002394:	4619      	mov	r1, r3
 8002396:	4827      	ldr	r0, [pc, #156]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002398:	f005 fd8c 	bl	8007eb4 <HAL_UART_Transmit_IT>
//
//			// Temperature
//
//			//Add battery status
//
			uint8_t rx_batstatus[2]={0x00,0x00};
 800239c:	2300      	movs	r3, #0
 800239e:	823b      	strh	r3, [r7, #16]
			HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_battery_status_auto, 1);
 80023a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023a4:	2301      	movs	r3, #1
 80023a6:	2116      	movs	r1, #22
 80023a8:	4821      	ldr	r0, [pc, #132]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80023aa:	f002 fa29 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
			HAL_Delay(5);
 80023ae:	2005      	movs	r0, #5
 80023b0:	f001 fdfa 	bl	8003fa8 <HAL_Delay>
			HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 80023b4:	f107 0210 	add.w	r2, r7, #16
 80023b8:	2302      	movs	r3, #2
 80023ba:	2116      	movs	r1, #22
 80023bc:	481c      	ldr	r0, [pc, #112]	; (8002430 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c0>)
 80023be:	f002 fa8f 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
			HAL_Delay(5);
 80023c2:	2005      	movs	r0, #5
 80023c4:	f001 fdf0 	bl	8003fa8 <HAL_Delay>
			uint8_t send_battery_status[16]={'s','1','M','R','L','8','B','S',rx_batstatus[1],rx_batstatus[0],'B','S','E','N','D','e'};
 80023c8:	2373      	movs	r3, #115	; 0x73
 80023ca:	703b      	strb	r3, [r7, #0]
 80023cc:	2331      	movs	r3, #49	; 0x31
 80023ce:	707b      	strb	r3, [r7, #1]
 80023d0:	234d      	movs	r3, #77	; 0x4d
 80023d2:	70bb      	strb	r3, [r7, #2]
 80023d4:	2352      	movs	r3, #82	; 0x52
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	234c      	movs	r3, #76	; 0x4c
 80023da:	713b      	strb	r3, [r7, #4]
 80023dc:	2338      	movs	r3, #56	; 0x38
 80023de:	717b      	strb	r3, [r7, #5]
 80023e0:	2342      	movs	r3, #66	; 0x42
 80023e2:	71bb      	strb	r3, [r7, #6]
 80023e4:	2353      	movs	r3, #83	; 0x53
 80023e6:	71fb      	strb	r3, [r7, #7]
 80023e8:	7c7b      	ldrb	r3, [r7, #17]
 80023ea:	723b      	strb	r3, [r7, #8]
 80023ec:	7c3b      	ldrb	r3, [r7, #16]
 80023ee:	727b      	strb	r3, [r7, #9]
 80023f0:	2342      	movs	r3, #66	; 0x42
 80023f2:	72bb      	strb	r3, [r7, #10]
 80023f4:	2353      	movs	r3, #83	; 0x53
 80023f6:	72fb      	strb	r3, [r7, #11]
 80023f8:	2345      	movs	r3, #69	; 0x45
 80023fa:	733b      	strb	r3, [r7, #12]
 80023fc:	234e      	movs	r3, #78	; 0x4e
 80023fe:	737b      	strb	r3, [r7, #13]
 8002400:	2344      	movs	r3, #68	; 0x44
 8002402:	73bb      	strb	r3, [r7, #14]
 8002404:	2365      	movs	r3, #101	; 0x65
 8002406:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);
 8002408:	463b      	mov	r3, r7
 800240a:	2210      	movs	r2, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4809      	ldr	r0, [pc, #36]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002410:	f005 fd50 	bl	8007eb4 <HAL_UART_Transmit_IT>
			HAL_Delay(1);
 8002414:	2001      	movs	r0, #1
 8002416:	f001 fdc7 	bl	8003fa8 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart2, send_battery_status, 16);  // Transmitted 2 times because data was not
 800241a:	463b      	mov	r3, r7
 800241c:	2210      	movs	r2, #16
 800241e:	4619      	mov	r1, r3
 8002420:	4804      	ldr	r0, [pc, #16]	; (8002434 <Read_Bat1_Maint_autotest_result_last_80_percent+0x3c4>)
 8002422:	f005 fd47 	bl	8007eb4 <HAL_UART_Transmit_IT>





}
 8002426:	bf00      	nop
 8002428:	3790      	adds	r7, #144	; 0x90
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200001e4 	.word	0x200001e4
 8002434:	20000330 	.word	0x20000330

08002438 <connect_to_Pi>:

// This is a workaround which works, but not an ideal solution. When an effective solution to this
// problem is found, this function connect_to_Pi() can be deleted from the STM32 program.

void connect_to_Pi()
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
if(connect_flag==true)
 800243e:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <connect_to_Pi+0xac>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d04a      	beq.n	80024dc <connect_to_Pi+0xa4>
{
	uint8_t tx_voltage_auto[1]={0x09};
 8002446:	2309      	movs	r3, #9
 8002448:	713b      	strb	r3, [r7, #4]
	uint8_t rx_voltage[2]={0x00,0x00};
 800244a:	2300      	movs	r3, #0
 800244c:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage_auto, 1);
 800244e:	1d3a      	adds	r2, r7, #4
 8002450:	2301      	movs	r3, #1
 8002452:	2116      	movs	r1, #22
 8002454:	4824      	ldr	r0, [pc, #144]	; (80024e8 <connect_to_Pi+0xb0>)
 8002456:	f002 f9d3 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 800245a:	2005      	movs	r0, #5
 800245c:	f001 fda4 	bl	8003fa8 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_voltage, 2);
 8002460:	463a      	mov	r2, r7
 8002462:	2302      	movs	r3, #2
 8002464:	2116      	movs	r1, #22
 8002466:	4820      	ldr	r0, [pc, #128]	; (80024e8 <connect_to_Pi+0xb0>)
 8002468:	f002 fa3a 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 800246c:	2005      	movs	r0, #5
 800246e:	f001 fd9b 	bl	8003fa8 <HAL_Delay>
//	uint8_t send_conn[16]={'s','I','N','I','T','I','A','L','I','S','E','C','O','N','N','e'};

	send_conn[0]='s';
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <connect_to_Pi+0xb4>)
 8002474:	2273      	movs	r2, #115	; 0x73
 8002476:	701a      	strb	r2, [r3, #0]
	send_conn[1]='I';
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <connect_to_Pi+0xb4>)
 800247a:	2249      	movs	r2, #73	; 0x49
 800247c:	705a      	strb	r2, [r3, #1]
	send_conn[2]='N';
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <connect_to_Pi+0xb4>)
 8002480:	224e      	movs	r2, #78	; 0x4e
 8002482:	709a      	strb	r2, [r3, #2]
	send_conn[3]='I';
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <connect_to_Pi+0xb4>)
 8002486:	2249      	movs	r2, #73	; 0x49
 8002488:	70da      	strb	r2, [r3, #3]
	send_conn[4]='T';
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <connect_to_Pi+0xb4>)
 800248c:	2254      	movs	r2, #84	; 0x54
 800248e:	711a      	strb	r2, [r3, #4]
	send_conn[5]='I';
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <connect_to_Pi+0xb4>)
 8002492:	2249      	movs	r2, #73	; 0x49
 8002494:	715a      	strb	r2, [r3, #5]
	send_conn[6]='A';
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <connect_to_Pi+0xb4>)
 8002498:	2241      	movs	r2, #65	; 0x41
 800249a:	719a      	strb	r2, [r3, #6]
	send_conn[7]='L';
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <connect_to_Pi+0xb4>)
 800249e:	224c      	movs	r2, #76	; 0x4c
 80024a0:	71da      	strb	r2, [r3, #7]
	send_conn[8]='I';
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <connect_to_Pi+0xb4>)
 80024a4:	2249      	movs	r2, #73	; 0x49
 80024a6:	721a      	strb	r2, [r3, #8]
	send_conn[9]='S';
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <connect_to_Pi+0xb4>)
 80024aa:	2253      	movs	r2, #83	; 0x53
 80024ac:	725a      	strb	r2, [r3, #9]
	send_conn[10]='E';
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <connect_to_Pi+0xb4>)
 80024b0:	2245      	movs	r2, #69	; 0x45
 80024b2:	729a      	strb	r2, [r3, #10]
	send_conn[11]='C';
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <connect_to_Pi+0xb4>)
 80024b6:	2243      	movs	r2, #67	; 0x43
 80024b8:	72da      	strb	r2, [r3, #11]
	send_conn[12]='O';
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <connect_to_Pi+0xb4>)
 80024bc:	224f      	movs	r2, #79	; 0x4f
 80024be:	731a      	strb	r2, [r3, #12]
	send_conn[13]='N';
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <connect_to_Pi+0xb4>)
 80024c2:	224e      	movs	r2, #78	; 0x4e
 80024c4:	735a      	strb	r2, [r3, #13]
	send_conn[14]='N';
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <connect_to_Pi+0xb4>)
 80024c8:	224e      	movs	r2, #78	; 0x4e
 80024ca:	739a      	strb	r2, [r3, #14]
	send_conn[15]='e';
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <connect_to_Pi+0xb4>)
 80024ce:	2265      	movs	r2, #101	; 0x65
 80024d0:	73da      	strb	r2, [r3, #15]


	HAL_UART_Transmit_IT(&huart2, send_conn, 16);
 80024d2:	2210      	movs	r2, #16
 80024d4:	4905      	ldr	r1, [pc, #20]	; (80024ec <connect_to_Pi+0xb4>)
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <connect_to_Pi+0xb8>)
 80024d8:	f005 fcec 	bl	8007eb4 <HAL_UART_Transmit_IT>


}


}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000001 	.word	0x20000001
 80024e8:	200001e4 	.word	0x200001e4
 80024ec:	20000124 	.word	0x20000124
 80024f0:	20000330 	.word	0x20000330

080024f4 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi>:

//extern int _write(int file, char *ptr, int len);


void Read_and_Compare_Specific_para_Bat1_STM_to_Pi()
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b094      	sub	sp, #80	; 0x50
 80024f8:	af00      	add	r7, sp, #0


	uint8_t tx_bat1_specf_battery_status[1] = {0x16};		// 0x16
 80024fa:	2316      	movs	r3, #22
 80024fc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

	//uint8_t tx_bat1_specf_run_time_to_empty[1]={0x11};	// 0x11

//	printf("Maintenance Use Case Bat 1 Specific parameters\n");
	// Battery Status
	uint8_t rx_batstatus[2]={0x00,0x00};
 8002500:	2300      	movs	r3, #0
 8002502:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_bat1_specf_battery_status, 1);
 8002506:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800250a:	2301      	movs	r3, #1
 800250c:	2116      	movs	r1, #22
 800250e:	488e      	ldr	r0, [pc, #568]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 8002510:	f002 f976 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8002514:	2005      	movs	r0, #5
 8002516:	f001 fca9 	bl	8003e6c <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_batstatus, 2);
 800251a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800251e:	2302      	movs	r3, #2
 8002520:	2116      	movs	r1, #22
 8002522:	4889      	ldr	r0, [pc, #548]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 8002524:	f002 f9dc 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 8002528:	2001      	movs	r0, #1
 800252a:	f001 fc9f 	bl	8003e6c <msdelay>
	uint16_t bs = rx_batstatus[1];
 800252e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002532:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	bs = bs << 8;
 8002536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	bs = bs + rx_batstatus[0];
 8002540:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002544:	b29a      	uxth	r2, r3
 8002546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800254a:	4413      	add	r3, r2
 800254c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
//	printf("Battery Status = %d\n",bs);

	uint8_t send_specific_batstatus[16]={'s','1','M','S','I','B','S','S',rx_batstatus[1],rx_batstatus[0],'B','S','S','I','E','e'};
 8002550:	2373      	movs	r3, #115	; 0x73
 8002552:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002556:	2331      	movs	r3, #49	; 0x31
 8002558:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800255c:	234d      	movs	r3, #77	; 0x4d
 800255e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002562:	2353      	movs	r3, #83	; 0x53
 8002564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002568:	2349      	movs	r3, #73	; 0x49
 800256a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800256e:	2342      	movs	r3, #66	; 0x42
 8002570:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002574:	2353      	movs	r3, #83	; 0x53
 8002576:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800257a:	2353      	movs	r3, #83	; 0x53
 800257c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002580:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002584:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002588:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800258c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002590:	2342      	movs	r3, #66	; 0x42
 8002592:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002596:	2353      	movs	r3, #83	; 0x53
 8002598:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800259c:	2353      	movs	r3, #83	; 0x53
 800259e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80025a2:	2349      	movs	r3, #73	; 0x49
 80025a4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80025a8:	2345      	movs	r3, #69	; 0x45
 80025aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80025ae:	2365      	movs	r3, #101	; 0x65
 80025b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	HAL_UART_Transmit_IT(&huart2, send_specific_batstatus, 16);
 80025b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b8:	2210      	movs	r2, #16
 80025ba:	4619      	mov	r1, r3
 80025bc:	4863      	ldr	r0, [pc, #396]	; (800274c <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x258>)
 80025be:	f005 fc79 	bl	8007eb4 <HAL_UART_Transmit_IT>



	// Battery Full Charge Capacity
	uint8_t tx_bat1_specf_full_charge_capacity[1]={0x10};	// 0x10
 80025c2:	2310      	movs	r3, #16
 80025c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	uint8_t rx_full_charge_capacity[2]={0x00,0x00};
 80025c8:	2300      	movs	r3, #0
 80025ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_bat1_specf_full_charge_capacity, 1);
 80025cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80025d0:	2301      	movs	r3, #1
 80025d2:	2116      	movs	r1, #22
 80025d4:	485c      	ldr	r0, [pc, #368]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 80025d6:	f002 f913 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 80025da:	2005      	movs	r0, #5
 80025dc:	f001 fc46 	bl	8003e6c <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_full_charge_capacity, 2);
 80025e0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80025e4:	2302      	movs	r3, #2
 80025e6:	2116      	movs	r1, #22
 80025e8:	4857      	ldr	r0, [pc, #348]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 80025ea:	f002 f979 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f001 fc3c 	bl	8003e6c <msdelay>
	uint16_t fcc = rx_full_charge_capacity[1];
 80025f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	fcc = fcc << 8;
 80025fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	fcc = fcc + rx_full_charge_capacity[0];
 8002606:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800260a:	b29a      	uxth	r2, r3
 800260c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002610:	4413      	add	r3, r2
 8002612:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
//	printf("Full Charge Capacity = %d\n",fcc);

	uint8_t send_specific_fcc[16]={'s','1','M','S','I','F','C','S',rx_full_charge_capacity[1],rx_full_charge_capacity[0],'F','C','S','I','E','e'};
 8002616:	2373      	movs	r3, #115	; 0x73
 8002618:	773b      	strb	r3, [r7, #28]
 800261a:	2331      	movs	r3, #49	; 0x31
 800261c:	777b      	strb	r3, [r7, #29]
 800261e:	234d      	movs	r3, #77	; 0x4d
 8002620:	77bb      	strb	r3, [r7, #30]
 8002622:	2353      	movs	r3, #83	; 0x53
 8002624:	77fb      	strb	r3, [r7, #31]
 8002626:	2349      	movs	r3, #73	; 0x49
 8002628:	f887 3020 	strb.w	r3, [r7, #32]
 800262c:	2346      	movs	r3, #70	; 0x46
 800262e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002632:	2343      	movs	r3, #67	; 0x43
 8002634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002638:	2353      	movs	r3, #83	; 0x53
 800263a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800263e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002642:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002646:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800264a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800264e:	2346      	movs	r3, #70	; 0x46
 8002650:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002654:	2343      	movs	r3, #67	; 0x43
 8002656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800265a:	2353      	movs	r3, #83	; 0x53
 800265c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8002660:	2349      	movs	r3, #73	; 0x49
 8002662:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8002666:	2345      	movs	r3, #69	; 0x45
 8002668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800266c:	2365      	movs	r3, #101	; 0x65
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	HAL_UART_Transmit_IT(&huart2, send_specific_fcc, 16);
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	2210      	movs	r2, #16
 8002678:	4619      	mov	r1, r3
 800267a:	4834      	ldr	r0, [pc, #208]	; (800274c <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x258>)
 800267c:	f005 fc1a 	bl	8007eb4 <HAL_UART_Transmit_IT>




	// Battery Design Capacity
	uint8_t tx_bat1_specf_design_capacity[1]={0x18};		// 0x18
 8002680:	2318      	movs	r3, #24
 8002682:	763b      	strb	r3, [r7, #24]
	uint8_t rx_design_capacity[2]={0x00,0x00};
 8002684:	2300      	movs	r3, #0
 8002686:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16,tx_bat1_specf_design_capacity, 1);
 8002688:	f107 0218 	add.w	r2, r7, #24
 800268c:	2301      	movs	r3, #1
 800268e:	2116      	movs	r1, #22
 8002690:	482d      	ldr	r0, [pc, #180]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 8002692:	f002 f8b5 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8002696:	2005      	movs	r0, #5
 8002698:	f001 fbe8 	bl	8003e6c <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_design_capacity, 2);
 800269c:	f107 0214 	add.w	r2, r7, #20
 80026a0:	2302      	movs	r3, #2
 80026a2:	2116      	movs	r1, #22
 80026a4:	4828      	ldr	r0, [pc, #160]	; (8002748 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x254>)
 80026a6:	f002 f91b 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f001 fbde 	bl	8003e6c <msdelay>
	uint16_t designcap = rx_design_capacity[1];
 80026b0:	7d7b      	ldrb	r3, [r7, #21]
 80026b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	designcap = designcap << 8;
 80026b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	designcap = designcap + rx_design_capacity[0];
 80026c0:	7d3b      	ldrb	r3, [r7, #20]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026c8:	4413      	add	r3, r2
 80026ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
//	printf("Design Capacity = %d\n",designcap);

	uint8_t send_specific_design_cap[16]={'s','1','M','S','I','D','C','S',rx_design_capacity[1],rx_design_capacity[0],'D','C','S','I','E','e'};
 80026ce:	2373      	movs	r3, #115	; 0x73
 80026d0:	713b      	strb	r3, [r7, #4]
 80026d2:	2331      	movs	r3, #49	; 0x31
 80026d4:	717b      	strb	r3, [r7, #5]
 80026d6:	234d      	movs	r3, #77	; 0x4d
 80026d8:	71bb      	strb	r3, [r7, #6]
 80026da:	2353      	movs	r3, #83	; 0x53
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	2349      	movs	r3, #73	; 0x49
 80026e0:	723b      	strb	r3, [r7, #8]
 80026e2:	2344      	movs	r3, #68	; 0x44
 80026e4:	727b      	strb	r3, [r7, #9]
 80026e6:	2343      	movs	r3, #67	; 0x43
 80026e8:	72bb      	strb	r3, [r7, #10]
 80026ea:	2353      	movs	r3, #83	; 0x53
 80026ec:	72fb      	strb	r3, [r7, #11]
 80026ee:	7d7b      	ldrb	r3, [r7, #21]
 80026f0:	733b      	strb	r3, [r7, #12]
 80026f2:	7d3b      	ldrb	r3, [r7, #20]
 80026f4:	737b      	strb	r3, [r7, #13]
 80026f6:	2344      	movs	r3, #68	; 0x44
 80026f8:	73bb      	strb	r3, [r7, #14]
 80026fa:	2343      	movs	r3, #67	; 0x43
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	2353      	movs	r3, #83	; 0x53
 8002700:	743b      	strb	r3, [r7, #16]
 8002702:	2349      	movs	r3, #73	; 0x49
 8002704:	747b      	strb	r3, [r7, #17]
 8002706:	2345      	movs	r3, #69	; 0x45
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	2365      	movs	r3, #101	; 0x65
 800270c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit_IT(&huart2, send_specific_design_cap, 16);
 800270e:	1d3b      	adds	r3, r7, #4
 8002710:	2210      	movs	r2, #16
 8002712:	4619      	mov	r1, r3
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x258>)
 8002716:	f005 fbcd 	bl	8007eb4 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f001 fc44 	bl	8003fa8 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_design_cap, 16);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2210      	movs	r2, #16
 8002724:	4619      	mov	r1, r3
 8002726:	4809      	ldr	r0, [pc, #36]	; (800274c <Read_and_Compare_Specific_para_Bat1_STM_to_Pi+0x258>)
 8002728:	f005 fbc4 	bl	8007eb4 <HAL_UART_Transmit_IT>
	//	rte = rte << 8;
	//	rte = rte + rx_run_time_to_empty[0];



	Compare_Specifi_para_Bat1(fcc,designcap,bs);   // Function to compare specific parameters of battery 1
 800272c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002730:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f809 	bl	8002750 <Compare_Specifi_para_Bat1>





}
 800273e:	bf00      	nop
 8002740:	3750      	adds	r7, #80	; 0x50
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200001e4 	.word	0x200001e4
 800274c:	20000330 	.word	0x20000330

08002750 <Compare_Specifi_para_Bat1>:

void Compare_Specifi_para_Bat1(uint16_t fullchargecap , uint16_t designcap, uint16_t batterystatus)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	460b      	mov	r3, r1
 800275c:	80bb      	strh	r3, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	807b      	strh	r3, [r7, #2]

	// Here Design Capacity and Full Charge Capacity are compared
	if(fullchargecap >4620  &&  fullchargecap <= designcap)
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	f241 220c 	movw	r2, #4620	; 0x120c
 8002768:	4293      	cmp	r3, r2
 800276a:	d904      	bls.n	8002776 <Compare_Specifi_para_Bat1+0x26>
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	88bb      	ldrh	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d800      	bhi.n	8002776 <Compare_Specifi_para_Bat1+0x26>
	{
	//	printf("Battery is in good condition\n");
		__NOP();  // It means no operation does nothing
 8002774:	bf00      	nop

	}
	if(fullchargecap<4620 && fullchargecap!=0)
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	f241 220b 	movw	r2, #4619	; 0x120b
 800277c:	4293      	cmp	r3, r2
 800277e:	d805      	bhi.n	800278c <Compare_Specifi_para_Bat1+0x3c>
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <Compare_Specifi_para_Bat1+0x3c>
	{
		Autotestflag = false;   // // Abort the test
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <Compare_Specifi_para_Bat1+0xa4>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
	}

	// Function To convert decimal to binary. Add this function on Raspi Side
	uint8_t bat_status_array[16];
	if(0<=batterystatus && batterystatus<=65535){
		for(int j = 0; j < 16; j++) {
 800278c:	2300      	movs	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e018      	b.n	80027c4 <Compare_Specifi_para_Bat1+0x74>
			if (batterystatus % 2 == 0) {
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <Compare_Specifi_para_Bat1+0x5c>
				bat_status_array[j] = 0;
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e005      	b.n	80027b8 <Compare_Specifi_para_Bat1+0x68>
			}
			else {
				bat_status_array[j] = 1;
 80027ac:	f107 020c 	add.w	r2, r7, #12
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
			}
			batterystatus = batterystatus / 2;
 80027b8:	887b      	ldrh	r3, [r7, #2]
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	807b      	strh	r3, [r7, #2]
		for(int j = 0; j < 16; j++) {
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3301      	adds	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	dde3      	ble.n	8002792 <Compare_Specifi_para_Bat1+0x42>
		}
	}

	if(bat_status_array[15] == 1 || bat_status_array[14] == 1 || bat_status_array[12] == 1 || bat_status_array[11] == 1 )
 80027ca:	7efb      	ldrb	r3, [r7, #27]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d008      	beq.n	80027e2 <Compare_Specifi_para_Bat1+0x92>
 80027d0:	7ebb      	ldrb	r3, [r7, #26]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <Compare_Specifi_para_Bat1+0x92>
 80027d6:	7e3b      	ldrb	r3, [r7, #24]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d002      	beq.n	80027e2 <Compare_Specifi_para_Bat1+0x92>
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <Compare_Specifi_para_Bat1+0x98>

	{


		Autotestflag = false;  // Abort the test
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <Compare_Specifi_para_Bat1+0xa4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
	//	printf("Auto test is terminated because one of the alarm flag is set\n");

	}


}
 80027e8:	bf00      	nop
 80027ea:	3724      	adds	r7, #36	; 0x24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	2000009e 	.word	0x2000009e

080027f8 <Read_bat1_maint_Run_time_to_empty>:

void Read_bat1_maint_Run_time_to_empty()
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0

	uint8_t tx_rte[1]={0x11};	// 0x11
 80027fe:	2311      	movs	r3, #17
 8002800:	753b      	strb	r3, [r7, #20]
	uint8_t rx_rte[2]={0x00,0x00};
 8002802:	2300      	movs	r3, #0
 8002804:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_rte, 1);
 8002806:	f107 0214 	add.w	r2, r7, #20
 800280a:	2301      	movs	r3, #1
 800280c:	2116      	movs	r1, #22
 800280e:	4826      	ldr	r0, [pc, #152]	; (80028a8 <Read_bat1_maint_Run_time_to_empty+0xb0>)
 8002810:	f001 fff6 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 8002814:	2005      	movs	r0, #5
 8002816:	f001 fbc7 	bl	8003fa8 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_rte, 2);
 800281a:	f107 0210 	add.w	r2, r7, #16
 800281e:	2302      	movs	r3, #2
 8002820:	2116      	movs	r1, #22
 8002822:	4821      	ldr	r0, [pc, #132]	; (80028a8 <Read_bat1_maint_Run_time_to_empty+0xb0>)
 8002824:	f002 f85c 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 8002828:	2005      	movs	r0, #5
 800282a:	f001 fbbd 	bl	8003fa8 <HAL_Delay>
	uint16_t rte = rx_rte[1];
 800282e:	7c7b      	ldrb	r3, [r7, #17]
 8002830:	82fb      	strh	r3, [r7, #22]
	rte = rte << 8;
 8002832:	8afb      	ldrh	r3, [r7, #22]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	82fb      	strh	r3, [r7, #22]
	rte = rte + rx_rte[0];
 8002838:	7c3b      	ldrb	r3, [r7, #16]
 800283a:	b29a      	uxth	r2, r3
 800283c:	8afb      	ldrh	r3, [r7, #22]
 800283e:	4413      	add	r3, r2
 8002840:	82fb      	strh	r3, [r7, #22]
	uint8_t send_specific_rte[16]={'s','1','M','S','I','R','T','S',rx_rte[1],rx_rte[0],'R','T','F','I','E','e'};
 8002842:	2373      	movs	r3, #115	; 0x73
 8002844:	703b      	strb	r3, [r7, #0]
 8002846:	2331      	movs	r3, #49	; 0x31
 8002848:	707b      	strb	r3, [r7, #1]
 800284a:	234d      	movs	r3, #77	; 0x4d
 800284c:	70bb      	strb	r3, [r7, #2]
 800284e:	2353      	movs	r3, #83	; 0x53
 8002850:	70fb      	strb	r3, [r7, #3]
 8002852:	2349      	movs	r3, #73	; 0x49
 8002854:	713b      	strb	r3, [r7, #4]
 8002856:	2352      	movs	r3, #82	; 0x52
 8002858:	717b      	strb	r3, [r7, #5]
 800285a:	2354      	movs	r3, #84	; 0x54
 800285c:	71bb      	strb	r3, [r7, #6]
 800285e:	2353      	movs	r3, #83	; 0x53
 8002860:	71fb      	strb	r3, [r7, #7]
 8002862:	7c7b      	ldrb	r3, [r7, #17]
 8002864:	723b      	strb	r3, [r7, #8]
 8002866:	7c3b      	ldrb	r3, [r7, #16]
 8002868:	727b      	strb	r3, [r7, #9]
 800286a:	2352      	movs	r3, #82	; 0x52
 800286c:	72bb      	strb	r3, [r7, #10]
 800286e:	2354      	movs	r3, #84	; 0x54
 8002870:	72fb      	strb	r3, [r7, #11]
 8002872:	2346      	movs	r3, #70	; 0x46
 8002874:	733b      	strb	r3, [r7, #12]
 8002876:	2349      	movs	r3, #73	; 0x49
 8002878:	737b      	strb	r3, [r7, #13]
 800287a:	2345      	movs	r3, #69	; 0x45
 800287c:	73bb      	strb	r3, [r7, #14]
 800287e:	2365      	movs	r3, #101	; 0x65
 8002880:	73fb      	strb	r3, [r7, #15]
//	send_specific_rte[10]='T';
//	send_specific_rte[11]='S';
//	send_specific_rte[12]='I';
//	send_specific_rte[13]='E';
//
	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 16);
 8002882:	463b      	mov	r3, r7
 8002884:	2210      	movs	r2, #16
 8002886:	4619      	mov	r1, r3
 8002888:	4808      	ldr	r0, [pc, #32]	; (80028ac <Read_bat1_maint_Run_time_to_empty+0xb4>)
 800288a:	f005 fb13 	bl	8007eb4 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 800288e:	2001      	movs	r0, #1
 8002890:	f001 fb8a 	bl	8003fa8 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 16);
 8002894:	463b      	mov	r3, r7
 8002896:	2210      	movs	r2, #16
 8002898:	4619      	mov	r1, r3
 800289a:	4804      	ldr	r0, [pc, #16]	; (80028ac <Read_bat1_maint_Run_time_to_empty+0xb4>)
 800289c:	f005 fb0a 	bl	8007eb4 <HAL_UART_Transmit_IT>




}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200001e4 	.word	0x200001e4
 80028ac:	20000330 	.word	0x20000330

080028b0 <Read_bat1_maint_Run_time_to_empty_end_of_discharge>:


void Read_bat1_maint_Run_time_to_empty_end_of_discharge()
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0

	uint8_t tx_rte[1]={0x11};	// 0x11
 80028b6:	2311      	movs	r3, #17
 80028b8:	753b      	strb	r3, [r7, #20]
	uint8_t rx_rte[2]={0x00,0x00};
 80028ba:	2300      	movs	r3, #0
 80028bc:	823b      	strh	r3, [r7, #16]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_rte, 1);
 80028be:	f107 0214 	add.w	r2, r7, #20
 80028c2:	2301      	movs	r3, #1
 80028c4:	2116      	movs	r1, #22
 80028c6:	4826      	ldr	r0, [pc, #152]	; (8002960 <Read_bat1_maint_Run_time_to_empty_end_of_discharge+0xb0>)
 80028c8:	f001 ff9a 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(5);
 80028cc:	2005      	movs	r0, #5
 80028ce:	f001 fb6b 	bl	8003fa8 <HAL_Delay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_rte, 2);
 80028d2:	f107 0210 	add.w	r2, r7, #16
 80028d6:	2302      	movs	r3, #2
 80028d8:	2116      	movs	r1, #22
 80028da:	4821      	ldr	r0, [pc, #132]	; (8002960 <Read_bat1_maint_Run_time_to_empty_end_of_discharge+0xb0>)
 80028dc:	f002 f800 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	HAL_Delay(5);
 80028e0:	2005      	movs	r0, #5
 80028e2:	f001 fb61 	bl	8003fa8 <HAL_Delay>
	uint16_t rte = rx_rte[1];
 80028e6:	7c7b      	ldrb	r3, [r7, #17]
 80028e8:	82fb      	strh	r3, [r7, #22]
	rte = rte << 8;
 80028ea:	8afb      	ldrh	r3, [r7, #22]
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	82fb      	strh	r3, [r7, #22]
	rte = rte + rx_rte[0];
 80028f0:	7c3b      	ldrb	r3, [r7, #16]
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	8afb      	ldrh	r3, [r7, #22]
 80028f6:	4413      	add	r3, r2
 80028f8:	82fb      	strh	r3, [r7, #22]
	uint8_t send_specific_rte[16]={'s','1','M','S','I','R','T','S',rx_rte[1],rx_rte[0],'R','T','L','I','E','e'};
 80028fa:	2373      	movs	r3, #115	; 0x73
 80028fc:	703b      	strb	r3, [r7, #0]
 80028fe:	2331      	movs	r3, #49	; 0x31
 8002900:	707b      	strb	r3, [r7, #1]
 8002902:	234d      	movs	r3, #77	; 0x4d
 8002904:	70bb      	strb	r3, [r7, #2]
 8002906:	2353      	movs	r3, #83	; 0x53
 8002908:	70fb      	strb	r3, [r7, #3]
 800290a:	2349      	movs	r3, #73	; 0x49
 800290c:	713b      	strb	r3, [r7, #4]
 800290e:	2352      	movs	r3, #82	; 0x52
 8002910:	717b      	strb	r3, [r7, #5]
 8002912:	2354      	movs	r3, #84	; 0x54
 8002914:	71bb      	strb	r3, [r7, #6]
 8002916:	2353      	movs	r3, #83	; 0x53
 8002918:	71fb      	strb	r3, [r7, #7]
 800291a:	7c7b      	ldrb	r3, [r7, #17]
 800291c:	723b      	strb	r3, [r7, #8]
 800291e:	7c3b      	ldrb	r3, [r7, #16]
 8002920:	727b      	strb	r3, [r7, #9]
 8002922:	2352      	movs	r3, #82	; 0x52
 8002924:	72bb      	strb	r3, [r7, #10]
 8002926:	2354      	movs	r3, #84	; 0x54
 8002928:	72fb      	strb	r3, [r7, #11]
 800292a:	234c      	movs	r3, #76	; 0x4c
 800292c:	733b      	strb	r3, [r7, #12]
 800292e:	2349      	movs	r3, #73	; 0x49
 8002930:	737b      	strb	r3, [r7, #13]
 8002932:	2345      	movs	r3, #69	; 0x45
 8002934:	73bb      	strb	r3, [r7, #14]
 8002936:	2365      	movs	r3, #101	; 0x65
 8002938:	73fb      	strb	r3, [r7, #15]



	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 16);
 800293a:	463b      	mov	r3, r7
 800293c:	2210      	movs	r2, #16
 800293e:	4619      	mov	r1, r3
 8002940:	4808      	ldr	r0, [pc, #32]	; (8002964 <Read_bat1_maint_Run_time_to_empty_end_of_discharge+0xb4>)
 8002942:	f005 fab7 	bl	8007eb4 <HAL_UART_Transmit_IT>
	HAL_Delay(1);
 8002946:	2001      	movs	r0, #1
 8002948:	f001 fb2e 	bl	8003fa8 <HAL_Delay>
	HAL_UART_Transmit_IT(&huart2, send_specific_rte, 16);
 800294c:	463b      	mov	r3, r7
 800294e:	2210      	movs	r2, #16
 8002950:	4619      	mov	r1, r3
 8002952:	4804      	ldr	r0, [pc, #16]	; (8002964 <Read_bat1_maint_Run_time_to_empty_end_of_discharge+0xb4>)
 8002954:	f005 faae 	bl	8007eb4 <HAL_UART_Transmit_IT>


}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200001e4 	.word	0x200001e4
 8002964:	20000330 	.word	0x20000330

08002968 <substatemachine_battery1_maintenance>:

extern UART_HandleTypeDef huart2;


void substatemachine_battery1_maintenance()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0



	//		// Maintenance cycle Start /////////////////////
	////
			if(BAT_1_MAINTENANCE_FLAG == true)   // Works with GUI updated periodically
 800296c:	4ba6      	ldr	r3, [pc, #664]	; (8002c08 <substatemachine_battery1_maintenance+0x2a0>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 8298 	beq.w	8002ea6 <substatemachine_battery1_maintenance+0x53e>
			{

				if(BAT_1_MAINTENANCE_ENTERED_GUARD_FLAG==false)
 8002976:	4ba5      	ldr	r3, [pc, #660]	; (8002c0c <substatemachine_battery1_maintenance+0x2a4>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f083 0301 	eor.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <substatemachine_battery1_maintenance+0x22>
				{
				//	printf("Battery has entered Maintenance Use case \n");  // Displayed only once
					BAT_1_MAINTENANCE_ENTERED_GUARD_FLAG = true;
 8002984:	4ba1      	ldr	r3, [pc, #644]	; (8002c0c <substatemachine_battery1_maintenance+0x2a4>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
				}




				if(BAT_1_MAINT_GENERAL_INFO_FLAG == true)
 800298a:	4ba1      	ldr	r3, [pc, #644]	; (8002c10 <substatemachine_battery1_maintenance+0x2a8>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d029      	beq.n	80029e6 <substatemachine_battery1_maintenance+0x7e>
				{
					connect_flag = false;
 8002992:	4ba0      	ldr	r3, [pc, #640]	; (8002c14 <substatemachine_battery1_maintenance+0x2ac>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
					if(BAT_1_MAINT_GENERAL_INFO_GUARD_FLAG==false)
 8002998:	4b9f      	ldr	r3, [pc, #636]	; (8002c18 <substatemachine_battery1_maintenance+0x2b0>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <substatemachine_battery1_maintenance+0x4a>
					{
						BAT_1_MAINT_GENERAL_INFO_GUARD_FLAG = true;
 80029a6:	4b9c      	ldr	r3, [pc, #624]	; (8002c18 <substatemachine_battery1_maintenance+0x2b0>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]

						//printf("Displayed General Info once \n");

						Transmit_Bat1_Maintenance_General_Info_to_Raspi(); // This function is working now
 80029ac:	f7fe f9ba 	bl	8000d24 <Transmit_Bat1_Maintenance_General_Info_to_Raspi>
 80029b0:	e019      	b.n	80029e6 <substatemachine_battery1_maintenance+0x7e>




					}
					else if(BAT_1_MAINT_GENERAL_INFO_GUARD_FLAG == true)
 80029b2:	4b99      	ldr	r3, [pc, #612]	; (8002c18 <substatemachine_battery1_maintenance+0x2b0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <substatemachine_battery1_maintenance+0x7e>
					{
						connect_flag=true;
 80029ba:	4b96      	ldr	r3, [pc, #600]	; (8002c14 <substatemachine_battery1_maintenance+0x2ac>)
 80029bc:	2201      	movs	r2, #1
 80029be:	701a      	strb	r2, [r3, #0]
					   // Update general info periodically // this function works
						if(update_maintenance_info_flag==true)
 80029c0:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <substatemachine_battery1_maintenance+0x2b4>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00e      	beq.n	80029e6 <substatemachine_battery1_maintenance+0x7e>
						{
							connect_flag=false;
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <substatemachine_battery1_maintenance+0x2ac>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
						update_RemCap_during_maintenance_bat1();
 80029ce:	f7fd fe65 	bl	800069c <update_RemCap_during_maintenance_bat1>
						update_voltage_during_maintenance_bat1();
 80029d2:	f7fd fd95 	bl	8000500 <update_voltage_during_maintenance_bat1>
						update_asoc_during_maintenance_bat1();
 80029d6:	f7fd fdff 	bl	80005d8 <update_asoc_during_maintenance_bat1>
						update_cyclecount_during_maintenance_bat1();
 80029da:	f7fd fec1 	bl	8000760 <update_cyclecount_during_maintenance_bat1>
						update_batstatus_during_maintenance_bat1();
 80029de:	f7fd ff21 	bl	8000824 <update_batstatus_during_maintenance_bat1>
						update_temperature_during_maintenance_bat1();
 80029e2:	f7fd ff81 	bl	80008e8 <update_temperature_during_maintenance_bat1>
						}

					}
				}

				if(*BAT1_MAINT_STATE==0)
 80029e6:	4b8e      	ldr	r3, [pc, #568]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f993 3000 	ldrsb.w	r3, [r3]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <substatemachine_battery1_maintenance+0x9a>
				{
					bat1charge = false;
 80029f2:	4b8c      	ldr	r3, [pc, #560]	; (8002c24 <substatemachine_battery1_maintenance+0x2bc>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
					bat1discharge = false;
 80029f8:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <substatemachine_battery1_maintenance+0x2c0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
					gpio_func();
 80029fe:	f7fe ff37 	bl	8001870 <gpio_func>

				}

				if(Autotestflag == true)
 8002a02:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <substatemachine_battery1_maintenance+0x2c4>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 824d 	beq.w	8002ea6 <substatemachine_battery1_maintenance+0x53e>
				{


					if(Bat_1_MAINT_SPECIFIC_PARA_GUARD_FLAG ==false)
 8002a0c:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <substatemachine_battery1_maintenance+0x2c8>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f083 0301 	eor.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <substatemachine_battery1_maintenance+0xbc>
					{
						Bat_1_MAINT_SPECIFIC_PARA_GUARD_FLAG = true;
 8002a1a:	4b85      	ldr	r3, [pc, #532]	; (8002c30 <substatemachine_battery1_maintenance+0x2c8>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
					    Read_and_Compare_Specific_para_Bat1_STM_to_Pi();  // This function is also working
 8002a20:	f7ff fd68 	bl	80024f4 <Read_and_Compare_Specific_para_Bat1_STM_to_Pi>



					}

					if(*BAT1_MAINT_STATE == 0 && *BAT1_MAINT_STATE !=1 && *BAT1_MAINT_STATE !=2
 8002a24:	4b7e      	ldr	r3, [pc, #504]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f993 3000 	ldrsb.w	r3, [r3]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d133      	bne.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a30:	4b7b      	ldr	r3, [pc, #492]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f993 3000 	ldrsb.w	r3, [r3]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d02d      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a3c:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f993 3000 	ldrsb.w	r3, [r3]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d027      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
							&& *BAT1_MAINT_STATE !=3 && *BAT1_MAINT_STATE !=4 && *BAT1_MAINT_STATE !=5
 8002a48:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d021      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a54:	4b72      	ldr	r3, [pc, #456]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f993 3000 	ldrsb.w	r3, [r3]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d01b      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a60:	4b6f      	ldr	r3, [pc, #444]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f993 3000 	ldrsb.w	r3, [r3]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d015      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
							&& *BAT1_MAINT_STATE !=6 && *BAT1_MAINT_STATE !=7 && *BAT1_MAINT_STATE !=8)
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f993 3000 	ldrsb.w	r3, [r3]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d00f      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a78:	4b69      	ldr	r3, [pc, #420]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f993 3000 	ldrsb.w	r3, [r3]
 8002a80:	2b07      	cmp	r3, #7
 8002a82:	d009      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f993 3000 	ldrsb.w	r3, [r3]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d003      	beq.n	8002a98 <substatemachine_battery1_maintenance+0x130>
					{
						*BAT1_MAINT_STATE = 1;
 8002a90:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
					}

					switch(*BAT1_MAINT_STATE)
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	f200 81fa 	bhi.w	8002e9c <substatemachine_battery1_maintenance+0x534>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <substatemachine_battery1_maintenance+0x148>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ad1 	.word	0x08002ad1
 8002ab4:	08002b15 	.word	0x08002b15
 8002ab8:	08002b8d 	.word	0x08002b8d
 8002abc:	08002be3 	.word	0x08002be3
 8002ac0:	08002c85 	.word	0x08002c85
 8002ac4:	08002d07 	.word	0x08002d07
 8002ac8:	08002d83 	.word	0x08002d83
 8002acc:	08002de7 	.word	0x08002de7
					{

					case 1:  // 80 % start state

						BAT_1_ASOC_MAINTENANCE = read_bat1_asoc();
 8002ad0:	f000 fa7e 	bl	8002fd0 <read_bat1_asoc>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b56      	ldr	r3, [pc, #344]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002ada:	801a      	strh	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE==BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002adc:	4b55      	ldr	r3, [pc, #340]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	2b50      	cmp	r3, #80	; 0x50
 8002ae2:	d104      	bne.n	8002aee <substatemachine_battery1_maintenance+0x186>
							{
								*BAT1_MAINT_STATE = 2;
 8002ae4:	4b4e      	ldr	r3, [pc, #312]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
							{
								*BAT1_MAINT_STATE = 4;
							}


						break;
 8002aec:	e1dd      	b.n	8002eaa <substatemachine_battery1_maintenance+0x542>
							else if(BAT_1_ASOC_MAINTENANCE <BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002aee:	4b51      	ldr	r3, [pc, #324]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	2b4f      	cmp	r3, #79	; 0x4f
 8002af4:	d804      	bhi.n	8002b00 <substatemachine_battery1_maintenance+0x198>
								*BAT1_MAINT_STATE = 3;
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2203      	movs	r2, #3
 8002afc:	701a      	strb	r2, [r3, #0]
						break;
 8002afe:	e1d4      	b.n	8002eaa <substatemachine_battery1_maintenance+0x542>
							else if(BAT_1_ASOC_MAINTENANCE >BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	2b50      	cmp	r3, #80	; 0x50
 8002b06:	f240 81d0 	bls.w	8002eaa <substatemachine_battery1_maintenance+0x542>
								*BAT1_MAINT_STATE = 4;
 8002b0a:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	701a      	strb	r2, [r3, #0]
						break;
 8002b12:	e1ca      	b.n	8002eaa <substatemachine_battery1_maintenance+0x542>

					case 2:    // = 80 % state

						if(state2guard == false)
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <substatemachine_battery1_maintenance+0x2d0>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	f083 0301 	eor.w	r3, r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <substatemachine_battery1_maintenance+0x1d8>
						{
							bat1charge = false;
 8002b22:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <substatemachine_battery1_maintenance+0x2bc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
							bat1discharge = false;
 8002b28:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <substatemachine_battery1_maintenance+0x2c0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002b2e:	f7fe fe9f 	bl	8001870 <gpio_func>
							_bat1timerfunc = true;
 8002b32:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <substatemachine_battery1_maintenance+0x2d4>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
							state2guard = true;
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <substatemachine_battery1_maintenance+0x2d0>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim3);
								update_maintenance_info_flag=true;
							}
						}

						break;
 8002b3e:	e1b6      	b.n	8002eae <substatemachine_battery1_maintenance+0x546>
						else if(state2guard == true)
 8002b40:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <substatemachine_battery1_maintenance+0x2d0>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 81b2 	beq.w	8002eae <substatemachine_battery1_maintenance+0x546>
							if(_bat1_15min_wait_over==true)
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <substatemachine_battery1_maintenance+0x2d8>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 81ad 	beq.w	8002eae <substatemachine_battery1_maintenance+0x546>
								HAL_TIM_Base_Stop_IT(&htim2);
 8002b54:	483b      	ldr	r0, [pc, #236]	; (8002c44 <substatemachine_battery1_maintenance+0x2dc>)
 8002b56:	f004 fd3d 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								HAL_TIM_Base_Stop_IT(&htim3);
 8002b5a:	483b      	ldr	r0, [pc, #236]	; (8002c48 <substatemachine_battery1_maintenance+0x2e0>)
 8002b5c:	f004 fd3a 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								update_maintenance_info_flag=false;
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <substatemachine_battery1_maintenance+0x2b4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
								Read_Bat1_Maint_autotest_result_first_80_percent(); // This function works
 8002b66:	f7fe febb 	bl	80018e0 <Read_Bat1_Maint_autotest_result_first_80_percent>
								*BAT1_MAINT_STATE = 5;
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2205      	movs	r2, #5
 8002b70:	701a      	strb	r2, [r3, #0]
								state2guard = false;
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <substatemachine_battery1_maintenance+0x2d0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim2);
 8002b78:	4832      	ldr	r0, [pc, #200]	; (8002c44 <substatemachine_battery1_maintenance+0x2dc>)
 8002b7a:	f004 fcb3 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								HAL_TIM_Base_Start_IT(&htim3);
 8002b7e:	4832      	ldr	r0, [pc, #200]	; (8002c48 <substatemachine_battery1_maintenance+0x2e0>)
 8002b80:	f004 fcb0 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								update_maintenance_info_flag=true;
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <substatemachine_battery1_maintenance+0x2b4>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
						break;
 8002b8a:	e190      	b.n	8002eae <substatemachine_battery1_maintenance+0x546>

					case 3:    // <80 % state

						if(state3guard == false)
 8002b8c:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <substatemachine_battery1_maintenance+0x2e4>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <substatemachine_battery1_maintenance+0x24a>
						{
							bat1charge = true;
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <substatemachine_battery1_maintenance+0x2bc>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
							bat1discharge = false;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <substatemachine_battery1_maintenance+0x2c0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002ba6:	f7fe fe63 	bl	8001870 <gpio_func>
							state3guard = true;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <substatemachine_battery1_maintenance+0x2e4>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
							{
								*BAT1_MAINT_STATE = 2;
								state3guard = false;
							}
						}
						break;
 8002bb0:	e17f      	b.n	8002eb2 <substatemachine_battery1_maintenance+0x54a>
						else if(state3guard == true)
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <substatemachine_battery1_maintenance+0x2e4>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 817b 	beq.w	8002eb2 <substatemachine_battery1_maintenance+0x54a>
							BAT_1_ASOC_MAINTENANCE = read_bat1_asoc();
 8002bbc:	f000 fa08 	bl	8002fd0 <read_bat1_asoc>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002bc6:	801a      	strh	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE == BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <substatemachine_battery1_maintenance+0x2cc>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	2b50      	cmp	r3, #80	; 0x50
 8002bce:	f040 8170 	bne.w	8002eb2 <substatemachine_battery1_maintenance+0x54a>
								*BAT1_MAINT_STATE = 2;
 8002bd2:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <substatemachine_battery1_maintenance+0x2b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
								state3guard = false;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <substatemachine_battery1_maintenance+0x2e4>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
						break;
 8002be0:	e167      	b.n	8002eb2 <substatemachine_battery1_maintenance+0x54a>




					case 4:   // > 80 % state
						if(state4guard == false)
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <substatemachine_battery1_maintenance+0x2e8>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d031      	beq.n	8002c54 <substatemachine_battery1_maintenance+0x2ec>
						{
							bat1discharge = true;
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <substatemachine_battery1_maintenance+0x2c0>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
							bat1charge = false;
 8002bf6:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <substatemachine_battery1_maintenance+0x2bc>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002bfc:	f7fe fe38 	bl	8001870 <gpio_func>
							state4guard = true;
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <substatemachine_battery1_maintenance+0x2e8>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
							{
								*BAT1_MAINT_STATE = 2;
								state4guard = false;
							}
						}
						break;
 8002c06:	e156      	b.n	8002eb6 <substatemachine_battery1_maintenance+0x54e>
 8002c08:	2000009f 	.word	0x2000009f
 8002c0c:	200000a0 	.word	0x200000a0
 8002c10:	200000a1 	.word	0x200000a1
 8002c14:	20000001 	.word	0x20000001
 8002c18:	200000a2 	.word	0x200000a2
 8002c1c:	200000b9 	.word	0x200000b9
 8002c20:	20000280 	.word	0x20000280
 8002c24:	20000095 	.word	0x20000095
 8002c28:	20000096 	.word	0x20000096
 8002c2c:	2000009e 	.word	0x2000009e
 8002c30:	200000a3 	.word	0x200000a3
 8002c34:	200001e2 	.word	0x200001e2
 8002c38:	20000097 	.word	0x20000097
 8002c3c:	20000090 	.word	0x20000090
 8002c40:	20000091 	.word	0x20000091
 8002c44:	200002e4 	.word	0x200002e4
 8002c48:	20000284 	.word	0x20000284
 8002c4c:	20000098 	.word	0x20000098
 8002c50:	20000099 	.word	0x20000099
						else if(state4guard == true)
 8002c54:	4b9d      	ldr	r3, [pc, #628]	; (8002ecc <substatemachine_battery1_maintenance+0x564>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 812c 	beq.w	8002eb6 <substatemachine_battery1_maintenance+0x54e>
							BAT_1_ASOC_MAINTENANCE = read_bat1_asoc();
 8002c5e:	f000 f9b7 	bl	8002fd0 <read_bat1_asoc>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b9a      	ldr	r3, [pc, #616]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002c68:	801a      	strh	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE == BAT_AUTOTEST_MAINTENANCE_ASOC_80)
 8002c6a:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2b50      	cmp	r3, #80	; 0x50
 8002c70:	f040 8121 	bne.w	8002eb6 <substatemachine_battery1_maintenance+0x54e>
								*BAT1_MAINT_STATE = 2;
 8002c74:	4b97      	ldr	r3, [pc, #604]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
								state4guard = false;
 8002c7c:	4b93      	ldr	r3, [pc, #588]	; (8002ecc <substatemachine_battery1_maintenance+0x564>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
						break;
 8002c82:	e118      	b.n	8002eb6 <substatemachine_battery1_maintenance+0x54e>

					case 5:   // Discharge to 10 %

						if(state5guard==false)
 8002c84:	4b94      	ldr	r3, [pc, #592]	; (8002ed8 <substatemachine_battery1_maintenance+0x570>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d014      	beq.n	8002cbc <substatemachine_battery1_maintenance+0x354>
						{
							bat1discharge = true;
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <substatemachine_battery1_maintenance+0x574>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
							bat1charge = false;
 8002c98:	4b91      	ldr	r3, [pc, #580]	; (8002ee0 <substatemachine_battery1_maintenance+0x578>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002c9e:	f7fe fde7 	bl	8001870 <gpio_func>
							state5guard = true;
 8002ca2:	4b8d      	ldr	r3, [pc, #564]	; (8002ed8 <substatemachine_battery1_maintenance+0x570>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
							_bat1timerfunc=false;
 8002ca8:	4b8e      	ldr	r3, [pc, #568]	; (8002ee4 <substatemachine_battery1_maintenance+0x57c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
							_bat1_15min_wait_over=false;
 8002cae:	4b8e      	ldr	r3, [pc, #568]	; (8002ee8 <substatemachine_battery1_maintenance+0x580>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
							_bat1_counter_var = 0;
 8002cb4:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <substatemachine_battery1_maintenance+0x584>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	801a      	strh	r2, [r3, #0]
								*BAT1_MAINT_STATE = 6;
								state5guard=false;
							}

						}
						break;
 8002cba:	e0fe      	b.n	8002eba <substatemachine_battery1_maintenance+0x552>
						else if(state5guard==true)
 8002cbc:	4b86      	ldr	r3, [pc, #536]	; (8002ed8 <substatemachine_battery1_maintenance+0x570>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80fa 	beq.w	8002eba <substatemachine_battery1_maintenance+0x552>
							BAT_1_ASOC_MAINTENANCE = read_bat1_asoc();
 8002cc6:	f000 f983 	bl	8002fd0 <read_bat1_asoc>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	4b80      	ldr	r3, [pc, #512]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002cd0:	801a      	strh	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE==79 && bat1_specific_info_rte_flag==true)
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	2b4f      	cmp	r3, #79	; 0x4f
 8002cd8:	d108      	bne.n	8002cec <substatemachine_battery1_maintenance+0x384>
 8002cda:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <substatemachine_battery1_maintenance+0x588>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <substatemachine_battery1_maintenance+0x384>
								Read_bat1_maint_Run_time_to_empty();
 8002ce2:	f7ff fd89 	bl	80027f8 <Read_bat1_maint_Run_time_to_empty>
								bat1_specific_info_rte_flag=false;
 8002ce6:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <substatemachine_battery1_maintenance+0x588>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE ==BAT_AUTOTEST_MAINTENANCE_ASOC_10)   // 72
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	2b46      	cmp	r3, #70	; 0x46
 8002cf2:	f040 80e2 	bne.w	8002eba <substatemachine_battery1_maintenance+0x552>
								*BAT1_MAINT_STATE = 6;
 8002cf6:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2206      	movs	r2, #6
 8002cfc:	701a      	strb	r2, [r3, #0]
								state5guard=false;
 8002cfe:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <substatemachine_battery1_maintenance+0x570>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
						break;
 8002d04:	e0d9      	b.n	8002eba <substatemachine_battery1_maintenance+0x552>

					case 6:  // ASOC = 10% state
						if(state6guard==false)
 8002d06:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <substatemachine_battery1_maintenance+0x58c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <substatemachine_battery1_maintenance+0x3ce>
						{
							bat1charge=false;
 8002d14:	4b72      	ldr	r3, [pc, #456]	; (8002ee0 <substatemachine_battery1_maintenance+0x578>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
							bat1discharge=false;
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <substatemachine_battery1_maintenance+0x574>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002d20:	f7fe fda6 	bl	8001870 <gpio_func>
							_bat1timerfunc=true;
 8002d24:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <substatemachine_battery1_maintenance+0x57c>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	701a      	strb	r2, [r3, #0]
							state6guard=true;
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <substatemachine_battery1_maintenance+0x58c>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
							Read_bat1_maint_Run_time_to_empty_end_of_discharge();  // RTE
 8002d30:	f7ff fdbe 	bl	80028b0 <Read_bat1_maint_Run_time_to_empty_end_of_discharge>
								HAL_TIM_Base_Start_IT(&htim3);
								update_maintenance_info_flag=true;
								state6guard=false;
							}
						}
						break;
 8002d34:	e0c3      	b.n	8002ebe <substatemachine_battery1_maintenance+0x556>
						else if(state6guard==true)
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <substatemachine_battery1_maintenance+0x58c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80bf 	beq.w	8002ebe <substatemachine_battery1_maintenance+0x556>
							if(_bat1_15min_wait_over==true)
 8002d40:	4b69      	ldr	r3, [pc, #420]	; (8002ee8 <substatemachine_battery1_maintenance+0x580>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80ba 	beq.w	8002ebe <substatemachine_battery1_maintenance+0x556>
								HAL_TIM_Base_Stop_IT(&htim2);
 8002d4a:	486b      	ldr	r0, [pc, #428]	; (8002ef8 <substatemachine_battery1_maintenance+0x590>)
 8002d4c:	f004 fc42 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								HAL_TIM_Base_Stop_IT(&htim3);
 8002d50:	486a      	ldr	r0, [pc, #424]	; (8002efc <substatemachine_battery1_maintenance+0x594>)
 8002d52:	f004 fc3f 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								update_maintenance_info_flag=false;
 8002d56:	4b6a      	ldr	r3, [pc, #424]	; (8002f00 <substatemachine_battery1_maintenance+0x598>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
								Read_Bat1_Maint_autotest_result_middle_10_percent();
 8002d5c:	f7fe ffa4 	bl	8001ca8 <Read_Bat1_Maint_autotest_result_middle_10_percent>
								*BAT1_MAINT_STATE=7;
 8002d60:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2207      	movs	r2, #7
 8002d66:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim2);
 8002d68:	4863      	ldr	r0, [pc, #396]	; (8002ef8 <substatemachine_battery1_maintenance+0x590>)
 8002d6a:	f004 fbbb 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								HAL_TIM_Base_Start_IT(&htim3);
 8002d6e:	4863      	ldr	r0, [pc, #396]	; (8002efc <substatemachine_battery1_maintenance+0x594>)
 8002d70:	f004 fbb8 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								update_maintenance_info_flag=true;
 8002d74:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <substatemachine_battery1_maintenance+0x598>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
								state6guard=false;
 8002d7a:	4b5e      	ldr	r3, [pc, #376]	; (8002ef4 <substatemachine_battery1_maintenance+0x58c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
						break;
 8002d80:	e09d      	b.n	8002ebe <substatemachine_battery1_maintenance+0x556>

					case 7:  // Again charge to 80 % state
						if(state7guard == false)
 8002d82:	4b60      	ldr	r3, [pc, #384]	; (8002f04 <substatemachine_battery1_maintenance+0x59c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d014      	beq.n	8002dba <substatemachine_battery1_maintenance+0x452>
						{
							bat1charge=true;
 8002d90:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <substatemachine_battery1_maintenance+0x578>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
							bat1discharge=false;
 8002d96:	4b51      	ldr	r3, [pc, #324]	; (8002edc <substatemachine_battery1_maintenance+0x574>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002d9c:	f7fe fd68 	bl	8001870 <gpio_func>
							state7guard = true;
 8002da0:	4b58      	ldr	r3, [pc, #352]	; (8002f04 <substatemachine_battery1_maintenance+0x59c>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
							_bat1timerfunc = false;
 8002da6:	4b4f      	ldr	r3, [pc, #316]	; (8002ee4 <substatemachine_battery1_maintenance+0x57c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
							_bat1_15min_wait_over=false;
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <substatemachine_battery1_maintenance+0x580>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
							_bat1_counter_var = 0;
 8002db2:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <substatemachine_battery1_maintenance+0x584>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	801a      	strh	r2, [r3, #0]
							{
								*BAT1_MAINT_STATE=8;
								state7guard=false;
							}
						}
						break;
 8002db8:	e083      	b.n	8002ec2 <substatemachine_battery1_maintenance+0x55a>
						else if(state7guard==true)
 8002dba:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <substatemachine_battery1_maintenance+0x59c>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d07f      	beq.n	8002ec2 <substatemachine_battery1_maintenance+0x55a>
							BAT_1_ASOC_MAINTENANCE = read_bat1_asoc();
 8002dc2:	f000 f905 	bl	8002fd0 <read_bat1_asoc>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002dcc:	801a      	strh	r2, [r3, #0]
							if(BAT_1_ASOC_MAINTENANCE==BAT_AUTOTEST_MAINTENANCE_ASOC_80)   // 73
 8002dce:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <substatemachine_battery1_maintenance+0x568>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	2b50      	cmp	r3, #80	; 0x50
 8002dd4:	d175      	bne.n	8002ec2 <substatemachine_battery1_maintenance+0x55a>
								*BAT1_MAINT_STATE=8;
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	701a      	strb	r2, [r3, #0]
								state7guard=false;
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <substatemachine_battery1_maintenance+0x59c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
						break;
 8002de4:	e06d      	b.n	8002ec2 <substatemachine_battery1_maintenance+0x55a>

					case 8:
						if(state8guard==false)
 8002de6:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <substatemachine_battery1_maintenance+0x5a0>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f083 0301 	eor.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00e      	beq.n	8002e12 <substatemachine_battery1_maintenance+0x4aa>
						{
							bat1discharge=false;
 8002df4:	4b39      	ldr	r3, [pc, #228]	; (8002edc <substatemachine_battery1_maintenance+0x574>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
							bat1charge=false;
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <substatemachine_battery1_maintenance+0x578>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
							gpio_func();
 8002e00:	f7fe fd36 	bl	8001870 <gpio_func>
							_bat1timerfunc=true;
 8002e04:	4b37      	ldr	r3, [pc, #220]	; (8002ee4 <substatemachine_battery1_maintenance+0x57c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
							state8guard=true;
 8002e0a:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <substatemachine_battery1_maintenance+0x5a0>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]

								connect_flag = true;

							}
						}
						break;
 8002e10:	e059      	b.n	8002ec6 <substatemachine_battery1_maintenance+0x55e>
						else if(state8guard==true)
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <substatemachine_battery1_maintenance+0x5a0>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d055      	beq.n	8002ec6 <substatemachine_battery1_maintenance+0x55e>
							if(_bat1_15min_wait_over==true)
 8002e1a:	4b33      	ldr	r3, [pc, #204]	; (8002ee8 <substatemachine_battery1_maintenance+0x580>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d051      	beq.n	8002ec6 <substatemachine_battery1_maintenance+0x55e>
								HAL_TIM_Base_Stop_IT(&htim2);
 8002e22:	4835      	ldr	r0, [pc, #212]	; (8002ef8 <substatemachine_battery1_maintenance+0x590>)
 8002e24:	f004 fbd6 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								HAL_TIM_Base_Stop_IT(&htim3);
 8002e28:	4834      	ldr	r0, [pc, #208]	; (8002efc <substatemachine_battery1_maintenance+0x594>)
 8002e2a:	f004 fbd3 	bl	80075d4 <HAL_TIM_Base_Stop_IT>
								update_maintenance_info_flag=false;
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <substatemachine_battery1_maintenance+0x598>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
			          Read_Bat1_Maint_autotest_result_last_80_percent();
 8002e34:	f7ff f91c 	bl	8002070 <Read_Bat1_Maint_autotest_result_last_80_percent>
								state8guard=false;
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <substatemachine_battery1_maintenance+0x5a0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
								_bat1timerfunc=false;
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <substatemachine_battery1_maintenance+0x57c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
								_bat1_15min_wait_over=false;
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <substatemachine_battery1_maintenance+0x580>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
								_bat1_counter_var = 0;
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <substatemachine_battery1_maintenance+0x584>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	801a      	strh	r2, [r3, #0]
								Autotestflag = false;
 8002e50:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <substatemachine_battery1_maintenance+0x5a4>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
								BAT_1_MAINTENANCE_FLAG = false;
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <substatemachine_battery1_maintenance+0x5a8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
								BAT_1_MAINT_GENERAL_INFO_FLAG = false;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <substatemachine_battery1_maintenance+0x5ac>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
								BAT_1_MAINTENANCE_ENTERED_GUARD_FLAG=false;
 8002e62:	4b2d      	ldr	r3, [pc, #180]	; (8002f18 <substatemachine_battery1_maintenance+0x5b0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
								BAT_1_MAINT_GENERAL_INFO_GUARD_FLAG=false;
 8002e68:	4b2c      	ldr	r3, [pc, #176]	; (8002f1c <substatemachine_battery1_maintenance+0x5b4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
								Bat_1_MAINT_SPECIFIC_PARA_GUARD_FLAG=false;
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <substatemachine_battery1_maintenance+0x5b8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
								bat1_specific_info_rte_flag=true;
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <substatemachine_battery1_maintenance+0x588>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
								printf("Auotest is finished\n");
 8002e7a:	482a      	ldr	r0, [pc, #168]	; (8002f24 <substatemachine_battery1_maintenance+0x5bc>)
 8002e7c:	f006 f946 	bl	800910c <puts>
								*BAT1_MAINT_STATE=0;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
								HAL_TIM_Base_Start_IT(&htim2);
 8002e88:	481b      	ldr	r0, [pc, #108]	; (8002ef8 <substatemachine_battery1_maintenance+0x590>)
 8002e8a:	f004 fb2b 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								HAL_TIM_Base_Start_IT(&htim3);
 8002e8e:	481b      	ldr	r0, [pc, #108]	; (8002efc <substatemachine_battery1_maintenance+0x594>)
 8002e90:	f004 fb28 	bl	80074e4 <HAL_TIM_Base_Start_IT>
								connect_flag = true;
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <substatemachine_battery1_maintenance+0x5c0>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
						break;
 8002e9a:	e014      	b.n	8002ec6 <substatemachine_battery1_maintenance+0x55e>

					default:
						*BAT1_MAINT_STATE = 0;
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <substatemachine_battery1_maintenance+0x56c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
						break;
 8002ea4:	e010      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
					}

				}   // End of Autotest
 8002ea6:	bf00      	nop
 8002ea8:	e00e      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002eaa:	bf00      	nop
 8002eac:	e00c      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002eae:	bf00      	nop
 8002eb0:	e00a      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002eb2:	bf00      	nop
 8002eb4:	e008      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002eb6:	bf00      	nop
 8002eb8:	e006      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002eba:	bf00      	nop
 8002ebc:	e004      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002ebe:	bf00      	nop
 8002ec0:	e002      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002ec2:	bf00      	nop
 8002ec4:	e000      	b.n	8002ec8 <substatemachine_battery1_maintenance+0x560>
						break;
 8002ec6:	bf00      	nop

			}   // end of maintenance



}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000099 	.word	0x20000099
 8002ed0:	200001e2 	.word	0x200001e2
 8002ed4:	20000280 	.word	0x20000280
 8002ed8:	2000009a 	.word	0x2000009a
 8002edc:	20000096 	.word	0x20000096
 8002ee0:	20000095 	.word	0x20000095
 8002ee4:	20000090 	.word	0x20000090
 8002ee8:	20000091 	.word	0x20000091
 8002eec:	20000092 	.word	0x20000092
 8002ef0:	20000000 	.word	0x20000000
 8002ef4:	2000009b 	.word	0x2000009b
 8002ef8:	200002e4 	.word	0x200002e4
 8002efc:	20000284 	.word	0x20000284
 8002f00:	200000b9 	.word	0x200000b9
 8002f04:	2000009c 	.word	0x2000009c
 8002f08:	2000009d 	.word	0x2000009d
 8002f0c:	2000009e 	.word	0x2000009e
 8002f10:	2000009f 	.word	0x2000009f
 8002f14:	200000a1 	.word	0x200000a1
 8002f18:	200000a0 	.word	0x200000a0
 8002f1c:	200000a2 	.word	0x200000a2
 8002f20:	200000a3 	.word	0x200000a3
 8002f24:	080099d4 	.word	0x080099d4
 8002f28:	20000001 	.word	0x20000001

08002f2c <Timer_15min>:
extern uint16_t _bat3_counter_var;	//   Variable as a counter
extern bool _bat3_15min_wait_over;


void Timer_15min()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	if(_bat1timerfunc==true)
 8002f30:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <Timer_15min+0x80>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <Timer_15min+0x2a>
	{
		_bat1_counter_var++;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <Timer_15min+0x84>)
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <Timer_15min+0x84>)
 8002f42:	801a      	strh	r2, [r3, #0]
		if(_bat1_counter_var==6000)
 8002f44:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <Timer_15min+0x84>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <Timer_15min+0x2a>
		{
			_bat1_15min_wait_over = true;
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <Timer_15min+0x88>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
		}
	}


	if(_bat2timerfunc==true)
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <Timer_15min+0x8c>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00e      	beq.n	8002f7c <Timer_15min+0x50>
	{
		_bat2_counter_var++;
 8002f5e:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <Timer_15min+0x90>)
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <Timer_15min+0x90>)
 8002f68:	801a      	strh	r2, [r3, #0]
		if(_bat2_counter_var==6000)
 8002f6a:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <Timer_15min+0x90>)
 8002f6c:	881b      	ldrh	r3, [r3, #0]
 8002f6e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d102      	bne.n	8002f7c <Timer_15min+0x50>
		{
			_bat2_15min_wait_over = true;
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <Timer_15min+0x94>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(_bat3timerfunc==true)
 8002f7c:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <Timer_15min+0x98>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <Timer_15min+0x76>
		{
			_bat3_counter_var++;
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <Timer_15min+0x9c>)
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <Timer_15min+0x9c>)
 8002f8e:	801a      	strh	r2, [r3, #0]
			if(_bat3_counter_var==6000)
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <Timer_15min+0x9c>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	f241 7270 	movw	r2, #6000	; 0x1770
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d102      	bne.n	8002fa2 <Timer_15min+0x76>
			{
				_bat3_15min_wait_over = true;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <Timer_15min+0xa0>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]





}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20000090 	.word	0x20000090
 8002fb0:	20000092 	.word	0x20000092
 8002fb4:	20000091 	.word	0x20000091
 8002fb8:	200000ba 	.word	0x200000ba
 8002fbc:	200000bc 	.word	0x200000bc
 8002fc0:	200000bb 	.word	0x200000bb
 8002fc4:	200000d8 	.word	0x200000d8
 8002fc8:	200000da 	.word	0x200000da
 8002fcc:	200000d9 	.word	0x200000d9

08002fd0 <read_bat1_asoc>:


extern I2C_HandleTypeDef hi2c1;

int read_bat1_asoc()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
	uint8_t rx_bat1_asoc[1]={0x00};
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	733b      	strb	r3, [r7, #12]
	uint8_t tx_asoc[1]={0x0E};
 8002fda:	230e      	movs	r3, #14
 8002fdc:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_asoc, 1);
 8002fde:	f107 0208 	add.w	r2, r7, #8
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2116      	movs	r1, #22
 8002fe6:	4822      	ldr	r0, [pc, #136]	; (8003070 <read_bat1_asoc+0xa0>)
 8002fe8:	f001 fc0a 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8002fec:	2005      	movs	r0, #5
 8002fee:	f000 ff3d 	bl	8003e6c <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_bat1_asoc, 1);
 8002ff2:	f107 020c 	add.w	r2, r7, #12
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2116      	movs	r1, #22
 8002ffa:	481d      	ldr	r0, [pc, #116]	; (8003070 <read_bat1_asoc+0xa0>)
 8002ffc:	f001 fc70 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 8003000:	2001      	movs	r0, #1
 8003002:	f000 ff33 	bl	8003e6c <msdelay>
	uint16_t BAT_1_ASOC_Read = rx_bat1_asoc[0];
 8003006:	7b3b      	ldrb	r3, [r7, #12]
 8003008:	81fb      	strh	r3, [r7, #14]
	rx_bat1_asoc[0]=0;
 800300a:	2300      	movs	r3, #0
 800300c:	733b      	strb	r3, [r7, #12]


	uint8_t tx_voltage[1]={0x09};
 800300e:	2309      	movs	r3, #9
 8003010:	713b      	strb	r3, [r7, #4]
	uint8_t rx_bat1_volt[2]={0x00,0x00};
 8003012:	2300      	movs	r3, #0
 8003014:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, 0x16, tx_voltage, 1);
 8003016:	1d3a      	adds	r2, r7, #4
 8003018:	2301      	movs	r3, #1
 800301a:	2116      	movs	r1, #22
 800301c:	4814      	ldr	r0, [pc, #80]	; (8003070 <read_bat1_asoc+0xa0>)
 800301e:	f001 fbef 	bl	8004800 <HAL_I2C_Master_Transmit_IT>
	msdelay(5);
 8003022:	2005      	movs	r0, #5
 8003024:	f000 ff22 	bl	8003e6c <msdelay>
	HAL_I2C_Master_Receive_IT(&hi2c1, 0x16, rx_bat1_volt, 2);
 8003028:	463a      	mov	r2, r7
 800302a:	2302      	movs	r3, #2
 800302c:	2116      	movs	r1, #22
 800302e:	4810      	ldr	r0, [pc, #64]	; (8003070 <read_bat1_asoc+0xa0>)
 8003030:	f001 fc56 	bl	80048e0 <HAL_I2C_Master_Receive_IT>
	msdelay(1);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 ff19 	bl	8003e6c <msdelay>
	BAT1_VOLTAGE_MAINTENANCE = rx_bat1_volt[1];
 800303a:	787b      	ldrb	r3, [r7, #1]
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <read_bat1_asoc+0xa4>)
 8003040:	801a      	strh	r2, [r3, #0]
	BAT1_VOLTAGE_MAINTENANCE = BAT1_VOLTAGE_MAINTENANCE << 8;
 8003042:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <read_bat1_asoc+0xa4>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	b29a      	uxth	r2, r3
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <read_bat1_asoc+0xa4>)
 800304c:	801a      	strh	r2, [r3, #0]
	BAT1_VOLTAGE_MAINTENANCE = BAT1_VOLTAGE_MAINTENANCE + rx_bat1_volt[0];
 800304e:	783b      	ldrb	r3, [r7, #0]
 8003050:	b29a      	uxth	r2, r3
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <read_bat1_asoc+0xa4>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <read_bat1_asoc+0xa4>)
 800305c:	801a      	strh	r2, [r3, #0]
	rx_bat1_volt[0]=0;
 800305e:	2300      	movs	r3, #0
 8003060:	703b      	strb	r3, [r7, #0]
	rx_bat1_volt[1]=0;
 8003062:	2300      	movs	r3, #0
 8003064:	707b      	strb	r3, [r7, #1]

	return BAT_1_ASOC_Read;
 8003066:	89fb      	ldrh	r3, [r7, #14]

}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	200001e4 	.word	0x200001e4
 8003074:	200002e0 	.word	0x200002e0

08003078 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003080:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003084:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003090:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003094:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003098:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00b      	beq.n	80030b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80030a0:	e000      	b.n	80030a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80030a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80030a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f9      	beq.n	80030a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80030ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i=0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e009      	b.n	80030f0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	60ba      	str	r2, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ffc7 	bl	8003078 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dbf1      	blt.n	80030dc <_write+0x16>
	return len;
 80030f8:	687b      	ldr	r3, [r7, #4]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003108:	f000 fef1 	bl	8003eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800310c:	f000 f876 	bl	80031fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003110:	f000 fae0 	bl	80036d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003114:	f000 f904 	bl	8003320 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003118:	f000 fa10 	bl	800353c <MX_TIM3_Init>
  MX_TIM4_Init();
 800311c:	f000 fa5c 	bl	80035d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003120:	f000 faa8 	bl	8003674 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003124:	f000 f9bc 	bl	80034a0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8003128:	f000 f93a 	bl	80033a0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800312c:	f000 f978 	bl	8003420 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);        // Timer 4 for providing delay
 8003130:	4824      	ldr	r0, [pc, #144]	; (80031c4 <main+0xc0>)
 8003132:	f004 f967 	bl	8007404 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);	   // Timer 3 for waiting purpose in the maintenance case
 8003136:	4824      	ldr	r0, [pc, #144]	; (80031c8 <main+0xc4>)
 8003138:	f004 f9d4 	bl	80074e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);	   // Timer 2 to update the maintenance use case parameters periodically
 800313c:	4823      	ldr	r0, [pc, #140]	; (80031cc <main+0xc8>)
 800313e:	f004 f9d1 	bl	80074e4 <HAL_TIM_Base_Start_IT>



	if(HAL_I2C_IsDeviceReady(&hi2c1,0x16, 5, 10)==HAL_OK)
 8003142:	230a      	movs	r3, #10
 8003144:	2205      	movs	r2, #5
 8003146:	2116      	movs	r1, #22
 8003148:	4821      	ldr	r0, [pc, #132]	; (80031d0 <main+0xcc>)
 800314a:	f001 fc39 	bl	80049c0 <HAL_I2C_IsDeviceReady>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <main+0x5a>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003154:	2201      	movs	r2, #1
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	481e      	ldr	r0, [pc, #120]	; (80031d4 <main+0xd0>)
 800315a:	f001 faa7 	bl	80046ac <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c2,0x16, 5, 10)==HAL_OK)
 800315e:	230a      	movs	r3, #10
 8003160:	2205      	movs	r2, #5
 8003162:	2116      	movs	r1, #22
 8003164:	481c      	ldr	r0, [pc, #112]	; (80031d8 <main+0xd4>)
 8003166:	f001 fc2b 	bl	80049c0 <HAL_I2C_IsDeviceReady>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <main+0x78>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8003170:	2201      	movs	r2, #1
 8003172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003176:	4817      	ldr	r0, [pc, #92]	; (80031d4 <main+0xd0>)
 8003178:	f001 fa98 	bl	80046ac <HAL_GPIO_WritePin>


	}

	if(HAL_I2C_IsDeviceReady(&hi2c3,0x16, 5, 10)==HAL_OK)
 800317c:	230a      	movs	r3, #10
 800317e:	2205      	movs	r2, #5
 8003180:	2116      	movs	r1, #22
 8003182:	4816      	ldr	r0, [pc, #88]	; (80031dc <main+0xd8>)
 8003184:	f001 fc1c 	bl	80049c0 <HAL_I2C_IsDeviceReady>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <main+0x94>
	{

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	2101      	movs	r1, #1
 8003192:	4810      	ldr	r0, [pc, #64]	; (80031d4 <main+0xd0>)
 8003194:	f001 fa8a 	bl	80046ac <HAL_GPIO_WritePin>
	}




	__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <main+0xdc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <main+0xdc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0220 	orr.w	r2, r2, #32
 80031a6:	601a      	str	r2, [r3, #0]

	BAT1_MAINT_STATE = &bat1_state;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <main+0xe0>)
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <main+0xe4>)
 80031ac:	601a      	str	r2, [r3, #0]
	BAT2_MAINT_STATE = &bat2_state;
 80031ae:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <main+0xe8>)
 80031b0:	4a0f      	ldr	r2, [pc, #60]	; (80031f0 <main+0xec>)
 80031b2:	601a      	str	r2, [r3, #0]
	BAT3_MAINT_STATE = &bat3_state;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <main+0xf0>)
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <main+0xf4>)
 80031b8:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		connect_to_Pi();
 80031ba:	f7ff f93d 	bl	8002438 <connect_to_Pi>
//		connect_to_Pi2();
		substatemachine_battery1_maintenance(); // This function Works
 80031be:	f7ff fbd3 	bl	8002968 <substatemachine_battery1_maintenance>
		connect_to_Pi();
 80031c2:	e7fa      	b.n	80031ba <main+0xb6>
 80031c4:	20000188 	.word	0x20000188
 80031c8:	20000284 	.word	0x20000284
 80031cc:	200002e4 	.word	0x200002e4
 80031d0:	200001e4 	.word	0x200001e4
 80031d4:	40020400 	.word	0x40020400
 80031d8:	20000230 	.word	0x20000230
 80031dc:	2000013c 	.word	0x2000013c
 80031e0:	20000330 	.word	0x20000330
 80031e4:	20000280 	.word	0x20000280
 80031e8:	20000094 	.word	0x20000094
 80031ec:	20000138 	.word	0x20000138
 80031f0:	200000be 	.word	0x200000be
 80031f4:	200003b4 	.word	0x200003b4
 80031f8:	200000dc 	.word	0x200000dc

080031fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0b4      	sub	sp, #208	; 0xd0
 8003200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003202:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003206:	2230      	movs	r2, #48	; 0x30
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f005 ff08 	bl	8009020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003210:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003220:	f107 0308 	add.w	r3, r7, #8
 8003224:	2284      	movs	r2, #132	; 0x84
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f005 fef9 	bl	8009020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <SystemClock_Config+0x118>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a38      	ldr	r2, [pc, #224]	; (8003314 <SystemClock_Config+0x118>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b36      	ldr	r3, [pc, #216]	; (8003314 <SystemClock_Config+0x118>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003246:	4b34      	ldr	r3, [pc, #208]	; (8003318 <SystemClock_Config+0x11c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800324e:	4a32      	ldr	r2, [pc, #200]	; (8003318 <SystemClock_Config+0x11c>)
 8003250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <SystemClock_Config+0x11c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003262:	2302      	movs	r3, #2
 8003264:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003268:	2301      	movs	r3, #1
 800326a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800326e:	2310      	movs	r3, #16
 8003270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003274:	2302      	movs	r3, #2
 8003276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003280:	2308      	movs	r3, #8
 8003282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003286:	2348      	movs	r3, #72	; 0x48
 8003288:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003292:	2303      	movs	r3, #3
 8003294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003298:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800329c:	4618      	mov	r0, r3
 800329e:	f002 ffc3 	bl	8006228 <HAL_RCC_OscConfig>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80032a8:	f000 fae2 	bl	8003870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032ac:	230f      	movs	r3, #15
 80032ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fa4c 	bl	8006770 <HAL_RCC_ClockConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80032de:	f000 fac7 	bl	8003870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <SystemClock_Config+0x120>)
 80032e4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032e6:	2300      	movs	r3, #0
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80032ee:	2300      	movs	r3, #0
 80032f0:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80032f2:	2300      	movs	r3, #0
 80032f4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fc3a 	bl	8006b74 <HAL_RCCEx_PeriphCLKConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8003306:	f000 fab3 	bl	8003870 <Error_Handler>
  }
}
 800330a:	bf00      	nop
 800330c:	37d0      	adds	r7, #208	; 0xd0
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	0001c080 	.word	0x0001c080

08003320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <MX_I2C1_Init+0x74>)
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <MX_I2C1_Init+0x78>)
 8003328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_I2C1_Init+0x74>)
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <MX_I2C1_Init+0x7c>)
 800332e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <MX_I2C1_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_I2C1_Init+0x74>)
 8003338:	2201      	movs	r2, #1
 800333a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <MX_I2C1_Init+0x74>)
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_I2C1_Init+0x74>)
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_I2C1_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_I2C1_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <MX_I2C1_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800335a:	480e      	ldr	r0, [pc, #56]	; (8003394 <MX_I2C1_Init+0x74>)
 800335c:	f001 f9c0 	bl	80046e0 <HAL_I2C_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003366:	f000 fa83 	bl	8003870 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800336a:	2100      	movs	r1, #0
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <MX_I2C1_Init+0x74>)
 800336e:	f002 fec3 	bl	80060f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003378:	f000 fa7a 	bl	8003870 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800337c:	2100      	movs	r1, #0
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <MX_I2C1_Init+0x74>)
 8003380:	f002 ff05 	bl	800618e <HAL_I2CEx_ConfigDigitalFilter>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800338a:	f000 fa71 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200001e4 	.word	0x200001e4
 8003398:	40005400 	.word	0x40005400
 800339c:	00808cd2 	.word	0x00808cd2

080033a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <MX_I2C2_Init+0x74>)
 80033a6:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <MX_I2C2_Init+0x78>)
 80033a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <MX_I2C2_Init+0x74>)
 80033ac:	4a1b      	ldr	r2, [pc, #108]	; (800341c <MX_I2C2_Init+0x7c>)
 80033ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80033b0:	4b18      	ldr	r3, [pc, #96]	; (8003414 <MX_I2C2_Init+0x74>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b6:	4b17      	ldr	r3, [pc, #92]	; (8003414 <MX_I2C2_Init+0x74>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033bc:	4b15      	ldr	r3, [pc, #84]	; (8003414 <MX_I2C2_Init+0x74>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80033c2:	4b14      	ldr	r3, [pc, #80]	; (8003414 <MX_I2C2_Init+0x74>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c8:	4b12      	ldr	r3, [pc, #72]	; (8003414 <MX_I2C2_Init+0x74>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <MX_I2C2_Init+0x74>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d4:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <MX_I2C2_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80033da:	480e      	ldr	r0, [pc, #56]	; (8003414 <MX_I2C2_Init+0x74>)
 80033dc:	f001 f980 	bl	80046e0 <HAL_I2C_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80033e6:	f000 fa43 	bl	8003870 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033ea:	2100      	movs	r1, #0
 80033ec:	4809      	ldr	r0, [pc, #36]	; (8003414 <MX_I2C2_Init+0x74>)
 80033ee:	f002 fe83 	bl	80060f8 <HAL_I2CEx_ConfigAnalogFilter>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80033f8:	f000 fa3a 	bl	8003870 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80033fc:	2100      	movs	r1, #0
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <MX_I2C2_Init+0x74>)
 8003400:	f002 fec5 	bl	800618e <HAL_I2CEx_ConfigDigitalFilter>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800340a:	f000 fa31 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000230 	.word	0x20000230
 8003418:	40005800 	.word	0x40005800
 800341c:	00808cd2 	.word	0x00808cd2

08003420 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <MX_I2C3_Init+0x74>)
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <MX_I2C3_Init+0x78>)
 8003428:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00808CD2;
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <MX_I2C3_Init+0x74>)
 800342c:	4a1b      	ldr	r2, [pc, #108]	; (800349c <MX_I2C3_Init+0x7c>)
 800342e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <MX_I2C3_Init+0x74>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003436:	4b17      	ldr	r3, [pc, #92]	; (8003494 <MX_I2C3_Init+0x74>)
 8003438:	2201      	movs	r2, #1
 800343a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <MX_I2C3_Init+0x74>)
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003442:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_I2C3_Init+0x74>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <MX_I2C3_Init+0x74>)
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_I2C3_Init+0x74>)
 8003450:	2200      	movs	r2, #0
 8003452:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_I2C3_Init+0x74>)
 8003456:	2200      	movs	r2, #0
 8003458:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800345a:	480e      	ldr	r0, [pc, #56]	; (8003494 <MX_I2C3_Init+0x74>)
 800345c:	f001 f940 	bl	80046e0 <HAL_I2C_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003466:	f000 fa03 	bl	8003870 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800346a:	2100      	movs	r1, #0
 800346c:	4809      	ldr	r0, [pc, #36]	; (8003494 <MX_I2C3_Init+0x74>)
 800346e:	f002 fe43 	bl	80060f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003478:	f000 f9fa 	bl	8003870 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800347c:	2100      	movs	r1, #0
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_I2C3_Init+0x74>)
 8003480:	f002 fe85 	bl	800618e <HAL_I2CEx_ConfigDigitalFilter>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800348a:	f000 f9f1 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2000013c 	.word	0x2000013c
 8003498:	40005c00 	.word	0x40005c00
 800349c:	00808cd2 	.word	0x00808cd2

080034a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <MX_TIM2_Init+0x98>)
 80034c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80034c6:	4b1c      	ldr	r3, [pc, #112]	; (8003538 <MX_TIM2_Init+0x98>)
 80034c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80034cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <MX_TIM2_Init+0x98>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <MX_TIM2_Init+0x98>)
 80034d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <MX_TIM2_Init+0x98>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <MX_TIM2_Init+0x98>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034e8:	4813      	ldr	r0, [pc, #76]	; (8003538 <MX_TIM2_Init+0x98>)
 80034ea:	f003 ff33 	bl	8007354 <HAL_TIM_Base_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80034f4:	f000 f9bc 	bl	8003870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034fe:	f107 0310 	add.w	r3, r7, #16
 8003502:	4619      	mov	r1, r3
 8003504:	480c      	ldr	r0, [pc, #48]	; (8003538 <MX_TIM2_Init+0x98>)
 8003506:	f004 f9b3 	bl	8007870 <HAL_TIM_ConfigClockSource>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003510:	f000 f9ae 	bl	8003870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800351c:	1d3b      	adds	r3, r7, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4805      	ldr	r0, [pc, #20]	; (8003538 <MX_TIM2_Init+0x98>)
 8003522:	f004 fbcd 	bl	8007cc0 <HAL_TIMEx_MasterConfigSynchronization>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800352c:	f000 f9a0 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003530:	bf00      	nop
 8003532:	3720      	adds	r7, #32
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200002e4 	.word	0x200002e4

0800353c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <MX_TIM3_Init+0x94>)
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <MX_TIM3_Init+0x98>)
 800355e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <MX_TIM3_Init+0x94>)
 8003562:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003566:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003568:	4b19      	ldr	r3, [pc, #100]	; (80035d0 <MX_TIM3_Init+0x94>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800356e:	4b18      	ldr	r3, [pc, #96]	; (80035d0 <MX_TIM3_Init+0x94>)
 8003570:	2263      	movs	r2, #99	; 0x63
 8003572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <MX_TIM3_Init+0x94>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <MX_TIM3_Init+0x94>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003580:	4813      	ldr	r0, [pc, #76]	; (80035d0 <MX_TIM3_Init+0x94>)
 8003582:	f003 fee7 	bl	8007354 <HAL_TIM_Base_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800358c:	f000 f970 	bl	8003870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003594:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4619      	mov	r1, r3
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <MX_TIM3_Init+0x94>)
 800359e:	f004 f967 	bl	8007870 <HAL_TIM_ConfigClockSource>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80035a8:	f000 f962 	bl	8003870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035b4:	1d3b      	adds	r3, r7, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <MX_TIM3_Init+0x94>)
 80035ba:	f004 fb81 	bl	8007cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80035c4:	f000 f954 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000284 	.word	0x20000284
 80035d4:	40000400 	.word	0x40000400

080035d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b088      	sub	sp, #32
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035de:	f107 0310 	add.w	r3, r7, #16
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <MX_TIM4_Init+0x94>)
 80035f8:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <MX_TIM4_Init+0x98>)
 80035fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <MX_TIM4_Init+0x94>)
 80035fe:	2247      	movs	r2, #71	; 0x47
 8003600:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <MX_TIM4_Init+0x94>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <MX_TIM4_Init+0x94>)
 800360a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003610:	4b16      	ldr	r3, [pc, #88]	; (800366c <MX_TIM4_Init+0x94>)
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	4b15      	ldr	r3, [pc, #84]	; (800366c <MX_TIM4_Init+0x94>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800361c:	4813      	ldr	r0, [pc, #76]	; (800366c <MX_TIM4_Init+0x94>)
 800361e:	f003 fe99 	bl	8007354 <HAL_TIM_Base_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003628:	f000 f922 	bl	8003870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003632:	f107 0310 	add.w	r3, r7, #16
 8003636:	4619      	mov	r1, r3
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <MX_TIM4_Init+0x94>)
 800363a:	f004 f919 	bl	8007870 <HAL_TIM_ConfigClockSource>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003644:	f000 f914 	bl	8003870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	; (800366c <MX_TIM4_Init+0x94>)
 8003656:	f004 fb33 	bl	8007cc0 <HAL_TIMEx_MasterConfigSynchronization>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003660:	f000 f906 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000188 	.word	0x20000188
 8003670:	40000800 	.word	0x40000800

08003674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <MX_USART2_UART_Init+0x58>)
 800367a:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <MX_USART2_UART_Init+0x5c>)
 800367c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <MX_USART2_UART_Init+0x58>)
 8003680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <MX_USART2_UART_Init+0x58>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <MX_USART2_UART_Init+0x58>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <MX_USART2_UART_Init+0x58>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <MX_USART2_UART_Init+0x58>)
 800369a:	220c      	movs	r2, #12
 800369c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <MX_USART2_UART_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <MX_USART2_UART_Init+0x58>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <MX_USART2_UART_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <MX_USART2_UART_Init+0x58>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036b6:	4805      	ldr	r0, [pc, #20]	; (80036cc <MX_USART2_UART_Init+0x58>)
 80036b8:	f004 fbae 	bl	8007e18 <HAL_UART_Init>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036c2:	f000 f8d5 	bl	8003870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000330 	.word	0x20000330
 80036d0:	40004400 	.word	0x40004400

080036d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036ea:	4b49      	ldr	r3, [pc, #292]	; (8003810 <MX_GPIO_Init+0x13c>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a48      	ldr	r2, [pc, #288]	; (8003810 <MX_GPIO_Init+0x13c>)
 80036f0:	f043 0320 	orr.w	r3, r3, #32
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b46      	ldr	r3, [pc, #280]	; (8003810 <MX_GPIO_Init+0x13c>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	4a42      	ldr	r2, [pc, #264]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6313      	str	r3, [r2, #48]	; 0x30
 800370e:	4b40      	ldr	r3, [pc, #256]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371a:	4b3d      	ldr	r3, [pc, #244]	; (8003810 <MX_GPIO_Init+0x13c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a36      	ldr	r2, [pc, #216]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b34      	ldr	r3, [pc, #208]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800374a:	4b31      	ldr	r3, [pc, #196]	; (8003810 <MX_GPIO_Init+0x13c>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a30      	ldr	r2, [pc, #192]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <MX_GPIO_Init+0x13c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8003762:	2200      	movs	r2, #0
 8003764:	2160      	movs	r1, #96	; 0x60
 8003766:	482b      	ldr	r0, [pc, #172]	; (8003814 <MX_GPIO_Init+0x140>)
 8003768:	f000 ffa0 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800376c:	2200      	movs	r2, #0
 800376e:	f247 0181 	movw	r1, #28801	; 0x7081
 8003772:	4829      	ldr	r0, [pc, #164]	; (8003818 <MX_GPIO_Init+0x144>)
 8003774:	f000 ff9a 	bl	80046ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800377e:	4827      	ldr	r0, [pc, #156]	; (800381c <MX_GPIO_Init+0x148>)
 8003780:	f000 ff94 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800378a:	4825      	ldr	r0, [pc, #148]	; (8003820 <MX_GPIO_Init+0x14c>)
 800378c:	f000 ff8e 	bl	80046ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003790:	2360      	movs	r3, #96	; 0x60
 8003792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003794:	2301      	movs	r3, #1
 8003796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	2300      	movs	r3, #0
 800379e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	4619      	mov	r1, r3
 80037a6:	481b      	ldr	r0, [pc, #108]	; (8003814 <MX_GPIO_Init+0x140>)
 80037a8:	f000 fdd4 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB13 PB14
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80037ac:	f247 0381 	movw	r3, #28801	; 0x7081
 80037b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	4619      	mov	r1, r3
 80037c4:	4814      	ldr	r0, [pc, #80]	; (8003818 <MX_GPIO_Init+0x144>)
 80037c6:	f000 fdc5 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d0:	2301      	movs	r3, #1
 80037d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d8:	2300      	movs	r3, #0
 80037da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4619      	mov	r1, r3
 80037e2:	480e      	ldr	r0, [pc, #56]	; (800381c <MX_GPIO_Init+0x148>)
 80037e4:	f000 fdb6 	bl	8004354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80037e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ee:	2301      	movs	r3, #1
 80037f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4619      	mov	r1, r3
 8003800:	4807      	ldr	r0, [pc, #28]	; (8003820 <MX_GPIO_Init+0x14c>)
 8003802:	f000 fda7 	bl	8004354 <HAL_GPIO_Init>

}
 8003806:	bf00      	nop
 8003808:	3728      	adds	r7, #40	; 0x28
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800
 8003814:	40020800 	.word	0x40020800
 8003818:	40020400 	.word	0x40020400
 800381c:	40020c00 	.word	0x40020c00
 8003820:	40020000 	.word	0x40020000

08003824 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 16-bit TIM3 is used as an interrupt - every 10 ms
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	if(htim==&htim3)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a09      	ldr	r2, [pc, #36]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Timer_15min();
 8003834:	f7ff fb7a 	bl	8002f2c <Timer_15min>

	}

	if(htim==&htim2)  // Configured as an interrupt - every 100 ms
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a07      	ldr	r2, [pc, #28]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d105      	bne.n	800384c <HAL_TIM_PeriodElapsedCallback+0x28>
	{


		update_periodic_flags_during_maintenance_bat1();
 8003840:	f7fd f8b4 	bl	80009ac <update_periodic_flags_during_maintenance_bat1>
		update_periodic_flags_during_maintenance_bat2();
 8003844:	f7fd f946 	bl	8000ad4 <update_periodic_flags_during_maintenance_bat2>
		update_periodic_flags_during_maintenance_bat3();
 8003848:	f7fd f9d8 	bl	8000bfc <update_periodic_flags_during_maintenance_bat3>

	}
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20000284 	.word	0x20000284
 8003858:	200002e4 	.word	0x200002e4

0800385c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	// UNUSED(huart);


	commands_from_pi_to_stm();
 8003864:	f7fd fdc2 	bl	80013ec <commands_from_pi_to_stm>


}
 8003868:	bf00      	nop
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003874:	b672      	cpsid	i
}
 8003876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003878:	e7fe      	b.n	8003878 <Error_Handler+0x8>
	...

0800387c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_MspInit+0x44>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_MspInit+0x44>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_MspInit+0x44>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_MspInit+0x44>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <HAL_MspInit+0x44>)
 80038a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a4:	6453      	str	r3, [r2, #68]	; 0x44
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_MspInit+0x44>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800

080038c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	; 0x38
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6c      	ldr	r2, [pc, #432]	; (8003a94 <HAL_I2C_MspInit+0x1d0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d139      	bne.n	800395a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a6b      	ldr	r2, [pc, #428]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80038ec:	f043 0302 	orr.w	r3, r3, #2
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b69      	ldr	r3, [pc, #420]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80038fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003904:	2312      	movs	r3, #18
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003908:	2301      	movs	r3, #1
 800390a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	2303      	movs	r3, #3
 800390e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003910:	2304      	movs	r3, #4
 8003912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003918:	4619      	mov	r1, r3
 800391a:	4860      	ldr	r0, [pc, #384]	; (8003a9c <HAL_I2C_MspInit+0x1d8>)
 800391c:	f000 fd1a 	bl	8004354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003920:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800392a:	6413      	str	r3, [r2, #64]	; 0x40
 800392c:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2100      	movs	r1, #0
 800393c:	201f      	movs	r0, #31
 800393e:	f000 fc32 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003942:	201f      	movs	r0, #31
 8003944:	f000 fc4b 	bl	80041de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003948:	2200      	movs	r2, #0
 800394a:	2100      	movs	r1, #0
 800394c:	2020      	movs	r0, #32
 800394e:	f000 fc2a 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003952:	2020      	movs	r0, #32
 8003954:	f000 fc43 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003958:	e098      	b.n	8003a8c <HAL_I2C_MspInit+0x1c8>
  else if(hi2c->Instance==I2C2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a50      	ldr	r2, [pc, #320]	; (8003aa0 <HAL_I2C_MspInit+0x1dc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d138      	bne.n	80039d6 <HAL_I2C_MspInit+0x112>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003964:	4b4c      	ldr	r3, [pc, #304]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	4a4b      	ldr	r2, [pc, #300]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 800396a:	f043 0320 	orr.w	r3, r3, #32
 800396e:	6313      	str	r3, [r2, #48]	; 0x30
 8003970:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	f003 0320 	and.w	r3, r3, #32
 8003978:	61bb      	str	r3, [r7, #24]
 800397a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800397c:	2303      	movs	r3, #3
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003980:	2312      	movs	r3, #18
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003988:	2303      	movs	r3, #3
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800398c:	2304      	movs	r3, #4
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003994:	4619      	mov	r1, r3
 8003996:	4843      	ldr	r0, [pc, #268]	; (8003aa4 <HAL_I2C_MspInit+0x1e0>)
 8003998:	f000 fcdc 	bl	8004354 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800399c:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039a6:	6413      	str	r3, [r2, #64]	; 0x40
 80039a8:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2021      	movs	r0, #33	; 0x21
 80039ba:	f000 fbf4 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80039be:	2021      	movs	r0, #33	; 0x21
 80039c0:	f000 fc0d 	bl	80041de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80039c4:	2200      	movs	r2, #0
 80039c6:	2100      	movs	r1, #0
 80039c8:	2022      	movs	r0, #34	; 0x22
 80039ca:	f000 fbec 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80039ce:	2022      	movs	r0, #34	; 0x22
 80039d0:	f000 fc05 	bl	80041de <HAL_NVIC_EnableIRQ>
}
 80039d4:	e05a      	b.n	8003a8c <HAL_I2C_MspInit+0x1c8>
  else if(hi2c->Instance==I2C3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a33      	ldr	r2, [pc, #204]	; (8003aa8 <HAL_I2C_MspInit+0x1e4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d155      	bne.n	8003a8c <HAL_I2C_MspInit+0x1c8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6313      	str	r3, [r2, #48]	; 0x30
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a16:	2312      	movs	r3, #18
 8003a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a22:	2304      	movs	r3, #4
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	481f      	ldr	r0, [pc, #124]	; (8003aac <HAL_I2C_MspInit+0x1e8>)
 8003a2e:	f000 fc91 	bl	8004354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a40:	2303      	movs	r3, #3
 8003a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a44:	2304      	movs	r3, #4
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4818      	ldr	r0, [pc, #96]	; (8003ab0 <HAL_I2C_MspInit+0x1ec>)
 8003a50:	f000 fc80 	bl	8004354 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_I2C_MspInit+0x1d4>)
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2048      	movs	r0, #72	; 0x48
 8003a72:	f000 fb98 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003a76:	2048      	movs	r0, #72	; 0x48
 8003a78:	f000 fbb1 	bl	80041de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2049      	movs	r0, #73	; 0x49
 8003a82:	f000 fb90 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003a86:	2049      	movs	r0, #73	; 0x49
 8003a88:	f000 fba9 	bl	80041de <HAL_NVIC_EnableIRQ>
}
 8003a8c:	bf00      	nop
 8003a8e:	3738      	adds	r7, #56	; 0x38
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40005400 	.word	0x40005400
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	40005800 	.word	0x40005800
 8003aa4:	40021400 	.word	0x40021400
 8003aa8:	40005c00 	.word	0x40005c00
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020000 	.word	0x40020000

08003ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac4:	d114      	bne.n	8003af0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	201c      	movs	r0, #28
 8003ae4:	f000 fb5f 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ae8:	201c      	movs	r0, #28
 8003aea:	f000 fb78 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003aee:	e02a      	b.n	8003b46 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a17      	ldr	r2, [pc, #92]	; (8003b54 <HAL_TIM_Base_MspInit+0xa0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d114      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a14      	ldr	r2, [pc, #80]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003b12:	2200      	movs	r2, #0
 8003b14:	2101      	movs	r1, #1
 8003b16:	201d      	movs	r0, #29
 8003b18:	f000 fb45 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1c:	201d      	movs	r0, #29
 8003b1e:	f000 fb5e 	bl	80041de <HAL_NVIC_EnableIRQ>
}
 8003b22:	e010      	b.n	8003b46 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0b      	ldr	r2, [pc, #44]	; (8003b58 <HAL_TIM_Base_MspInit+0xa4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d10b      	bne.n	8003b46 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b2e:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_TIM_Base_MspInit+0x9c>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800

08003b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_UART_MspInit+0x8c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d12f      	bne.n	8003bde <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	4a14      	ldr	r2, [pc, #80]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_UART_MspInit+0x90>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bae:	230c      	movs	r3, #12
 8003bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc2:	f107 0314 	add.w	r3, r7, #20
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4809      	ldr	r0, [pc, #36]	; (8003bf0 <HAL_UART_MspInit+0x94>)
 8003bca:	f000 fbc3 	bl	8004354 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2026      	movs	r0, #38	; 0x26
 8003bd4:	f000 fae7 	bl	80041a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bd8:	2026      	movs	r0, #38	; 0x26
 8003bda:	f000 fb00 	bl	80041de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bde:	bf00      	nop
 8003be0:	3728      	adds	r7, #40	; 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40004400 	.word	0x40004400
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40020000 	.word	0x40020000

08003bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <NMI_Handler+0x4>

08003bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfe:	e7fe      	b.n	8003bfe <HardFault_Handler+0x4>

08003c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <MemManage_Handler+0x4>

08003c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <BusFault_Handler+0x4>

08003c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <UsageFault_Handler+0x4>

08003c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c32:	bf00      	nop
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c40:	f000 f992 	bl	8003f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <TIM2_IRQHandler+0x10>)
 8003c4e:	f003 fcf0 	bl	8007632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200002e4 	.word	0x200002e4

08003c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM3_IRQHandler+0x10>)
 8003c62:	f003 fce6 	bl	8007632 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000284 	.word	0x20000284

08003c70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <I2C1_EV_IRQHandler+0x10>)
 8003c76:	f000 ffab 	bl	8004bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	200001e4 	.word	0x200001e4

08003c84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <I2C1_ER_IRQHandler+0x10>)
 8003c8a:	f000 ffbb 	bl	8004c04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200001e4 	.word	0x200001e4

08003c98 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <I2C2_EV_IRQHandler+0x10>)
 8003c9e:	f000 ff97 	bl	8004bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000230 	.word	0x20000230

08003cac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <I2C2_ER_IRQHandler+0x10>)
 8003cb2:	f000 ffa7 	bl	8004c04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000230 	.word	0x20000230

08003cc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003cc4:	4804      	ldr	r0, [pc, #16]	; (8003cd8 <USART2_IRQHandler+0x18>)
 8003cc6:	f004 f98f 	bl	8007fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, rx_buffer, 14);
 8003cca:	220e      	movs	r2, #14
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <USART2_IRQHandler+0x1c>)
 8003cce:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <USART2_IRQHandler+0x18>)
 8003cd0:	f004 f94c 	bl	8007f6c <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000330 	.word	0x20000330
 8003cdc:	200002d0 	.word	0x200002d0

08003ce0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <I2C3_EV_IRQHandler+0x10>)
 8003ce6:	f000 ff73 	bl	8004bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000013c 	.word	0x2000013c

08003cf4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <I2C3_ER_IRQHandler+0x10>)
 8003cfa:	f000 ff83 	bl	8004c04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000013c 	.word	0x2000013c

08003d08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e00a      	b.n	8003d30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d1a:	f3af 8000 	nop.w
 8003d1e:	4601      	mov	r1, r0
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	60ba      	str	r2, [r7, #8]
 8003d26:	b2ca      	uxtb	r2, r1
 8003d28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	dbf0      	blt.n	8003d1a <_read+0x12>
	}

return len;
 8003d38:	687b      	ldr	r3, [r7, #4]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	return -1;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d6a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_isatty>:

int _isatty(int file)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	return 1;
 8003d82:	2301      	movs	r3, #1
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	return 0;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003db4:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <_sbrk+0x5c>)
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <_sbrk+0x60>)
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <_sbrk+0x64>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dc8:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <_sbrk+0x64>)
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <_sbrk+0x68>)
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dce:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <_sbrk+0x64>)
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d207      	bcs.n	8003dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ddc:	f005 f8f6 	bl	8008fcc <__errno>
 8003de0:	4603      	mov	r3, r0
 8003de2:	220c      	movs	r2, #12
 8003de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dea:	e009      	b.n	8003e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dec:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <_sbrk+0x64>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4a05      	ldr	r2, [pc, #20]	; (8003e10 <_sbrk+0x64>)
 8003dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20050000 	.word	0x20050000
 8003e0c:	00000400 	.word	0x00000400
 8003e10:	200000f8 	.word	0x200000f8
 8003e14:	200003d0 	.word	0x200003d0

08003e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <SystemInit+0x20>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <SystemInit+0x20>)
 8003e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e2c:	bf00      	nop
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <usdelay>:

extern TIM_HandleTypeDef htim4;


void usdelay (uint32_t us)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <usdelay+0x2c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8003e4c:	bf00      	nop
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <usdelay+0x2c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d8f9      	bhi.n	8003e4e <usdelay+0x12>
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	20000188 	.word	0x20000188

08003e6c <msdelay>:

void msdelay(uint32_t ms)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<ms;i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e006      	b.n	8003e88 <msdelay+0x1c>
	{
		usdelay(1000);                  // 1ms delay
 8003e7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e7e:	f7ff ffdd 	bl	8003e3c <usdelay>
	for(uint32_t i=0;i<ms;i++)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3301      	adds	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3f4      	bcc.n	8003e7a <msdelay+0xe>
	}
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0b      	ldr	r2, [pc, #44]	; (8003ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb8:	4c0b      	ldr	r4, [pc, #44]	; (8003ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ec6:	f7ff ffa7 	bl	8003e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003eca:	f005 f885 	bl	8008fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ece:	f7ff f919 	bl	8003104 <main>
  bx  lr    
 8003ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ed4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003ee0:	08009a74 	.word	0x08009a74
  ldr r2, =_sbss
 8003ee4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003ee8:	200003cc 	.word	0x200003cc

08003eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>

08003eee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef2:	2003      	movs	r0, #3
 8003ef4:	f000 f94c 	bl	8004190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 f805 	bl	8003f08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003efe:	f7ff fcbd 	bl	800387c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f10:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <HAL_InitTick+0x54>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_InitTick+0x58>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f967 	bl	80041fa <HAL_SYSTICK_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00e      	b.n	8003f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b0f      	cmp	r3, #15
 8003f3a:	d80a      	bhi.n	8003f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	f000 f92f 	bl	80041a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f48:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <HAL_InitTick+0x5c>)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e000      	b.n	8003f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000004 	.word	0x20000004
 8003f60:	2000000c 	.word	0x2000000c
 8003f64:	20000008 	.word	0x20000008

08003f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_IncTick+0x20>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_IncTick+0x24>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4413      	add	r3, r2
 8003f78:	4a04      	ldr	r2, [pc, #16]	; (8003f8c <HAL_IncTick+0x24>)
 8003f7a:	6013      	str	r3, [r2, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	200003b8 	.word	0x200003b8

08003f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return uwTick;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_GetTick+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	200003b8 	.word	0x200003b8

08003fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7ff ffee 	bl	8003f90 <HAL_GetTick>
 8003fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d005      	beq.n	8003fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_Delay+0x44>)
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fce:	bf00      	nop
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d8f7      	bhi.n	8003fd0 <HAL_Delay+0x28>
  {
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000000c 	.word	0x2000000c

08003ff0 <__NVIC_SetPriorityGrouping>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <__NVIC_SetPriorityGrouping+0x40>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800400c:	4013      	ands	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <__NVIC_SetPriorityGrouping+0x44>)
 800401a:	4313      	orrs	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800401e:	4a04      	ldr	r2, [pc, #16]	; (8004030 <__NVIC_SetPriorityGrouping+0x40>)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	60d3      	str	r3, [r2, #12]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	05fa0000 	.word	0x05fa0000

08004038 <__NVIC_GetPriorityGrouping>:
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <__NVIC_GetPriorityGrouping+0x18>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	f003 0307 	and.w	r3, r3, #7
}
 8004046:	4618      	mov	r0, r3
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	e000ed00 	.word	0xe000ed00

08004054 <__NVIC_EnableIRQ>:
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800405e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004062:	2b00      	cmp	r3, #0
 8004064:	db0b      	blt.n	800407e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	f003 021f 	and.w	r2, r3, #31
 800406c:	4907      	ldr	r1, [pc, #28]	; (800408c <__NVIC_EnableIRQ+0x38>)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2001      	movs	r0, #1
 8004076:	fa00 f202 	lsl.w	r2, r0, r2
 800407a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	e000e100 	.word	0xe000e100

08004090 <__NVIC_SetPriority>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	6039      	str	r1, [r7, #0]
 800409a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db0a      	blt.n	80040ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	490c      	ldr	r1, [pc, #48]	; (80040dc <__NVIC_SetPriority+0x4c>)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	b2d2      	uxtb	r2, r2
 80040b2:	440b      	add	r3, r1
 80040b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80040b8:	e00a      	b.n	80040d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4908      	ldr	r1, [pc, #32]	; (80040e0 <__NVIC_SetPriority+0x50>)
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	3b04      	subs	r3, #4
 80040c8:	0112      	lsls	r2, r2, #4
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	440b      	add	r3, r1
 80040ce:	761a      	strb	r2, [r3, #24]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	e000e100 	.word	0xe000e100
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <NVIC_EncodePriority>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b089      	sub	sp, #36	; 0x24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f1c3 0307 	rsb	r3, r3, #7
 80040fe:	2b04      	cmp	r3, #4
 8004100:	bf28      	it	cs
 8004102:	2304      	movcs	r3, #4
 8004104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3304      	adds	r3, #4
 800410a:	2b06      	cmp	r3, #6
 800410c:	d902      	bls.n	8004114 <NVIC_EncodePriority+0x30>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3b03      	subs	r3, #3
 8004112:	e000      	b.n	8004116 <NVIC_EncodePriority+0x32>
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	f04f 32ff 	mov.w	r2, #4294967295
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	401a      	ands	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800412c:	f04f 31ff 	mov.w	r1, #4294967295
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	fa01 f303 	lsl.w	r3, r1, r3
 8004136:	43d9      	mvns	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	4313      	orrs	r3, r2
}
 800413e:	4618      	mov	r0, r3
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <SysTick_Config>:
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800415c:	d301      	bcc.n	8004162 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800415e:	2301      	movs	r3, #1
 8004160:	e00f      	b.n	8004182 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004162:	4a0a      	ldr	r2, [pc, #40]	; (800418c <SysTick_Config+0x40>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800416a:	210f      	movs	r1, #15
 800416c:	f04f 30ff 	mov.w	r0, #4294967295
 8004170:	f7ff ff8e 	bl	8004090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <SysTick_Config+0x40>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800417a:	4b04      	ldr	r3, [pc, #16]	; (800418c <SysTick_Config+0x40>)
 800417c:	2207      	movs	r2, #7
 800417e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	e000e010 	.word	0xe000e010

08004190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff29 	bl	8003ff0 <__NVIC_SetPriorityGrouping>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b086      	sub	sp, #24
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	4603      	mov	r3, r0
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
 80041b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041b8:	f7ff ff3e 	bl	8004038 <__NVIC_GetPriorityGrouping>
 80041bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f7ff ff8e 	bl	80040e4 <NVIC_EncodePriority>
 80041c8:	4602      	mov	r2, r0
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff5d 	bl	8004090 <__NVIC_SetPriority>
}
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	4603      	mov	r3, r0
 80041e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff ff31 	bl	8004054 <__NVIC_EnableIRQ>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ffa2 	bl	800414c <SysTick_Config>
 8004208:	4603      	mov	r3, r0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004220:	f7ff feb6 	bl	8003f90 <HAL_GetTick>
 8004224:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d008      	beq.n	8004244 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2280      	movs	r2, #128	; 0x80
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e052      	b.n	80042ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0216 	bic.w	r2, r2, #22
 8004252:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004262:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <HAL_DMA_Abort+0x62>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0208 	bic.w	r2, r2, #8
 8004282:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004294:	e013      	b.n	80042be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004296:	f7ff fe7b 	bl	8003f90 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b05      	cmp	r3, #5
 80042a2:	d90c      	bls.n	80042be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e015      	b.n	80042ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e4      	bne.n	8004296 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	223f      	movs	r2, #63	; 0x3f
 80042d2:	409a      	lsls	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e00c      	b.n	800432a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2205      	movs	r2, #5
 8004314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004344:	b2db      	uxtb	r3, r3
}
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	; 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
 8004372:	e175      	b.n	8004660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	f040 8164 	bne.w	800465a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d00b      	beq.n	80043b2 <HAL_GPIO_Init+0x5e>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043a6:	2b11      	cmp	r3, #17
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b12      	cmp	r3, #18
 80043b0:	d130      	bne.n	8004414 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e8:	2201      	movs	r2, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 0201 	and.w	r2, r3, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d003      	beq.n	8004454 <HAL_GPIO_Init+0x100>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b12      	cmp	r3, #18
 8004452:	d123      	bne.n	800449c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	220f      	movs	r2, #15
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691a      	ldr	r2, [r3, #16]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08da      	lsrs	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	3208      	adds	r2, #8
 8004496:	69b9      	ldr	r1, [r7, #24]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	2203      	movs	r2, #3
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	43db      	mvns	r3, r3
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80be 	beq.w	800465a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044de:	4b66      	ldr	r3, [pc, #408]	; (8004678 <HAL_GPIO_Init+0x324>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	4a65      	ldr	r2, [pc, #404]	; (8004678 <HAL_GPIO_Init+0x324>)
 80044e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_GPIO_Init+0x324>)
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044f6:	4a61      	ldr	r2, [pc, #388]	; (800467c <HAL_GPIO_Init+0x328>)
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	3302      	adds	r3, #2
 80044fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	220f      	movs	r2, #15
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_GPIO_Init+0x32c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d037      	beq.n	8004592 <HAL_GPIO_Init+0x23e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a57      	ldr	r2, [pc, #348]	; (8004684 <HAL_GPIO_Init+0x330>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d031      	beq.n	800458e <HAL_GPIO_Init+0x23a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a56      	ldr	r2, [pc, #344]	; (8004688 <HAL_GPIO_Init+0x334>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02b      	beq.n	800458a <HAL_GPIO_Init+0x236>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a55      	ldr	r2, [pc, #340]	; (800468c <HAL_GPIO_Init+0x338>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d025      	beq.n	8004586 <HAL_GPIO_Init+0x232>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a54      	ldr	r2, [pc, #336]	; (8004690 <HAL_GPIO_Init+0x33c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <HAL_GPIO_Init+0x22e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a53      	ldr	r2, [pc, #332]	; (8004694 <HAL_GPIO_Init+0x340>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_Init+0x22a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_GPIO_Init+0x344>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_Init+0x226>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a51      	ldr	r2, [pc, #324]	; (800469c <HAL_GPIO_Init+0x348>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_Init+0x222>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a50      	ldr	r2, [pc, #320]	; (80046a0 <HAL_GPIO_Init+0x34c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x21e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4f      	ldr	r2, [pc, #316]	; (80046a4 <HAL_GPIO_Init+0x350>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_Init+0x21a>
 800456a:	2309      	movs	r3, #9
 800456c:	e012      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800456e:	230a      	movs	r3, #10
 8004570:	e010      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004572:	2308      	movs	r3, #8
 8004574:	e00e      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004576:	2307      	movs	r3, #7
 8004578:	e00c      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800457a:	2306      	movs	r3, #6
 800457c:	e00a      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800457e:	2305      	movs	r3, #5
 8004580:	e008      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004582:	2304      	movs	r3, #4
 8004584:	e006      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004586:	2303      	movs	r3, #3
 8004588:	e004      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800458a:	2302      	movs	r3, #2
 800458c:	e002      	b.n	8004594 <HAL_GPIO_Init+0x240>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_GPIO_Init+0x240>
 8004592:	2300      	movs	r3, #0
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	f002 0203 	and.w	r2, r2, #3
 800459a:	0092      	lsls	r2, r2, #2
 800459c:	4093      	lsls	r3, r2
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045a4:	4935      	ldr	r1, [pc, #212]	; (800467c <HAL_GPIO_Init+0x328>)
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	089b      	lsrs	r3, r3, #2
 80045aa:	3302      	adds	r3, #2
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b2:	4b3d      	ldr	r3, [pc, #244]	; (80046a8 <HAL_GPIO_Init+0x354>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d6:	4a34      	ldr	r2, [pc, #208]	; (80046a8 <HAL_GPIO_Init+0x354>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045dc:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <HAL_GPIO_Init+0x354>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <HAL_GPIO_Init+0x354>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004606:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_GPIO_Init+0x354>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <HAL_GPIO_Init+0x354>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004630:	4b1d      	ldr	r3, [pc, #116]	; (80046a8 <HAL_GPIO_Init+0x354>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_GPIO_Init+0x354>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3301      	adds	r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b0f      	cmp	r3, #15
 8004664:	f67f ae86 	bls.w	8004374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3724      	adds	r7, #36	; 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40013800 	.word	0x40013800
 8004680:	40020000 	.word	0x40020000
 8004684:	40020400 	.word	0x40020400
 8004688:	40020800 	.word	0x40020800
 800468c:	40020c00 	.word	0x40020c00
 8004690:	40021000 	.word	0x40021000
 8004694:	40021400 	.word	0x40021400
 8004698:	40021800 	.word	0x40021800
 800469c:	40021c00 	.word	0x40021c00
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40022400 	.word	0x40022400
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046bc:	787b      	ldrb	r3, [r7, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046c8:	e003      	b.n	80046d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	041a      	lsls	r2, r3, #16
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	619a      	str	r2, [r3, #24]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07f      	b.n	80047f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff f8dc 	bl	80038c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2224      	movs	r2, #36	; 0x24
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0201 	bic.w	r2, r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d107      	bne.n	800475a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	e006      	b.n	8004768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d104      	bne.n	800477a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <HAL_I2C_Init+0x11c>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004798:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	02008000 	.word	0x02008000

08004800 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	461a      	mov	r2, r3
 800480c:	460b      	mov	r3, r1
 800480e:	817b      	strh	r3, [r7, #10]
 8004810:	4613      	mov	r3, r2
 8004812:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	d153      	bne.n	80048c8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800482a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482e:	d101      	bne.n	8004834 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
 8004832:	e04a      	b.n	80048ca <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2C_Master_Transmit_IT+0x42>
 800483e:	2302      	movs	r3, #2
 8004840:	e043      	b.n	80048ca <HAL_I2C_Master_Transmit_IT+0xca>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2221      	movs	r2, #33	; 0x21
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2210      	movs	r2, #16
 8004856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4a18      	ldr	r2, [pc, #96]	; (80048d8 <HAL_I2C_Master_Transmit_IT+0xd8>)
 8004876:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	2bff      	cmp	r3, #255	; 0xff
 8004880:	d906      	bls.n	8004890 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e007      	b.n	80048a0 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800489a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	8979      	ldrh	r1, [r7, #10]
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_I2C_Master_Transmit_IT+0xdc>)
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f001 fb32 	bl	8005f18 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048bc:	2101      	movs	r1, #1
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f001 fb58 	bl	8005f74 <I2C_Enable_IRQ>

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	ffff0000 	.word	0xffff0000
 80048d8:	08004d97 	.word	0x08004d97
 80048dc:	80002000 	.word	0x80002000

080048e0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b088      	sub	sp, #32
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	607a      	str	r2, [r7, #4]
 80048ea:	461a      	mov	r2, r3
 80048ec:	460b      	mov	r3, r1
 80048ee:	817b      	strh	r3, [r7, #10]
 80048f0:	4613      	mov	r3, r2
 80048f2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d153      	bne.n	80049a8 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800490e:	d101      	bne.n	8004914 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
 8004912:	e04a      	b.n	80049aa <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Master_Receive_IT+0x42>
 800491e:	2302      	movs	r3, #2
 8004920:	e043      	b.n	80049aa <HAL_I2C_Master_Receive_IT+0xca>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2222      	movs	r2, #34	; 0x22
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2210      	movs	r2, #16
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	893a      	ldrh	r2, [r7, #8]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2bff      	cmp	r3, #255	; 0xff
 8004960:	d906      	bls.n	8004970 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e007      	b.n	8004980 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800497a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800497e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <HAL_I2C_Master_Receive_IT+0xdc>)
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f001 fac2 	bl	8005f18 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800499c:	2102      	movs	r1, #2
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fae8 	bl	8005f74 <I2C_Enable_IRQ>

    return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e000      	b.n	80049aa <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ffff0000 	.word	0xffff0000
 80049b8:	08004d97 	.word	0x08004d97
 80049bc:	80002400 	.word	0x80002400

080049c0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08a      	sub	sp, #40	; 0x28
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	607a      	str	r2, [r7, #4]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	460b      	mov	r3, r1
 80049ce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 80ef 	bne.w	8004bc0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	d101      	bne.n	80049f6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0e5      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2C_IsDeviceReady+0x44>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0de      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2224      	movs	r2, #36	; 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d105      	bne.n	8004a2e <HAL_I2C_IsDeviceReady+0x6e>
 8004a22:	897b      	ldrh	r3, [r7, #10]
 8004a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a28:	4b68      	ldr	r3, [pc, #416]	; (8004bcc <HAL_I2C_IsDeviceReady+0x20c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	e004      	b.n	8004a38 <HAL_I2C_IsDeviceReady+0x78>
 8004a2e:	897b      	ldrh	r3, [r7, #10]
 8004a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a34:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004a3e:	f7ff faa7 	bl	8003f90 <HAL_GetTick>
 8004a42:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	bf0c      	ite	eq
 8004a52:	2301      	moveq	r3, #1
 8004a54:	2300      	movne	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	bf0c      	ite	eq
 8004a68:	2301      	moveq	r3, #1
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a70:	e034      	b.n	8004adc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d01a      	beq.n	8004ab0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7ff fa89 	bl	8003f90 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <HAL_I2C_IsDeviceReady+0xd0>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f043 0220 	orr.w	r2, r3, #32
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e088      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <HAL_I2C_IsDeviceReady+0x128>
 8004ae2:	7fbb      	ldrb	r3, [r7, #30]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0c4      	beq.n	8004a72 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d01a      	beq.n	8004b2c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2120      	movs	r1, #32
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f001 f9c8 	bl	8005e96 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e058      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2220      	movs	r2, #32
 8004b16:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e04a      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	2120      	movs	r1, #32
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 f9ad 	bl	8005e96 <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e03d      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2220      	movs	r2, #32
 8004b54:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d118      	bne.n	8004b90 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b6c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2120      	movs	r1, #32
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f001 f98c 	bl	8005e96 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e01c      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3301      	adds	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	f63f af3d 	bhi.w	8004a1a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
  }
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	02002000 	.word	0x02002000

08004bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
  }
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d010      	beq.n	8004c4a <HAL_I2C_ER_IRQHandler+0x46>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	09db      	lsrs	r3, r3, #7
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	0a9b      	lsrs	r3, r3, #10
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <HAL_I2C_ER_IRQHandler+0x74>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f043 0208 	orr.w	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	0a5b      	lsrs	r3, r3, #9
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d010      	beq.n	8004ca6 <HAL_I2C_ER_IRQHandler+0xa2>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	09db      	lsrs	r3, r3, #7
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	f043 0202 	orr.w	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ca4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 030b 	and.w	r3, r3, #11
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 ffb3 	bl	8005c24 <I2C_ITError>
  }
}
 8004cbe:	bf00      	nop
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
 8004d22:	4613      	mov	r3, r2
 8004d24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b088      	sub	sp, #32
 8004d9a:	af02      	add	r7, sp, #8
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <I2C_Master_ISR_IT+0x1e>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e114      	b.n	8004fde <I2C_Master_ISR_IT+0x248>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	091b      	lsrs	r3, r3, #4
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <I2C_Master_ISR_IT+0x5a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00d      	beq.n	8004df0 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2210      	movs	r2, #16
 8004dda:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f043 0204 	orr.w	r2, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f001 f812 	bl	8005e12 <I2C_Flush_TXDR>
 8004dee:	e0e1      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d023      	beq.n	8004e44 <I2C_Master_ISR_IT+0xae>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0304 	bic.w	r3, r3, #4
 8004e0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e42:	e0b7      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01e      	beq.n	8004e8e <I2C_Master_ISR_IT+0xf8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d018      	beq.n	8004e8e <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	781a      	ldrb	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e8c:	e092      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	09db      	lsrs	r3, r3, #7
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d05d      	beq.n	8004f56 <I2C_Master_ISR_IT+0x1c0>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	099b      	lsrs	r3, r3, #6
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d057      	beq.n	8004f56 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d040      	beq.n	8004f32 <I2C_Master_ISR_IT+0x19c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d13c      	bne.n	8004f32 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ec4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2bff      	cmp	r3, #255	; 0xff
 8004ece:	d90e      	bls.n	8004eee <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	22ff      	movs	r2, #255	; 0xff
 8004ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	8a79      	ldrh	r1, [r7, #18]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f001 f816 	bl	8005f18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eec:	e032      	b.n	8004f54 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f00:	d00b      	beq.n	8004f1a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	8a79      	ldrh	r1, [r7, #18]
 8004f0e:	2000      	movs	r0, #0
 8004f10:	9000      	str	r0, [sp, #0]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f001 f800 	bl	8005f18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f18:	e01c      	b.n	8004f54 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	8a79      	ldrh	r1, [r7, #18]
 8004f22:	2300      	movs	r3, #0
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fff4 	bl	8005f18 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f30:	e010      	b.n	8004f54 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f40:	d003      	beq.n	8004f4a <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fba9 	bl	800569a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f48:	e034      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f4a:	2140      	movs	r1, #64	; 0x40
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fe69 	bl	8005c24 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f52:	e02f      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
 8004f54:	e02e      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d028      	beq.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d022      	beq.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d119      	bne.n	8004fac <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f86:	d015      	beq.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f90:	d108      	bne.n	8004fa4 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e007      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fb78 	bl	800569a <I2C_ITMasterSeqCplt>
 8004faa:	e003      	b.n	8004fb4 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fe38 	bl	8005c24 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d009      	beq.n	8004fd4 <I2C_Master_ISR_IT+0x23e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fbfe 	bl	80057d0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <I2C_Slave_ISR_IT+0x24>
 8005006:	2302      	movs	r3, #2
 8005008:	e0ec      	b.n	80051e4 <I2C_Slave_ISR_IT+0x1fe>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d009      	beq.n	8005032 <I2C_Slave_ISR_IT+0x4c>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fc99 	bl	8005964 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04d      	beq.n	80050da <I2C_Slave_ISR_IT+0xf4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d047      	beq.n	80050da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d128      	bne.n	80050a6 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b28      	cmp	r3, #40	; 0x28
 800505e:	d108      	bne.n	8005072 <I2C_Slave_ISR_IT+0x8c>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005066:	d104      	bne.n	8005072 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005068:	6939      	ldr	r1, [r7, #16]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 fd84 	bl	8005b78 <I2C_ITListenCplt>
 8005070:	e032      	b.n	80050d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b29      	cmp	r3, #41	; 0x29
 800507c:	d10e      	bne.n	800509c <I2C_Slave_ISR_IT+0xb6>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005084:	d00a      	beq.n	800509c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 febf 	bl	8005e12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fb3d 	bl	8005714 <I2C_ITSlaveSeqCplt>
 800509a:	e01d      	b.n	80050d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2210      	movs	r2, #16
 80050a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80050a4:	e096      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2210      	movs	r2, #16
 80050ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f043 0204 	orr.w	r2, r3, #4
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <I2C_Slave_ISR_IT+0xe4>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c6:	f040 8085 	bne.w	80051d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4619      	mov	r1, r3
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fda7 	bl	8005c24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80050d6:	e07d      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
 80050d8:	e07c      	b.n	80051d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d030      	beq.n	8005148 <I2C_Slave_ISR_IT+0x162>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d02a      	beq.n	8005148 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d018      	beq.n	800512e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d14f      	bne.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800513e:	d04b      	beq.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fae7 	bl	8005714 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005146:	e047      	b.n	80051d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	08db      	lsrs	r3, r3, #3
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	08db      	lsrs	r3, r3, #3
 8005158:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fa15 	bl	8005592 <I2C_ITAddrCplt>
 8005168:	e037      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d031      	beq.n	80051da <I2C_Slave_ISR_IT+0x1f4>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02b      	beq.n	80051da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	781a      	ldrb	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
 80051bc:	e00d      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c4:	d002      	beq.n	80051cc <I2C_Slave_ISR_IT+0x1e6>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d106      	bne.n	80051da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 faa1 	bl	8005714 <I2C_ITSlaveSeqCplt>
 80051d2:	e002      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80051d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <I2C_Master_ISR_DMA+0x1a>
 8005202:	2302      	movs	r3, #2
 8005204:	e0e1      	b.n	80053ca <I2C_Master_ISR_DMA+0x1de>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d017      	beq.n	800524a <I2C_Master_ISR_DMA+0x5e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2210      	movs	r2, #16
 800522c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f043 0204 	orr.w	r2, r3, #4
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800523a:	2120      	movs	r1, #32
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fe99 	bl	8005f74 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fde5 	bl	8005e12 <I2C_Flush_TXDR>
 8005248:	e0ba      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d072      	beq.n	800533c <I2C_Master_ISR_DMA+0x150>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	099b      	lsrs	r3, r3, #6
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d06c      	beq.n	800533c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005270:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d04e      	beq.n	800531a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b29b      	uxth	r3, r3
 8005284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005288:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	2bff      	cmp	r3, #255	; 0xff
 8005292:	d906      	bls.n	80052a2 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800529a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e010      	b.n	80052c4 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052b4:	d003      	beq.n	80052be <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	e002      	b.n	80052c4 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80052be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8a79      	ldrh	r1, [r7, #18]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fe20 	bl	8005f18 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b22      	cmp	r3, #34	; 0x22
 80052f4:	d108      	bne.n	8005308 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005304:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005306:	e05b      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005316:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005318:	e052      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005328:	d003      	beq.n	8005332 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f9b5 	bl	800569a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005330:	e046      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005332:	2140      	movs	r1, #64	; 0x40
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 fc75 	bl	8005c24 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800533a:	e041      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d029      	beq.n	800539c <I2C_Master_ISR_DMA+0x1b0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d023      	beq.n	800539c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d119      	bne.n	8005392 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536c:	d027      	beq.n	80053be <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005376:	d108      	bne.n	800538a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005386:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005388:	e019      	b.n	80053be <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f985 	bl	800569a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005390:	e015      	b.n	80053be <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005392:	2140      	movs	r1, #64	; 0x40
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fc45 	bl	8005c24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800539a:	e010      	b.n	80053be <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00b      	beq.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 fa0a 	bl	80057d0 <I2C_ITMasterCplt>
 80053bc:	e000      	b.n	80053c0 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80053be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b088      	sub	sp, #32
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <I2C_Slave_ISR_DMA+0x24>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0c9      	b.n	800558a <I2C_Slave_ISR_DMA+0x1b8>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <I2C_Slave_ISR_DMA+0x4c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 faa3 	bl	8005964 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	091b      	lsrs	r3, r3, #4
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 809a 	beq.w	8005560 <I2C_Slave_ISR_DMA+0x18e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8093 	beq.w	8005560 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0b9b      	lsrs	r3, r3, #14
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d105      	bne.n	8005452 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0bdb      	lsrs	r3, r3, #15
 800544a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800544e:	2b00      	cmp	r3, #0
 8005450:	d07f      	beq.n	8005552 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0bdb      	lsrs	r3, r3, #15
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00d      	beq.n	800549a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0b9b      	lsrs	r3, r3, #14
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005496:	2301      	movs	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d128      	bne.n	80054f2 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b28      	cmp	r3, #40	; 0x28
 80054aa:	d108      	bne.n	80054be <I2C_Slave_ISR_DMA+0xec>
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054b2:	d104      	bne.n	80054be <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fb5e 	bl	8005b78 <I2C_ITListenCplt>
 80054bc:	e048      	b.n	8005550 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b29      	cmp	r3, #41	; 0x29
 80054c8:	d10e      	bne.n	80054e8 <I2C_Slave_ISR_DMA+0x116>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054d0:	d00a      	beq.n	80054e8 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2210      	movs	r2, #16
 80054d8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fc99 	bl	8005e12 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f917 	bl	8005714 <I2C_ITSlaveSeqCplt>
 80054e6:	e033      	b.n	8005550 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2210      	movs	r2, #16
 80054ee:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80054f0:	e034      	b.n	800555c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2210      	movs	r2, #16
 80054f8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f043 0204 	orr.w	r2, r3, #4
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800550c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <I2C_Slave_ISR_DMA+0x14a>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800551a:	d11f      	bne.n	800555c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800551c:	7dfb      	ldrb	r3, [r7, #23]
 800551e:	2b21      	cmp	r3, #33	; 0x21
 8005520:	d002      	beq.n	8005528 <I2C_Slave_ISR_DMA+0x156>
 8005522:	7dfb      	ldrb	r3, [r7, #23]
 8005524:	2b29      	cmp	r3, #41	; 0x29
 8005526:	d103      	bne.n	8005530 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2221      	movs	r2, #33	; 0x21
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
 800552e:	e008      	b.n	8005542 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	2b22      	cmp	r3, #34	; 0x22
 8005534:	d002      	beq.n	800553c <I2C_Slave_ISR_DMA+0x16a>
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	2b2a      	cmp	r3, #42	; 0x2a
 800553a:	d102      	bne.n	8005542 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2222      	movs	r2, #34	; 0x22
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fb6b 	bl	8005c24 <I2C_ITError>
      if (treatdmanack == 1U)
 800554e:	e005      	b.n	800555c <I2C_Slave_ISR_DMA+0x18a>
 8005550:	e004      	b.n	800555c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2210      	movs	r2, #16
 8005558:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800555a:	e011      	b.n	8005580 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 800555c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800555e:	e00f      	b.n	8005580 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	08db      	lsrs	r3, r3, #3
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <I2C_Slave_ISR_DMA+0x1ae>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f809 	bl	8005592 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b084      	sub	sp, #16
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055a8:	2b28      	cmp	r3, #40	; 0x28
 80055aa:	d16a      	bne.n	8005682 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055ca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055d8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055e6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d138      	bne.n	8005662 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	09db      	lsrs	r3, r3, #7
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	89bb      	ldrh	r3, [r7, #12]
 80055f8:	4053      	eors	r3, r2
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f003 0306 	and.w	r3, r3, #6
 8005600:	2b00      	cmp	r3, #0
 8005602:	d11c      	bne.n	800563e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005604:	897b      	ldrh	r3, [r7, #10]
 8005606:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005616:	2b02      	cmp	r3, #2
 8005618:	d13b      	bne.n	8005692 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2208      	movs	r2, #8
 8005626:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005630:	89ba      	ldrh	r2, [r7, #12]
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff fb6d 	bl	8004d16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800563c:	e029      	b.n	8005692 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800563e:	893b      	ldrh	r3, [r7, #8]
 8005640:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fcf8 	bl	800603c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005654:	89ba      	ldrh	r2, [r7, #12]
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	4619      	mov	r1, r3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fb5b 	bl	8004d16 <HAL_I2C_AddrCallback>
}
 8005660:	e017      	b.n	8005692 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005662:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fce8 	bl	800603c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005674:	89ba      	ldrh	r2, [r7, #12]
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	4619      	mov	r1, r3
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fb4b 	bl	8004d16 <HAL_I2C_AddrCallback>
}
 8005680:	e007      	b.n	8005692 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2208      	movs	r2, #8
 8005688:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b21      	cmp	r3, #33	; 0x21
 80056b4:	d115      	bne.n	80056e2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2211      	movs	r2, #17
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056ca:	2101      	movs	r1, #1
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fcb5 	bl	800603c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff faf3 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056e0:	e014      	b.n	800570c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2212      	movs	r2, #18
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056f6:	2102      	movs	r1, #2
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fc9f 	bl	800603c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fae7 	bl	8004cda <HAL_I2C_MasterRxCpltCallback>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0b9b      	lsrs	r3, r3, #14
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e00d      	b.n	8005766 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	0bdb      	lsrs	r3, r3, #15
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005764:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b29      	cmp	r3, #41	; 0x29
 8005770:	d112      	bne.n	8005798 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2228      	movs	r2, #40	; 0x28
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2221      	movs	r2, #33	; 0x21
 800577e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005780:	2101      	movs	r1, #1
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fc5a 	bl	800603c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff faac 	bl	8004cee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005796:	e017      	b.n	80057c8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b2a      	cmp	r3, #42	; 0x2a
 80057a2:	d111      	bne.n	80057c8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2228      	movs	r2, #40	; 0x28
 80057a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2222      	movs	r2, #34	; 0x22
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80057b2:	2102      	movs	r1, #2
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc41 	bl	800603c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fa9d 	bl	8004d02 <HAL_I2C_SlaveRxCpltCallback>
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2220      	movs	r2, #32
 80057e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b21      	cmp	r3, #33	; 0x21
 80057f0:	d107      	bne.n	8005802 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057f2:	2101      	movs	r1, #1
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fc21 	bl	800603c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2211      	movs	r2, #17
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
 8005800:	e00c      	b.n	800581c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b22      	cmp	r3, #34	; 0x22
 800580c:	d106      	bne.n	800581c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800580e:	2102      	movs	r1, #2
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fc13 	bl	800603c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2212      	movs	r2, #18
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6859      	ldr	r1, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b4d      	ldr	r3, [pc, #308]	; (800595c <I2C_ITMasterCplt+0x18c>)
 8005828:	400b      	ands	r3, r1
 800582a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <I2C_ITMasterCplt+0x190>)
 8005836:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d009      	beq.n	8005858 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2210      	movs	r2, #16
 800584a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005850:	f043 0204 	orr.w	r2, r3, #4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d10b      	bne.n	800587c <I2C_ITMasterCplt+0xac>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	089b      	lsrs	r3, r3, #2
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	b2db      	uxtb	r3, r3
 8005878:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800587a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fac8 	bl	8005e12 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b60      	cmp	r3, #96	; 0x60
 8005892:	d002      	beq.n	800589a <I2C_ITMasterCplt+0xca>
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d006      	beq.n	80058a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f9bf 	bl	8005c24 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058a6:	e054      	b.n	8005952 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b21      	cmp	r3, #33	; 0x21
 80058b2:	d124      	bne.n	80058fe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d10b      	bne.n	80058e6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7ff fa31 	bl	8004d46 <HAL_I2C_MemTxCpltCallback>
}
 80058e4:	e035      	b.n	8005952 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff f9e5 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
}
 80058fc:	e029      	b.n	8005952 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b22      	cmp	r3, #34	; 0x22
 8005908:	d123      	bne.n	8005952 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d10b      	bne.n	800593c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fa10 	bl	8004d5a <HAL_I2C_MemRxCpltCallback>
}
 800593a:	e00a      	b.n	8005952 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff f9c4 	bl	8004cda <HAL_I2C_MasterRxCpltCallback>
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	fe00e800 	.word	0xfe00e800
 8005960:	ffff0000 	.word	0xffff0000

08005964 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2220      	movs	r2, #32
 8005988:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b21      	cmp	r3, #33	; 0x21
 800598e:	d002      	beq.n	8005996 <I2C_ITSlaveCplt+0x32>
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	2b29      	cmp	r3, #41	; 0x29
 8005994:	d108      	bne.n	80059a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005996:	f248 0101 	movw	r1, #32769	; 0x8001
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb4e 	bl	800603c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2221      	movs	r2, #33	; 0x21
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
 80059a6:	e00d      	b.n	80059c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b22      	cmp	r3, #34	; 0x22
 80059ac:	d002      	beq.n	80059b4 <I2C_ITSlaveCplt+0x50>
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b2a      	cmp	r3, #42	; 0x2a
 80059b2:	d107      	bne.n	80059c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80059b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fb3f 	bl	800603c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2222      	movs	r2, #34	; 0x22
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6859      	ldr	r1, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <I2C_ITSlaveCplt+0x20c>)
 80059e0:	400b      	ands	r3, r1
 80059e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa14 	bl	8005e12 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	0b9b      	lsrs	r3, r3, #14
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d013      	beq.n	8005a1e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a1c:	e018      	b.n	8005a50 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	0bdb      	lsrs	r3, r3, #15
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d012      	beq.n	8005a50 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	089b      	lsrs	r3, r3, #2
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0304 	bic.w	r3, r3, #4
 8005a62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00c      	beq.n	8005a9e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aac:	f043 0204 	orr.w	r2, r3, #4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d010      	beq.n	8005aec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8a7 	bl	8005c24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b28      	cmp	r3, #40	; 0x28
 8005ae0:	d141      	bne.n	8005b66 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ae2:	6979      	ldr	r1, [r7, #20]
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f847 	bl	8005b78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005aea:	e03c      	b.n	8005b66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005af4:	d014      	beq.n	8005b20 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe0c 	bl	8005714 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <I2C_ITSlaveCplt+0x210>)
 8005b00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff f90a 	bl	8004d32 <HAL_I2C_ListenCpltCallback>
}
 8005b1e:	e022      	b.n	8005b66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b22      	cmp	r3, #34	; 0x22
 8005b2a:	d10e      	bne.n	8005b4a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff f8dd 	bl	8004d02 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b48:	e00d      	b.n	8005b66 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f8c4 	bl	8004cee <HAL_I2C_SlaveTxCpltCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	fe00e800 	.word	0xfe00e800
 8005b74:	ffff0000 	.word	0xffff0000

08005b78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <I2C_ITListenCplt+0xa8>)
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	089b      	lsrs	r3, r3, #2
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d022      	beq.n	8005bf6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0204 	orr.w	r2, r3, #4
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005bf6:	f248 0103 	movw	r1, #32771	; 0x8003
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa1e 	bl	800603c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2210      	movs	r2, #16
 8005c06:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff f88e 	bl	8004d32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	ffff0000 	.word	0xffff0000

08005c24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a5d      	ldr	r2, [pc, #372]	; (8005db8 <I2C_ITError+0x194>)
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b28      	cmp	r3, #40	; 0x28
 8005c5a:	d005      	beq.n	8005c68 <I2C_ITError+0x44>
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	2b29      	cmp	r3, #41	; 0x29
 8005c60:	d002      	beq.n	8005c68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b2a      	cmp	r3, #42	; 0x2a
 8005c66:	d10b      	bne.n	8005c80 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c68:	2103      	movs	r1, #3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f9e6 	bl	800603c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2228      	movs	r2, #40	; 0x28
 8005c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a50      	ldr	r2, [pc, #320]	; (8005dbc <I2C_ITError+0x198>)
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8005c7e:	e011      	b.n	8005ca4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c80:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9d9 	bl	800603c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b60      	cmp	r3, #96	; 0x60
 8005c94:	d003      	beq.n	8005c9e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d039      	beq.n	8005d26 <I2C_ITError+0x102>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b11      	cmp	r3, #17
 8005cb6:	d002      	beq.n	8005cbe <I2C_ITError+0x9a>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b21      	cmp	r3, #33	; 0x21
 8005cbc:	d133      	bne.n	8005d26 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ccc:	d107      	bne.n	8005cde <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cdc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fb27 	bl	8004336 <HAL_DMA_GetState>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d017      	beq.n	8005d1e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	4a33      	ldr	r2, [pc, #204]	; (8005dc0 <I2C_ITError+0x19c>)
 8005cf4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe faf5 	bl	80042f2 <HAL_DMA_Abort_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d04d      	beq.n	8005daa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d1c:	e045      	b.n	8005daa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f850 	bl	8005dc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d24:	e041      	b.n	8005daa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d039      	beq.n	8005da2 <I2C_ITError+0x17e>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b12      	cmp	r3, #18
 8005d32:	d002      	beq.n	8005d3a <I2C_ITError+0x116>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2b22      	cmp	r3, #34	; 0x22
 8005d38:	d133      	bne.n	8005da2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d48:	d107      	bne.n	8005d5a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fe fae9 	bl	8004336 <HAL_DMA_GetState>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d017      	beq.n	8005d9a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6e:	4a14      	ldr	r2, [pc, #80]	; (8005dc0 <I2C_ITError+0x19c>)
 8005d70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fe fab7 	bl	80042f2 <HAL_DMA_Abort_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d011      	beq.n	8005dae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d98:	e009      	b.n	8005dae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f812 	bl	8005dc4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005da0:	e005      	b.n	8005dae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f80e 	bl	8005dc4 <I2C_TreatErrorCallback>
  }
}
 8005da8:	e002      	b.n	8005db0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005daa:	bf00      	nop
 8005dac:	e000      	b.n	8005db0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dae:	bf00      	nop
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	ffff0000 	.word	0xffff0000
 8005dbc:	08004fe7 	.word	0x08004fe7
 8005dc0:	08005e5b 	.word	0x08005e5b

08005dc4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b60      	cmp	r3, #96	; 0x60
 8005dd6:	d10e      	bne.n	8005df6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7fe ffc7 	bl	8004d82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005df4:	e009      	b.n	8005e0a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7fe ffb2 	bl	8004d6e <HAL_I2C_ErrorCallback>
}
 8005e0a:	bf00      	nop
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d103      	bne.n	8005e30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d007      	beq.n	8005e4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	619a      	str	r2, [r3, #24]
  }
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2200      	movs	r2, #0
 8005e76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e84:	2200      	movs	r2, #0
 8005e86:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f7ff ff9b 	bl	8005dc4 <I2C_TreatErrorCallback>
}
 8005e8e:	bf00      	nop
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea6:	e022      	b.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d01e      	beq.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb0:	f7fe f86e 	bl	8003f90 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d302      	bcc.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d113      	bne.n	8005eee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00f      	b.n	8005f0e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699a      	ldr	r2, [r3, #24]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	bf0c      	ite	eq
 8005efe:	2301      	moveq	r3, #1
 8005f00:	2300      	movne	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d0cd      	beq.n	8005ea8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	4613      	mov	r3, r2
 8005f28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	0d5b      	lsrs	r3, r3, #21
 8005f34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <I2C_TransferConfig+0x58>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	ea02 0103 	and.w	r1, r2, r3
 8005f42:	897b      	ldrh	r3, [r7, #10]
 8005f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005f48:	7a7b      	ldrb	r3, [r7, #9]
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	431a      	orrs	r2, r3
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	03ff63ff 	.word	0x03ff63ff

08005f74 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	4a2a      	ldr	r2, [pc, #168]	; (8006034 <I2C_Enable_IRQ+0xc0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005f92:	4a29      	ldr	r2, [pc, #164]	; (8006038 <I2C_Enable_IRQ+0xc4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d11d      	bne.n	8005fd4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	da03      	bge.n	8005fa8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005fa6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fa8:	887b      	ldrh	r3, [r7, #2]
 8005faa:	2b10      	cmp	r3, #16
 8005fac:	d103      	bne.n	8005fb6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005fb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d103      	bne.n	8005fc4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005fc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fc4:	887b      	ldrh	r3, [r7, #2]
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d125      	bne.n	8006016 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005fd2:	e020      	b.n	8006016 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	da03      	bge.n	8005fe4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005fe2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fe4:	887b      	ldrh	r3, [r7, #2]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005ff4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ff6:	887b      	ldrh	r3, [r7, #2]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006006:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006008:	887b      	ldrh	r3, [r7, #2]
 800600a:	2b20      	cmp	r3, #32
 800600c:	d103      	bne.n	8006016 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f043 0320 	orr.w	r3, r3, #32
 8006014:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6819      	ldr	r1, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	080051ed 	.word	0x080051ed
 8006038:	080053d3 	.word	0x080053d3

0800603c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800605c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800606a:	2b28      	cmp	r3, #40	; 0x28
 800606c:	d003      	beq.n	8006076 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006074:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006076:	887b      	ldrh	r3, [r7, #2]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006086:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006094:	2b28      	cmp	r3, #40	; 0x28
 8006096:	d003      	beq.n	80060a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800609e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80060a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	da03      	bge.n	80060b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80060ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80060b0:	887b      	ldrh	r3, [r7, #2]
 80060b2:	2b10      	cmp	r3, #16
 80060b4:	d103      	bne.n	80060be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80060bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80060be:	887b      	ldrh	r3, [r7, #2]
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d103      	bne.n	80060cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f043 0320 	orr.w	r3, r3, #32
 80060ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d103      	bne.n	80060da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	43da      	mvns	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	400a      	ands	r2, r1
 80060ea:	601a      	str	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d138      	bne.n	8006180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006118:	2302      	movs	r3, #2
 800611a:	e032      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800614a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d139      	bne.n	8006218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e033      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2224      	movs	r2, #36	; 0x24
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006230:	2300      	movs	r3, #0
 8006232:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e291      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8087 	beq.w	800635a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800624c:	4b96      	ldr	r3, [pc, #600]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b04      	cmp	r3, #4
 8006256:	d00c      	beq.n	8006272 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006258:	4b93      	ldr	r3, [pc, #588]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b08      	cmp	r3, #8
 8006262:	d112      	bne.n	800628a <HAL_RCC_OscConfig+0x62>
 8006264:	4b90      	ldr	r3, [pc, #576]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006270:	d10b      	bne.n	800628a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006272:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06c      	beq.n	8006358 <HAL_RCC_OscConfig+0x130>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d168      	bne.n	8006358 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e26b      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_OscConfig+0x7a>
 8006294:	4b84      	ldr	r3, [pc, #528]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a83      	ldr	r2, [pc, #524]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800629a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	e02e      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x9c>
 80062aa:	4b7f      	ldr	r3, [pc, #508]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7e      	ldr	r2, [pc, #504]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4b7c      	ldr	r3, [pc, #496]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a7b      	ldr	r2, [pc, #492]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e01d      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCC_OscConfig+0xc0>
 80062ce:	4b76      	ldr	r3, [pc, #472]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b73      	ldr	r3, [pc, #460]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a72      	ldr	r2, [pc, #456]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e00b      	b.n	8006300 <HAL_RCC_OscConfig+0xd8>
 80062e8:	4b6f      	ldr	r3, [pc, #444]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a6e      	ldr	r2, [pc, #440]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	4b6c      	ldr	r3, [pc, #432]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6b      	ldr	r2, [pc, #428]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80062fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d013      	beq.n	8006330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006308:	f7fd fe42 	bl	8003f90 <HAL_GetTick>
 800630c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fd fe3e 	bl	8003f90 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	; 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e21f      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006322:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xe8>
 800632e:	e014      	b.n	800635a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fd fe2e 	bl	8003f90 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fd fe2a 	bl	8003f90 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	; 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e20b      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	4b57      	ldr	r3, [pc, #348]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x110>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b00      	cmp	r3, #0
 8006364:	d069      	beq.n	800643a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006366:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 030c 	and.w	r3, r3, #12
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006372:	4b4d      	ldr	r3, [pc, #308]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 030c 	and.w	r3, r3, #12
 800637a:	2b08      	cmp	r3, #8
 800637c:	d11c      	bne.n	80063b8 <HAL_RCC_OscConfig+0x190>
 800637e:	4b4a      	ldr	r3, [pc, #296]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d116      	bne.n	80063b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_RCC_OscConfig+0x17a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d001      	beq.n	80063a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e1df      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	493d      	ldr	r1, [pc, #244]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b6:	e040      	b.n	800643a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d023      	beq.n	8006408 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c0:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a38      	ldr	r2, [pc, #224]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063cc:	f7fd fde0 	bl	8003f90 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d4:	f7fd fddc 	bl	8003f90 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e1bd      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b30      	ldr	r3, [pc, #192]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f2:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4929      	ldr	r1, [pc, #164]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006402:	4313      	orrs	r3, r2
 8006404:	600b      	str	r3, [r1, #0]
 8006406:	e018      	b.n	800643a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006408:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a26      	ldr	r2, [pc, #152]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006414:	f7fd fdbc 	bl	8003f90 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800641c:	f7fd fdb8 	bl	8003f90 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b02      	cmp	r3, #2
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e199      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800642e:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d038      	beq.n	80064b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d019      	beq.n	8006482 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006452:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645a:	f7fd fd99 	bl	8003f90 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006462:	f7fd fd95 	bl	8003f90 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e176      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0f0      	beq.n	8006462 <HAL_RCC_OscConfig+0x23a>
 8006480:	e01a      	b.n	80064b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006486:	4a08      	ldr	r2, [pc, #32]	; (80064a8 <HAL_RCC_OscConfig+0x280>)
 8006488:	f023 0301 	bic.w	r3, r3, #1
 800648c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648e:	f7fd fd7f 	bl	8003f90 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e00a      	b.n	80064ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006496:	f7fd fd7b 	bl	8003f90 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d903      	bls.n	80064ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e15c      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
 80064a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ac:	4b91      	ldr	r3, [pc, #580]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80064ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1ee      	bne.n	8006496 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80a4 	beq.w	800660e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c6:	4b8b      	ldr	r3, [pc, #556]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	4b88      	ldr	r3, [pc, #544]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	4a87      	ldr	r2, [pc, #540]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064dc:	6413      	str	r3, [r2, #64]	; 0x40
 80064de:	4b85      	ldr	r3, [pc, #532]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ee:	4b82      	ldr	r3, [pc, #520]	; (80066f8 <HAL_RCC_OscConfig+0x4d0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d118      	bne.n	800652c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80064fa:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <HAL_RCC_OscConfig+0x4d0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a7e      	ldr	r2, [pc, #504]	; (80066f8 <HAL_RCC_OscConfig+0x4d0>)
 8006500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006506:	f7fd fd43 	bl	8003f90 <HAL_GetTick>
 800650a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800650c:	e008      	b.n	8006520 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650e:	f7fd fd3f 	bl	8003f90 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b64      	cmp	r3, #100	; 0x64
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e120      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006520:	4b75      	ldr	r3, [pc, #468]	; (80066f8 <HAL_RCC_OscConfig+0x4d0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x31a>
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	4a6e      	ldr	r2, [pc, #440]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800653a:	f043 0301 	orr.w	r3, r3, #1
 800653e:	6713      	str	r3, [r2, #112]	; 0x70
 8006540:	e02d      	b.n	800659e <HAL_RCC_OscConfig+0x376>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x33c>
 800654a:	4b6a      	ldr	r3, [pc, #424]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a69      	ldr	r2, [pc, #420]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	6713      	str	r3, [r2, #112]	; 0x70
 8006556:	4b67      	ldr	r3, [pc, #412]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655a:	4a66      	ldr	r2, [pc, #408]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800655c:	f023 0304 	bic.w	r3, r3, #4
 8006560:	6713      	str	r3, [r2, #112]	; 0x70
 8006562:	e01c      	b.n	800659e <HAL_RCC_OscConfig+0x376>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	2b05      	cmp	r3, #5
 800656a:	d10c      	bne.n	8006586 <HAL_RCC_OscConfig+0x35e>
 800656c:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	4a60      	ldr	r2, [pc, #384]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006572:	f043 0304 	orr.w	r3, r3, #4
 8006576:	6713      	str	r3, [r2, #112]	; 0x70
 8006578:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800657a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657c:	4a5d      	ldr	r2, [pc, #372]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	6713      	str	r3, [r2, #112]	; 0x70
 8006584:	e00b      	b.n	800659e <HAL_RCC_OscConfig+0x376>
 8006586:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	4a5a      	ldr	r2, [pc, #360]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	6713      	str	r3, [r2, #112]	; 0x70
 8006592:	4b58      	ldr	r3, [pc, #352]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006596:	4a57      	ldr	r2, [pc, #348]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006598:	f023 0304 	bic.w	r3, r3, #4
 800659c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d015      	beq.n	80065d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a6:	f7fd fcf3 	bl	8003f90 <HAL_GetTick>
 80065aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ac:	e00a      	b.n	80065c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ae:	f7fd fcef 	bl	8003f90 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065bc:	4293      	cmp	r3, r2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e0ce      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0ee      	beq.n	80065ae <HAL_RCC_OscConfig+0x386>
 80065d0:	e014      	b.n	80065fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d2:	f7fd fcdd 	bl	8003f90 <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065d8:	e00a      	b.n	80065f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065da:	f7fd fcd9 	bl	8003f90 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0b8      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f0:	4b40      	ldr	r3, [pc, #256]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1ee      	bne.n	80065da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b3c      	ldr	r3, [pc, #240]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	4a3b      	ldr	r2, [pc, #236]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80a4 	beq.w	8006760 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006618:	4b36      	ldr	r3, [pc, #216]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	d06b      	beq.n	80066fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d149      	bne.n	80066c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662c:	4b31      	ldr	r3, [pc, #196]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a30      	ldr	r2, [pc, #192]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006638:	f7fd fcaa 	bl	8003f90 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006640:	f7fd fca6 	bl	8003f90 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e087      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006652:	4b28      	ldr	r3, [pc, #160]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	3b01      	subs	r3, #1
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	061b      	lsls	r3, r3, #24
 8006682:	4313      	orrs	r3, r2
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006686:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800668a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800668c:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a18      	ldr	r2, [pc, #96]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 8006692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fd fc7a 	bl	8003f90 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a0:	f7fd fc76 	bl	8003f90 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e057      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b2:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x478>
 80066be:	e04f      	b.n	8006760 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a0b      	ldr	r2, [pc, #44]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80066c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066cc:	f7fd fc60 	bl	8003f90 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d4:	f7fd fc5c 	bl	8003f90 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e03d      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e6:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <HAL_RCC_OscConfig+0x4cc>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1f0      	bne.n	80066d4 <HAL_RCC_OscConfig+0x4ac>
 80066f2:	e035      	b.n	8006760 <HAL_RCC_OscConfig+0x538>
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <HAL_RCC_OscConfig+0x544>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d028      	beq.n	800675c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d121      	bne.n	800675c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d11a      	bne.n	800675c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006732:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006734:	4293      	cmp	r3, r2
 8006736:	d111      	bne.n	800675c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d107      	bne.n	800675c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800

08006770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0d0      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006788:	4b6a      	ldr	r3, [pc, #424]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d910      	bls.n	80067b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006796:	4b67      	ldr	r3, [pc, #412]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f023 020f 	bic.w	r2, r3, #15
 800679e:	4965      	ldr	r1, [pc, #404]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b63      	ldr	r3, [pc, #396]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0b8      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d020      	beq.n	8006806 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067d0:	4b59      	ldr	r3, [pc, #356]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	4a58      	ldr	r2, [pc, #352]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80067d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80067ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f4:	4b50      	ldr	r3, [pc, #320]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	494d      	ldr	r1, [pc, #308]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d040      	beq.n	8006894 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800681a:	4b47      	ldr	r3, [pc, #284]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d115      	bne.n	8006852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e07f      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006832:	4b41      	ldr	r3, [pc, #260]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e073      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006842:	4b3d      	ldr	r3, [pc, #244]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e06b      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006852:	4b39      	ldr	r3, [pc, #228]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f023 0203 	bic.w	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	4936      	ldr	r1, [pc, #216]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006860:	4313      	orrs	r3, r2
 8006862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006864:	f7fd fb94 	bl	8003f90 <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	e00a      	b.n	8006882 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686c:	f7fd fb90 	bl	8003f90 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	4293      	cmp	r3, r2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e053      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 020c 	and.w	r2, r3, #12
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	429a      	cmp	r2, r3
 8006892:	d1eb      	bne.n	800686c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d210      	bcs.n	80068c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b24      	ldr	r3, [pc, #144]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 020f 	bic.w	r2, r3, #15
 80068aa:	4922      	ldr	r1, [pc, #136]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b20      	ldr	r3, [pc, #128]	; (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e032      	b.n	800692a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068d0:	4b19      	ldr	r3, [pc, #100]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	4916      	ldr	r1, [pc, #88]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068ee:	4b12      	ldr	r3, [pc, #72]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	490e      	ldr	r1, [pc, #56]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006902:	f000 f821 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8006906:	4602      	mov	r2, r0
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	490a      	ldr	r1, [pc, #40]	; (800693c <HAL_RCC_ClockConfig+0x1cc>)
 8006914:	5ccb      	ldrb	r3, [r1, r3]
 8006916:	fa22 f303 	lsr.w	r3, r2, r3
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_RCC_ClockConfig+0x1d0>)
 800691c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCC_ClockConfig+0x1d4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd faf0 	bl	8003f08 <HAL_InitTick>

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40023c00 	.word	0x40023c00
 8006938:	40023800 	.word	0x40023800
 800693c:	080099e8 	.word	0x080099e8
 8006940:	20000004 	.word	0x20000004
 8006944:	20000008 	.word	0x20000008

08006948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	2300      	movs	r3, #0
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	2300      	movs	r3, #0
 800695a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006960:	4b67      	ldr	r3, [pc, #412]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 030c 	and.w	r3, r3, #12
 8006968:	2b08      	cmp	r3, #8
 800696a:	d00d      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x40>
 800696c:	2b08      	cmp	r3, #8
 800696e:	f200 80bd 	bhi.w	8006aec <HAL_RCC_GetSysClockFreq+0x1a4>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x34>
 8006976:	2b04      	cmp	r3, #4
 8006978:	d003      	beq.n	8006982 <HAL_RCC_GetSysClockFreq+0x3a>
 800697a:	e0b7      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800697c:	4b61      	ldr	r3, [pc, #388]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800697e:	60bb      	str	r3, [r7, #8]
      break;
 8006980:	e0b7      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006982:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006984:	60bb      	str	r3, [r7, #8]
      break;
 8006986:	e0b4      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006988:	4b5d      	ldr	r3, [pc, #372]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006990:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006992:	4b5b      	ldr	r3, [pc, #364]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04d      	beq.n	8006a3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699e:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	461a      	mov	r2, r3
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	ea02 0800 	and.w	r8, r2, r0
 80069b6:	ea03 0901 	and.w	r9, r3, r1
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	014b      	lsls	r3, r1, #5
 80069c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069cc:	0142      	lsls	r2, r0, #5
 80069ce:	4610      	mov	r0, r2
 80069d0:	4619      	mov	r1, r3
 80069d2:	ebb0 0008 	subs.w	r0, r0, r8
 80069d6:	eb61 0109 	sbc.w	r1, r1, r9
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	018b      	lsls	r3, r1, #6
 80069e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069e8:	0182      	lsls	r2, r0, #6
 80069ea:	1a12      	subs	r2, r2, r0
 80069ec:	eb63 0301 	sbc.w	r3, r3, r1
 80069f0:	f04f 0000 	mov.w	r0, #0
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	00d9      	lsls	r1, r3, #3
 80069fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069fe:	00d0      	lsls	r0, r2, #3
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	eb12 0208 	adds.w	r2, r2, r8
 8006a08:	eb43 0309 	adc.w	r3, r3, r9
 8006a0c:	f04f 0000 	mov.w	r0, #0
 8006a10:	f04f 0100 	mov.w	r1, #0
 8006a14:	0259      	lsls	r1, r3, #9
 8006a16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006a1a:	0250      	lsls	r0, r2, #9
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	f7f9 fbec 	bl	8000208 <__aeabi_uldivmod>
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	4613      	mov	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e04a      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a3a:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	099b      	lsrs	r3, r3, #6
 8006a40:	461a      	mov	r2, r3
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a4a:	f04f 0100 	mov.w	r1, #0
 8006a4e:	ea02 0400 	and.w	r4, r2, r0
 8006a52:	ea03 0501 	and.w	r5, r3, r1
 8006a56:	4620      	mov	r0, r4
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	014b      	lsls	r3, r1, #5
 8006a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a68:	0142      	lsls	r2, r0, #5
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	1b00      	subs	r0, r0, r4
 8006a70:	eb61 0105 	sbc.w	r1, r1, r5
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	018b      	lsls	r3, r1, #6
 8006a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a82:	0182      	lsls	r2, r0, #6
 8006a84:	1a12      	subs	r2, r2, r0
 8006a86:	eb63 0301 	sbc.w	r3, r3, r1
 8006a8a:	f04f 0000 	mov.w	r0, #0
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	00d9      	lsls	r1, r3, #3
 8006a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a98:	00d0      	lsls	r0, r2, #3
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	1912      	adds	r2, r2, r4
 8006aa0:	eb45 0303 	adc.w	r3, r5, r3
 8006aa4:	f04f 0000 	mov.w	r0, #0
 8006aa8:	f04f 0100 	mov.w	r1, #0
 8006aac:	0299      	lsls	r1, r3, #10
 8006aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ab2:	0290      	lsls	r0, r2, #10
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4619      	mov	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f04f 0300 	mov.w	r3, #0
 8006ac4:	f7f9 fba0 	bl	8000208 <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4613      	mov	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	3301      	adds	r3, #1
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae8:	60bb      	str	r3, [r7, #8]
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006aee:	60bb      	str	r3, [r7, #8]
      break;
 8006af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af2:	68bb      	ldr	r3, [r7, #8]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006afe:	bf00      	nop
 8006b00:	40023800 	.word	0x40023800
 8006b04:	00f42400 	.word	0x00f42400
 8006b08:	007a1200 	.word	0x007a1200

08006b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b10:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b12:	681b      	ldr	r3, [r3, #0]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20000004 	.word	0x20000004

08006b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b28:	f7ff fff0 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	0a9b      	lsrs	r3, r3, #10
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	4903      	ldr	r1, [pc, #12]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b3a:	5ccb      	ldrb	r3, [r1, r3]
 8006b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40023800 	.word	0x40023800
 8006b48:	080099f8 	.word	0x080099f8

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b50:	f7ff ffdc 	bl	8006b0c <HAL_RCC_GetHCLKFreq>
 8006b54:	4602      	mov	r2, r0
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	0b5b      	lsrs	r3, r3, #13
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	4903      	ldr	r1, [pc, #12]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b62:	5ccb      	ldrb	r3, [r1, r3]
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	080099f8 	.word	0x080099f8

08006b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d012      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b9c:	4b69      	ldr	r3, [pc, #420]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4a68      	ldr	r2, [pc, #416]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ba6:	6093      	str	r3, [r2, #8]
 8006ba8:	4b66      	ldr	r3, [pc, #408]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	4964      	ldr	r1, [pc, #400]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d017      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bce:	4b5d      	ldr	r3, [pc, #372]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bdc:	4959      	ldr	r1, [pc, #356]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d017      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c0a:	4b4e      	ldr	r3, [pc, #312]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	494a      	ldr	r1, [pc, #296]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c28:	d101      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006c36:	2301      	movs	r3, #1
 8006c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c46:	2301      	movs	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 808b 	beq.w	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c58:	4b3a      	ldr	r3, [pc, #232]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	4a39      	ldr	r2, [pc, #228]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c62:	6413      	str	r3, [r2, #64]	; 0x40
 8006c64:	4b37      	ldr	r3, [pc, #220]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	60bb      	str	r3, [r7, #8]
 8006c6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c70:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fd f988 	bl	8003f90 <HAL_GetTick>
 8006c80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c84:	f7fd f984 	bl	8003f90 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b64      	cmp	r3, #100	; 0x64
 8006c90:	d901      	bls.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e357      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c96:	4b2c      	ldr	r3, [pc, #176]	; (8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0f0      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ca2:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006caa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d035      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d02e      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc0:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cca:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cd6:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ce2:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ce8:	4b16      	ldr	r3, [pc, #88]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d114      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fd f94c 	bl	8003f90 <HAL_GetTick>
 8006cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfa:	e00a      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cfc:	f7fd f948 	bl	8003f90 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e319      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d12:	4b0c      	ldr	r3, [pc, #48]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0ee      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d2a:	d111      	bne.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d38:	4b04      	ldr	r3, [pc, #16]	; (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006d3a:	400b      	ands	r3, r1
 8006d3c:	4901      	ldr	r1, [pc, #4]	; (8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
 8006d42:	e00b      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d44:	40023800 	.word	0x40023800
 8006d48:	40007000 	.word	0x40007000
 8006d4c:	0ffffcff 	.word	0x0ffffcff
 8006d50:	4bb1      	ldr	r3, [pc, #708]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4ab0      	ldr	r2, [pc, #704]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d5a:	6093      	str	r3, [r2, #8]
 8006d5c:	4bae      	ldr	r3, [pc, #696]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d68:	49ab      	ldr	r1, [pc, #684]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0310 	and.w	r3, r3, #16
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d010      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d7a:	4ba7      	ldr	r3, [pc, #668]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d80:	4aa5      	ldr	r2, [pc, #660]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d8a:	4ba3      	ldr	r3, [pc, #652]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	49a0      	ldr	r1, [pc, #640]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006da8:	4b9b      	ldr	r3, [pc, #620]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db6:	4998      	ldr	r1, [pc, #608]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dca:	4b93      	ldr	r3, [pc, #588]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd8:	498f      	ldr	r1, [pc, #572]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00a      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dec:	4b8a      	ldr	r3, [pc, #552]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfa:	4987      	ldr	r1, [pc, #540]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00a      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e0e:	4b82      	ldr	r3, [pc, #520]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	497e      	ldr	r1, [pc, #504]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e30:	4b79      	ldr	r3, [pc, #484]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e36:	f023 0203 	bic.w	r2, r3, #3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e3e:	4976      	ldr	r1, [pc, #472]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e52:	4b71      	ldr	r3, [pc, #452]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e58:	f023 020c 	bic.w	r2, r3, #12
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e60:	496d      	ldr	r1, [pc, #436]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e74:	4b68      	ldr	r3, [pc, #416]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	4965      	ldr	r1, [pc, #404]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e96:	4b60      	ldr	r3, [pc, #384]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea4:	495c      	ldr	r1, [pc, #368]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006eb8:	4b57      	ldr	r3, [pc, #348]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec6:	4954      	ldr	r1, [pc, #336]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006eda:	4b4f      	ldr	r3, [pc, #316]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee8:	494b      	ldr	r1, [pc, #300]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006efc:	4b46      	ldr	r3, [pc, #280]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0a:	4943      	ldr	r1, [pc, #268]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006f1e:	4b3e      	ldr	r3, [pc, #248]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	493a      	ldr	r1, [pc, #232]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f40:	4b35      	ldr	r3, [pc, #212]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f4e:	4932      	ldr	r1, [pc, #200]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d011      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f62:	4b2d      	ldr	r3, [pc, #180]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f70:	4929      	ldr	r1, [pc, #164]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f80:	d101      	bne.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f82:	2301      	movs	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006f92:	2301      	movs	r3, #1
 8006f94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00a      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb0:	4919      	ldr	r1, [pc, #100]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fd4:	4910      	ldr	r1, [pc, #64]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d006      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80d9 	beq.w	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a08      	ldr	r2, [pc, #32]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ffc:	f7fc ffc8 	bl	8003f90 <HAL_GetTick>
 8007000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007002:	e00b      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007004:	f7fc ffc4 	bl	8003f90 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	; 0x64
 8007010:	d904      	bls.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e197      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007016:	bf00      	nop
 8007018:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800701c:	4b6c      	ldr	r3, [pc, #432]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1ed      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d021      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	2b00      	cmp	r3, #0
 800703a:	d11d      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800703c:	4b64      	ldr	r3, [pc, #400]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800703e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007042:	0c1b      	lsrs	r3, r3, #16
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800704a:	4b61      	ldr	r3, [pc, #388]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800704c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007050:	0e1b      	lsrs	r3, r3, #24
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	019a      	lsls	r2, r3, #6
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	041b      	lsls	r3, r3, #16
 8007062:	431a      	orrs	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	071b      	lsls	r3, r3, #28
 8007070:	4957      	ldr	r1, [pc, #348]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708c:	d00a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02e      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070a2:	d129      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070a4:	4b4a      	ldr	r3, [pc, #296]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070aa:	0c1b      	lsrs	r3, r3, #16
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070b2:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b8:	0f1b      	lsrs	r3, r3, #28
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	019a      	lsls	r2, r3, #6
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	061b      	lsls	r3, r3, #24
 80070d2:	431a      	orrs	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	071b      	lsls	r3, r3, #28
 80070d8:	493d      	ldr	r1, [pc, #244]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80070e0:	4b3b      	ldr	r3, [pc, #236]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e6:	f023 021f 	bic.w	r2, r3, #31
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4937      	ldr	r1, [pc, #220]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01d      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007104:	4b32      	ldr	r3, [pc, #200]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007112:	4b2f      	ldr	r3, [pc, #188]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007118:	0f1b      	lsrs	r3, r3, #28
 800711a:	f003 0307 	and.w	r3, r3, #7
 800711e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	019a      	lsls	r2, r3, #6
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	431a      	orrs	r2, r3
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	061b      	lsls	r3, r3, #24
 8007132:	431a      	orrs	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	071b      	lsls	r3, r3, #28
 8007138:	4925      	ldr	r1, [pc, #148]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d011      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	019a      	lsls	r2, r3, #6
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	061b      	lsls	r3, r3, #24
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	071b      	lsls	r3, r3, #28
 8007168:	4919      	ldr	r1, [pc, #100]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007170:	4b17      	ldr	r3, [pc, #92]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a16      	ldr	r2, [pc, #88]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800717a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800717c:	f7fc ff08 	bl	8003f90 <HAL_GetTick>
 8007180:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007184:	f7fc ff04 	bl	8003f90 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b64      	cmp	r3, #100	; 0x64
 8007190:	d901      	bls.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e0d7      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007196:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 80cd 	bne.w	8007344 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071aa:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071b6:	f7fc feeb 	bl	8003f90 <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071bc:	e00a      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071be:	f7fc fee7 	bl	8003f90 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b64      	cmp	r3, #100	; 0x64
 80071ca:	d903      	bls.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e0ba      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80071d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071d4:	4b5e      	ldr	r3, [pc, #376]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e0:	d0ed      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d02e      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d12a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800720a:	4b51      	ldr	r3, [pc, #324]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007218:	4b4d      	ldr	r3, [pc, #308]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800721a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721e:	0f1b      	lsrs	r3, r3, #28
 8007220:	f003 0307 	and.w	r3, r3, #7
 8007224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	019a      	lsls	r2, r3, #6
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	041b      	lsls	r3, r3, #16
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	061b      	lsls	r3, r3, #24
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	071b      	lsls	r3, r3, #28
 800723e:	4944      	ldr	r1, [pc, #272]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007246:	4b42      	ldr	r3, [pc, #264]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800724c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	3b01      	subs	r3, #1
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	493d      	ldr	r1, [pc, #244]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d022      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007274:	d11d      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007276:	4b36      	ldr	r3, [pc, #216]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	0e1b      	lsrs	r3, r3, #24
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007284:	4b32      	ldr	r3, [pc, #200]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	0f1b      	lsrs	r3, r3, #28
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	019a      	lsls	r2, r3, #6
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	041b      	lsls	r3, r3, #16
 800729e:	431a      	orrs	r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	061b      	lsls	r3, r3, #24
 80072a4:	431a      	orrs	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	071b      	lsls	r3, r3, #28
 80072aa:	4929      	ldr	r1, [pc, #164]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d028      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072be:	4b24      	ldr	r3, [pc, #144]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c4:	0e1b      	lsrs	r3, r3, #24
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072cc:	4b20      	ldr	r3, [pc, #128]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	019a      	lsls	r2, r3, #6
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	041b      	lsls	r3, r3, #16
 80072e4:	431a      	orrs	r2, r3
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	061b      	lsls	r3, r3, #24
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	4917      	ldr	r1, [pc, #92]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4911      	ldr	r1, [pc, #68]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a0e      	ldr	r2, [pc, #56]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800731a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800731c:	f7fc fe38 	bl	8003f90 <HAL_GetTick>
 8007320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007324:	f7fc fe34 	bl	8003f90 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b64      	cmp	r3, #100	; 0x64
 8007330:	d901      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e007      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007336:	4b06      	ldr	r3, [pc, #24]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007342:	d1ef      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	40023800 	.word	0x40023800

08007354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e049      	b.n	80073fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fc fb9a 	bl	8003ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3304      	adds	r3, #4
 8007390:	4619      	mov	r1, r3
 8007392:	4610      	mov	r0, r2
 8007394:	f000 fb5a 	bl	8007a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d001      	beq.n	800741c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e04c      	b.n	80074b6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <HAL_TIM_Base_Start+0xc0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007436:	d01d      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a22      	ldr	r2, [pc, #136]	; (80074c8 <HAL_TIM_Base_Start+0xc4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a21      	ldr	r2, [pc, #132]	; (80074cc <HAL_TIM_Base_Start+0xc8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1f      	ldr	r2, [pc, #124]	; (80074d0 <HAL_TIM_Base_Start+0xcc>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <HAL_TIM_Base_Start+0xd0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <HAL_TIM_Base_Start+0xd4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIM_Base_Start+0x70>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1b      	ldr	r2, [pc, #108]	; (80074dc <HAL_TIM_Base_Start+0xd8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d115      	bne.n	80074a0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689a      	ldr	r2, [r3, #8]
 800747a:	4b19      	ldr	r3, [pc, #100]	; (80074e0 <HAL_TIM_Base_Start+0xdc>)
 800747c:	4013      	ands	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b06      	cmp	r3, #6
 8007484:	d015      	beq.n	80074b2 <HAL_TIM_Base_Start+0xae>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748c:	d011      	beq.n	80074b2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800749e:	e008      	b.n	80074b2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e000      	b.n	80074b4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40000400 	.word	0x40000400
 80074cc:	40000800 	.word	0x40000800
 80074d0:	40000c00 	.word	0x40000c00
 80074d4:	40010400 	.word	0x40010400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40001800 	.word	0x40001800
 80074e0:	00010007 	.word	0x00010007

080074e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d001      	beq.n	80074fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e054      	b.n	80075a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0201 	orr.w	r2, r2, #1
 8007512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a26      	ldr	r2, [pc, #152]	; (80075b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d022      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007526:	d01d      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a22      	ldr	r2, [pc, #136]	; (80075b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d018      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a21      	ldr	r2, [pc, #132]	; (80075bc <HAL_TIM_Base_Start_IT+0xd8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1f      	ldr	r2, [pc, #124]	; (80075c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00e      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d009      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1c      	ldr	r2, [pc, #112]	; (80075c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d004      	beq.n	8007564 <HAL_TIM_Base_Start_IT+0x80>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1b      	ldr	r2, [pc, #108]	; (80075cc <HAL_TIM_Base_Start_IT+0xe8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d115      	bne.n	8007590 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_TIM_Base_Start_IT+0xec>)
 800756c:	4013      	ands	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b06      	cmp	r3, #6
 8007574:	d015      	beq.n	80075a2 <HAL_TIM_Base_Start_IT+0xbe>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d011      	beq.n	80075a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0201 	orr.w	r2, r2, #1
 800758c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	e008      	b.n	80075a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	e000      	b.n	80075a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40000800 	.word	0x40000800
 80075c0:	40000c00 	.word	0x40000c00
 80075c4:	40010400 	.word	0x40010400
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40001800 	.word	0x40001800
 80075d0:	00010007 	.word	0x00010007

080075d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f022 0201 	bic.w	r2, r2, #1
 80075ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6a1a      	ldr	r2, [r3, #32]
 80075f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10f      	bne.n	800761c <HAL_TIM_Base_Stop_IT+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	f240 4344 	movw	r3, #1092	; 0x444
 8007606:	4013      	ands	r3, r2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d107      	bne.n	800761c <HAL_TIM_Base_Stop_IT+0x48>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b082      	sub	sp, #8
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b02      	cmp	r3, #2
 8007646:	d122      	bne.n	800768e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b02      	cmp	r3, #2
 8007654:	d11b      	bne.n	800768e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0202 	mvn.w	r2, #2
 800765e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f9cb 	bl	8007a10 <HAL_TIM_IC_CaptureCallback>
 800767a:	e005      	b.n	8007688 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f9bd 	bl	80079fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9ce 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b04      	cmp	r3, #4
 800769a:	d122      	bne.n	80076e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d11b      	bne.n	80076e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f06f 0204 	mvn.w	r2, #4
 80076b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f9a1 	bl	8007a10 <HAL_TIM_IC_CaptureCallback>
 80076ce:	e005      	b.n	80076dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f993 	bl	80079fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f9a4 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f003 0308 	and.w	r3, r3, #8
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d122      	bne.n	8007736 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d11b      	bne.n	8007736 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f06f 0208 	mvn.w	r2, #8
 8007706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2204      	movs	r2, #4
 800770c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f977 	bl	8007a10 <HAL_TIM_IC_CaptureCallback>
 8007722:	e005      	b.n	8007730 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f969 	bl	80079fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f97a 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b10      	cmp	r3, #16
 8007742:	d122      	bne.n	800778a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b10      	cmp	r3, #16
 8007750:	d11b      	bne.n	800778a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f06f 0210 	mvn.w	r2, #16
 800775a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2208      	movs	r2, #8
 8007760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f94d 	bl	8007a10 <HAL_TIM_IC_CaptureCallback>
 8007776:	e005      	b.n	8007784 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f93f 	bl	80079fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f950 	bl	8007a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	d10e      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d107      	bne.n	80077b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f06f 0201 	mvn.w	r2, #1
 80077ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fc f837 	bl	8003824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c0:	2b80      	cmp	r3, #128	; 0x80
 80077c2:	d10e      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ce:	2b80      	cmp	r3, #128	; 0x80
 80077d0:	d107      	bne.n	80077e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb07 	bl	8007df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d10e      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d107      	bne.n	8007810 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fafa 	bl	8007e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781a:	2b40      	cmp	r3, #64	; 0x40
 800781c:	d10e      	bne.n	800783c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b40      	cmp	r3, #64	; 0x40
 800782a:	d107      	bne.n	800783c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8fe 	bl	8007a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	f003 0320 	and.w	r3, r3, #32
 8007846:	2b20      	cmp	r3, #32
 8007848:	d10e      	bne.n	8007868 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0320 	and.w	r3, r3, #32
 8007854:	2b20      	cmp	r3, #32
 8007856:	d107      	bne.n	8007868 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f06f 0220 	mvn.w	r2, #32
 8007860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 faba 	bl	8007ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007868:	bf00      	nop
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_TIM_ConfigClockSource+0x18>
 8007884:	2302      	movs	r3, #2
 8007886:	e0b3      	b.n	80079f0 <HAL_TIM_ConfigClockSource+0x180>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4b55      	ldr	r3, [pc, #340]	; (80079f8 <HAL_TIM_ConfigClockSource+0x188>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c0:	d03e      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0xd0>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078c6:	f200 8087 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ce:	f000 8085 	beq.w	80079dc <HAL_TIM_ConfigClockSource+0x16c>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d6:	d87f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078d8:	2b70      	cmp	r3, #112	; 0x70
 80078da:	d01a      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0xa2>
 80078dc:	2b70      	cmp	r3, #112	; 0x70
 80078de:	d87b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078e0:	2b60      	cmp	r3, #96	; 0x60
 80078e2:	d050      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x116>
 80078e4:	2b60      	cmp	r3, #96	; 0x60
 80078e6:	d877      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078e8:	2b50      	cmp	r3, #80	; 0x50
 80078ea:	d03c      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0xf6>
 80078ec:	2b50      	cmp	r3, #80	; 0x50
 80078ee:	d873      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d058      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x136>
 80078f4:	2b40      	cmp	r3, #64	; 0x40
 80078f6:	d86f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 80078f8:	2b30      	cmp	r3, #48	; 0x30
 80078fa:	d064      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x156>
 80078fc:	2b30      	cmp	r3, #48	; 0x30
 80078fe:	d86b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d060      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x156>
 8007904:	2b20      	cmp	r3, #32
 8007906:	d867      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05c      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x156>
 800790c:	2b10      	cmp	r3, #16
 800790e:	d05a      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007910:	e062      	b.n	80079d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6899      	ldr	r1, [r3, #8]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f000 f9ad 	bl	8007c80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007934:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	609a      	str	r2, [r3, #8]
      break;
 800793e:	e04e      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6899      	ldr	r1, [r3, #8]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f000 f996 	bl	8007c80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e03b      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 f90a 	bl	8007b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2150      	movs	r1, #80	; 0x50
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f963 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 8007984:	e02b      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 f929 	bl	8007bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2160      	movs	r1, #96	; 0x60
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f953 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 80079a4:	e01b      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 f8ea 	bl	8007b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2140      	movs	r1, #64	; 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f943 	bl	8007c4a <TIM_ITRx_SetConfig>
      break;
 80079c4:	e00b      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 f93a 	bl	8007c4a <TIM_ITRx_SetConfig>
        break;
 80079d6:	e002      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079d8:	bf00      	nop
 80079da:	e000      	b.n	80079de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	fffeff88 	.word	0xfffeff88

080079fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a40      	ldr	r2, [pc, #256]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6a:	d00f      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a3d      	ldr	r2, [pc, #244]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00b      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a3c      	ldr	r2, [pc, #240]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d007      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3b      	ldr	r2, [pc, #236]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d003      	beq.n	8007a8c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3a      	ldr	r2, [pc, #232]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d108      	bne.n	8007a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d02b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aac:	d027      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <TIM_Base_SetConfig+0x118>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d023      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2b      	ldr	r2, [pc, #172]	; (8007b68 <TIM_Base_SetConfig+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d01f      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <TIM_Base_SetConfig+0x120>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a29      	ldr	r2, [pc, #164]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d017      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a28      	ldr	r2, [pc, #160]	; (8007b74 <TIM_Base_SetConfig+0x128>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a27      	ldr	r2, [pc, #156]	; (8007b78 <TIM_Base_SetConfig+0x12c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d00f      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a26      	ldr	r2, [pc, #152]	; (8007b7c <TIM_Base_SetConfig+0x130>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a25      	ldr	r2, [pc, #148]	; (8007b80 <TIM_Base_SetConfig+0x134>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a24      	ldr	r2, [pc, #144]	; (8007b84 <TIM_Base_SetConfig+0x138>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <TIM_Base_SetConfig+0x13c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d108      	bne.n	8007b10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a0a      	ldr	r2, [pc, #40]	; (8007b60 <TIM_Base_SetConfig+0x114>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_Base_SetConfig+0xf8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0c      	ldr	r2, [pc, #48]	; (8007b70 <TIM_Base_SetConfig+0x124>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d103      	bne.n	8007b4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	615a      	str	r2, [r3, #20]
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40010000 	.word	0x40010000
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40010400 	.word	0x40010400
 8007b74:	40014000 	.word	0x40014000
 8007b78:	40014400 	.word	0x40014400
 8007b7c:	40014800 	.word	0x40014800
 8007b80:	40001800 	.word	0x40001800
 8007b84:	40001c00 	.word	0x40001c00
 8007b88:	40002000 	.word	0x40002000

08007b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f023 0201 	bic.w	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f023 030a 	bic.w	r3, r3, #10
 8007bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b087      	sub	sp, #28
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	f023 0210 	bic.w	r2, r3, #16
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b085      	sub	sp, #20
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f043 0307 	orr.w	r3, r3, #7
 8007c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	609a      	str	r2, [r3, #8]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	021a      	lsls	r2, r3, #8
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e06d      	b.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a30      	ldr	r2, [pc, #192]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a2f      	ldr	r2, [pc, #188]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d108      	bne.n	8007d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a20      	ldr	r2, [pc, #128]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d022      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4a:	d01d      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a1d      	ldr	r2, [pc, #116]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d018      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a1c      	ldr	r2, [pc, #112]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d013      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a1a      	ldr	r2, [pc, #104]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d009      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a16      	ldr	r2, [pc, #88]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a15      	ldr	r2, [pc, #84]	; (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d10c      	bne.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40001800 	.word	0x40001800

08007ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e040      	b.n	8007eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fb fe8e 	bl	8003b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2224      	movs	r2, #36	; 0x24
 8007e44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0201 	bic.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fad2 	bl	8008400 <UART_SetConfig>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e022      	b.n	8007eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fd28 	bl	80088c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fdaf 	bl	8008a08 <UART_CheckIdleState>
 8007eaa:	4603      	mov	r3, r0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d145      	bne.n	8007f56 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d002      	beq.n	8007ed6 <HAL_UART_Transmit_IT+0x22>
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e03e      	b.n	8007f58 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d101      	bne.n	8007ee8 <HAL_UART_Transmit_IT+0x34>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	e037      	b.n	8007f58 <HAL_UART_Transmit_IT+0xa4>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	88fa      	ldrh	r2, [r7, #6]
 8007f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2221      	movs	r2, #33	; 0x21
 8007f18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f22:	d107      	bne.n	8007f34 <HAL_UART_Transmit_IT+0x80>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a0d      	ldr	r2, [pc, #52]	; (8007f64 <HAL_UART_Transmit_IT+0xb0>)
 8007f30:	669a      	str	r2, [r3, #104]	; 0x68
 8007f32:	e002      	b.n	8007f3a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a0c      	ldr	r2, [pc, #48]	; (8007f68 <HAL_UART_Transmit_IT+0xb4>)
 8007f38:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f50:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	08008d75 	.word	0x08008d75
 8007f68:	08008d03 	.word	0x08008d03

08007f6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	d12c      	bne.n	8007fdc <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_UART_Receive_IT+0x22>
 8007f88:	88fb      	ldrh	r3, [r7, #6]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e025      	b.n	8007fde <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_UART_Receive_IT+0x34>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e01e      	b.n	8007fde <HAL_UART_Receive_IT+0x72>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d007      	beq.n	8007fcc <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007fca:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fdc8 	bl	8008b68 <UART_Start_Receive_IT>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	f640 030f 	movw	r3, #2063	; 0x80f
 800800e:	4013      	ands	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d113      	bne.n	8008040 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 81b9 	beq.w	80083a8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	4798      	blx	r3
      }
      return;
 800803e:	e1b3      	b.n	80083a8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80e3 	beq.w	800820e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4ba5      	ldr	r3, [pc, #660]	; (80082ec <HAL_UART_IRQHandler+0x304>)
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 80d8 	beq.w	800820e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <HAL_UART_IRQHandler+0xa2>
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2201      	movs	r2, #1
 8008078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008080:	f043 0201 	orr.w	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d010      	beq.n	80080b6 <HAL_UART_IRQHandler+0xce>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2202      	movs	r2, #2
 80080a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ac:	f043 0204 	orr.w	r2, r3, #4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	f003 0304 	and.w	r3, r3, #4
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d010      	beq.n	80080e2 <HAL_UART_IRQHandler+0xfa>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2204      	movs	r2, #4
 80080d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080d8:	f043 0202 	orr.w	r2, r3, #2
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d015      	beq.n	8008118 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d104      	bne.n	8008100 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2208      	movs	r2, #8
 8008106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810e:	f043 0208 	orr.w	r2, r3, #8
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800811e:	2b00      	cmp	r3, #0
 8008120:	d011      	beq.n	8008146 <HAL_UART_IRQHandler+0x15e>
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00c      	beq.n	8008146 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800813c:	f043 0220 	orr.w	r2, r3, #32
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 812d 	beq.w	80083ac <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f003 0320 	and.w	r3, r3, #32
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d004      	beq.n	8008196 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008192:	2b00      	cmp	r3, #0
 8008194:	d031      	beq.n	80081fa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fd6e 	bl	8008c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b40      	cmp	r3, #64	; 0x40
 80081a8:	d123      	bne.n	80081f2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d013      	beq.n	80081ea <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c6:	4a4a      	ldr	r2, [pc, #296]	; (80082f0 <HAL_UART_IRQHandler+0x308>)
 80081c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fc f88f 	bl	80042f2 <HAL_DMA_Abort_IT>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d017      	beq.n	800820a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e8:	e00f      	b.n	800820a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f8f2 	bl	80083d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f0:	e00b      	b.n	800820a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f8ee 	bl	80083d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f8:	e007      	b.n	800820a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f8ea 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008208:	e0d0      	b.n	80083ac <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820a:	bf00      	nop
    return;
 800820c:	e0ce      	b.n	80083ac <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008212:	2b01      	cmp	r3, #1
 8008214:	f040 80a7 	bne.w	8008366 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0310 	and.w	r3, r3, #16
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80a1 	beq.w	8008366 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 809b 	beq.w	8008366 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2210      	movs	r2, #16
 8008236:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b40      	cmp	r3, #64	; 0x40
 8008244:	d156      	bne.n	80082f4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008250:	893b      	ldrh	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 80ac 	beq.w	80083b0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800825e:	893a      	ldrh	r2, [r7, #8]
 8008260:	429a      	cmp	r2, r3
 8008262:	f080 80a5 	bcs.w	80083b0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	893a      	ldrh	r2, [r7, #8]
 800826a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008278:	d02a      	beq.n	80082d0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008288:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0201 	bic.w	r2, r2, #1
 8008298:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0210 	bic.w	r2, r2, #16
 80082c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fb ffa1 	bl	8004212 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082dc:	b29b      	uxth	r3, r3
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f87f 	bl	80083e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ea:	e061      	b.n	80083b0 <HAL_UART_IRQHandler+0x3c8>
 80082ec:	04000120 	.word	0x04000120
 80082f0:	08008cd7 	.word	0x08008cd7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008300:	b29b      	uxth	r3, r3
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d050      	beq.n	80083b4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8008312:	897b      	ldrh	r3, [r7, #10]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d04d      	beq.n	80083b4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008326:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2220      	movs	r2, #32
 800833c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0210 	bic.w	r2, r2, #16
 8008358:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800835a:	897b      	ldrh	r3, [r7, #10]
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f842 	bl	80083e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008364:	e026      	b.n	80083b4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00d      	beq.n	800838c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008376:	2b00      	cmp	r3, #0
 8008378:	d008      	beq.n	800838c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01a      	beq.n	80083b8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
    }
    return;
 800838a:	e015      	b.n	80083b8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_UART_IRQHandler+0x3d2>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00c      	beq.n	80083ba <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fd25 	bl	8008df0 <UART_EndTransmit_IT>
    return;
 80083a6:	e008      	b.n	80083ba <HAL_UART_IRQHandler+0x3d2>
      return;
 80083a8:	bf00      	nop
 80083aa:	e006      	b.n	80083ba <HAL_UART_IRQHandler+0x3d2>
    return;
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <HAL_UART_IRQHandler+0x3d2>
      return;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <HAL_UART_IRQHandler+0x3d2>
      return;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <HAL_UART_IRQHandler+0x3d2>
    return;
 80083b8:	bf00      	nop
  }

}
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695b      	ldr	r3, [r3, #20]
 800841a:	431a      	orrs	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4ba7      	ldr	r3, [pc, #668]	; (80086c8 <UART_SetConfig+0x2c8>)
 800842c:	4013      	ands	r3, r2
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	6979      	ldr	r1, [r7, #20]
 8008434:	430b      	orrs	r3, r1
 8008436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	430a      	orrs	r2, r1
 8008470:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a95      	ldr	r2, [pc, #596]	; (80086cc <UART_SetConfig+0x2cc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d120      	bne.n	80084be <UART_SetConfig+0xbe>
 800847c:	4b94      	ldr	r3, [pc, #592]	; (80086d0 <UART_SetConfig+0x2d0>)
 800847e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008482:	f003 0303 	and.w	r3, r3, #3
 8008486:	2b03      	cmp	r3, #3
 8008488:	d816      	bhi.n	80084b8 <UART_SetConfig+0xb8>
 800848a:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <UART_SetConfig+0x90>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084a1 	.word	0x080084a1
 8008494:	080084ad 	.word	0x080084ad
 8008498:	080084a7 	.word	0x080084a7
 800849c:	080084b3 	.word	0x080084b3
 80084a0:	2301      	movs	r3, #1
 80084a2:	77fb      	strb	r3, [r7, #31]
 80084a4:	e14f      	b.n	8008746 <UART_SetConfig+0x346>
 80084a6:	2302      	movs	r3, #2
 80084a8:	77fb      	strb	r3, [r7, #31]
 80084aa:	e14c      	b.n	8008746 <UART_SetConfig+0x346>
 80084ac:	2304      	movs	r3, #4
 80084ae:	77fb      	strb	r3, [r7, #31]
 80084b0:	e149      	b.n	8008746 <UART_SetConfig+0x346>
 80084b2:	2308      	movs	r3, #8
 80084b4:	77fb      	strb	r3, [r7, #31]
 80084b6:	e146      	b.n	8008746 <UART_SetConfig+0x346>
 80084b8:	2310      	movs	r3, #16
 80084ba:	77fb      	strb	r3, [r7, #31]
 80084bc:	e143      	b.n	8008746 <UART_SetConfig+0x346>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a84      	ldr	r2, [pc, #528]	; (80086d4 <UART_SetConfig+0x2d4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d132      	bne.n	800852e <UART_SetConfig+0x12e>
 80084c8:	4b81      	ldr	r3, [pc, #516]	; (80086d0 <UART_SetConfig+0x2d0>)
 80084ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ce:	f003 030c 	and.w	r3, r3, #12
 80084d2:	2b0c      	cmp	r3, #12
 80084d4:	d828      	bhi.n	8008528 <UART_SetConfig+0x128>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <UART_SetConfig+0xdc>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	08008511 	.word	0x08008511
 80084e0:	08008529 	.word	0x08008529
 80084e4:	08008529 	.word	0x08008529
 80084e8:	08008529 	.word	0x08008529
 80084ec:	0800851d 	.word	0x0800851d
 80084f0:	08008529 	.word	0x08008529
 80084f4:	08008529 	.word	0x08008529
 80084f8:	08008529 	.word	0x08008529
 80084fc:	08008517 	.word	0x08008517
 8008500:	08008529 	.word	0x08008529
 8008504:	08008529 	.word	0x08008529
 8008508:	08008529 	.word	0x08008529
 800850c:	08008523 	.word	0x08008523
 8008510:	2300      	movs	r3, #0
 8008512:	77fb      	strb	r3, [r7, #31]
 8008514:	e117      	b.n	8008746 <UART_SetConfig+0x346>
 8008516:	2302      	movs	r3, #2
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e114      	b.n	8008746 <UART_SetConfig+0x346>
 800851c:	2304      	movs	r3, #4
 800851e:	77fb      	strb	r3, [r7, #31]
 8008520:	e111      	b.n	8008746 <UART_SetConfig+0x346>
 8008522:	2308      	movs	r3, #8
 8008524:	77fb      	strb	r3, [r7, #31]
 8008526:	e10e      	b.n	8008746 <UART_SetConfig+0x346>
 8008528:	2310      	movs	r3, #16
 800852a:	77fb      	strb	r3, [r7, #31]
 800852c:	e10b      	b.n	8008746 <UART_SetConfig+0x346>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a69      	ldr	r2, [pc, #420]	; (80086d8 <UART_SetConfig+0x2d8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d120      	bne.n	800857a <UART_SetConfig+0x17a>
 8008538:	4b65      	ldr	r3, [pc, #404]	; (80086d0 <UART_SetConfig+0x2d0>)
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008542:	2b30      	cmp	r3, #48	; 0x30
 8008544:	d013      	beq.n	800856e <UART_SetConfig+0x16e>
 8008546:	2b30      	cmp	r3, #48	; 0x30
 8008548:	d814      	bhi.n	8008574 <UART_SetConfig+0x174>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d009      	beq.n	8008562 <UART_SetConfig+0x162>
 800854e:	2b20      	cmp	r3, #32
 8008550:	d810      	bhi.n	8008574 <UART_SetConfig+0x174>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <UART_SetConfig+0x15c>
 8008556:	2b10      	cmp	r3, #16
 8008558:	d006      	beq.n	8008568 <UART_SetConfig+0x168>
 800855a:	e00b      	b.n	8008574 <UART_SetConfig+0x174>
 800855c:	2300      	movs	r3, #0
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e0f1      	b.n	8008746 <UART_SetConfig+0x346>
 8008562:	2302      	movs	r3, #2
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e0ee      	b.n	8008746 <UART_SetConfig+0x346>
 8008568:	2304      	movs	r3, #4
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	e0eb      	b.n	8008746 <UART_SetConfig+0x346>
 800856e:	2308      	movs	r3, #8
 8008570:	77fb      	strb	r3, [r7, #31]
 8008572:	e0e8      	b.n	8008746 <UART_SetConfig+0x346>
 8008574:	2310      	movs	r3, #16
 8008576:	77fb      	strb	r3, [r7, #31]
 8008578:	e0e5      	b.n	8008746 <UART_SetConfig+0x346>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a57      	ldr	r2, [pc, #348]	; (80086dc <UART_SetConfig+0x2dc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d120      	bne.n	80085c6 <UART_SetConfig+0x1c6>
 8008584:	4b52      	ldr	r3, [pc, #328]	; (80086d0 <UART_SetConfig+0x2d0>)
 8008586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800858a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800858e:	2bc0      	cmp	r3, #192	; 0xc0
 8008590:	d013      	beq.n	80085ba <UART_SetConfig+0x1ba>
 8008592:	2bc0      	cmp	r3, #192	; 0xc0
 8008594:	d814      	bhi.n	80085c0 <UART_SetConfig+0x1c0>
 8008596:	2b80      	cmp	r3, #128	; 0x80
 8008598:	d009      	beq.n	80085ae <UART_SetConfig+0x1ae>
 800859a:	2b80      	cmp	r3, #128	; 0x80
 800859c:	d810      	bhi.n	80085c0 <UART_SetConfig+0x1c0>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <UART_SetConfig+0x1a8>
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d006      	beq.n	80085b4 <UART_SetConfig+0x1b4>
 80085a6:	e00b      	b.n	80085c0 <UART_SetConfig+0x1c0>
 80085a8:	2300      	movs	r3, #0
 80085aa:	77fb      	strb	r3, [r7, #31]
 80085ac:	e0cb      	b.n	8008746 <UART_SetConfig+0x346>
 80085ae:	2302      	movs	r3, #2
 80085b0:	77fb      	strb	r3, [r7, #31]
 80085b2:	e0c8      	b.n	8008746 <UART_SetConfig+0x346>
 80085b4:	2304      	movs	r3, #4
 80085b6:	77fb      	strb	r3, [r7, #31]
 80085b8:	e0c5      	b.n	8008746 <UART_SetConfig+0x346>
 80085ba:	2308      	movs	r3, #8
 80085bc:	77fb      	strb	r3, [r7, #31]
 80085be:	e0c2      	b.n	8008746 <UART_SetConfig+0x346>
 80085c0:	2310      	movs	r3, #16
 80085c2:	77fb      	strb	r3, [r7, #31]
 80085c4:	e0bf      	b.n	8008746 <UART_SetConfig+0x346>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a45      	ldr	r2, [pc, #276]	; (80086e0 <UART_SetConfig+0x2e0>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d125      	bne.n	800861c <UART_SetConfig+0x21c>
 80085d0:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <UART_SetConfig+0x2d0>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085de:	d017      	beq.n	8008610 <UART_SetConfig+0x210>
 80085e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085e4:	d817      	bhi.n	8008616 <UART_SetConfig+0x216>
 80085e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085ea:	d00b      	beq.n	8008604 <UART_SetConfig+0x204>
 80085ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f0:	d811      	bhi.n	8008616 <UART_SetConfig+0x216>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <UART_SetConfig+0x1fe>
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fa:	d006      	beq.n	800860a <UART_SetConfig+0x20a>
 80085fc:	e00b      	b.n	8008616 <UART_SetConfig+0x216>
 80085fe:	2300      	movs	r3, #0
 8008600:	77fb      	strb	r3, [r7, #31]
 8008602:	e0a0      	b.n	8008746 <UART_SetConfig+0x346>
 8008604:	2302      	movs	r3, #2
 8008606:	77fb      	strb	r3, [r7, #31]
 8008608:	e09d      	b.n	8008746 <UART_SetConfig+0x346>
 800860a:	2304      	movs	r3, #4
 800860c:	77fb      	strb	r3, [r7, #31]
 800860e:	e09a      	b.n	8008746 <UART_SetConfig+0x346>
 8008610:	2308      	movs	r3, #8
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e097      	b.n	8008746 <UART_SetConfig+0x346>
 8008616:	2310      	movs	r3, #16
 8008618:	77fb      	strb	r3, [r7, #31]
 800861a:	e094      	b.n	8008746 <UART_SetConfig+0x346>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a30      	ldr	r2, [pc, #192]	; (80086e4 <UART_SetConfig+0x2e4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d125      	bne.n	8008672 <UART_SetConfig+0x272>
 8008626:	4b2a      	ldr	r3, [pc, #168]	; (80086d0 <UART_SetConfig+0x2d0>)
 8008628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008634:	d017      	beq.n	8008666 <UART_SetConfig+0x266>
 8008636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800863a:	d817      	bhi.n	800866c <UART_SetConfig+0x26c>
 800863c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008640:	d00b      	beq.n	800865a <UART_SetConfig+0x25a>
 8008642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008646:	d811      	bhi.n	800866c <UART_SetConfig+0x26c>
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <UART_SetConfig+0x254>
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008650:	d006      	beq.n	8008660 <UART_SetConfig+0x260>
 8008652:	e00b      	b.n	800866c <UART_SetConfig+0x26c>
 8008654:	2301      	movs	r3, #1
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e075      	b.n	8008746 <UART_SetConfig+0x346>
 800865a:	2302      	movs	r3, #2
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	e072      	b.n	8008746 <UART_SetConfig+0x346>
 8008660:	2304      	movs	r3, #4
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e06f      	b.n	8008746 <UART_SetConfig+0x346>
 8008666:	2308      	movs	r3, #8
 8008668:	77fb      	strb	r3, [r7, #31]
 800866a:	e06c      	b.n	8008746 <UART_SetConfig+0x346>
 800866c:	2310      	movs	r3, #16
 800866e:	77fb      	strb	r3, [r7, #31]
 8008670:	e069      	b.n	8008746 <UART_SetConfig+0x346>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a1c      	ldr	r2, [pc, #112]	; (80086e8 <UART_SetConfig+0x2e8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d137      	bne.n	80086ec <UART_SetConfig+0x2ec>
 800867c:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <UART_SetConfig+0x2d0>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800868a:	d017      	beq.n	80086bc <UART_SetConfig+0x2bc>
 800868c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008690:	d817      	bhi.n	80086c2 <UART_SetConfig+0x2c2>
 8008692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008696:	d00b      	beq.n	80086b0 <UART_SetConfig+0x2b0>
 8008698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869c:	d811      	bhi.n	80086c2 <UART_SetConfig+0x2c2>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <UART_SetConfig+0x2aa>
 80086a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a6:	d006      	beq.n	80086b6 <UART_SetConfig+0x2b6>
 80086a8:	e00b      	b.n	80086c2 <UART_SetConfig+0x2c2>
 80086aa:	2300      	movs	r3, #0
 80086ac:	77fb      	strb	r3, [r7, #31]
 80086ae:	e04a      	b.n	8008746 <UART_SetConfig+0x346>
 80086b0:	2302      	movs	r3, #2
 80086b2:	77fb      	strb	r3, [r7, #31]
 80086b4:	e047      	b.n	8008746 <UART_SetConfig+0x346>
 80086b6:	2304      	movs	r3, #4
 80086b8:	77fb      	strb	r3, [r7, #31]
 80086ba:	e044      	b.n	8008746 <UART_SetConfig+0x346>
 80086bc:	2308      	movs	r3, #8
 80086be:	77fb      	strb	r3, [r7, #31]
 80086c0:	e041      	b.n	8008746 <UART_SetConfig+0x346>
 80086c2:	2310      	movs	r3, #16
 80086c4:	77fb      	strb	r3, [r7, #31]
 80086c6:	e03e      	b.n	8008746 <UART_SetConfig+0x346>
 80086c8:	efff69f3 	.word	0xefff69f3
 80086cc:	40011000 	.word	0x40011000
 80086d0:	40023800 	.word	0x40023800
 80086d4:	40004400 	.word	0x40004400
 80086d8:	40004800 	.word	0x40004800
 80086dc:	40004c00 	.word	0x40004c00
 80086e0:	40005000 	.word	0x40005000
 80086e4:	40011400 	.word	0x40011400
 80086e8:	40007800 	.word	0x40007800
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a71      	ldr	r2, [pc, #452]	; (80088b8 <UART_SetConfig+0x4b8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d125      	bne.n	8008742 <UART_SetConfig+0x342>
 80086f6:	4b71      	ldr	r3, [pc, #452]	; (80088bc <UART_SetConfig+0x4bc>)
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008700:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008704:	d017      	beq.n	8008736 <UART_SetConfig+0x336>
 8008706:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800870a:	d817      	bhi.n	800873c <UART_SetConfig+0x33c>
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	d00b      	beq.n	800872a <UART_SetConfig+0x32a>
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008716:	d811      	bhi.n	800873c <UART_SetConfig+0x33c>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <UART_SetConfig+0x324>
 800871c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008720:	d006      	beq.n	8008730 <UART_SetConfig+0x330>
 8008722:	e00b      	b.n	800873c <UART_SetConfig+0x33c>
 8008724:	2300      	movs	r3, #0
 8008726:	77fb      	strb	r3, [r7, #31]
 8008728:	e00d      	b.n	8008746 <UART_SetConfig+0x346>
 800872a:	2302      	movs	r3, #2
 800872c:	77fb      	strb	r3, [r7, #31]
 800872e:	e00a      	b.n	8008746 <UART_SetConfig+0x346>
 8008730:	2304      	movs	r3, #4
 8008732:	77fb      	strb	r3, [r7, #31]
 8008734:	e007      	b.n	8008746 <UART_SetConfig+0x346>
 8008736:	2308      	movs	r3, #8
 8008738:	77fb      	strb	r3, [r7, #31]
 800873a:	e004      	b.n	8008746 <UART_SetConfig+0x346>
 800873c:	2310      	movs	r3, #16
 800873e:	77fb      	strb	r3, [r7, #31]
 8008740:	e001      	b.n	8008746 <UART_SetConfig+0x346>
 8008742:	2310      	movs	r3, #16
 8008744:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874e:	d15b      	bne.n	8008808 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008750:	7ffb      	ldrb	r3, [r7, #31]
 8008752:	2b08      	cmp	r3, #8
 8008754:	d827      	bhi.n	80087a6 <UART_SetConfig+0x3a6>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x35c>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008781 	.word	0x08008781
 8008760:	08008789 	.word	0x08008789
 8008764:	08008791 	.word	0x08008791
 8008768:	080087a7 	.word	0x080087a7
 800876c:	08008797 	.word	0x08008797
 8008770:	080087a7 	.word	0x080087a7
 8008774:	080087a7 	.word	0x080087a7
 8008778:	080087a7 	.word	0x080087a7
 800877c:	0800879f 	.word	0x0800879f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fe f9d0 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 8008784:	61b8      	str	r0, [r7, #24]
        break;
 8008786:	e013      	b.n	80087b0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008788:	f7fe f9e0 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 800878c:	61b8      	str	r0, [r7, #24]
        break;
 800878e:	e00f      	b.n	80087b0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008790:	4b4b      	ldr	r3, [pc, #300]	; (80088c0 <UART_SetConfig+0x4c0>)
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e00c      	b.n	80087b0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008796:	f7fe f8d7 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 800879a:	61b8      	str	r0, [r7, #24]
        break;
 800879c:	e008      	b.n	80087b0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	61bb      	str	r3, [r7, #24]
        break;
 80087a4:	e004      	b.n	80087b0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	77bb      	strb	r3, [r7, #30]
        break;
 80087ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d074      	beq.n	80088a0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	005a      	lsls	r2, r3, #1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	441a      	add	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2b0f      	cmp	r3, #15
 80087d2:	d916      	bls.n	8008802 <UART_SetConfig+0x402>
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087da:	d212      	bcs.n	8008802 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f023 030f 	bic.w	r3, r3, #15
 80087e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	085b      	lsrs	r3, r3, #1
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	89fb      	ldrh	r3, [r7, #14]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	89fa      	ldrh	r2, [r7, #14]
 80087fe:	60da      	str	r2, [r3, #12]
 8008800:	e04e      	b.n	80088a0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	77bb      	strb	r3, [r7, #30]
 8008806:	e04b      	b.n	80088a0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008808:	7ffb      	ldrb	r3, [r7, #31]
 800880a:	2b08      	cmp	r3, #8
 800880c:	d827      	bhi.n	800885e <UART_SetConfig+0x45e>
 800880e:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <UART_SetConfig+0x414>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	08008839 	.word	0x08008839
 8008818:	08008841 	.word	0x08008841
 800881c:	08008849 	.word	0x08008849
 8008820:	0800885f 	.word	0x0800885f
 8008824:	0800884f 	.word	0x0800884f
 8008828:	0800885f 	.word	0x0800885f
 800882c:	0800885f 	.word	0x0800885f
 8008830:	0800885f 	.word	0x0800885f
 8008834:	08008857 	.word	0x08008857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008838:	f7fe f974 	bl	8006b24 <HAL_RCC_GetPCLK1Freq>
 800883c:	61b8      	str	r0, [r7, #24]
        break;
 800883e:	e013      	b.n	8008868 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008840:	f7fe f984 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
 8008844:	61b8      	str	r0, [r7, #24]
        break;
 8008846:	e00f      	b.n	8008868 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008848:	4b1d      	ldr	r3, [pc, #116]	; (80088c0 <UART_SetConfig+0x4c0>)
 800884a:	61bb      	str	r3, [r7, #24]
        break;
 800884c:	e00c      	b.n	8008868 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800884e:	f7fe f87b 	bl	8006948 <HAL_RCC_GetSysClockFreq>
 8008852:	61b8      	str	r0, [r7, #24]
        break;
 8008854:	e008      	b.n	8008868 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885a:	61bb      	str	r3, [r7, #24]
        break;
 800885c:	e004      	b.n	8008868 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	77bb      	strb	r3, [r7, #30]
        break;
 8008866:	bf00      	nop
    }

    if (pclk != 0U)
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d018      	beq.n	80088a0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	085a      	lsrs	r2, r3, #1
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	441a      	add	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008880:	b29b      	uxth	r3, r3
 8008882:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d908      	bls.n	800889c <UART_SetConfig+0x49c>
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008890:	d204      	bcs.n	800889c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	e001      	b.n	80088a0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40007c00 	.word	0x40007c00
 80088bc:	40023800 	.word	0x40023800
 80088c0:	00f42400 	.word	0x00f42400

080088c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00a      	beq.n	80088ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00a      	beq.n	8008932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00a      	beq.n	8008976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d01a      	beq.n	80089da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089c2:	d10a      	bne.n	80089da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	605a      	str	r2, [r3, #4]
  }
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a18:	f7fb faba 	bl	8003f90 <HAL_GetTick>
 8008a1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d10e      	bne.n	8008a4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f817 	bl	8008a6e <UART_WaitOnFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e00d      	b.n	8008a66 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2220      	movs	r2, #32
 8008a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	603b      	str	r3, [r7, #0]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7e:	e05e      	b.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d05a      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a88:	f7fb fa82 	bl	8003f90 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	69ba      	ldr	r2, [r7, #24]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d11b      	bne.n	8008ad6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008aac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e043      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02c      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af2:	d124      	bne.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008afc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b0c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689a      	ldr	r2, [r3, #8]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f022 0201 	bic.w	r2, r2, #1
 8008b1c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e00f      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69da      	ldr	r2, [r3, #28]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4013      	ands	r3, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	2300      	movne	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d091      	beq.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	4613      	mov	r3, r2
 8008b74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	88fa      	ldrh	r2, [r7, #6]
 8008b80:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9a:	d10e      	bne.n	8008bba <UART_Start_Receive_IT+0x52>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d105      	bne.n	8008bb0 <UART_Start_Receive_IT+0x48>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008baa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bae:	e02d      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	22ff      	movs	r2, #255	; 0xff
 8008bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bb8:	e028      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10d      	bne.n	8008bde <UART_Start_Receive_IT+0x76>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d104      	bne.n	8008bd4 <UART_Start_Receive_IT+0x6c>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	22ff      	movs	r2, #255	; 0xff
 8008bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bd2:	e01b      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	227f      	movs	r2, #127	; 0x7f
 8008bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bdc:	e016      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008be6:	d10d      	bne.n	8008c04 <UART_Start_Receive_IT+0x9c>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <UART_Start_Receive_IT+0x92>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	227f      	movs	r2, #127	; 0x7f
 8008bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008bf8:	e008      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	223f      	movs	r2, #63	; 0x3f
 8008bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008c02:	e003      	b.n	8008c0c <UART_Start_Receive_IT+0xa4>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2222      	movs	r2, #34	; 0x22
 8008c18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f042 0201 	orr.w	r2, r2, #1
 8008c28:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c32:	d107      	bne.n	8008c44 <UART_Start_Receive_IT+0xdc>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d103      	bne.n	8008c44 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4a0c      	ldr	r2, [pc, #48]	; (8008c70 <UART_Start_Receive_IT+0x108>)
 8008c40:	665a      	str	r2, [r3, #100]	; 0x64
 8008c42:	e002      	b.n	8008c4a <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a0b      	ldr	r2, [pc, #44]	; (8008c74 <UART_Start_Receive_IT+0x10c>)
 8008c48:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008c60:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	08008ef7 	.word	0x08008ef7
 8008c74:	08008e23 	.word	0x08008e23

08008c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c8e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d107      	bne.n	8008cb8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0210 	bic.w	r2, r2, #16
 8008cb6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2220      	movs	r2, #32
 8008cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff fb6d 	bl	80083d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d0e:	2b21      	cmp	r3, #33	; 0x21
 8008d10:	d12a      	bne.n	8008d68 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d110      	bne.n	8008d40 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d2c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d3c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008d3e:	e013      	b.n	8008d68 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d44:	781a      	ldrb	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d80:	2b21      	cmp	r3, #33	; 0x21
 8008d82:	d12f      	bne.n	8008de4 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d110      	bne.n	8008db2 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d9e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008db0:	e018      	b.n	8008de4 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dcc:	1c9a      	adds	r2, r3, #2
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008de4:	bf00      	nop
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fad3 	bl	80083c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e30:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e36:	2b22      	cmp	r3, #34	; 0x22
 8008e38:	d151      	bne.n	8008ede <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e42:	89bb      	ldrh	r3, [r7, #12]
 8008e44:	b2d9      	uxtb	r1, r3
 8008e46:	89fb      	ldrh	r3, [r7, #14]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	400a      	ands	r2, r1
 8008e50:	b2d2      	uxtb	r2, r2
 8008e52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d138      	bne.n	8008eee <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e8a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0201 	bic.w	r2, r2, #1
 8008e9a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d10f      	bne.n	8008ed0 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0210 	bic.w	r2, r2, #16
 8008ebe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7ff fa8d 	bl	80083e8 <HAL_UARTEx_RxEventCallback>
 8008ece:	e002      	b.n	8008ed6 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fa fcc3 	bl	800385c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008edc:	e007      	b.n	8008eee <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0208 	orr.w	r2, r2, #8
 8008eec:	619a      	str	r2, [r3, #24]
}
 8008eee:	bf00      	nop
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f04:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0a:	2b22      	cmp	r3, #34	; 0x22
 8008f0c:	d151      	bne.n	8008fb2 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f1c:	89ba      	ldrh	r2, [r7, #12]
 8008f1e:	89fb      	ldrh	r3, [r7, #14]
 8008f20:	4013      	ands	r3, r2
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2c:	1c9a      	adds	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d138      	bne.n	8008fc2 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f5e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f022 0201 	bic.w	r2, r2, #1
 8008f6e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2220      	movs	r2, #32
 8008f74:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d10f      	bne.n	8008fa4 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f022 0210 	bic.w	r2, r2, #16
 8008f92:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff fa23 	bl	80083e8 <HAL_UARTEx_RxEventCallback>
 8008fa2:	e002      	b.n	8008faa <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fa fc59 	bl	800385c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fb0:	e007      	b.n	8008fc2 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0208 	orr.w	r2, r2, #8
 8008fc0:	619a      	str	r2, [r3, #24]
}
 8008fc2:	bf00      	nop
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <__errno>:
 8008fcc:	4b01      	ldr	r3, [pc, #4]	; (8008fd4 <__errno+0x8>)
 8008fce:	6818      	ldr	r0, [r3, #0]
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	20000010 	.word	0x20000010

08008fd8 <__libc_init_array>:
 8008fd8:	b570      	push	{r4, r5, r6, lr}
 8008fda:	4d0d      	ldr	r5, [pc, #52]	; (8009010 <__libc_init_array+0x38>)
 8008fdc:	4c0d      	ldr	r4, [pc, #52]	; (8009014 <__libc_init_array+0x3c>)
 8008fde:	1b64      	subs	r4, r4, r5
 8008fe0:	10a4      	asrs	r4, r4, #2
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	42a6      	cmp	r6, r4
 8008fe6:	d109      	bne.n	8008ffc <__libc_init_array+0x24>
 8008fe8:	4d0b      	ldr	r5, [pc, #44]	; (8009018 <__libc_init_array+0x40>)
 8008fea:	4c0c      	ldr	r4, [pc, #48]	; (800901c <__libc_init_array+0x44>)
 8008fec:	f000 fce6 	bl	80099bc <_init>
 8008ff0:	1b64      	subs	r4, r4, r5
 8008ff2:	10a4      	asrs	r4, r4, #2
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	42a6      	cmp	r6, r4
 8008ff8:	d105      	bne.n	8009006 <__libc_init_array+0x2e>
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009000:	4798      	blx	r3
 8009002:	3601      	adds	r6, #1
 8009004:	e7ee      	b.n	8008fe4 <__libc_init_array+0xc>
 8009006:	f855 3b04 	ldr.w	r3, [r5], #4
 800900a:	4798      	blx	r3
 800900c:	3601      	adds	r6, #1
 800900e:	e7f2      	b.n	8008ff6 <__libc_init_array+0x1e>
 8009010:	08009a6c 	.word	0x08009a6c
 8009014:	08009a6c 	.word	0x08009a6c
 8009018:	08009a6c 	.word	0x08009a6c
 800901c:	08009a70 	.word	0x08009a70

08009020 <memset>:
 8009020:	4402      	add	r2, r0
 8009022:	4603      	mov	r3, r0
 8009024:	4293      	cmp	r3, r2
 8009026:	d100      	bne.n	800902a <memset+0xa>
 8009028:	4770      	bx	lr
 800902a:	f803 1b01 	strb.w	r1, [r3], #1
 800902e:	e7f9      	b.n	8009024 <memset+0x4>

08009030 <_puts_r>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	460e      	mov	r6, r1
 8009034:	4605      	mov	r5, r0
 8009036:	b118      	cbz	r0, 8009040 <_puts_r+0x10>
 8009038:	6983      	ldr	r3, [r0, #24]
 800903a:	b90b      	cbnz	r3, 8009040 <_puts_r+0x10>
 800903c:	f000 fa48 	bl	80094d0 <__sinit>
 8009040:	69ab      	ldr	r3, [r5, #24]
 8009042:	68ac      	ldr	r4, [r5, #8]
 8009044:	b913      	cbnz	r3, 800904c <_puts_r+0x1c>
 8009046:	4628      	mov	r0, r5
 8009048:	f000 fa42 	bl	80094d0 <__sinit>
 800904c:	4b2c      	ldr	r3, [pc, #176]	; (8009100 <_puts_r+0xd0>)
 800904e:	429c      	cmp	r4, r3
 8009050:	d120      	bne.n	8009094 <_puts_r+0x64>
 8009052:	686c      	ldr	r4, [r5, #4]
 8009054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009056:	07db      	lsls	r3, r3, #31
 8009058:	d405      	bmi.n	8009066 <_puts_r+0x36>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	0598      	lsls	r0, r3, #22
 800905e:	d402      	bmi.n	8009066 <_puts_r+0x36>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 fad3 	bl	800960c <__retarget_lock_acquire_recursive>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	0719      	lsls	r1, r3, #28
 800906a:	d51d      	bpl.n	80090a8 <_puts_r+0x78>
 800906c:	6923      	ldr	r3, [r4, #16]
 800906e:	b1db      	cbz	r3, 80090a8 <_puts_r+0x78>
 8009070:	3e01      	subs	r6, #1
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009078:	3b01      	subs	r3, #1
 800907a:	60a3      	str	r3, [r4, #8]
 800907c:	bb39      	cbnz	r1, 80090ce <_puts_r+0x9e>
 800907e:	2b00      	cmp	r3, #0
 8009080:	da38      	bge.n	80090f4 <_puts_r+0xc4>
 8009082:	4622      	mov	r2, r4
 8009084:	210a      	movs	r1, #10
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f848 	bl	800911c <__swbuf_r>
 800908c:	3001      	adds	r0, #1
 800908e:	d011      	beq.n	80090b4 <_puts_r+0x84>
 8009090:	250a      	movs	r5, #10
 8009092:	e011      	b.n	80090b8 <_puts_r+0x88>
 8009094:	4b1b      	ldr	r3, [pc, #108]	; (8009104 <_puts_r+0xd4>)
 8009096:	429c      	cmp	r4, r3
 8009098:	d101      	bne.n	800909e <_puts_r+0x6e>
 800909a:	68ac      	ldr	r4, [r5, #8]
 800909c:	e7da      	b.n	8009054 <_puts_r+0x24>
 800909e:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <_puts_r+0xd8>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	bf08      	it	eq
 80090a4:	68ec      	ldreq	r4, [r5, #12]
 80090a6:	e7d5      	b.n	8009054 <_puts_r+0x24>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4628      	mov	r0, r5
 80090ac:	f000 f888 	bl	80091c0 <__swsetup_r>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d0dd      	beq.n	8009070 <_puts_r+0x40>
 80090b4:	f04f 35ff 	mov.w	r5, #4294967295
 80090b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ba:	07da      	lsls	r2, r3, #31
 80090bc:	d405      	bmi.n	80090ca <_puts_r+0x9a>
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	059b      	lsls	r3, r3, #22
 80090c2:	d402      	bmi.n	80090ca <_puts_r+0x9a>
 80090c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c6:	f000 faa2 	bl	800960e <__retarget_lock_release_recursive>
 80090ca:	4628      	mov	r0, r5
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da04      	bge.n	80090dc <_puts_r+0xac>
 80090d2:	69a2      	ldr	r2, [r4, #24]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	dc06      	bgt.n	80090e6 <_puts_r+0xb6>
 80090d8:	290a      	cmp	r1, #10
 80090da:	d004      	beq.n	80090e6 <_puts_r+0xb6>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	6022      	str	r2, [r4, #0]
 80090e2:	7019      	strb	r1, [r3, #0]
 80090e4:	e7c5      	b.n	8009072 <_puts_r+0x42>
 80090e6:	4622      	mov	r2, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	f000 f817 	bl	800911c <__swbuf_r>
 80090ee:	3001      	adds	r0, #1
 80090f0:	d1bf      	bne.n	8009072 <_puts_r+0x42>
 80090f2:	e7df      	b.n	80090b4 <_puts_r+0x84>
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	250a      	movs	r5, #10
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	6022      	str	r2, [r4, #0]
 80090fc:	701d      	strb	r5, [r3, #0]
 80090fe:	e7db      	b.n	80090b8 <_puts_r+0x88>
 8009100:	08009a24 	.word	0x08009a24
 8009104:	08009a44 	.word	0x08009a44
 8009108:	08009a04 	.word	0x08009a04

0800910c <puts>:
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <puts+0xc>)
 800910e:	4601      	mov	r1, r0
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f7ff bf8d 	b.w	8009030 <_puts_r>
 8009116:	bf00      	nop
 8009118:	20000010 	.word	0x20000010

0800911c <__swbuf_r>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	460e      	mov	r6, r1
 8009120:	4614      	mov	r4, r2
 8009122:	4605      	mov	r5, r0
 8009124:	b118      	cbz	r0, 800912e <__swbuf_r+0x12>
 8009126:	6983      	ldr	r3, [r0, #24]
 8009128:	b90b      	cbnz	r3, 800912e <__swbuf_r+0x12>
 800912a:	f000 f9d1 	bl	80094d0 <__sinit>
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <__swbuf_r+0x98>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d12b      	bne.n	800918c <__swbuf_r+0x70>
 8009134:	686c      	ldr	r4, [r5, #4]
 8009136:	69a3      	ldr	r3, [r4, #24]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	071a      	lsls	r2, r3, #28
 800913e:	d52f      	bpl.n	80091a0 <__swbuf_r+0x84>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	b36b      	cbz	r3, 80091a0 <__swbuf_r+0x84>
 8009144:	6923      	ldr	r3, [r4, #16]
 8009146:	6820      	ldr	r0, [r4, #0]
 8009148:	1ac0      	subs	r0, r0, r3
 800914a:	6963      	ldr	r3, [r4, #20]
 800914c:	b2f6      	uxtb	r6, r6
 800914e:	4283      	cmp	r3, r0
 8009150:	4637      	mov	r7, r6
 8009152:	dc04      	bgt.n	800915e <__swbuf_r+0x42>
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f926 	bl	80093a8 <_fflush_r>
 800915c:	bb30      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	3b01      	subs	r3, #1
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	701e      	strb	r6, [r3, #0]
 800916c:	6963      	ldr	r3, [r4, #20]
 800916e:	3001      	adds	r0, #1
 8009170:	4283      	cmp	r3, r0
 8009172:	d004      	beq.n	800917e <__swbuf_r+0x62>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	07db      	lsls	r3, r3, #31
 8009178:	d506      	bpl.n	8009188 <__swbuf_r+0x6c>
 800917a:	2e0a      	cmp	r6, #10
 800917c:	d104      	bne.n	8009188 <__swbuf_r+0x6c>
 800917e:	4621      	mov	r1, r4
 8009180:	4628      	mov	r0, r5
 8009182:	f000 f911 	bl	80093a8 <_fflush_r>
 8009186:	b988      	cbnz	r0, 80091ac <__swbuf_r+0x90>
 8009188:	4638      	mov	r0, r7
 800918a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800918c:	4b0a      	ldr	r3, [pc, #40]	; (80091b8 <__swbuf_r+0x9c>)
 800918e:	429c      	cmp	r4, r3
 8009190:	d101      	bne.n	8009196 <__swbuf_r+0x7a>
 8009192:	68ac      	ldr	r4, [r5, #8]
 8009194:	e7cf      	b.n	8009136 <__swbuf_r+0x1a>
 8009196:	4b09      	ldr	r3, [pc, #36]	; (80091bc <__swbuf_r+0xa0>)
 8009198:	429c      	cmp	r4, r3
 800919a:	bf08      	it	eq
 800919c:	68ec      	ldreq	r4, [r5, #12]
 800919e:	e7ca      	b.n	8009136 <__swbuf_r+0x1a>
 80091a0:	4621      	mov	r1, r4
 80091a2:	4628      	mov	r0, r5
 80091a4:	f000 f80c 	bl	80091c0 <__swsetup_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0cb      	beq.n	8009144 <__swbuf_r+0x28>
 80091ac:	f04f 37ff 	mov.w	r7, #4294967295
 80091b0:	e7ea      	b.n	8009188 <__swbuf_r+0x6c>
 80091b2:	bf00      	nop
 80091b4:	08009a24 	.word	0x08009a24
 80091b8:	08009a44 	.word	0x08009a44
 80091bc:	08009a04 	.word	0x08009a04

080091c0 <__swsetup_r>:
 80091c0:	4b32      	ldr	r3, [pc, #200]	; (800928c <__swsetup_r+0xcc>)
 80091c2:	b570      	push	{r4, r5, r6, lr}
 80091c4:	681d      	ldr	r5, [r3, #0]
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	b125      	cbz	r5, 80091d6 <__swsetup_r+0x16>
 80091cc:	69ab      	ldr	r3, [r5, #24]
 80091ce:	b913      	cbnz	r3, 80091d6 <__swsetup_r+0x16>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 f97d 	bl	80094d0 <__sinit>
 80091d6:	4b2e      	ldr	r3, [pc, #184]	; (8009290 <__swsetup_r+0xd0>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d10f      	bne.n	80091fc <__swsetup_r+0x3c>
 80091dc:	686c      	ldr	r4, [r5, #4]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d42c      	bmi.n	8009242 <__swsetup_r+0x82>
 80091e8:	06dd      	lsls	r5, r3, #27
 80091ea:	d411      	bmi.n	8009210 <__swsetup_r+0x50>
 80091ec:	2309      	movs	r3, #9
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	e03e      	b.n	800927a <__swsetup_r+0xba>
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <__swsetup_r+0xd4>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	d101      	bne.n	8009206 <__swsetup_r+0x46>
 8009202:	68ac      	ldr	r4, [r5, #8]
 8009204:	e7eb      	b.n	80091de <__swsetup_r+0x1e>
 8009206:	4b24      	ldr	r3, [pc, #144]	; (8009298 <__swsetup_r+0xd8>)
 8009208:	429c      	cmp	r4, r3
 800920a:	bf08      	it	eq
 800920c:	68ec      	ldreq	r4, [r5, #12]
 800920e:	e7e6      	b.n	80091de <__swsetup_r+0x1e>
 8009210:	0758      	lsls	r0, r3, #29
 8009212:	d512      	bpl.n	800923a <__swsetup_r+0x7a>
 8009214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009216:	b141      	cbz	r1, 800922a <__swsetup_r+0x6a>
 8009218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800921c:	4299      	cmp	r1, r3
 800921e:	d002      	beq.n	8009226 <__swsetup_r+0x66>
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fa59 	bl	80096d8 <_free_r>
 8009226:	2300      	movs	r3, #0
 8009228:	6363      	str	r3, [r4, #52]	; 0x34
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	2300      	movs	r3, #0
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	b94b      	cbnz	r3, 800925a <__swsetup_r+0x9a>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009250:	d003      	beq.n	800925a <__swsetup_r+0x9a>
 8009252:	4621      	mov	r1, r4
 8009254:	4630      	mov	r0, r6
 8009256:	f000 f9ff 	bl	8009658 <__smakebuf_r>
 800925a:	89a0      	ldrh	r0, [r4, #12]
 800925c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009260:	f010 0301 	ands.w	r3, r0, #1
 8009264:	d00a      	beq.n	800927c <__swsetup_r+0xbc>
 8009266:	2300      	movs	r3, #0
 8009268:	60a3      	str	r3, [r4, #8]
 800926a:	6963      	ldr	r3, [r4, #20]
 800926c:	425b      	negs	r3, r3
 800926e:	61a3      	str	r3, [r4, #24]
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	b943      	cbnz	r3, 8009286 <__swsetup_r+0xc6>
 8009274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009278:	d1ba      	bne.n	80091f0 <__swsetup_r+0x30>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0781      	lsls	r1, r0, #30
 800927e:	bf58      	it	pl
 8009280:	6963      	ldrpl	r3, [r4, #20]
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	e7f4      	b.n	8009270 <__swsetup_r+0xb0>
 8009286:	2000      	movs	r0, #0
 8009288:	e7f7      	b.n	800927a <__swsetup_r+0xba>
 800928a:	bf00      	nop
 800928c:	20000010 	.word	0x20000010
 8009290:	08009a24 	.word	0x08009a24
 8009294:	08009a44 	.word	0x08009a44
 8009298:	08009a04 	.word	0x08009a04

0800929c <__sflush_r>:
 800929c:	898a      	ldrh	r2, [r1, #12]
 800929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a2:	4605      	mov	r5, r0
 80092a4:	0710      	lsls	r0, r2, #28
 80092a6:	460c      	mov	r4, r1
 80092a8:	d458      	bmi.n	800935c <__sflush_r+0xc0>
 80092aa:	684b      	ldr	r3, [r1, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dc05      	bgt.n	80092bc <__sflush_r+0x20>
 80092b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dc02      	bgt.n	80092bc <__sflush_r+0x20>
 80092b6:	2000      	movs	r0, #0
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d0f9      	beq.n	80092b6 <__sflush_r+0x1a>
 80092c2:	2300      	movs	r3, #0
 80092c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092c8:	682f      	ldr	r7, [r5, #0]
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	d032      	beq.n	8009334 <__sflush_r+0x98>
 80092ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	075a      	lsls	r2, r3, #29
 80092d4:	d505      	bpl.n	80092e2 <__sflush_r+0x46>
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	1ac0      	subs	r0, r0, r3
 80092da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092dc:	b10b      	cbz	r3, 80092e2 <__sflush_r+0x46>
 80092de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e0:	1ac0      	subs	r0, r0, r3
 80092e2:	2300      	movs	r3, #0
 80092e4:	4602      	mov	r2, r0
 80092e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092e8:	6a21      	ldr	r1, [r4, #32]
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b0      	blx	r6
 80092ee:	1c43      	adds	r3, r0, #1
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	d106      	bne.n	8009302 <__sflush_r+0x66>
 80092f4:	6829      	ldr	r1, [r5, #0]
 80092f6:	291d      	cmp	r1, #29
 80092f8:	d82c      	bhi.n	8009354 <__sflush_r+0xb8>
 80092fa:	4a2a      	ldr	r2, [pc, #168]	; (80093a4 <__sflush_r+0x108>)
 80092fc:	40ca      	lsrs	r2, r1
 80092fe:	07d6      	lsls	r6, r2, #31
 8009300:	d528      	bpl.n	8009354 <__sflush_r+0xb8>
 8009302:	2200      	movs	r2, #0
 8009304:	6062      	str	r2, [r4, #4]
 8009306:	04d9      	lsls	r1, r3, #19
 8009308:	6922      	ldr	r2, [r4, #16]
 800930a:	6022      	str	r2, [r4, #0]
 800930c:	d504      	bpl.n	8009318 <__sflush_r+0x7c>
 800930e:	1c42      	adds	r2, r0, #1
 8009310:	d101      	bne.n	8009316 <__sflush_r+0x7a>
 8009312:	682b      	ldr	r3, [r5, #0]
 8009314:	b903      	cbnz	r3, 8009318 <__sflush_r+0x7c>
 8009316:	6560      	str	r0, [r4, #84]	; 0x54
 8009318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800931a:	602f      	str	r7, [r5, #0]
 800931c:	2900      	cmp	r1, #0
 800931e:	d0ca      	beq.n	80092b6 <__sflush_r+0x1a>
 8009320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009324:	4299      	cmp	r1, r3
 8009326:	d002      	beq.n	800932e <__sflush_r+0x92>
 8009328:	4628      	mov	r0, r5
 800932a:	f000 f9d5 	bl	80096d8 <_free_r>
 800932e:	2000      	movs	r0, #0
 8009330:	6360      	str	r0, [r4, #52]	; 0x34
 8009332:	e7c1      	b.n	80092b8 <__sflush_r+0x1c>
 8009334:	6a21      	ldr	r1, [r4, #32]
 8009336:	2301      	movs	r3, #1
 8009338:	4628      	mov	r0, r5
 800933a:	47b0      	blx	r6
 800933c:	1c41      	adds	r1, r0, #1
 800933e:	d1c7      	bne.n	80092d0 <__sflush_r+0x34>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0c4      	beq.n	80092d0 <__sflush_r+0x34>
 8009346:	2b1d      	cmp	r3, #29
 8009348:	d001      	beq.n	800934e <__sflush_r+0xb2>
 800934a:	2b16      	cmp	r3, #22
 800934c:	d101      	bne.n	8009352 <__sflush_r+0xb6>
 800934e:	602f      	str	r7, [r5, #0]
 8009350:	e7b1      	b.n	80092b6 <__sflush_r+0x1a>
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7ad      	b.n	80092b8 <__sflush_r+0x1c>
 800935c:	690f      	ldr	r7, [r1, #16]
 800935e:	2f00      	cmp	r7, #0
 8009360:	d0a9      	beq.n	80092b6 <__sflush_r+0x1a>
 8009362:	0793      	lsls	r3, r2, #30
 8009364:	680e      	ldr	r6, [r1, #0]
 8009366:	bf08      	it	eq
 8009368:	694b      	ldreq	r3, [r1, #20]
 800936a:	600f      	str	r7, [r1, #0]
 800936c:	bf18      	it	ne
 800936e:	2300      	movne	r3, #0
 8009370:	eba6 0807 	sub.w	r8, r6, r7
 8009374:	608b      	str	r3, [r1, #8]
 8009376:	f1b8 0f00 	cmp.w	r8, #0
 800937a:	dd9c      	ble.n	80092b6 <__sflush_r+0x1a>
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009380:	4643      	mov	r3, r8
 8009382:	463a      	mov	r2, r7
 8009384:	4628      	mov	r0, r5
 8009386:	47b0      	blx	r6
 8009388:	2800      	cmp	r0, #0
 800938a:	dc06      	bgt.n	800939a <__sflush_r+0xfe>
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009392:	81a3      	strh	r3, [r4, #12]
 8009394:	f04f 30ff 	mov.w	r0, #4294967295
 8009398:	e78e      	b.n	80092b8 <__sflush_r+0x1c>
 800939a:	4407      	add	r7, r0
 800939c:	eba8 0800 	sub.w	r8, r8, r0
 80093a0:	e7e9      	b.n	8009376 <__sflush_r+0xda>
 80093a2:	bf00      	nop
 80093a4:	20400001 	.word	0x20400001

080093a8 <_fflush_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	690b      	ldr	r3, [r1, #16]
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b913      	cbnz	r3, 80093b8 <_fflush_r+0x10>
 80093b2:	2500      	movs	r5, #0
 80093b4:	4628      	mov	r0, r5
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	b118      	cbz	r0, 80093c2 <_fflush_r+0x1a>
 80093ba:	6983      	ldr	r3, [r0, #24]
 80093bc:	b90b      	cbnz	r3, 80093c2 <_fflush_r+0x1a>
 80093be:	f000 f887 	bl	80094d0 <__sinit>
 80093c2:	4b14      	ldr	r3, [pc, #80]	; (8009414 <_fflush_r+0x6c>)
 80093c4:	429c      	cmp	r4, r3
 80093c6:	d11b      	bne.n	8009400 <_fflush_r+0x58>
 80093c8:	686c      	ldr	r4, [r5, #4]
 80093ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0ef      	beq.n	80093b2 <_fflush_r+0xa>
 80093d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093d4:	07d0      	lsls	r0, r2, #31
 80093d6:	d404      	bmi.n	80093e2 <_fflush_r+0x3a>
 80093d8:	0599      	lsls	r1, r3, #22
 80093da:	d402      	bmi.n	80093e2 <_fflush_r+0x3a>
 80093dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093de:	f000 f915 	bl	800960c <__retarget_lock_acquire_recursive>
 80093e2:	4628      	mov	r0, r5
 80093e4:	4621      	mov	r1, r4
 80093e6:	f7ff ff59 	bl	800929c <__sflush_r>
 80093ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093ec:	07da      	lsls	r2, r3, #31
 80093ee:	4605      	mov	r5, r0
 80093f0:	d4e0      	bmi.n	80093b4 <_fflush_r+0xc>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	059b      	lsls	r3, r3, #22
 80093f6:	d4dd      	bmi.n	80093b4 <_fflush_r+0xc>
 80093f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093fa:	f000 f908 	bl	800960e <__retarget_lock_release_recursive>
 80093fe:	e7d9      	b.n	80093b4 <_fflush_r+0xc>
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <_fflush_r+0x70>)
 8009402:	429c      	cmp	r4, r3
 8009404:	d101      	bne.n	800940a <_fflush_r+0x62>
 8009406:	68ac      	ldr	r4, [r5, #8]
 8009408:	e7df      	b.n	80093ca <_fflush_r+0x22>
 800940a:	4b04      	ldr	r3, [pc, #16]	; (800941c <_fflush_r+0x74>)
 800940c:	429c      	cmp	r4, r3
 800940e:	bf08      	it	eq
 8009410:	68ec      	ldreq	r4, [r5, #12]
 8009412:	e7da      	b.n	80093ca <_fflush_r+0x22>
 8009414:	08009a24 	.word	0x08009a24
 8009418:	08009a44 	.word	0x08009a44
 800941c:	08009a04 	.word	0x08009a04

08009420 <std>:
 8009420:	2300      	movs	r3, #0
 8009422:	b510      	push	{r4, lr}
 8009424:	4604      	mov	r4, r0
 8009426:	e9c0 3300 	strd	r3, r3, [r0]
 800942a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800942e:	6083      	str	r3, [r0, #8]
 8009430:	8181      	strh	r1, [r0, #12]
 8009432:	6643      	str	r3, [r0, #100]	; 0x64
 8009434:	81c2      	strh	r2, [r0, #14]
 8009436:	6183      	str	r3, [r0, #24]
 8009438:	4619      	mov	r1, r3
 800943a:	2208      	movs	r2, #8
 800943c:	305c      	adds	r0, #92	; 0x5c
 800943e:	f7ff fdef 	bl	8009020 <memset>
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x38>)
 8009444:	6263      	str	r3, [r4, #36]	; 0x24
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x3c>)
 8009448:	62a3      	str	r3, [r4, #40]	; 0x28
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x40>)
 800944c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x44>)
 8009450:	6224      	str	r4, [r4, #32]
 8009452:	6323      	str	r3, [r4, #48]	; 0x30
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	0800984d 	.word	0x0800984d
 800945c:	0800986f 	.word	0x0800986f
 8009460:	080098a7 	.word	0x080098a7
 8009464:	080098cb 	.word	0x080098cb

08009468 <_cleanup_r>:
 8009468:	4901      	ldr	r1, [pc, #4]	; (8009470 <_cleanup_r+0x8>)
 800946a:	f000 b8af 	b.w	80095cc <_fwalk_reent>
 800946e:	bf00      	nop
 8009470:	080093a9 	.word	0x080093a9

08009474 <__sfmoreglue>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	1e4a      	subs	r2, r1, #1
 8009478:	2568      	movs	r5, #104	; 0x68
 800947a:	4355      	muls	r5, r2
 800947c:	460e      	mov	r6, r1
 800947e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009482:	f000 f979 	bl	8009778 <_malloc_r>
 8009486:	4604      	mov	r4, r0
 8009488:	b140      	cbz	r0, 800949c <__sfmoreglue+0x28>
 800948a:	2100      	movs	r1, #0
 800948c:	e9c0 1600 	strd	r1, r6, [r0]
 8009490:	300c      	adds	r0, #12
 8009492:	60a0      	str	r0, [r4, #8]
 8009494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009498:	f7ff fdc2 	bl	8009020 <memset>
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}

080094a0 <__sfp_lock_acquire>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sfp_lock_acquire+0x8>)
 80094a2:	f000 b8b3 	b.w	800960c <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	200003c4 	.word	0x200003c4

080094ac <__sfp_lock_release>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sfp_lock_release+0x8>)
 80094ae:	f000 b8ae 	b.w	800960e <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	200003c4 	.word	0x200003c4

080094b8 <__sinit_lock_acquire>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__sinit_lock_acquire+0x8>)
 80094ba:	f000 b8a7 	b.w	800960c <__retarget_lock_acquire_recursive>
 80094be:	bf00      	nop
 80094c0:	200003bf 	.word	0x200003bf

080094c4 <__sinit_lock_release>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sinit_lock_release+0x8>)
 80094c6:	f000 b8a2 	b.w	800960e <__retarget_lock_release_recursive>
 80094ca:	bf00      	nop
 80094cc:	200003bf 	.word	0x200003bf

080094d0 <__sinit>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4604      	mov	r4, r0
 80094d4:	f7ff fff0 	bl	80094b8 <__sinit_lock_acquire>
 80094d8:	69a3      	ldr	r3, [r4, #24]
 80094da:	b11b      	cbz	r3, 80094e4 <__sinit+0x14>
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f7ff bff0 	b.w	80094c4 <__sinit_lock_release>
 80094e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094e8:	6523      	str	r3, [r4, #80]	; 0x50
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <__sinit+0x68>)
 80094ec:	4a13      	ldr	r2, [pc, #76]	; (800953c <__sinit+0x6c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	bf04      	itt	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	61a3      	streq	r3, [r4, #24]
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f820 	bl	8009540 <__sfp>
 8009500:	6060      	str	r0, [r4, #4]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f81c 	bl	8009540 <__sfp>
 8009508:	60a0      	str	r0, [r4, #8]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f818 	bl	8009540 <__sfp>
 8009510:	2200      	movs	r2, #0
 8009512:	60e0      	str	r0, [r4, #12]
 8009514:	2104      	movs	r1, #4
 8009516:	6860      	ldr	r0, [r4, #4]
 8009518:	f7ff ff82 	bl	8009420 <std>
 800951c:	68a0      	ldr	r0, [r4, #8]
 800951e:	2201      	movs	r2, #1
 8009520:	2109      	movs	r1, #9
 8009522:	f7ff ff7d 	bl	8009420 <std>
 8009526:	68e0      	ldr	r0, [r4, #12]
 8009528:	2202      	movs	r2, #2
 800952a:	2112      	movs	r1, #18
 800952c:	f7ff ff78 	bl	8009420 <std>
 8009530:	2301      	movs	r3, #1
 8009532:	61a3      	str	r3, [r4, #24]
 8009534:	e7d2      	b.n	80094dc <__sinit+0xc>
 8009536:	bf00      	nop
 8009538:	08009a00 	.word	0x08009a00
 800953c:	08009469 	.word	0x08009469

08009540 <__sfp>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	4607      	mov	r7, r0
 8009544:	f7ff ffac 	bl	80094a0 <__sfp_lock_acquire>
 8009548:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <__sfp+0x84>)
 800954a:	681e      	ldr	r6, [r3, #0]
 800954c:	69b3      	ldr	r3, [r6, #24]
 800954e:	b913      	cbnz	r3, 8009556 <__sfp+0x16>
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff ffbd 	bl	80094d0 <__sinit>
 8009556:	3648      	adds	r6, #72	; 0x48
 8009558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800955c:	3b01      	subs	r3, #1
 800955e:	d503      	bpl.n	8009568 <__sfp+0x28>
 8009560:	6833      	ldr	r3, [r6, #0]
 8009562:	b30b      	cbz	r3, 80095a8 <__sfp+0x68>
 8009564:	6836      	ldr	r6, [r6, #0]
 8009566:	e7f7      	b.n	8009558 <__sfp+0x18>
 8009568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800956c:	b9d5      	cbnz	r5, 80095a4 <__sfp+0x64>
 800956e:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <__sfp+0x88>)
 8009570:	60e3      	str	r3, [r4, #12]
 8009572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009576:	6665      	str	r5, [r4, #100]	; 0x64
 8009578:	f000 f847 	bl	800960a <__retarget_lock_init_recursive>
 800957c:	f7ff ff96 	bl	80094ac <__sfp_lock_release>
 8009580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009588:	6025      	str	r5, [r4, #0]
 800958a:	61a5      	str	r5, [r4, #24]
 800958c:	2208      	movs	r2, #8
 800958e:	4629      	mov	r1, r5
 8009590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009594:	f7ff fd44 	bl	8009020 <memset>
 8009598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800959c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095a0:	4620      	mov	r0, r4
 80095a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a4:	3468      	adds	r4, #104	; 0x68
 80095a6:	e7d9      	b.n	800955c <__sfp+0x1c>
 80095a8:	2104      	movs	r1, #4
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff ff62 	bl	8009474 <__sfmoreglue>
 80095b0:	4604      	mov	r4, r0
 80095b2:	6030      	str	r0, [r6, #0]
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1d5      	bne.n	8009564 <__sfp+0x24>
 80095b8:	f7ff ff78 	bl	80094ac <__sfp_lock_release>
 80095bc:	230c      	movs	r3, #12
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	e7ee      	b.n	80095a0 <__sfp+0x60>
 80095c2:	bf00      	nop
 80095c4:	08009a00 	.word	0x08009a00
 80095c8:	ffff0001 	.word	0xffff0001

080095cc <_fwalk_reent>:
 80095cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d0:	4606      	mov	r6, r0
 80095d2:	4688      	mov	r8, r1
 80095d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095d8:	2700      	movs	r7, #0
 80095da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095de:	f1b9 0901 	subs.w	r9, r9, #1
 80095e2:	d505      	bpl.n	80095f0 <_fwalk_reent+0x24>
 80095e4:	6824      	ldr	r4, [r4, #0]
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	d1f7      	bne.n	80095da <_fwalk_reent+0xe>
 80095ea:	4638      	mov	r0, r7
 80095ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f0:	89ab      	ldrh	r3, [r5, #12]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d907      	bls.n	8009606 <_fwalk_reent+0x3a>
 80095f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095fa:	3301      	adds	r3, #1
 80095fc:	d003      	beq.n	8009606 <_fwalk_reent+0x3a>
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	47c0      	blx	r8
 8009604:	4307      	orrs	r7, r0
 8009606:	3568      	adds	r5, #104	; 0x68
 8009608:	e7e9      	b.n	80095de <_fwalk_reent+0x12>

0800960a <__retarget_lock_init_recursive>:
 800960a:	4770      	bx	lr

0800960c <__retarget_lock_acquire_recursive>:
 800960c:	4770      	bx	lr

0800960e <__retarget_lock_release_recursive>:
 800960e:	4770      	bx	lr

08009610 <__swhatbuf_r>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	460e      	mov	r6, r1
 8009614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009618:	2900      	cmp	r1, #0
 800961a:	b096      	sub	sp, #88	; 0x58
 800961c:	4614      	mov	r4, r2
 800961e:	461d      	mov	r5, r3
 8009620:	da07      	bge.n	8009632 <__swhatbuf_r+0x22>
 8009622:	2300      	movs	r3, #0
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	89b3      	ldrh	r3, [r6, #12]
 8009628:	061a      	lsls	r2, r3, #24
 800962a:	d410      	bmi.n	800964e <__swhatbuf_r+0x3e>
 800962c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009630:	e00e      	b.n	8009650 <__swhatbuf_r+0x40>
 8009632:	466a      	mov	r2, sp
 8009634:	f000 f970 	bl	8009918 <_fstat_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	dbf2      	blt.n	8009622 <__swhatbuf_r+0x12>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009642:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009646:	425a      	negs	r2, r3
 8009648:	415a      	adcs	r2, r3
 800964a:	602a      	str	r2, [r5, #0]
 800964c:	e7ee      	b.n	800962c <__swhatbuf_r+0x1c>
 800964e:	2340      	movs	r3, #64	; 0x40
 8009650:	2000      	movs	r0, #0
 8009652:	6023      	str	r3, [r4, #0]
 8009654:	b016      	add	sp, #88	; 0x58
 8009656:	bd70      	pop	{r4, r5, r6, pc}

08009658 <__smakebuf_r>:
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800965c:	079d      	lsls	r5, r3, #30
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	d507      	bpl.n	8009674 <__smakebuf_r+0x1c>
 8009664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	6123      	str	r3, [r4, #16]
 800966c:	2301      	movs	r3, #1
 800966e:	6163      	str	r3, [r4, #20]
 8009670:	b002      	add	sp, #8
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	ab01      	add	r3, sp, #4
 8009676:	466a      	mov	r2, sp
 8009678:	f7ff ffca 	bl	8009610 <__swhatbuf_r>
 800967c:	9900      	ldr	r1, [sp, #0]
 800967e:	4605      	mov	r5, r0
 8009680:	4630      	mov	r0, r6
 8009682:	f000 f879 	bl	8009778 <_malloc_r>
 8009686:	b948      	cbnz	r0, 800969c <__smakebuf_r+0x44>
 8009688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968c:	059a      	lsls	r2, r3, #22
 800968e:	d4ef      	bmi.n	8009670 <__smakebuf_r+0x18>
 8009690:	f023 0303 	bic.w	r3, r3, #3
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	e7e3      	b.n	8009664 <__smakebuf_r+0xc>
 800969c:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <__smakebuf_r+0x7c>)
 800969e:	62b3      	str	r3, [r6, #40]	; 0x28
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	6020      	str	r0, [r4, #0]
 80096a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a8:	81a3      	strh	r3, [r4, #12]
 80096aa:	9b00      	ldr	r3, [sp, #0]
 80096ac:	6163      	str	r3, [r4, #20]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	6120      	str	r0, [r4, #16]
 80096b2:	b15b      	cbz	r3, 80096cc <__smakebuf_r+0x74>
 80096b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 f93f 	bl	800993c <_isatty_r>
 80096be:	b128      	cbz	r0, 80096cc <__smakebuf_r+0x74>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	89a0      	ldrh	r0, [r4, #12]
 80096ce:	4305      	orrs	r5, r0
 80096d0:	81a5      	strh	r5, [r4, #12]
 80096d2:	e7cd      	b.n	8009670 <__smakebuf_r+0x18>
 80096d4:	08009469 	.word	0x08009469

080096d8 <_free_r>:
 80096d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096da:	2900      	cmp	r1, #0
 80096dc:	d048      	beq.n	8009770 <_free_r+0x98>
 80096de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e2:	9001      	str	r0, [sp, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ea:	bfb8      	it	lt
 80096ec:	18e4      	addlt	r4, r4, r3
 80096ee:	f000 f947 	bl	8009980 <__malloc_lock>
 80096f2:	4a20      	ldr	r2, [pc, #128]	; (8009774 <_free_r+0x9c>)
 80096f4:	9801      	ldr	r0, [sp, #4]
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	4615      	mov	r5, r2
 80096fa:	b933      	cbnz	r3, 800970a <_free_r+0x32>
 80096fc:	6063      	str	r3, [r4, #4]
 80096fe:	6014      	str	r4, [r2, #0]
 8009700:	b003      	add	sp, #12
 8009702:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009706:	f000 b941 	b.w	800998c <__malloc_unlock>
 800970a:	42a3      	cmp	r3, r4
 800970c:	d90b      	bls.n	8009726 <_free_r+0x4e>
 800970e:	6821      	ldr	r1, [r4, #0]
 8009710:	1862      	adds	r2, r4, r1
 8009712:	4293      	cmp	r3, r2
 8009714:	bf04      	itt	eq
 8009716:	681a      	ldreq	r2, [r3, #0]
 8009718:	685b      	ldreq	r3, [r3, #4]
 800971a:	6063      	str	r3, [r4, #4]
 800971c:	bf04      	itt	eq
 800971e:	1852      	addeq	r2, r2, r1
 8009720:	6022      	streq	r2, [r4, #0]
 8009722:	602c      	str	r4, [r5, #0]
 8009724:	e7ec      	b.n	8009700 <_free_r+0x28>
 8009726:	461a      	mov	r2, r3
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	b10b      	cbz	r3, 8009730 <_free_r+0x58>
 800972c:	42a3      	cmp	r3, r4
 800972e:	d9fa      	bls.n	8009726 <_free_r+0x4e>
 8009730:	6811      	ldr	r1, [r2, #0]
 8009732:	1855      	adds	r5, r2, r1
 8009734:	42a5      	cmp	r5, r4
 8009736:	d10b      	bne.n	8009750 <_free_r+0x78>
 8009738:	6824      	ldr	r4, [r4, #0]
 800973a:	4421      	add	r1, r4
 800973c:	1854      	adds	r4, r2, r1
 800973e:	42a3      	cmp	r3, r4
 8009740:	6011      	str	r1, [r2, #0]
 8009742:	d1dd      	bne.n	8009700 <_free_r+0x28>
 8009744:	681c      	ldr	r4, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	6053      	str	r3, [r2, #4]
 800974a:	4421      	add	r1, r4
 800974c:	6011      	str	r1, [r2, #0]
 800974e:	e7d7      	b.n	8009700 <_free_r+0x28>
 8009750:	d902      	bls.n	8009758 <_free_r+0x80>
 8009752:	230c      	movs	r3, #12
 8009754:	6003      	str	r3, [r0, #0]
 8009756:	e7d3      	b.n	8009700 <_free_r+0x28>
 8009758:	6825      	ldr	r5, [r4, #0]
 800975a:	1961      	adds	r1, r4, r5
 800975c:	428b      	cmp	r3, r1
 800975e:	bf04      	itt	eq
 8009760:	6819      	ldreq	r1, [r3, #0]
 8009762:	685b      	ldreq	r3, [r3, #4]
 8009764:	6063      	str	r3, [r4, #4]
 8009766:	bf04      	itt	eq
 8009768:	1949      	addeq	r1, r1, r5
 800976a:	6021      	streq	r1, [r4, #0]
 800976c:	6054      	str	r4, [r2, #4]
 800976e:	e7c7      	b.n	8009700 <_free_r+0x28>
 8009770:	b003      	add	sp, #12
 8009772:	bd30      	pop	{r4, r5, pc}
 8009774:	200000fc 	.word	0x200000fc

08009778 <_malloc_r>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	1ccd      	adds	r5, r1, #3
 800977c:	f025 0503 	bic.w	r5, r5, #3
 8009780:	3508      	adds	r5, #8
 8009782:	2d0c      	cmp	r5, #12
 8009784:	bf38      	it	cc
 8009786:	250c      	movcc	r5, #12
 8009788:	2d00      	cmp	r5, #0
 800978a:	4606      	mov	r6, r0
 800978c:	db01      	blt.n	8009792 <_malloc_r+0x1a>
 800978e:	42a9      	cmp	r1, r5
 8009790:	d903      	bls.n	800979a <_malloc_r+0x22>
 8009792:	230c      	movs	r3, #12
 8009794:	6033      	str	r3, [r6, #0]
 8009796:	2000      	movs	r0, #0
 8009798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800979a:	f000 f8f1 	bl	8009980 <__malloc_lock>
 800979e:	4921      	ldr	r1, [pc, #132]	; (8009824 <_malloc_r+0xac>)
 80097a0:	680a      	ldr	r2, [r1, #0]
 80097a2:	4614      	mov	r4, r2
 80097a4:	b99c      	cbnz	r4, 80097ce <_malloc_r+0x56>
 80097a6:	4f20      	ldr	r7, [pc, #128]	; (8009828 <_malloc_r+0xb0>)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	b923      	cbnz	r3, 80097b6 <_malloc_r+0x3e>
 80097ac:	4621      	mov	r1, r4
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 f83c 	bl	800982c <_sbrk_r>
 80097b4:	6038      	str	r0, [r7, #0]
 80097b6:	4629      	mov	r1, r5
 80097b8:	4630      	mov	r0, r6
 80097ba:	f000 f837 	bl	800982c <_sbrk_r>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d123      	bne.n	800980a <_malloc_r+0x92>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6033      	str	r3, [r6, #0]
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f8e0 	bl	800998c <__malloc_unlock>
 80097cc:	e7e3      	b.n	8009796 <_malloc_r+0x1e>
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	1b5b      	subs	r3, r3, r5
 80097d2:	d417      	bmi.n	8009804 <_malloc_r+0x8c>
 80097d4:	2b0b      	cmp	r3, #11
 80097d6:	d903      	bls.n	80097e0 <_malloc_r+0x68>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	441c      	add	r4, r3
 80097dc:	6025      	str	r5, [r4, #0]
 80097de:	e004      	b.n	80097ea <_malloc_r+0x72>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	42a2      	cmp	r2, r4
 80097e4:	bf0c      	ite	eq
 80097e6:	600b      	streq	r3, [r1, #0]
 80097e8:	6053      	strne	r3, [r2, #4]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 f8ce 	bl	800998c <__malloc_unlock>
 80097f0:	f104 000b 	add.w	r0, r4, #11
 80097f4:	1d23      	adds	r3, r4, #4
 80097f6:	f020 0007 	bic.w	r0, r0, #7
 80097fa:	1ac2      	subs	r2, r0, r3
 80097fc:	d0cc      	beq.n	8009798 <_malloc_r+0x20>
 80097fe:	1a1b      	subs	r3, r3, r0
 8009800:	50a3      	str	r3, [r4, r2]
 8009802:	e7c9      	b.n	8009798 <_malloc_r+0x20>
 8009804:	4622      	mov	r2, r4
 8009806:	6864      	ldr	r4, [r4, #4]
 8009808:	e7cc      	b.n	80097a4 <_malloc_r+0x2c>
 800980a:	1cc4      	adds	r4, r0, #3
 800980c:	f024 0403 	bic.w	r4, r4, #3
 8009810:	42a0      	cmp	r0, r4
 8009812:	d0e3      	beq.n	80097dc <_malloc_r+0x64>
 8009814:	1a21      	subs	r1, r4, r0
 8009816:	4630      	mov	r0, r6
 8009818:	f000 f808 	bl	800982c <_sbrk_r>
 800981c:	3001      	adds	r0, #1
 800981e:	d1dd      	bne.n	80097dc <_malloc_r+0x64>
 8009820:	e7cf      	b.n	80097c2 <_malloc_r+0x4a>
 8009822:	bf00      	nop
 8009824:	200000fc 	.word	0x200000fc
 8009828:	20000100 	.word	0x20000100

0800982c <_sbrk_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	; (8009848 <_sbrk_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7fa fab8 	bl	8003dac <_sbrk>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_sbrk_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_sbrk_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	200003c8 	.word	0x200003c8

0800984c <__sread>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009854:	f000 f8a0 	bl	8009998 <_read_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	bfab      	itete	ge
 800985c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985e:	89a3      	ldrhlt	r3, [r4, #12]
 8009860:	181b      	addge	r3, r3, r0
 8009862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009866:	bfac      	ite	ge
 8009868:	6563      	strge	r3, [r4, #84]	; 0x54
 800986a:	81a3      	strhlt	r3, [r4, #12]
 800986c:	bd10      	pop	{r4, pc}

0800986e <__swrite>:
 800986e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	461f      	mov	r7, r3
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	4616      	mov	r6, r2
 800987e:	d505      	bpl.n	800988c <__swrite+0x1e>
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	2302      	movs	r3, #2
 8009886:	2200      	movs	r2, #0
 8009888:	f000 f868 	bl	800995c <_lseek_r>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	f000 b817 	b.w	80098d4 <_write_r>

080098a6 <__sseek>:
 80098a6:	b510      	push	{r4, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ae:	f000 f855 	bl	800995c <_lseek_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	bf15      	itete	ne
 80098b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098c2:	81a3      	strheq	r3, [r4, #12]
 80098c4:	bf18      	it	ne
 80098c6:	81a3      	strhne	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__sclose>:
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 b813 	b.w	80098f8 <_close_r>
	...

080098d4 <_write_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d07      	ldr	r5, [pc, #28]	; (80098f4 <_write_r+0x20>)
 80098d8:	4604      	mov	r4, r0
 80098da:	4608      	mov	r0, r1
 80098dc:	4611      	mov	r1, r2
 80098de:	2200      	movs	r2, #0
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	f7f9 fbef 	bl	80030c6 <_write>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_write_r+0x1e>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_write_r+0x1e>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	200003c8 	.word	0x200003c8

080098f8 <_close_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4d06      	ldr	r5, [pc, #24]	; (8009914 <_close_r+0x1c>)
 80098fc:	2300      	movs	r3, #0
 80098fe:	4604      	mov	r4, r0
 8009900:	4608      	mov	r0, r1
 8009902:	602b      	str	r3, [r5, #0]
 8009904:	f7fa fa1d 	bl	8003d42 <_close>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	d102      	bne.n	8009912 <_close_r+0x1a>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	b103      	cbz	r3, 8009912 <_close_r+0x1a>
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	200003c8 	.word	0x200003c8

08009918 <_fstat_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	; (8009938 <_fstat_r+0x20>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	4611      	mov	r1, r2
 8009924:	602b      	str	r3, [r5, #0]
 8009926:	f7fa fa18 	bl	8003d5a <_fstat>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	d102      	bne.n	8009934 <_fstat_r+0x1c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	b103      	cbz	r3, 8009934 <_fstat_r+0x1c>
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	bd38      	pop	{r3, r4, r5, pc}
 8009936:	bf00      	nop
 8009938:	200003c8 	.word	0x200003c8

0800993c <_isatty_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d06      	ldr	r5, [pc, #24]	; (8009958 <_isatty_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7fa fa17 	bl	8003d7a <_isatty>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_isatty_r+0x1a>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_isatty_r+0x1a>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	200003c8 	.word	0x200003c8

0800995c <_lseek_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	; (800997c <_lseek_r+0x20>)
 8009960:	4604      	mov	r4, r0
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	2200      	movs	r2, #0
 8009968:	602a      	str	r2, [r5, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	f7fa fa10 	bl	8003d90 <_lseek>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_lseek_r+0x1e>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_lseek_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	200003c8 	.word	0x200003c8

08009980 <__malloc_lock>:
 8009980:	4801      	ldr	r0, [pc, #4]	; (8009988 <__malloc_lock+0x8>)
 8009982:	f7ff be43 	b.w	800960c <__retarget_lock_acquire_recursive>
 8009986:	bf00      	nop
 8009988:	200003c0 	.word	0x200003c0

0800998c <__malloc_unlock>:
 800998c:	4801      	ldr	r0, [pc, #4]	; (8009994 <__malloc_unlock+0x8>)
 800998e:	f7ff be3e 	b.w	800960e <__retarget_lock_release_recursive>
 8009992:	bf00      	nop
 8009994:	200003c0 	.word	0x200003c0

08009998 <_read_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	; (80099b8 <_read_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7fa f9ae 	bl	8003d08 <_read>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_read_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_read_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200003c8 	.word	0x200003c8

080099bc <_init>:
 80099bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099be:	bf00      	nop
 80099c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c2:	bc08      	pop	{r3}
 80099c4:	469e      	mov	lr, r3
 80099c6:	4770      	bx	lr

080099c8 <_fini>:
 80099c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ca:	bf00      	nop
 80099cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ce:	bc08      	pop	{r3}
 80099d0:	469e      	mov	lr, r3
 80099d2:	4770      	bx	lr
